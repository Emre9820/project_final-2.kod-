
velo1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019258  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00040b8c  080193f0  080193f0  000293f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08059f7c  08059f7c  00070404  2**0
                  CONTENTS
  4 .ARM          00000008  08059f7c  08059f7c  00069f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08059f84  08059f84  00070404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08059f84  08059f84  00069f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08059f90  08059f90  00069f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000404  20000000  08059f98  00070000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00070404  2**0
                  CONTENTS
 10 .bss          000025a0  20000408  20000408  00070408  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200029a8  200029a8  00070408  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00070404  2**0
                  CONTENTS, READONLY
 13 .debug_info   00114e9a  00000000  00000000  00070434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000c354  00000000  00000000  001852ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003eb8  00000000  00000000  00191628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003d00  00000000  00000000  001954e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003089a  00000000  00000000  001991e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003f090  00000000  00000000  001c9a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00189c01  00000000  00000000  00208b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0039270b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00013660  00000000  00000000  0039275c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000408 	.word	0x20000408
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080193d0 	.word	0x080193d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000040c 	.word	0x2000040c
 80001cc:	080193d0 	.word	0x080193d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_ldivmod>:
 8000c9c:	b97b      	cbnz	r3, 8000cbe <__aeabi_ldivmod+0x22>
 8000c9e:	b972      	cbnz	r2, 8000cbe <__aeabi_ldivmod+0x22>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bfbe      	ittt	lt
 8000ca4:	2000      	movlt	r0, #0
 8000ca6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000caa:	e006      	blt.n	8000cba <__aeabi_ldivmod+0x1e>
 8000cac:	bf08      	it	eq
 8000cae:	2800      	cmpeq	r0, #0
 8000cb0:	bf1c      	itt	ne
 8000cb2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb6:	f04f 30ff 	movne.w	r0, #4294967295
 8000cba:	f000 b9f5 	b.w	80010a8 <__aeabi_idiv0>
 8000cbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	db09      	blt.n	8000cde <__aeabi_ldivmod+0x42>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db1a      	blt.n	8000d04 <__aeabi_ldivmod+0x68>
 8000cce:	f000 f883 	bl	8000dd8 <__udivmoddi4>
 8000cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cda:	b004      	add	sp, #16
 8000cdc:	4770      	bx	lr
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db1b      	blt.n	8000d20 <__aeabi_ldivmod+0x84>
 8000ce8:	f000 f876 	bl	8000dd8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	4770      	bx	lr
 8000d04:	4252      	negs	r2, r2
 8000d06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0a:	f000 f865 	bl	8000dd8 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4240      	negs	r0, r0
 8000d1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f857 	bl	8000dd8 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4252      	negs	r2, r2
 8000d36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_uldivmod>:
 8000d3c:	b953      	cbnz	r3, 8000d54 <__aeabi_uldivmod+0x18>
 8000d3e:	b94a      	cbnz	r2, 8000d54 <__aeabi_uldivmod+0x18>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf08      	it	eq
 8000d44:	2800      	cmpeq	r0, #0
 8000d46:	bf1c      	itt	ne
 8000d48:	f04f 31ff 	movne.w	r1, #4294967295
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d50:	f000 b9aa 	b.w	80010a8 <__aeabi_idiv0>
 8000d54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5c:	f000 f83c 	bl	8000dd8 <__udivmoddi4>
 8000d60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_d2lz>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2300      	movs	r3, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	460d      	mov	r5, r1
 8000d76:	f7ff febb 	bl	8000af0 <__aeabi_dcmplt>
 8000d7a:	b928      	cbnz	r0, 8000d88 <__aeabi_d2lz+0x1c>
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	4629      	mov	r1, r5
 8000d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d84:	f000 b80a 	b.w	8000d9c <__aeabi_d2ulz>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8e:	f000 f805 	bl	8000d9c <__aeabi_d2ulz>
 8000d92:	4240      	negs	r0, r0
 8000d94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d98:	bd38      	pop	{r3, r4, r5, pc}
 8000d9a:	bf00      	nop

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fc31 	bl	800060c <__aeabi_dmul>
 8000daa:	f7ff ff07 	bl	8000bbc <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fbb2 	bl	8000518 <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fc28 	bl	800060c <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa6a 	bl	800029c <__aeabi_dsub>
 8000dc8:	f7ff fef8 	bl	8000bbc <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468e      	mov	lr, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d14d      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de6:	428a      	cmp	r2, r1
 8000de8:	4694      	mov	ip, r2
 8000dea:	d969      	bls.n	8000ec0 <__udivmoddi4+0xe8>
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	b152      	cbz	r2, 8000e08 <__udivmoddi4+0x30>
 8000df2:	fa01 f302 	lsl.w	r3, r1, r2
 8000df6:	f1c2 0120 	rsb	r1, r2, #32
 8000dfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e02:	ea41 0e03 	orr.w	lr, r1, r3
 8000e06:	4094      	lsls	r4, r2
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	0c21      	lsrs	r1, r4, #16
 8000e0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1e:	fb06 f107 	mul.w	r1, r6, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 811f 	bcs.w	8001070 <__udivmoddi4+0x298>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 811c 	bls.w	8001070 <__udivmoddi4+0x298>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x92>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 810a 	bcs.w	8001074 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8107 	bls.w	8001074 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6e:	1be4      	subs	r4, r4, r7
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa4>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d909      	bls.n	8000e9a <__udivmoddi4+0xc2>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	f000 80ef 	beq.w	800106a <__udivmoddi4+0x292>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e92:	4630      	mov	r0, r6
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	fab3 f683 	clz	r6, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d14a      	bne.n	8000f38 <__udivmoddi4+0x160>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xd4>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 80f9 	bhi.w	800109e <__udivmoddi4+0x2c6>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e0      	beq.n	8000e7c <__udivmoddi4+0xa4>
 8000eba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ebe:	e7dd      	b.n	8000e7c <__udivmoddi4+0xa4>
 8000ec0:	b902      	cbnz	r2, 8000ec4 <__udivmoddi4+0xec>
 8000ec2:	deff      	udf	#255	; 0xff
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	f040 8092 	bne.w	8000ff2 <__udivmoddi4+0x21a>
 8000ece:	eba1 010c 	sub.w	r1, r1, ip
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f fe8c 	uxth.w	lr, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	0c20      	lsrs	r0, r4, #16
 8000ede:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eea:	fb0e f003 	mul.w	r0, lr, r3
 8000eee:	4288      	cmp	r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x12c>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x12a>
 8000efc:	4288      	cmp	r0, r1
 8000efe:	f200 80cb 	bhi.w	8001098 <__udivmoddi4+0x2c0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f14:	fb0e fe00 	mul.w	lr, lr, r0
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x156>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x154>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	f200 80bb 	bhi.w	80010a2 <__udivmoddi4+0x2ca>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	eba4 040e 	sub.w	r4, r4, lr
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x9a>
 8000f38:	f1c6 0720 	rsb	r7, r6, #32
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f46:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	40f9      	lsrs	r1, r7
 8000f52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f56:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5e:	0c20      	lsrs	r0, r4, #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fb09 1118 	mls	r1, r9, r8, r1
 8000f68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f70:	4288      	cmp	r0, r1
 8000f72:	fa02 f206 	lsl.w	r2, r2, r6
 8000f76:	d90b      	bls.n	8000f90 <__udivmoddi4+0x1b8>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f80:	f080 8088 	bcs.w	8001094 <__udivmoddi4+0x2bc>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f240 8085 	bls.w	8001094 <__udivmoddi4+0x2bc>
 8000f8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f98:	fb09 1110 	mls	r1, r9, r0, r1
 8000f9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa4:	458e      	cmp	lr, r1
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x1e2>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb0:	d26c      	bcs.n	800108c <__udivmoddi4+0x2b4>
 8000fb2:	458e      	cmp	lr, r1
 8000fb4:	d96a      	bls.n	800108c <__udivmoddi4+0x2b4>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4461      	add	r1, ip
 8000fba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc2:	eba1 010e 	sub.w	r1, r1, lr
 8000fc6:	42a1      	cmp	r1, r4
 8000fc8:	46c8      	mov	r8, r9
 8000fca:	46a6      	mov	lr, r4
 8000fcc:	d356      	bcc.n	800107c <__udivmoddi4+0x2a4>
 8000fce:	d053      	beq.n	8001078 <__udivmoddi4+0x2a0>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x212>
 8000fd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fda:	fa01 f707 	lsl.w	r7, r1, r7
 8000fde:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe2:	40f1      	lsrs	r1, r6
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4091      	lsls	r1, r2
 8001002:	4301      	orrs	r1, r0
 8001004:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001008:	fa1f fe8c 	uxth.w	lr, ip
 800100c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001010:	fb07 3610 	mls	r6, r7, r0, r3
 8001014:	0c0b      	lsrs	r3, r1, #16
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101a:	fb00 f60e 	mul.w	r6, r0, lr
 800101e:	429e      	cmp	r6, r3
 8001020:	fa04 f402 	lsl.w	r4, r4, r2
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x260>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 38ff 	add.w	r8, r0, #4294967295
 800102e:	d22f      	bcs.n	8001090 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d92d      	bls.n	8001090 <__udivmoddi4+0x2b8>
 8001034:	3802      	subs	r0, #2
 8001036:	4463      	add	r3, ip
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	b289      	uxth	r1, r1
 800103c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001040:	fb07 3316 	mls	r3, r7, r6, r3
 8001044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001048:	fb06 f30e 	mul.w	r3, r6, lr
 800104c:	428b      	cmp	r3, r1
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x28a>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f106 38ff 	add.w	r8, r6, #4294967295
 8001058:	d216      	bcs.n	8001088 <__udivmoddi4+0x2b0>
 800105a:	428b      	cmp	r3, r1
 800105c:	d914      	bls.n	8001088 <__udivmoddi4+0x2b0>
 800105e:	3e02      	subs	r6, #2
 8001060:	4461      	add	r1, ip
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001068:	e738      	b.n	8000edc <__udivmoddi4+0x104>
 800106a:	462e      	mov	r6, r5
 800106c:	4628      	mov	r0, r5
 800106e:	e705      	b.n	8000e7c <__udivmoddi4+0xa4>
 8001070:	4606      	mov	r6, r0
 8001072:	e6e3      	b.n	8000e3c <__udivmoddi4+0x64>
 8001074:	4618      	mov	r0, r3
 8001076:	e6f8      	b.n	8000e6a <__udivmoddi4+0x92>
 8001078:	454b      	cmp	r3, r9
 800107a:	d2a9      	bcs.n	8000fd0 <__udivmoddi4+0x1f8>
 800107c:	ebb9 0802 	subs.w	r8, r9, r2
 8001080:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001084:	3801      	subs	r0, #1
 8001086:	e7a3      	b.n	8000fd0 <__udivmoddi4+0x1f8>
 8001088:	4646      	mov	r6, r8
 800108a:	e7ea      	b.n	8001062 <__udivmoddi4+0x28a>
 800108c:	4620      	mov	r0, r4
 800108e:	e794      	b.n	8000fba <__udivmoddi4+0x1e2>
 8001090:	4640      	mov	r0, r8
 8001092:	e7d1      	b.n	8001038 <__udivmoddi4+0x260>
 8001094:	46d0      	mov	r8, sl
 8001096:	e77b      	b.n	8000f90 <__udivmoddi4+0x1b8>
 8001098:	3b02      	subs	r3, #2
 800109a:	4461      	add	r1, ip
 800109c:	e732      	b.n	8000f04 <__udivmoddi4+0x12c>
 800109e:	4630      	mov	r0, r6
 80010a0:	e709      	b.n	8000eb6 <__udivmoddi4+0xde>
 80010a2:	4464      	add	r4, ip
 80010a4:	3802      	subs	r0, #2
 80010a6:	e742      	b.n	8000f2e <__udivmoddi4+0x156>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	2203      	movs	r2, #3
 8001126:	4798      	blx	r3
    }
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2b00      	cmp	r3, #0
 8001140:	bf0c      	ite	eq
 8001142:	2301      	moveq	r3, #1
 8001144:	2300      	movne	r3, #0
 8001146:	b2db      	uxtb	r3, r3
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
 8001160:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d006      	beq.n	8001176 <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2200      	movs	r2, #0
 8001172:	731a      	strb	r2, [r3, #12]
 8001174:	e00e      	b.n	8001194 <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	fb02 f303 	mul.w	r3, r2, r3
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	2101      	movs	r1, #1
 8001182:	4618      	mov	r0, r3
 8001184:	f00d f900 	bl	800e388 <_Z9ei_callocjj>
 8001188:	4602      	mov	r2, r0
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2201      	movs	r2, #1
 8001192:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d008      	beq.n	80011cc <_ZN2ei9ei_matrixD1Ev+0x22>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7b1b      	ldrb	r3, [r3, #12]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d004      	beq.n	80011cc <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00d f8ec 	bl	800e3a4 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <_ZN2ei12ei_matrix_i8C1EmmPa>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix_i8(
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <_ZN2ei12ei_matrix_i8C1EmmPa+0x22>
            buffer = a_buffer;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2200      	movs	r2, #0
 80011f4:	731a      	strb	r2, [r3, #12]
 80011f6:	e00d      	b.n	8001214 <_ZN2ei12ei_matrix_i8C1EmmPa+0x3e>
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	fb02 f303 	mul.w	r3, r2, r3
 8001200:	2101      	movs	r1, #1
 8001202:	4618      	mov	r0, r3
 8001204:	f00d f8c0 	bl	800e388 <_Z9ei_callocjj>
 8001208:	4602      	mov	r2, r0
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2201      	movs	r2, #1
 8001212:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <_ZN2ei12ei_matrix_i8D1Ev>:

    ~ei_matrix_i8() {
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d008      	beq.n	800124c <_ZN2ei12ei_matrix_i8D1Ev+0x22>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	7b1b      	ldrb	r3, [r3, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d004      	beq.n	800124c <_ZN2ei12ei_matrix_i8D1Ev+0x22>
            ei_free(buffer);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f00d f8ac 	bl	800e3a4 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
 800125a:	e7fe      	b.n	800125a <_ZSt25__throw_bad_function_callv+0x4>

0800125c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	1e5a      	subs	r2, r3, #1
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4013      	ands	r3, r2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d005      	beq.n	8001282 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 8001278:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 800127a:	213c      	movs	r1, #60	; 0x3c
 800127c:	4817      	ldr	r0, [pc, #92]	; (80012dc <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 800127e:	f013 fb5f 	bl	8014940 <__assert_func>

	if(align && size)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d01f      	beq.n	80012c8 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d01c      	beq.n	80012c8 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3301      	adds	r3, #1
 8001292:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4413      	add	r3, r2
 800129a:	2101      	movs	r1, #1
 800129c:	4618      	mov	r0, r3
 800129e:	f00d f873 	bl	800e388 <_Z9ei_callocjj>
 80012a2:	60f8      	str	r0, [r7, #12]

		if(p)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00e      	beq.n	80012c8 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4413      	add	r3, r2
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	425b      	negs	r3, r3
 80012b6:	4013      	ands	r3, r2
 80012b8:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	1ad2      	subs	r2, r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3b02      	subs	r3, #2
 80012c4:	b292      	uxth	r2, r2
 80012c6:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 80012c8:	697b      	ldr	r3, [r7, #20]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	080193f0 	.word	0x080193f0
 80012d8:	0801940c 	.word	0x0801940c
 80012dc:	08019444 	.word	0x08019444

080012e0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	assert(ptr);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d105      	bne.n	80012fa <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 80012f0:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 80012f2:	215f      	movs	r1, #95	; 0x5f
 80012f4:	480b      	ldr	r0, [pc, #44]	; (8001324 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 80012f6:	f013 fb23 	bl	8014940 <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8001300:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 8001302:	89fb      	ldrh	r3, [r7, #14]
 8001304:	425b      	negs	r3, r3
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 800130c:	68b8      	ldr	r0, [r7, #8]
 800130e:	f00d f849 	bl	800e3a4 <_Z7ei_freePv>
}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	080194c8 	.word	0x080194c8
 8001320:	080194cc 	.word	0x080194cc
 8001324:	08019444 	.word	0x08019444

08001328 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001332:	ed97 0a01 	vldr	s0, [r7, #4]
 8001336:	f012 fa15 	bl	8013764 <roundf>
 800133a:	eef0 7a40 	vmov.f32	s15, s0
 800133e:	eeb0 0a67 	vmov.f32	s0, s15
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param matrix
     * @param rows
     * @param columns
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	4619      	mov	r1, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	461a      	mov	r2, r3
 8001360:	f000 f818 	bl	8001394 <_ZN2ei5numpy9transposeEPfii>
 8001364:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	e00c      	b.n	800138a <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 800137c:	893a      	ldrh	r2, [r7, #8]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 8001382:	897a      	ldrh	r2, [r7, #10]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 8001388:	2300      	movs	r3, #0
    }
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <_ZN2ei5numpy9transposeEPfii>:
     * @param matrix
     * @param rows
     * @param columns
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b08f      	sub	sp, #60	; 0x3c
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 80013a0:	68b9      	ldr	r1, [r7, #8]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80013a8:	2300      	movs	r3, #0
 80013aa:	f7ff fed3 	bl	8001154 <_ZN2ei9ei_matrixC1EmmPf>
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <_ZN2ei5numpy9transposeEPfii+0x24>
 80013b4:	4c23      	ldr	r4, [pc, #140]	; (8001444 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 80013b6:	e03b      	b.n	8001430 <_ZN2ei5numpy9transposeEPfii+0x9c>
        if (!temp_matrix.buffer) {
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <_ZN2ei5numpy9transposeEPfii+0x2e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80013be:	4c21      	ldr	r4, [pc, #132]	; (8001444 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 80013c0:	e036      	b.n	8001430 <_ZN2ei5numpy9transposeEPfii+0x9c>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c8:	da03      	bge.n	80013d2 <_ZN2ei5numpy9transposeEPfii+0x3e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d0:	db01      	blt.n	80013d6 <_ZN2ei5numpy9transposeEPfii+0x42>
            return EIDSP_NARROWING;
 80013d2:	4c1d      	ldr	r4, [pc, #116]	; (8001448 <_ZN2ei5numpy9transposeEPfii+0xb4>)
 80013d4:	e02c      	b.n	8001430 <_ZN2ei5numpy9transposeEPfii+0x9c>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	83bb      	strh	r3, [r7, #28]
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	83fb      	strh	r3, [r7, #30]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	82bb      	strh	r3, [r7, #20]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        };
 80013f4:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 80013f6:	f107 0214 	add.w	r2, r7, #20
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f009 feef 	bl	800b1e4 <arm_mat_trans_f32>
 8001406:	4603      	mov	r3, r0
 8001408:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != ARM_MATH_SUCCESS) {
 800140c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <_ZN2ei5numpy9transposeEPfii+0x86>
            return status;
 8001414:	f997 4037 	ldrsb.w	r4, [r7, #55]	; 0x37
 8001418:	e00a      	b.n	8001430 <_ZN2ei5numpy9transposeEPfii+0x9c>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 800141a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	fb02 f303 	mul.w	r3, r2, r3
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	461a      	mov	r2, r3
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f013 faff 	bl	8014a2c <memcpy>

        return EIDSP_OK;
 800142e:	2400      	movs	r4, #0
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff feb8 	bl	80011aa <_ZN2ei9ei_matrixD1Ev>
    }
 800143a:	4623      	mov	r3, r4
 800143c:	4618      	mov	r0, r3
 800143e:	373c      	adds	r7, #60	; 0x3c
 8001440:	46bd      	mov	sp, r7
 8001442:	bd90      	pop	{r4, r7, pc}
 8001444:	fffffc16 	.word	0xfffffc16
 8001448:	fffffc0c 	.word	0xfffffc0c

0800144c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 8001458:	edd7 7a00 	vldr	s15, [r7]
 800145c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001460:	eef4 7a47 	vcmp.f32	s15, s14
 8001464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001468:	d101      	bne.n	800146e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 800146a:	2300      	movs	r3, #0
 800146c:	e033      	b.n	80014d6 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001476:	d204      	bcs.n	8001482 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001480:	d301      	bcc.n	8001486 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 8001484:	e027      	b.n	80014d6 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	b29b      	uxth	r3, r3
 800148c:	82bb      	strh	r3, [r7, #20]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	b29b      	uxth	r3, r3
 8001494:	82fb      	strh	r3, [r7, #22]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	81bb      	strh	r3, [r7, #12]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	81fb      	strh	r3, [r7, #14]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 80014b2:	f107 020c 	add.w	r2, r7, #12
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4611      	mov	r1, r2
 80014bc:	ed97 0a00 	vldr	s0, [r7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f009 fe59 	bl	800b178 <arm_mat_scale_f32>
 80014c6:	4603      	mov	r3, r0
 80014c8:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	e000      	b.n	80014d6 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 80014d4:	2300      	movs	r3, #0
    }
 80014d6:	4618      	mov	r0, r3
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	fffffc0c 	.word	0xfffffc0c

080014e4 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>:
     * Calculate the root mean square of a matrix, one per row
     * @param matrix Matrix of size (MxN)
     * @param output_matrix Matrix of size (Mx1)
     * @returns 0 if OK
     */
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
        if (matrix->rows != output_matrix->rows) {
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d001      	beq.n	80014fe <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 80014fc:	e028      	b.n	8001550 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        if (output_matrix->cols != 1) {
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d001      	beq.n	800150a <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001508:	e022      	b.n	8001550 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	429a      	cmp	r2, r3
 8001516:	d21a      	bcs.n	800154e <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float rms_result;
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	68f9      	ldr	r1, [r7, #12]
 8001522:	fb01 f303 	mul.w	r3, r1, r3
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	18d0      	adds	r0, r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f107 0208 	add.w	r2, r7, #8
 8001532:	4619      	mov	r1, r3
 8001534:	f009 ff36 	bl	800b3a4 <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	3301      	adds	r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	e7df      	b.n	800150e <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x2a>
            }
            output_matrix->buffer[row] = sqrt(sum / static_cast<float>(matrix->cols));
#endif
        }

        return EIDSP_OK;
 800154e:	2300      	movs	r3, #0
    }
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	fffffc14 	.word	0xfffffc14

0800155c <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
    /**
     * Calculate the mean over a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	429a      	cmp	r2, r3
 8001570:	d001      	beq.n	8001576 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001574:	e028      	b.n	80015c8 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }
        if (output_matrix->cols != 1) {
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d001      	beq.n	8001582 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800157e:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001580:	e022      	b.n	80015c8 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	429a      	cmp	r2, r3
 800158e:	d21a      	bcs.n	80015c6 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	68f9      	ldr	r1, [r7, #12]
 800159a:	fb01 f303 	mul.w	r3, r1, r3
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	18d0      	adds	r0, r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f107 0208 	add.w	r2, r7, #8
 80015aa:	4619      	mov	r1, r3
 80015ac:	f009 fe93 	bl	800b2d6 <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	3301      	adds	r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	e7df      	b.n	8001586 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        return EIDSP_OK;
 80015c6:	2300      	movs	r3, #0
    }
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	fffffc14 	.word	0xfffffc14

080015d4 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_>:
    /**
     * Get the minimum value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int min(matrix_t *input_matrix, matrix_t *output_matrix) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d001      	beq.n	80015ee <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x78>)
 80015ec:	e029      	b.n	8001642 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6e>
        }
        if (output_matrix->cols != 1) {
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d001      	beq.n	80015fa <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x78>)
 80015f8:	e023      	b.n	8001642 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6e>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	429a      	cmp	r2, r3
 8001606:	d21b      	bcs.n	8001640 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6c>
#if EIDSP_USE_CMSIS_DSP
            float min;
            uint32_t ix;
            arm_min_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &min, &ix);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	6979      	ldr	r1, [r7, #20]
 8001612:	fb01 f303 	mul.w	r3, r1, r3
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	18d0      	adds	r0, r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6899      	ldr	r1, [r3, #8]
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	f107 0210 	add.w	r2, r7, #16
 8001626:	f009 fe85 	bl	800b334 <arm_min_f32>
            output_matrix->buffer[row] = min;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	3301      	adds	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e7de      	b.n	80015fe <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = min;
#endif
        }

        return EIDSP_OK;
 8001640:	2300      	movs	r3, #0
    }
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	fffffc14 	.word	0xfffffc14

08001650 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_>:
    /**
     * Get the maximum value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int max(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	429a      	cmp	r2, r3
 8001664:	d001      	beq.n	800166a <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x78>)
 8001668:	e029      	b.n	80016be <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6e>
        }
        if (output_matrix->cols != 1) {
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d001      	beq.n	8001676 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x78>)
 8001674:	e023      	b.n	80016be <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6e>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	429a      	cmp	r2, r3
 8001682:	d21b      	bcs.n	80016bc <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6c>
#if EIDSP_USE_CMSIS_DSP
            float max;
            uint32_t ix;
            arm_max_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &max, &ix);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	6979      	ldr	r1, [r7, #20]
 800168e:	fb01 f303 	mul.w	r3, r1, r3
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	18d0      	adds	r0, r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6899      	ldr	r1, [r3, #8]
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	f107 0210 	add.w	r2, r7, #16
 80016a2:	f009 fde0 	bl	800b266 <arm_max_f32>
            output_matrix->buffer[row] = max;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	3301      	adds	r3, #1
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	e7de      	b.n	800167a <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = max;
#endif
        }

        return EIDSP_OK;
 80016bc:	2300      	movs	r3, #0
    }
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	fffffc14 	.word	0xfffffc14

080016cc <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_>:
    /**
     * Get the stdev value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int stdev(matrix_t *input_matrix, matrix_t *output_matrix) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d001      	beq.n	80016e6 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80016e2:	4b25      	ldr	r3, [pc, #148]	; (8001778 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xac>)
 80016e4:	e043      	b.n	800176e <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa2>
        }
        if (output_matrix->cols != 1) {
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d001      	beq.n	80016f2 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80016ee:	4b22      	ldr	r3, [pc, #136]	; (8001778 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xac>)
 80016f0:	e03d      	b.n	800176e <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa2>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d235      	bcs.n	800176c <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa0>
#if EIDSP_USE_CMSIS_DSP
            float std;
            float var;
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	69f9      	ldr	r1, [r7, #28]
 800170a:	fb01 f303 	mul.w	r3, r1, r3
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	18d0      	adds	r0, r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f107 020c 	add.w	r2, r7, #12
 800171a:	4619      	mov	r1, r3
 800171c:	f000 f98e 	bl	8001a3c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            arm_sqrt_f32(var, &std);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800172a:	edd7 7a06 	vldr	s15, [r7, #24]
 800172e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	db09      	blt.n	800174c <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x80>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001738:	ed97 0a06 	vldr	s0, [r7, #24]
 800173c:	f012 f8d4 	bl	80138e8 <sqrtf>
 8001740:	eef0 7a40 	vmov.f32	s15, s0
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 800174a:	e004      	b.n	8001756 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x8a>
    }
    else
    {
      *pOut = 0.0f;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001754:	bf00      	nop
            output_matrix->buffer[row] = std;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	3301      	adds	r3, #1
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	e7c4      	b.n	80016f6 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = sqrt(std / input_matrix->cols);
#endif
        }

        return EIDSP_OK;
 800176c:	2300      	movs	r3, #0
    }
 800176e:	4618      	mov	r0, r3
 8001770:	3720      	adds	r7, #32
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	fffffc14 	.word	0xfffffc14

0800177c <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>:
    /**
     * Get the skewness value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int skew(matrix_t *input_matrix, matrix_t *output_matrix) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	429a      	cmp	r2, r3
 8001790:	d001      	beq.n	8001796 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001792:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x134>)
 8001794:	e087      	b.n	80018a6 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12a>
        }
        if (output_matrix->cols != 1) {
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d001      	beq.n	80017a2 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800179e:	4b44      	ldr	r3, [pc, #272]	; (80018b0 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x134>)
 80017a0:	e081      	b.n	80018a6 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12a>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d279      	bcs.n	80018a4 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x128>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            float var;

            // Calculate the mean & variance
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	69f9      	ldr	r1, [r7, #28]
 80017ba:	fb01 f303 	mul.w	r3, r1, r3
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	18d0      	adds	r0, r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f107 0210 	add.w	r2, r7, #16
 80017ca:	4619      	mov	r1, r3
 80017cc:	f009 fd83 	bl	800b2d6 <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	69f9      	ldr	r1, [r7, #28]
 80017da:	fb01 f303 	mul.w	r3, r1, r3
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	18d0      	adds	r0, r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f107 020c 	add.w	r2, r7, #12
 80017ea:	4619      	mov	r1, r3
 80017ec:	f000 f926 	bl	8001a3c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>

            // Calculate m_3
            float m_3;
            cmsis_arm_third_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_3);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	69f9      	ldr	r1, [r7, #28]
 80017fa:	fb01 f303 	mul.w	r3, r1, r3
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	18d0      	adds	r0, r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	edd7 7a04 	vldr	s15, [r7, #16]
 800180a:	f107 0208 	add.w	r2, r7, #8
 800180e:	eeb0 0a67 	vmov.f32	s0, s15
 8001812:	4619      	mov	r1, r3
 8001814:	f000 fa10 	bl	8001c38 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf>

            // Calculate (variance)^(3/2)
            arm_sqrt_f32(var * var * var, &var);
 8001818:	ed97 7a03 	vldr	s14, [r7, #12]
 800181c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001820:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001824:	edd7 7a03 	vldr	s15, [r7, #12]
 8001828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800182c:	edc7 7a06 	vstr	s15, [r7, #24]
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8001836:	edd7 7a06 	vldr	s15, [r7, #24]
 800183a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800183e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001842:	db09      	blt.n	8001858 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xdc>
      *pOut = sqrtf(in);
 8001844:	ed97 0a06 	vldr	s0, [r7, #24]
 8001848:	f012 f84e 	bl	80138e8 <sqrtf>
 800184c:	eef0 7a40 	vmov.f32	s15, s0
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001856:	e004      	b.n	8001862 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xe6>
      *pOut = 0.0f;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001860:	bf00      	nop

            // Calculate skew = (m_3) / (variance)^(3/2)
            if (var == 0.0f) {
 8001862:	edd7 7a03 	vldr	s15, [r7, #12]
 8001866:	eef5 7a40 	vcmp.f32	s15, #0.0
 800186a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186e:	d108      	bne.n	8001882 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x106>
                output_matrix->buffer[row] = 0.0f;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e00c      	b.n	800189c <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x120>
            } else {
                output_matrix->buffer[row] = m_3 / var;
 8001882:	edd7 6a02 	vldr	s13, [r7, #8]
 8001886:	ed97 7a03 	vldr	s14, [r7, #12]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001898:	edc3 7a00 	vstr	s15, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	3301      	adds	r3, #1
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	e780      	b.n	80017a6 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x2a>
                output_matrix->buffer[row] = m_3 / m_2;
            }
#endif
        }

        return EIDSP_OK;
 80018a4:	2300      	movs	r3, #0
    }
 80018a6:	4618      	mov	r0, r3
 80018a8:	3720      	adds	r7, #32
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	fffffc14 	.word	0xfffffc14

080018b4 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>:
    /**
     * Get the kurtosis value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int kurtosis(matrix_t *input_matrix, matrix_t *output_matrix) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d001      	beq.n	80018ce <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80018ca:	4b3a      	ldr	r3, [pc, #232]	; (80019b4 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x100>)
 80018cc:	e06d      	b.n	80019aa <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf6>
        }
        if (output_matrix->cols != 1) {
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d001      	beq.n	80018da <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80018d6:	4b37      	ldr	r3, [pc, #220]	; (80019b4 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x100>)
 80018d8:	e067      	b.n	80019aa <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf6>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d25f      	bcs.n	80019a8 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf4>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            float var;

            // Calculate mean & variance
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	6979      	ldr	r1, [r7, #20]
 80018f2:	fb01 f303 	mul.w	r3, r1, r3
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	18d0      	adds	r0, r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f107 0210 	add.w	r2, r7, #16
 8001902:	4619      	mov	r1, r3
 8001904:	f009 fce7 	bl	800b2d6 <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	6979      	ldr	r1, [r7, #20]
 8001912:	fb01 f303 	mul.w	r3, r1, r3
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	18d0      	adds	r0, r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f107 020c 	add.w	r2, r7, #12
 8001922:	4619      	mov	r1, r3
 8001924:	f000 f88a 	bl	8001a3c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>

            // Calculate m_4
            float m_4;
            cmsis_arm_fourth_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_4);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	6979      	ldr	r1, [r7, #20]
 8001932:	fb01 f303 	mul.w	r3, r1, r3
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	18d0      	adds	r0, r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001942:	f107 0208 	add.w	r2, r7, #8
 8001946:	eeb0 0a67 	vmov.f32	s0, s15
 800194a:	4619      	mov	r1, r3
 800194c:	f000 fa2f 	bl	8001dae <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf>

            // Calculate Fisher kurtosis = (m_4 / variance^2) - 3
            var = var * var;
 8001950:	ed97 7a03 	vldr	s14, [r7, #12]
 8001954:	edd7 7a03 	vldr	s15, [r7, #12]
 8001958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800195c:	edc7 7a03 	vstr	s15, [r7, #12]
            if (var == 0.0f) {
 8001960:	edd7 7a03 	vldr	s15, [r7, #12]
 8001964:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196c:	d107      	bne.n	800197e <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xca>
                output_matrix->buffer[row] = -3.0f;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	4a0f      	ldr	r2, [pc, #60]	; (80019b8 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x104>)
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	e010      	b.n	80019a0 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xec>
            } else {
                output_matrix->buffer[row] = (m_4 / var) - 3.0f;
 800197e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001982:	ed97 7a03 	vldr	s14, [r7, #12]
 8001986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001998:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800199c:	edc3 7a00 	vstr	s15, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3301      	adds	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	e79a      	b.n	80018de <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x2a>
                output_matrix->buffer[row] = (m_4 / variance) - 3.0f;
            }
#endif
        }

        return EIDSP_OK;
 80019a8:	2300      	movs	r3, #0
    }
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	fffffc14 	.word	0xfffffc14
 80019b8:	c0400000 	.word	0xc0400000

080019bc <_ZZN2ei5numpy18signal_from_bufferEPKfjPNS_11ei_signal_tEENKUljjPfE_clEjjS5_>:
    {
        signal->total_length = data_size;
#ifdef __MBED__
        signal->get_data = mbed::callback(&numpy::signal_get_data, data);
#else
        signal->get_data = [data](size_t offset, size_t length, float *out_ptr) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	603b      	str	r3, [r7, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6818      	ldr	r0, [r3, #0]
            return numpy::signal_get_data(data, offset, length, out_ptr);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	68b9      	ldr	r1, [r7, #8]
 80019d4:	f000 f81c 	bl	8001a10 <_ZN2ei5numpy15signal_get_dataEPKfjjPf>
 80019d8:	4603      	mov	r3, r0
        };
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <_ZN2ei5numpy18signal_from_bufferEPKfjPNS_11ei_signal_tE>:
    static int signal_from_buffer(const float *data, size_t data_size, signal_t *signal)
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
        signal->total_length = data_size;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	611a      	str	r2, [r3, #16]
        };
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	4610      	mov	r0, r2
 8001a02:	f001 ff40 	bl	8003886 <_ZNSt8functionIFijjPfEEaSIZN2ei5numpy18signal_from_bufferEPKfjPNS4_11ei_signal_tEEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSG_JjjS0_EEEE5valueERS2_E4typeEOSE_>
#endif
        return EIDSP_OK;
 8001a06:	2300      	movs	r3, #0
    }
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_ZN2ei5numpy15signal_get_dataEPKfjjPf>:
        ei_dsp_free(cfg, kiss_fftr_mem_length);

        return EIDSP_OK;
    }

    static int signal_get_data(const float *in_buffer, size_t offset, size_t length, float *out_ptr)
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
 8001a1c:	603b      	str	r3, [r7, #0]
    {
        memcpy(out_ptr, in_buffer + offset, length * sizeof(float));
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	18d1      	adds	r1, r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	6838      	ldr	r0, [r7, #0]
 8001a2e:	f012 fffd 	bl	8014a2c <memcpy>
        return 0;
 8001a32:	2300      	movs	r3, #0
    }
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>:
     * @details    Variance in CMSIS version is calculated using fSum / (float32_t)(blockSize - 1)
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param      pResult    The variance
     */
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
 8001a3c:	b480      	push	{r7}
 8001a3e:	b08b      	sub	sp, #44	; 0x2c
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
        float32_t fSum = 0.0f;
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
        float32_t fMean, fValue;
        const float32_t *pInput = pSrc;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	61bb      	str	r3, [r7, #24]

        if (blockSize <= 1U) {
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d804      	bhi.n	8001a68 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x2c>
            *pResult = 0;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
            return;
 8001a66:	e0e2      	b.n	8001c2e <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1f2>
        }
        blkCnt = blockSize >> 2U;
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d02f      	beq.n	8001ad4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x98>
            sum += *pInput++;
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	1d1a      	adds	r2, r3, #4
 8001a78:	61ba      	str	r2, [r7, #24]
 8001a7a:	edd3 7a00 	vldr	s15, [r3]
 8001a7e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a86:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	1d1a      	adds	r2, r3, #4
 8001a8e:	61ba      	str	r2, [r7, #24]
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9c:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	1d1a      	adds	r2, r3, #4
 8001aa4:	61ba      	str	r2, [r7, #24]
 8001aa6:	edd3 7a00 	vldr	s15, [r3]
 8001aaa:	ed97 7a08 	vldr	s14, [r7, #32]
 8001aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab2:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	1d1a      	adds	r2, r3, #4
 8001aba:	61ba      	str	r2, [r7, #24]
 8001abc:	edd3 7a00 	vldr	s15, [r3]
 8001ac0:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac8:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8001ad2:	e7cc      	b.n	8001a6e <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x32>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00e      	beq.n	8001b00 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xc4>
            sum += *pInput++;
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	1d1a      	adds	r2, r3, #4
 8001ae6:	61ba      	str	r2, [r7, #24]
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	ed97 7a08 	vldr	s14, [r7, #32]
 8001af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af4:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	3b01      	subs	r3, #1
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8001afe:	e7ed      	b.n	8001adc <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa0>
        }

        fMean = sum / (float32_t)blockSize;
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	ee07 3a90 	vmov	s15, r3
 8001b06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b0a:	edd7 6a08 	vldr	s13, [r7, #32]
 8001b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b12:	edc7 7a05 	vstr	s15, [r7, #20]

        pInput = pSrc;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	61bb      	str	r3, [r7, #24]

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d057      	beq.n	8001bd6 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x19a>
            fValue = *pInput++ - fMean;
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	1d1a      	adds	r2, r3, #4
 8001b2a:	61ba      	str	r2, [r7, #24]
 8001b2c:	ed93 7a00 	vldr	s14, [r3]
 8001b30:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b38:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8001b3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b44:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4c:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	1d1a      	adds	r2, r3, #4
 8001b54:	61ba      	str	r2, [r7, #24]
 8001b56:	ed93 7a00 	vldr	s14, [r3]
 8001b5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b62:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8001b66:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b6a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b6e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b76:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	1d1a      	adds	r2, r3, #4
 8001b7e:	61ba      	str	r2, [r7, #24]
 8001b80:	ed93 7a00 	vldr	s14, [r3]
 8001b84:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b8c:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8001b90:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b98:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba0:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	1d1a      	adds	r2, r3, #4
 8001ba8:	61ba      	str	r2, [r7, #24]
 8001baa:	ed93 7a00 	vldr	s14, [r3]
 8001bae:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb6:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8001bba:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bbe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001bc2:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bca:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8001bd4:	e7a4      	b.n	8001b20 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xe4>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d018      	beq.n	8001c16 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1da>
            fValue = *pInput++ - fMean;
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	1d1a      	adds	r2, r3, #4
 8001be8:	61ba      	str	r2, [r7, #24]
 8001bea:	ed93 7a00 	vldr	s14, [r3]
 8001bee:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf6:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8001bfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bfe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c02:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0a:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	3b01      	subs	r3, #1
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8001c14:	e7e3      	b.n	8001bde <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1a2>
        }

        /* Variance */
        *pResult = fSum / (float32_t)(blockSize);
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	ee07 3a90 	vmov	s15, r3
 8001c1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	edc3 7a00 	vstr	s15, [r3]
    }
 8001c2e:	372c      	adds	r7, #44	; 0x2c
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf>:
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param[in]  mean       The mean to subtract from each value before cubing
     * @param      pResult    The third central moment of the input
     */
    static void cmsis_arm_third_moment(const float32_t * pSrc, uint32_t blockSize, float32_t mean, float32_t * pResult)
 8001c38:	b480      	push	{r7}
 8001c3a:	b089      	sub	sp, #36	; 0x24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c46:	603a      	str	r2, [r7, #0]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
        float32_t in;

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	61fb      	str	r3, [r7, #28]

        while (blkCnt > 0U) {
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d06f      	beq.n	8001d3a <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x102>

            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1d1a      	adds	r2, r3, #4
 8001c5e:	60fa      	str	r2, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8001c64:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c70:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8001c74:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c78:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001c7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c84:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8c:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1d1a      	adds	r2, r3, #4
 8001c94:	60fa      	str	r2, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8001c9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ca2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca6:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8001caa:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cae:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001cb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cba:	ed97 7a06 	vldr	s14, [r7, #24]
 8001cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc2:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1d1a      	adds	r2, r3, #4
 8001cca:	60fa      	str	r2, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8001cd0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cdc:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8001ce0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ce4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001ce8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf0:	ed97 7a06 	vldr	s14, [r7, #24]
 8001cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf8:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	1d1a      	adds	r2, r3, #4
 8001d00:	60fa      	str	r2, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8001d06:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d12:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8001d16:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d1a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d26:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2e:	edc7 7a06 	vstr	s15, [r7, #24]

            /* Decrement loop counter */
            blkCnt--;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	61fb      	str	r3, [r7, #28]
        while (blkCnt > 0U) {
 8001d38:	e78c      	b.n	8001c54 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x1c>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	61fb      	str	r3, [r7, #28]

        while (blkCnt > 0U) {
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d01e      	beq.n	8001d86 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x14e>
            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	1d1a      	adds	r2, r3, #4
 8001d4c:	60fa      	str	r2, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8001d52:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d5e:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8001d62:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d66:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d72:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d7a:	edc7 7a06 	vstr	s15, [r7, #24]

            /* Decrement loop counter */
            blkCnt--;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	61fb      	str	r3, [r7, #28]
        while (blkCnt > 0U) {
 8001d84:	e7dd      	b.n	8001d42 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x10a>
        }

        sum = sum / blockSize;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	ee07 3a90 	vmov	s15, r3
 8001d8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d90:	edd7 6a06 	vldr	s13, [r7, #24]
 8001d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d98:	edc7 7a06 	vstr	s15, [r7, #24]
        /* Store result to destination */
        *pResult = sum;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	601a      	str	r2, [r3, #0]
    }
 8001da2:	bf00      	nop
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf>:
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param[in]  mean       The mean to subtract from each value before calculating fourth power
     * @param      pResult    The fourth central moment of the input
     */
    static void cmsis_arm_fourth_moment(const float32_t * pSrc, uint32_t blockSize, float32_t mean, float32_t * pResult)
 8001dae:	b480      	push	{r7}
 8001db0:	b08b      	sub	sp, #44	; 0x2c
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	ed87 0a01 	vstr	s0, [r7, #4]
 8001dbc:	603a      	str	r2, [r7, #0]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 8001dbe:	f04f 0300 	mov.w	r3, #0
 8001dc2:	623b      	str	r3, [r7, #32]
        float32_t in;

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	089b      	lsrs	r3, r3, #2
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d077      	beq.n	8001ec0 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x112>

            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	1d1a      	adds	r2, r3, #4
 8001dd4:	60fa      	str	r2, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8001dda:	ed97 7a07 	vldr	s14, [r7, #28]
 8001dde:	edd7 7a01 	vldr	s15, [r7, #4]
 8001de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001de6:	edc7 7a07 	vstr	s15, [r7, #28]
            float square;
            square = in * in;
 8001dea:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001df2:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += square * square;
 8001df6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dfa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001dfe:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e06:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	1d1a      	adds	r2, r3, #4
 8001e0e:	60fa      	str	r2, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8001e14:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e18:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e20:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 8001e24:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e28:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e2c:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += square * square;
 8001e30:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e38:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e40:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1d1a      	adds	r2, r3, #4
 8001e48:	60fa      	str	r2, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8001e4e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e52:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e5a:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 8001e5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e66:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += square * square;
 8001e6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e6e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e72:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7a:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1d1a      	adds	r2, r3, #4
 8001e82:	60fa      	str	r2, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8001e88:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e94:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 8001e98:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ea0:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += square * square;
 8001ea4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ea8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001eac:	ed97 7a08 	vldr	s14, [r7, #32]
 8001eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb4:	edc7 7a08 	vstr	s15, [r7, #32]

            /* Decrement loop counter */
            blkCnt--;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8001ebe:	e784      	b.n	8001dca <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x1c>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d020      	beq.n	8001f10 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x162>
            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1d1a      	adds	r2, r3, #4
 8001ed2:	60fa      	str	r2, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8001ed8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001edc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee4:	edc7 7a07 	vstr	s15, [r7, #28]
            float square;
            square = in * in;
 8001ee8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001eec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ef0:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 8001ef4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ef8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001efc:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f04:	edc7 7a08 	vstr	s15, [r7, #32]

            /* Decrement loop counter */
            blkCnt--;
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8001f0e:	e7db      	b.n	8001ec8 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x11a>
        }

        sum = sum / blockSize;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f1a:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f22:	edc7 7a08 	vstr	s15, [r7, #32]
        /* Store result to destination */
        *pResult = sum;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	6a3a      	ldr	r2, [r7, #32]
 8001f2a:	601a      	str	r2, [r3, #0]
    }
 8001f2c:	bf00      	nop
 8001f2e:	372c      	adds	r7, #44	; 0x2c
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff f8e2 	bl	800110c <_ZNSt14_Function_baseD1Ev>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f001 fcdf 	bl	8003920 <_ZNSt8functionIFijjPfEEC1Ev>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <_ZN2ei11ei_signal_tD1Ev>:
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ffde 	bl	8001f38 <_ZNSt8functionIFijjPfEED1Ev>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
}


__attribute__((unused)) int extract_flatten_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8001f88:	b5b0      	push	{r4, r5, r7, lr}
 8001f8a:	b0b8      	sub	sp, #224	; 0xe0
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_flatten_t config = *((ei_dsp_config_flatten_t*)config_ptr);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
 8001f9e:	461d      	mov	r5, r3
 8001fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fa4:	682b      	ldr	r3, [r5, #0]
 8001fa6:	6023      	str	r3, [r4, #0]

    uint32_t expected_matrix_size = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.average) expected_matrix_size += config.axes;
 8001fae:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d007      	beq.n	8001fc6 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e>
 8001fb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.minimum) expected_matrix_size += config.axes;
 8001fc6:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d007      	beq.n	8001fde <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x56>
 8001fce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fd8:	4413      	add	r3, r2
 8001fda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.maximum) expected_matrix_size += config.axes;
 8001fde:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d007      	beq.n	8001ff6 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6e>
 8001fe6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fea:	461a      	mov	r2, r3
 8001fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.rms) expected_matrix_size += config.axes;
 8001ff6:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d007      	beq.n	800200e <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x86>
 8001ffe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002002:	461a      	mov	r2, r3
 8002004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002008:	4413      	add	r3, r2
 800200a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.stdev) expected_matrix_size += config.axes;
 800200e:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8002012:	2b00      	cmp	r3, #0
 8002014:	d007      	beq.n	8002026 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x9e>
 8002016:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800201a:	461a      	mov	r2, r3
 800201c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002020:	4413      	add	r3, r2
 8002022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.skewness) expected_matrix_size += config.axes;
 8002026:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 800202a:	2b00      	cmp	r3, #0
 800202c:	d007      	beq.n	800203e <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb6>
 800202e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002032:	461a      	mov	r2, r3
 8002034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002038:	4413      	add	r3, r2
 800203a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.kurtosis) expected_matrix_size += config.axes;
 800203e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8002042:	2b00      	cmp	r3, #0
 8002044:	d007      	beq.n	8002056 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xce>
 8002046:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800204a:	461a      	mov	r2, r3
 800204c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002050:	4413      	add	r3, r2
 8002052:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    if (output_matrix->rows * output_matrix->cols != expected_matrix_size) {
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	6892      	ldr	r2, [r2, #8]
 800205e:	fb02 f303 	mul.w	r3, r2, r3
 8002062:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002066:	429a      	cmp	r2, r3
 8002068:	d001      	beq.n	800206e <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xe6>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800206a:	4cc6      	ldr	r4, [pc, #792]	; (8002384 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3fc>)
 800206c:	e184      	b.n	8002378 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3f0>
    }

    int ret;

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002076:	fbb3 f1f2 	udiv	r1, r3, r2
 800207a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800207e:	461a      	mov	r2, r3
 8002080:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8002084:	2300      	movs	r3, #0
 8002086:	f7ff f865 	bl	8001154 <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 800208a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x10e>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002092:	4cbd      	ldr	r4, [pc, #756]	; (8002388 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x400>)
 8002094:	e16b      	b.n	800236e <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e6>
    }
    signal->get_data(0, signal->total_length, input_matrix.buffer);
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020a0:	2100      	movs	r1, #0
 80020a2:	f001 fc0f 	bl	80038c4 <_ZNKSt8functionIFijjPfEEclEjjS0_>

    // scale the signal
    ret = numpy::scale(&input_matrix, config.scale_axes);
 80020a6:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80020aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020ae:	eeb0 0a67 	vmov.f32	s0, s15
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff f9ca 	bl	800144c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 80020b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if (ret != EIDSP_OK) {
 80020bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x14c>
        ei_printf("ERR: Failed to scale signal (%d)\n", ret);
 80020c4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80020c8:	48b0      	ldr	r0, [pc, #704]	; (800238c <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x404>)
 80020ca:	f001 f9e2 	bl	8003492 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 80020ce:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 80020d2:	e14c      	b.n	800236e <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e6>
    }

    // transpose the matrix so we have one row per axis (nifty!)
    ret = numpy::transpose(&input_matrix);
 80020d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff f935 	bl	8001348 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 80020de:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if (ret != EIDSP_OK) {
 80020e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d007      	beq.n	80020fa <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x172>
        ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
 80020ea:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80020ee:	48a8      	ldr	r0, [pc, #672]	; (8002390 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x408>)
 80020f0:	f001 f9cf 	bl	8003492 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 80020f4:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 80020f8:	e139      	b.n	800236e <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e6>
    }

    size_t out_matrix_ix = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    for (size_t row = 0; row < input_matrix.rows; row++) {
 8002100:	2300      	movs	r3, #0
 8002102:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002106:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800210a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800210e:	429a      	cmp	r2, r3
 8002110:	f080 8121 	bcs.w	8002356 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3ce>
        matrix_t row_matrix(1, input_matrix.cols, input_matrix.buffer + (row * input_matrix.cols));
 8002114:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 8002118:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800211c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002120:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8002130:	4622      	mov	r2, r4
 8002132:	2101      	movs	r1, #1
 8002134:	f7ff f80e 	bl	8001154 <_ZN2ei9ei_matrixC1EmmPf>

        if (config.average) {
 8002138:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d021      	beq.n	8002184 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1fc>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 8002140:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002144:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002148:	2201      	movs	r2, #1
 800214a:	2101      	movs	r1, #1
 800214c:	f7ff f802 	bl	8001154 <_ZN2ei9ei_matrixC1EmmPf>
            numpy::mean(&row_matrix, &out_matrix);
 8002150:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002154:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff f9fe 	bl	800155c <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 8002160:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	6819      	ldr	r1, [r3, #0]
 8002168:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800216c:	1c58      	adds	r0, r3, #1
 800216e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 800217a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff f813 	bl	80011aa <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.minimum) {
 8002184:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8002188:	2b00      	cmp	r3, #0
 800218a:	d020      	beq.n	80021ce <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x246>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 800218c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002190:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8002194:	2201      	movs	r2, #1
 8002196:	2101      	movs	r1, #1
 8002198:	f7fe ffdc 	bl	8001154 <_ZN2ei9ei_matrixC1EmmPf>
            numpy::min(&row_matrix, &out_matrix);
 800219c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80021a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021a4:	4611      	mov	r1, r2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fa14 	bl	80015d4 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 80021ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	6819      	ldr	r1, [r3, #0]
 80021b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021b6:	1c58      	adds	r0, r3, #1
 80021b8:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 80021c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe ffee 	bl	80011aa <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.maximum) {
 80021ce:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d020      	beq.n	8002218 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x290>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 80021d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021da:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80021de:	2201      	movs	r2, #1
 80021e0:	2101      	movs	r1, #1
 80021e2:	f7fe ffb7 	bl	8001154 <_ZN2ei9ei_matrixC1EmmPf>
            numpy::max(&row_matrix, &out_matrix);
 80021e6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80021ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021ee:	4611      	mov	r1, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fa2d 	bl	8001650 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 80021f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	6819      	ldr	r1, [r3, #0]
 80021fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002200:	1c58      	adds	r0, r3, #1
 8002202:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 800220e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe ffc9 	bl	80011aa <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.rms) {
 8002218:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800221c:	2b00      	cmp	r3, #0
 800221e:	d020      	beq.n	8002262 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2da>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 8002220:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002224:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002228:	2201      	movs	r2, #1
 800222a:	2101      	movs	r1, #1
 800222c:	f7fe ff92 	bl	8001154 <_ZN2ei9ei_matrixC1EmmPf>
            numpy::rms(&row_matrix, &out_matrix);
 8002230:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002234:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff f952 	bl	80014e4 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 8002240:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	6819      	ldr	r1, [r3, #0]
 8002246:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800224a:	1c58      	adds	r0, r3, #1
 800224c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 8002258:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe ffa4 	bl	80011aa <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.stdev) {
 8002262:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8002266:	2b00      	cmp	r3, #0
 8002268:	d020      	beq.n	80022ac <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x324>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 800226a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800226e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002272:	2201      	movs	r2, #1
 8002274:	2101      	movs	r1, #1
 8002276:	f7fe ff6d 	bl	8001154 <_ZN2ei9ei_matrixC1EmmPf>
            numpy::stdev(&row_matrix, &out_matrix);
 800227a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800227e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fa21 	bl	80016cc <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 800228a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	6819      	ldr	r1, [r3, #0]
 8002290:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002294:	1c58      	adds	r0, r3, #1
 8002296:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 80022a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe ff7f 	bl	80011aa <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.skewness) {
 80022ac:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d020      	beq.n	80022f6 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x36e>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 80022b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022b8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80022bc:	2201      	movs	r2, #1
 80022be:	2101      	movs	r1, #1
 80022c0:	f7fe ff48 	bl	8001154 <_ZN2ei9ei_matrixC1EmmPf>
            numpy::skew(&row_matrix, &out_matrix);
 80022c4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80022c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fa54 	bl	800177c <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 80022d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	6819      	ldr	r1, [r3, #0]
 80022da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022de:	1c58      	adds	r0, r3, #1
 80022e0:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 80022ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe ff5a 	bl	80011aa <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.kurtosis) {
 80022f6:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d020      	beq.n	8002340 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3b8>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 80022fe:	f107 0320 	add.w	r3, r7, #32
 8002302:	f107 0010 	add.w	r0, r7, #16
 8002306:	2201      	movs	r2, #1
 8002308:	2101      	movs	r1, #1
 800230a:	f7fe ff23 	bl	8001154 <_ZN2ei9ei_matrixC1EmmPf>
            numpy::kurtosis(&row_matrix, &out_matrix);
 800230e:	f107 0210 	add.w	r2, r7, #16
 8002312:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff facb 	bl	80018b4 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	6819      	ldr	r1, [r3, #0]
 8002324:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002328:	1c58      	adds	r0, r3, #1
 800232a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 8002336:	f107 0310 	add.w	r3, r7, #16
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe ff35 	bl	80011aa <_ZN2ei9ei_matrixD1Ev>
        matrix_t row_matrix(1, input_matrix.cols, input_matrix.buffer + (row * input_matrix.cols));
 8002340:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe ff30 	bl	80011aa <_ZN2ei9ei_matrixD1Ev>
    for (size_t row = 0; row < input_matrix.rows; row++) {
 800234a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800234e:	3301      	adds	r3, #1
 8002350:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002354:	e6d7      	b.n	8002106 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x17e>
        }
    }

    // flatten again
    output_matrix->cols = output_matrix->rows * output_matrix->cols;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	6892      	ldr	r2, [r2, #8]
 800235e:	fb03 f202 	mul.w	r2, r3, r2
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2201      	movs	r2, #1
 800236a:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 800236c:	2400      	movs	r4, #0
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 800236e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe ff19 	bl	80011aa <_ZN2ei9ei_matrixD1Ev>
}
 8002378:	4623      	mov	r3, r4
 800237a:	4618      	mov	r0, r3
 800237c:	37e0      	adds	r7, #224	; 0xe0
 800237e:	46bd      	mov	sp, r7
 8002380:	bdb0      	pop	{r4, r5, r7, pc}
 8002382:	bf00      	nop
 8002384:	fffffc14 	.word	0xfffffc14
 8002388:	fffffc16 	.word	0xfffffc16
 800238c:	08019500 	.word	0x08019500
 8002390:	08019524 	.word	0x08019524

08002394 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8002394:	b5b0      	push	{r4, r5, r7, lr}
 8002396:	b098      	sub	sp, #96	; 0x60
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80023ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 80023b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b2:	4973      	ldr	r1, [pc, #460]	; (8002580 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ec>)
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fd ff5b 	bl	8000270 <strcmp>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x30>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
 80023c4:	2303      	movs	r3, #3
 80023c6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_FRAMES * EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	6892      	ldr	r2, [r2, #8]
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00f      	beq.n	80023fa <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x66>
        ei_printf("out_matrix = %d items\n", static_cast<int>(output_matrix->rows * output_matrix->cols));
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	6892      	ldr	r2, [r2, #8]
 80023e2:	fb02 f303 	mul.w	r3, r2, r3
 80023e6:	4619      	mov	r1, r3
 80023e8:	4866      	ldr	r0, [pc, #408]	; (8002584 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f0>)
 80023ea:	f001 f852 	bl	8003492 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %d items\n", static_cast<int>(EI_CLASSIFIER_INPUT_FRAMES * EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count));
 80023ee:	2100      	movs	r1, #0
 80023f0:	4865      	ldr	r0, [pc, #404]	; (8002588 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f4>)
 80023f2:	f001 f84e 	bl	8003492 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80023f6:	4c65      	ldr	r4, [pc, #404]	; (800258c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f8>)
 80023f8:	e0bc      	b.n	8002574 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e0>
    }

    size_t output_ix = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	65fb      	str	r3, [r7, #92]	; 0x5c

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 80023fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002402:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 800240a:	2300      	movs	r3, #0
 800240c:	65bb      	str	r3, [r7, #88]	; 0x58
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002414:	429a      	cmp	r2, r3
 8002416:	f080 80ac 	bcs.w	8002572 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1de>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002420:	d803      	bhi.n	800242a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x96>
 8002422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	e001      	b.n	800242e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x9a>
 800242a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800242e:	64bb      	str	r3, [r7, #72]	; 0x48

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8002430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002432:	461a      	mov	r2, r3
 8002434:	f107 0014 	add.w	r0, r7, #20
 8002438:	2300      	movs	r3, #0
 800243a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800243c:	f7fe fe8a 	bl	8001154 <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d102      	bne.n	800244c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb8>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002446:	4c52      	ldr	r4, [pc, #328]	; (8002590 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1fc>)
 8002448:	2500      	movs	r5, #0
 800244a:	e086      	b.n	800255a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c6>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002452:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002454:	f001 fa36 	bl	80038c4 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8002458:	2300      	movs	r3, #0
 800245a:	657b      	str	r3, [r7, #84]	; 0x54
 800245c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800245e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002460:	429a      	cmp	r2, r3
 8002462:	d275      	bcs.n	8002550 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	edd3 7a00 	vldr	s15, [r3]
 8002470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002474:	ee17 3a90 	vmov	r3, s15
 8002478:	647b      	str	r3, [r7, #68]	; 0x44

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 800247a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800247c:	0c1b      	lsrs	r3, r3, #16
 800247e:	b2db      	uxtb	r3, r3
 8002480:	ee07 3a90 	vmov	s15, r3
 8002484:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002488:	eddf 6a42 	vldr	s13, [pc, #264]	; 8002594 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x200>
 800248c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002490:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8002494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002496:	0a1b      	lsrs	r3, r3, #8
 8002498:	b2db      	uxtb	r3, r3
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024a2:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8002594 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x200>
 80024a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024aa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 80024ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	ee07 3a90 	vmov	s15, r3
 80024b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024ba:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002594 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x200>
 80024be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024c2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            if (channel_count == 3) {
 80024c6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d11b      	bne.n	8002506 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x172>
                output_matrix->buffer[output_ix++] = r;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024d4:	1c59      	adds	r1, r3, #1
 80024d6:	65f9      	str	r1, [r7, #92]	; 0x5c
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024de:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = g;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e6:	1c59      	adds	r1, r3, #1
 80024e8:	65f9      	str	r1, [r7, #92]	; 0x5c
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024f0:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = b;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f8:	1c59      	adds	r1, r3, #1
 80024fa:	65f9      	str	r1, [r7, #92]	; 0x5c
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e020      	b.n	8002548 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b4>
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8002506:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800250a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002598 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x204>
 800250e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002512:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002516:	eddf 6a21 	vldr	s13, [pc, #132]	; 800259c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x208>
 800251a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800251e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002522:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002526:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80025a0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x20c>
 800252a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800252e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002532:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                output_matrix->buffer[output_ix++] = v;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800253c:	1c59      	adds	r1, r3, #1
 800253e:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002546:	601a      	str	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8002548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800254a:	3301      	adds	r3, #1
 800254c:	657b      	str	r3, [r7, #84]	; 0x54
 800254e:	e785      	b.n	800245c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xc8>
            }
        }

        bytes_left -= elements_to_read;
 8002550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
 8002558:	2501      	movs	r5, #1
 800255a:	f107 0314 	add.w	r3, r7, #20
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fe23 	bl	80011aa <_ZN2ei9ei_matrixD1Ev>
 8002564:	2d01      	cmp	r5, #1
 8002566:	d105      	bne.n	8002574 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e0>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8002568:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800256a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800256e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002570:	e74d      	b.n	800240e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x7a>
    }

    return EIDSP_OK;
 8002572:	2400      	movs	r4, #0
}
 8002574:	4623      	mov	r3, r4
 8002576:	4618      	mov	r0, r3
 8002578:	3760      	adds	r7, #96	; 0x60
 800257a:	46bd      	mov	sp, r7
 800257c:	bdb0      	pop	{r4, r5, r7, pc}
 800257e:	bf00      	nop
 8002580:	0801979c 	.word	0x0801979c
 8002584:	080197a8 	.word	0x080197a8
 8002588:	080197c0 	.word	0x080197c0
 800258c:	fffffc14 	.word	0xfffffc14
 8002590:	fffffc16 	.word	0xfffffc16
 8002594:	437f0000 	.word	0x437f0000
 8002598:	3e991687 	.word	0x3e991687
 800259c:	3f1645a2 	.word	0x3f1645a2
 80025a0:	3de978d5 	.word	0x3de978d5
 80025a4:	00000000 	.word	0x00000000

080025a8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf>:

#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1

__attribute__((unused)) int extract_image_features_quantized(signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
 80025a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025ac:	b09e      	sub	sp, #120	; 0x78
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80025c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 80025c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c8:	49c3      	ldr	r1, [pc, #780]	; (80028d8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x330>)
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd fe50 	bl	8000270 <strcmp>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x32>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x34>
 80025da:	2303      	movs	r3, #3
 80025dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	6892      	ldr	r2, [r2, #8]
 80025e8:	fb02 f303 	mul.w	r3, r2, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00f      	beq.n	8002610 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x68>
        ei_printf("out_matrix = %d items\n", static_cast<int>(output_matrix->rows * output_matrix->cols));
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	6892      	ldr	r2, [r2, #8]
 80025f8:	fb02 f303 	mul.w	r3, r2, r3
 80025fc:	4619      	mov	r1, r3
 80025fe:	48b7      	ldr	r0, [pc, #732]	; (80028dc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x334>)
 8002600:	f000 ff47 	bl	8003492 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %d items\n", static_cast<int>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count));
 8002604:	2100      	movs	r1, #0
 8002606:	48b6      	ldr	r0, [pc, #728]	; (80028e0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x338>)
 8002608:	f000 ff43 	bl	8003492 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800260c:	4cb5      	ldr	r4, [pc, #724]	; (80028e4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x33c>)
 800260e:	e189      	b.n	8002924 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x37c>
    }

    size_t output_ix = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	673b      	str	r3, [r7, #112]	; 0x70

    const int32_t iRedToGray = (int32_t)(0.299f * 65536.0f);
 8002614:	f644 438b 	movw	r3, #19595	; 0x4c8b
 8002618:	66fb      	str	r3, [r7, #108]	; 0x6c
    const int32_t iGreenToGray = (int32_t)(0.587f * 65536.0f);
 800261a:	f249 6345 	movw	r3, #38469	; 0x9645
 800261e:	66bb      	str	r3, [r7, #104]	; 0x68
    const int32_t iBlueToGray = (int32_t)(0.114f * 65536.0f);
 8002620:	f641 532f 	movw	r3, #7471	; 0x1d2f
 8002624:	667b      	str	r3, [r7, #100]	; 0x64

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 8002626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800262a:	663b      	str	r3, [r7, #96]	; 0x60
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8002632:	2300      	movs	r3, #0
 8002634:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800263c:	429a      	cmp	r2, r3
 800263e:	f080 8170 	bcs.w	8002922 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x37a>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002648:	d803      	bhi.n	8002652 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xaa>
 800264a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	e001      	b.n	8002656 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xae>
 8002652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002656:	65bb      	str	r3, [r7, #88]	; 0x58

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265a:	461a      	mov	r2, r3
 800265c:	f107 0014 	add.w	r0, r7, #20
 8002660:	2300      	movs	r3, #0
 8002662:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002664:	f7fe fd76 	bl	8001154 <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d102      	bne.n	8002674 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xcc>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800266e:	4c9e      	ldr	r4, [pc, #632]	; (80028e8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x340>)
 8002670:	2500      	movs	r5, #0
 8002672:	e14a      	b.n	800290a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x362>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800267a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800267c:	f001 f922 	bl	80038c4 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8002680:	2300      	movs	r3, #0
 8002682:	657b      	str	r3, [r7, #84]	; 0x54
 8002684:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002688:	429a      	cmp	r2, r3
 800268a:	f080 8139 	bcs.w	8002900 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x358>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	edd3 7a00 	vldr	s15, [r3]
 800269a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800269e:	ee17 3a90 	vmov	r3, s15
 80026a2:	653b      	str	r3, [r7, #80]	; 0x50

            if (channel_count == 3) {
 80026a4:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	f040 80a5 	bne.w	80027f8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x250>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 80026ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b0:	0c1b      	lsrs	r3, r3, #16
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	ee07 3a90 	vmov	s15, r3
 80026b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026bc:	eddf 6a8b 	vldr	s13, [pc, #556]	; 80028ec <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 80026c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026c4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 80026c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	ee07 3a90 	vmov	s15, r3
 80026d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026d6:	eddf 6a85 	vldr	s13, [pc, #532]	; 80028ec <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 80026da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026de:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 80026e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	ee07 3a90 	vmov	s15, r3
 80026ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026ee:	eddf 6a7f 	vldr	s13, [pc, #508]	; 80028ec <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 80026f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026f6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 80026fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80026fc:	f7fd ff2e 	bl	800055c <__aeabi_f2d>
 8002700:	a373      	add	r3, pc, #460	; (adr r3, 80028d0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x328>)
 8002702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002706:	f7fe f8ab 	bl	8000860 <__aeabi_ddiv>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	ec43 2b17 	vmov	d7, r2, r3
 8002712:	eeb0 0a47 	vmov.f32	s0, s14
 8002716:	eef0 0a67 	vmov.f32	s1, s15
 800271a:	f010 ffdd 	bl	80136d8 <round>
 800271e:	ec51 0b10 	vmov	r0, r1, d0
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	4b72      	ldr	r3, [pc, #456]	; (80028f0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x348>)
 8002728:	f7fd fdb8 	bl	800029c <__aeabi_dsub>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4690      	mov	r8, r2
 8002732:	4699      	mov	r9, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800273a:	1c59      	adds	r1, r3, #1
 800273c:	6739      	str	r1, [r7, #112]	; 0x70
 800273e:	18d5      	adds	r5, r2, r3
 8002740:	4640      	mov	r0, r8
 8002742:	4649      	mov	r1, r9
 8002744:	f7fe fa12 	bl	8000b6c <__aeabi_d2iz>
 8002748:	4603      	mov	r3, r0
 800274a:	b25b      	sxtb	r3, r3
 800274c:	702b      	strb	r3, [r5, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 800274e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002750:	f7fd ff04 	bl	800055c <__aeabi_f2d>
 8002754:	a35e      	add	r3, pc, #376	; (adr r3, 80028d0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x328>)
 8002756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275a:	f7fe f881 	bl	8000860 <__aeabi_ddiv>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	ec43 2b17 	vmov	d7, r2, r3
 8002766:	eeb0 0a47 	vmov.f32	s0, s14
 800276a:	eef0 0a67 	vmov.f32	s1, s15
 800276e:	f010 ffb3 	bl	80136d8 <round>
 8002772:	ec51 0b10 	vmov	r0, r1, d0
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	4b5d      	ldr	r3, [pc, #372]	; (80028f0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x348>)
 800277c:	f7fd fd8e 	bl	800029c <__aeabi_dsub>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4690      	mov	r8, r2
 8002786:	4699      	mov	r9, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800278e:	1c59      	adds	r1, r3, #1
 8002790:	6739      	str	r1, [r7, #112]	; 0x70
 8002792:	18d5      	adds	r5, r2, r3
 8002794:	4640      	mov	r0, r8
 8002796:	4649      	mov	r1, r9
 8002798:	f7fe f9e8 	bl	8000b6c <__aeabi_d2iz>
 800279c:	4603      	mov	r3, r0
 800279e:	b25b      	sxtb	r3, r3
 80027a0:	702b      	strb	r3, [r5, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 80027a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80027a4:	f7fd feda 	bl	800055c <__aeabi_f2d>
 80027a8:	a349      	add	r3, pc, #292	; (adr r3, 80028d0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x328>)
 80027aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ae:	f7fe f857 	bl	8000860 <__aeabi_ddiv>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	ec43 2b17 	vmov	d7, r2, r3
 80027ba:	eeb0 0a47 	vmov.f32	s0, s14
 80027be:	eef0 0a67 	vmov.f32	s1, s15
 80027c2:	f010 ff89 	bl	80136d8 <round>
 80027c6:	ec51 0b10 	vmov	r0, r1, d0
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	4b48      	ldr	r3, [pc, #288]	; (80028f0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x348>)
 80027d0:	f7fd fd64 	bl	800029c <__aeabi_dsub>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4690      	mov	r8, r2
 80027da:	4699      	mov	r9, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027e2:	1c59      	adds	r1, r3, #1
 80027e4:	6739      	str	r1, [r7, #112]	; 0x70
 80027e6:	18d5      	adds	r5, r2, r3
 80027e8:	4640      	mov	r0, r8
 80027ea:	4649      	mov	r1, r9
 80027ec:	f7fe f9be 	bl	8000b6c <__aeabi_d2iz>
 80027f0:	4603      	mov	r3, r0
 80027f2:	b25b      	sxtb	r3, r3
 80027f4:	702b      	strb	r3, [r5, #0]
 80027f6:	e067      	b.n	80028c8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x320>
                    else if (gray > 127) gray = 127;
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 80027f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027fa:	0c1b      	lsrs	r3, r3, #16
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002806:	eddf 6a39 	vldr	s13, [pc, #228]	; 80028ec <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 800280a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800280e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8002812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	b2db      	uxtb	r3, r3
 8002818:	ee07 3a90 	vmov	s15, r3
 800281c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002820:	eddf 6a32 	vldr	s13, [pc, #200]	; 80028ec <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 8002824:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002828:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 800282c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800282e:	b2db      	uxtb	r3, r3
 8002830:	ee07 3a90 	vmov	s15, r3
 8002834:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002838:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80028ec <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 800283c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002840:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8002844:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002848:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80028f4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x34c>
 800284c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002850:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002854:	eddf 6a28 	vldr	s13, [pc, #160]	; 80028f8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x350>
 8002858:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800285c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002860:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002864:	eddf 6a25 	vldr	s13, [pc, #148]	; 80028fc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x354>
 8002868:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800286c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002870:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8002874:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002876:	f7fd fe71 	bl	800055c <__aeabi_f2d>
 800287a:	a315      	add	r3, pc, #84	; (adr r3, 80028d0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x328>)
 800287c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002880:	f7fd ffee 	bl	8000860 <__aeabi_ddiv>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	ec43 2b17 	vmov	d7, r2, r3
 800288c:	eeb0 0a47 	vmov.f32	s0, s14
 8002890:	eef0 0a67 	vmov.f32	s1, s15
 8002894:	f010 ff20 	bl	80136d8 <round>
 8002898:	ec51 0b10 	vmov	r0, r1, d0
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x348>)
 80028a2:	f7fd fcfb 	bl	800029c <__aeabi_dsub>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4690      	mov	r8, r2
 80028ac:	4699      	mov	r9, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028b4:	1c59      	adds	r1, r3, #1
 80028b6:	6739      	str	r1, [r7, #112]	; 0x70
 80028b8:	18d5      	adds	r5, r2, r3
 80028ba:	4640      	mov	r0, r8
 80028bc:	4649      	mov	r1, r9
 80028be:	f7fe f955 	bl	8000b6c <__aeabi_d2iz>
 80028c2:	4603      	mov	r3, r0
 80028c4:	b25b      	sxtb	r3, r3
 80028c6:	702b      	strb	r3, [r5, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 80028c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ca:	3301      	adds	r3, #1
 80028cc:	657b      	str	r3, [r7, #84]	; 0x54
 80028ce:	e6d9      	b.n	8002684 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xdc>
 80028d0:	60000000 	.word	0x60000000
 80028d4:	401ad4d2 	.word	0x401ad4d2
 80028d8:	0801979c 	.word	0x0801979c
 80028dc:	080197a8 	.word	0x080197a8
 80028e0:	080197c0 	.word	0x080197c0
 80028e4:	fffffc14 	.word	0xfffffc14
 80028e8:	fffffc16 	.word	0xfffffc16
 80028ec:	437f0000 	.word	0x437f0000
 80028f0:	40600000 	.word	0x40600000
 80028f4:	3e991687 	.word	0x3e991687
 80028f8:	3f1645a2 	.word	0x3f1645a2
 80028fc:	3de978d5 	.word	0x3de978d5
                }
            }
        }

        bytes_left -= elements_to_read;
 8002900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
 8002908:	2501      	movs	r5, #1
 800290a:	f107 0314 	add.w	r3, r7, #20
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe fc4b 	bl	80011aa <_ZN2ei9ei_matrixD1Ev>
 8002914:	2d01      	cmp	r5, #1
 8002916:	d105      	bne.n	8002924 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x37c>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8002918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800291a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800291e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002920:	e689      	b.n	8002636 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x8e>
    }

    return EIDSP_OK;
 8002922:	2400      	movs	r4, #0
}
 8002924:	4623      	mov	r3, r4
 8002926:	4618      	mov	r0, r3
 8002928:	3778      	adds	r7, #120	; 0x78
 800292a:	46bd      	mov	sp, r7
 800292c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002930 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhj>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count):
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	330c      	adds	r3, #12
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fafc 	bl	8001f52 <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	68b9      	ldr	r1, [r7, #8]
 800297c:	f000 f82a 	bl	80029d4 <_ZN14SignalWithAxes8get_dataEjjPf>
 8002980:	4603      	mov	r3, r0
        };
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 800298a:	b580      	push	{r7, lr}
 800298c:	b084      	sub	sp, #16
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d102      	bne.n	80029a0 <_ZN14SignalWithAxes10get_signalEv+0x16>
            return this->_original_signal;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	e015      	b.n	80029cc <_ZN14SignalWithAxes10get_signalEv+0x42>
        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6892      	ldr	r2, [r2, #8]
 80029aa:	fb03 f202 	mul.w	r2, r3, r2
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	61da      	str	r2, [r3, #28]
        };
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f103 020c 	add.w	r2, r3, #12
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	f107 030c 	add.w	r3, r7, #12
 80029c0:	4619      	mov	r1, r3
 80029c2:	4610      	mov	r0, r2
 80029c4:	f000 ffd9 	bl	800397a <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>
#endif
        return &wrapped_signal;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	330c      	adds	r3, #12
    }
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	; 0x28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ec:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f8:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	623b      	str	r3, [r7, #32]
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	4413      	add	r3, r2
 8002a08:	6a3a      	ldr	r2, [r7, #32]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d228      	bcs.n	8002a60 <_ZN14SignalWithAxes8get_dataEjjPf+0x8c>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d21d      	bcs.n	8002a58 <_ZN14SignalWithAxes8get_dataEjjPf+0x84>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	4413      	add	r3, r2
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	18d1      	adds	r1, r2, r3
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	627a      	str	r2, [r7, #36]	; 0x24
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f000 ff40 	bl	80038c4 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002a44:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <_ZN14SignalWithAxes8get_dataEjjPf+0x7c>
                    return r;
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	e008      	b.n	8002a62 <_ZN14SignalWithAxes8get_dataEjjPf+0x8e>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	3301      	adds	r3, #1
 8002a54:	61fb      	str	r3, [r7, #28]
 8002a56:	e7dc      	b.n	8002a12 <_ZN14SignalWithAxes8get_dataEjjPf+0x3e>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	623b      	str	r3, [r7, #32]
 8002a5e:	e7d0      	b.n	8002a02 <_ZN14SignalWithAxes8get_dataEjjPf+0x2e>
                }
            }
        }

        return 0;
 8002a60:	2300      	movs	r3, #0
    }
 8002a62:	4618      	mov	r0, r3
 8002a64:	3728      	adds	r7, #40	; 0x28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb>:
#else

/**
 * Fill the result structure from a quantized output tensor
 */
__attribute__((unused)) static void fill_result_struct_i8(ei_impulse_result_t *result, int8_t *data, float zero_point, float scale, bool debug) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6178      	str	r0, [r7, #20]
 8002a74:	6139      	str	r1, [r7, #16]
 8002a76:	ed87 0a03 	vstr	s0, [r7, #12]
 8002a7a:	edc7 0a02 	vstr	s1, [r7, #8]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	71fb      	strb	r3, [r7, #7]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d137      	bne.n	8002afc <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb+0x90>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	4413      	add	r3, r2
 8002a92:	f993 3000 	ldrsb.w	r3, [r3]
 8002a96:	ee07 3a90 	vmov	s15, r3
 8002a9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa6:	ed97 7a02 	vldr	s14, [r7, #8]
 8002aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aae:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00e      	beq.n	8002ad6 <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb+0x6a>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 8002ab8:	4a12      	ldr	r2, [pc, #72]	; (8002b04 <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb+0x98>)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4811      	ldr	r0, [pc, #68]	; (8002b08 <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb+0x9c>)
 8002ac4:	f000 fce5 	bl	8003492 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8002ac8:	ed97 0a06 	vldr	s0, [r7, #24]
 8002acc:	f00b fb4c 	bl	800e168 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8002ad0:	480e      	ldr	r0, [pc, #56]	; (8002b0c <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb+0xa0>)
 8002ad2:	f000 fcde 	bl	8003492 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 8002ad6:	4a0b      	ldr	r2, [pc, #44]	; (8002b04 <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb+0x98>)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	69fa      	ldr	r2, [r7, #28]
 8002ae2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	3304      	adds	r3, #4
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	3301      	adds	r3, #1
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	e7c4      	b.n	8002a86 <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb+0x1a>
    }
}
 8002afc:	bf00      	nop
 8002afe:	3720      	adds	r7, #32
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000000 	.word	0x20000000
 8002b08:	080197f0 	.word	0x080197f0
 8002b0c:	080197f8 	.word	0x080197f8

08002b10 <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb>:

/**
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static void fill_result_struct_f32(ei_impulse_result_t *result, float *data, bool debug) {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	71fb      	strb	r3, [r7, #7]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d12a      	bne.n	8002b7e <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb+0x6e>
        float value = data[ix];
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	4413      	add	r3, r2
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	613b      	str	r3, [r7, #16]

        if (debug) {
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00e      	beq.n	8002b58 <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb+0x48>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 8002b3a:	4a13      	ldr	r2, [pc, #76]	; (8002b88 <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb+0x78>)
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b42:	4619      	mov	r1, r3
 8002b44:	4811      	ldr	r0, [pc, #68]	; (8002b8c <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb+0x7c>)
 8002b46:	f000 fca4 	bl	8003492 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8002b4a:	ed97 0a04 	vldr	s0, [r7, #16]
 8002b4e:	f00b fb0b 	bl	800e168 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8002b52:	480f      	ldr	r0, [pc, #60]	; (8002b90 <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb+0x80>)
 8002b54:	f000 fc9d 	bl	8003492 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 8002b58:	4a0b      	ldr	r2, [pc, #44]	; (8002b88 <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb+0x78>)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3304      	adds	r3, #4
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	e7d1      	b.n	8002b22 <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb+0x12>
    }
}
 8002b7e:	bf00      	nop
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000000 	.word	0x20000000
 8002b8c:	080197f0 	.word	0x080197f0
 8002b90:	080197f8 	.word	0x080197f8

08002b94 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE>:
static EI_IMPULSE_ERROR inference_tflite_setup(uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
#if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
    TfLiteTensor** output_labels,
    TfLiteTensor** output_scores,
#endif
    ei_unique_ptr_t& p_tensor_arena) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	603b      	str	r3, [r7, #0]
    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
 8002ba2:	483f      	ldr	r0, [pc, #252]	; (8002ca0 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x10c>)
 8002ba4:	f00e fa34 	bl	8011010 <_Z18trained_model_initPFPvjjE>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	75fb      	strb	r3, [r7, #23]
    if (init_status != kTfLiteOk) {
 8002bac:	7dfb      	ldrb	r3, [r7, #23]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x2e>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	483b      	ldr	r0, [pc, #236]	; (8002ca4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x110>)
 8002bb8:	f000 fc6b 	bl	8003492 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 8002bbc:	f06f 0305 	mvn.w	r3, #5
 8002bc0:	e06a      	b.n	8002c98 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x104>
    }

    *ctx_start_us = ei_read_timer_us();
 8002bc2:	f00b fabd 	bl	800e140 <_Z16ei_read_timer_usv>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	68f9      	ldr	r1, [r7, #12]
 8002bcc:	e9c1 2300 	strd	r2, r3, [r1]

    static bool tflite_first_run = true;

    *input = trained_model_input(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f00e fc4f 	bl	8011474 <_Z19trained_model_inputi>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	601a      	str	r2, [r3, #0]
    *output = trained_model_output(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f00e fc5b 	bl	8011498 <_Z20trained_model_outputi>
 8002be2:	4602      	mov	r2, r0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	601a      	str	r2, [r3, #0]
    *output_scores = trained_model_output(EI_CLASSIFIER_TFLITE_OUTPUT_SCORE_TENSOR);
    *output_labels = trained_model_output(EI_CLASSIFIER_TFLITE_OUTPUT_LABELS_TENSOR);
#endif // EI_CLASSIFIER_OBJECT_DETECTION

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 8002be8:	4b2f      	ldr	r3, [pc, #188]	; (8002ca8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x114>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d052      	beq.n	8002c96 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x102>
        assert((*input)->type == EI_CLASSIFIER_TFLITE_INPUT_DATATYPE);
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b09      	cmp	r3, #9
 8002bf8:	d005      	beq.n	8002c06 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x72>
 8002bfa:	4b2c      	ldr	r3, [pc, #176]	; (8002cac <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x118>)
 8002bfc:	4a2c      	ldr	r2, [pc, #176]	; (8002cb0 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x11c>)
 8002bfe:	2163      	movs	r1, #99	; 0x63
 8002c00:	482c      	ldr	r0, [pc, #176]	; (8002cb4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x120>)
 8002c02:	f011 fe9d 	bl	8014940 <__assert_func>
        assert((*output)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b09      	cmp	r3, #9
 8002c0e:	d005      	beq.n	8002c1c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x88>
 8002c10:	4b29      	ldr	r3, [pc, #164]	; (8002cb8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x124>)
 8002c12:	4a27      	ldr	r2, [pc, #156]	; (8002cb0 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x11c>)
 8002c14:	2164      	movs	r1, #100	; 0x64
 8002c16:	4827      	ldr	r0, [pc, #156]	; (8002cb4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x120>)
 8002c18:	f011 fe92 	bl	8014940 <__assert_func>
        assert((*output_scores)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
        assert((*output_labels)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
#endif
#if defined(EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) || defined(EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED)
        if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) {
            assert((*input)->params.scale == EI_CLASSIFIER_TFLITE_INPUT_SCALE);
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c24:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002cbc <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x128>
 8002c28:	eef4 7a47 	vcmp.f32	s15, s14
 8002c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c30:	d005      	beq.n	8002c3e <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0xaa>
 8002c32:	4b23      	ldr	r3, [pc, #140]	; (8002cc0 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x12c>)
 8002c34:	4a1e      	ldr	r2, [pc, #120]	; (8002cb0 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x11c>)
 8002c36:	216b      	movs	r1, #107	; 0x6b
 8002c38:	481e      	ldr	r0, [pc, #120]	; (8002cb4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x120>)
 8002c3a:	f011 fe81 	bl	8014940 <__assert_func>
            assert((*input)->params.zero_point == EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8002c48:	d005      	beq.n	8002c56 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0xc2>
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x130>)
 8002c4c:	4a18      	ldr	r2, [pc, #96]	; (8002cb0 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x11c>)
 8002c4e:	216c      	movs	r1, #108	; 0x6c
 8002c50:	4818      	ldr	r0, [pc, #96]	; (8002cb4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x120>)
 8002c52:	f011 fe75 	bl	8014940 <__assert_func>
        }
        if (EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED) {
            assert((*output)->params.scale == EI_CLASSIFIER_TFLITE_OUTPUT_SCALE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c5e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002cc8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x134>
 8002c62:	eef4 7a47 	vcmp.f32	s15, s14
 8002c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6a:	d005      	beq.n	8002c78 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0xe4>
 8002c6c:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x138>)
 8002c6e:	4a10      	ldr	r2, [pc, #64]	; (8002cb0 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x11c>)
 8002c70:	216f      	movs	r1, #111	; 0x6f
 8002c72:	4810      	ldr	r0, [pc, #64]	; (8002cb4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x120>)
 8002c74:	f011 fe64 	bl	8014940 <__assert_func>
            assert((*output)->params.zero_point == EI_CLASSIFIER_TFLITE_OUTPUT_ZEROPOINT);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f113 0f79 	cmn.w	r3, #121	; 0x79
 8002c82:	d005      	beq.n	8002c90 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0xfc>
 8002c84:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x13c>)
 8002c86:	4a0a      	ldr	r2, [pc, #40]	; (8002cb0 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x11c>)
 8002c88:	2170      	movs	r1, #112	; 0x70
 8002c8a:	480a      	ldr	r0, [pc, #40]	; (8002cb4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x120>)
 8002c8c:	f011 fe58 	bl	8014940 <__assert_func>
        }
#endif
        tflite_first_run = false;
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x114>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	0800125d 	.word	0x0800125d
 8002ca4:	080197fc 	.word	0x080197fc
 8002ca8:	2000002c 	.word	0x2000002c
 8002cac:	08019830 	.word	0x08019830
 8002cb0:	08019868 	.word	0x08019868
 8002cb4:	080198d0 	.word	0x080198d0
 8002cb8:	08019960 	.word	0x08019960
 8002cbc:	40d6a693 	.word	0x40d6a693
 8002cc0:	08019998 	.word	0x08019998
 8002cc4:	080199d4 	.word	0x080199d4
 8002cc8:	4001ea83 	.word	0x4001ea83
 8002ccc:	08019a18 	.word	0x08019a18
 8002cd0:	08019a58 	.word	0x08019a58

08002cd4 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb>:
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
#endif
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 8002cd4:	b5b0      	push	{r4, r5, r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
 8002ce0:	603b      	str	r3, [r7, #0]
    if(trained_model_invoke() != kTfLiteOk) {
 8002ce2:	f00e fbeb 	bl	80114bc <_Z20trained_model_invokev>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf14      	ite	ne
 8002cec:	2301      	movne	r3, #1
 8002cee:	2300      	moveq	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0x28>
        return EI_IMPULSE_TFLITE_ERROR;
 8002cf6:	f06f 0302 	mvn.w	r3, #2
 8002cfa:	e060      	b.n	8002dbe <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0xea>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 8002cfc:	f00b fa20 	bl	800e140 <_Z16ei_read_timer_usv>
 8002d00:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 8002d04:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d0c:	1a84      	subs	r4, r0, r2
 8002d0e:	eb61 0503 	sbc.w	r5, r1, r3
 8002d12:	4622      	mov	r2, r4
 8002d14:	462b      	mov	r3, r5
 8002d16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d18:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002d22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	f7fd ffb7 	bl	8000c9c <__aeabi_ldivmod>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	619a      	str	r2, [r3, #24]

    // Read the predicted y value from the model's output tensor
    if (debug) {
 8002d36:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0x76>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	4619      	mov	r1, r3
 8002d44:	4820      	ldr	r0, [pc, #128]	; (8002dc8 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0xf4>)
 8002d46:	f000 fba4 	bl	8003492 <_Z9ei_printfPKcz>
    }
#elif EI_CLASSIFIER_OBJECT_DETECTION == 1
    fill_result_struct_f32(result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
    // fill_result_struct_f32(result, output->data.f, scores_tensor->data.f, labels_tensor->data.f, debug);
#else
    bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b09      	cmp	r3, #9
 8002d50:	bf0c      	ite	eq
 8002d52:	2301      	moveq	r3, #1
 8002d54:	2300      	movne	r3, #0
 8002d56:	75fb      	strb	r3, [r7, #23]
    if (int8_output) {
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d015      	beq.n	8002d8a <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0xb6>
        fill_result_struct_i8(result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6859      	ldr	r1, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	ee07 3a90 	vmov	s15, r3
 8002d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	ed93 7a03 	vldr	s14, [r3, #12]
 8002d74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002d78:	461a      	mov	r2, r3
 8002d7a:	eef0 0a47 	vmov.f32	s1, s14
 8002d7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d84:	f7ff fe72 	bl	8002a6c <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb>
 8002d88:	e007      	b.n	8002d9a <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0xc6>
    }
    else {
        fill_result_struct_f32(result, output->data.f, debug);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002d92:	4619      	mov	r1, r3
 8002d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d96:	f7ff febb 	bl	8002b10 <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb>
    }
#endif

    trained_model_reset(ei_aligned_free);
 8002d9a:	480c      	ldr	r0, [pc, #48]	; (8002dcc <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0xf8>)
 8002d9c:	f00e fbc4 	bl	8011528 <_Z19trained_model_resetPFvPvE>

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8002da0:	f00b f9c6 	bl	800e130 <_Z29ei_run_impulse_check_canceledv>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f113 0f02 	cmn.w	r3, #2
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0xe8>
        return EI_IMPULSE_CANCELED;
 8002db6:	f06f 0301 	mvn.w	r3, #1
 8002dba:	e000      	b.n	8002dbe <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0xea>
    }

    return EI_IMPULSE_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3720      	adds	r7, #32
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	08019aa0 	.word	0x08019aa0
 8002dcc:	080012e1 	.word	0x080012e1

08002dd0 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference(
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8002dd0:	b5b0      	push	{r4, r5, r7, lr}
 8002dd2:	b092      	sub	sp, #72	; 0x48
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	71fb      	strb	r3, [r7, #7]
    TfLiteTensor* output;
#if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;
#endif
    uint64_t ctx_start_us = ei_read_timer_us();
 8002dde:	f00b f9af 	bl	800e140 <_Z16ei_read_timer_usv>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 8002dea:	4b4e      	ldr	r3, [pc, #312]	; (8002f24 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x154>)
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dee:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002df2:	f107 0310 	add.w	r3, r7, #16
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fdee 	bl	80039da <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_us, &input, &output,
 8002dfe:	f107 0310 	add.w	r3, r7, #16
 8002e02:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002e06:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002e0a:	f107 0018 	add.w	r0, r7, #24
 8002e0e:	f7ff fec1 	bl	8002b94 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        &output_labels,
        &output_scores,
#endif
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 8002e18:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x56>
        return init_res;
 8002e20:	f997 403b 	ldrsb.w	r4, [r7, #59]	; 0x3b
 8002e24:	e073      	b.n	8002f0e <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x13e>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 8002e26:	f107 0310 	add.w	r3, r7, #16
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fe0b 	bl	8003a46 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8002e30:	6378      	str	r0, [r7, #52]	; 0x34
        else {
            input->data.f[ix] = fmatrix->buffer[ix];
        }
    }
#else
    bool int8_input = input->type == TfLiteType::kTfLiteInt8;
 8002e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b09      	cmp	r3, #9
 8002e38:	bf0c      	ite	eq
 8002e3a:	2301      	moveq	r3, #1
 8002e3c:	2300      	movne	r3, #0
 8002e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8002e42:	2300      	movs	r3, #0
 8002e44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	6892      	ldr	r2, [r2, #8]
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d239      	bcs.n	8002ecc <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0xfc>
        // Quantize the input if it is int8
        if (int8_input) {
 8002e58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d025      	beq.n	8002eac <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0xdc>
            input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	ed93 7a00 	vldr	s14, [r3]
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e74:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e78:	eeb0 0a66 	vmov.f32	s0, s13
 8002e7c:	f7fe fa54 	bl	8001328 <_ZSt5roundf>
 8002e80:	eeb0 7a40 	vmov.f32	s14, s0
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	ee07 3a90 	vmov	s15, r3
 8002e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e9a:	4413      	add	r3, r2
 8002e9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ea0:	edc7 7a00 	vstr	s15, [r7]
 8002ea4:	783a      	ldrb	r2, [r7, #0]
 8002ea6:	b252      	sxtb	r2, r2
 8002ea8:	701a      	strb	r2, [r3, #0]
 8002eaa:	e00b      	b.n	8002ec4 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0xf4>
            // printf("float %ld : %d\r\n", ix, input->data.int8[ix]);
        } else {
            input->data.f[ix] = fmatrix->buffer[ix];
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	441a      	add	r2, r3
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	6859      	ldr	r1, [r3, #4]
 8002eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	601a      	str	r2, [r3, #0]
    for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8002ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eca:	e7bc      	b.n	8002e46 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x76>
        }
    }
#endif

    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
 8002ecc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	9301      	str	r3, [sp, #4]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002edc:	f7ff fefa 	bl	8002cd4 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        output_labels,
        output_scores,
#endif
        tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8002ee6:	f00b f92b 	bl	800e140 <_Z16ei_read_timer_usv>
 8002eea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eee:	1a84      	subs	r4, r0, r2
 8002ef0:	eb61 0503 	sbc.w	r5, r1, r3
 8002ef4:	4622      	mov	r2, r4
 8002ef6:	462b      	mov	r3, r5
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    if (run_res != EI_IMPULSE_OK) {
 8002efe:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x13c>
        return run_res;
 8002f06:	f997 4032 	ldrsb.w	r4, [r7, #50]	; 0x32
 8002f0a:	e000      	b.n	8002f0e <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x13e>
    }

    return EI_IMPULSE_OK;
 8002f0c:	2400      	movs	r4, #0
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 8002f0e:	f107 0310 	add.w	r3, r7, #16
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fd76 	bl	8003a04 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 8002f18:	4623      	mov	r3, r4
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3740      	adds	r7, #64	; 0x40
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bdb0      	pop	{r4, r5, r7, pc}
 8002f22:	bf00      	nop
 8002f24:	080012e1 	.word	0x080012e1

08002f28 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8002f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f2c:	b099      	sub	sp, #100	; 0x64
 8002f2e:	af02      	add	r7, sp, #8
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	4613      	mov	r3, r2
 8002f36:	71fb      	strb	r3, [r7, #7]
    memset(result, 0, sizeof(ei_impulse_result_t));
 8002f38:	2240      	movs	r2, #64	; 0x40
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	68b8      	ldr	r0, [r7, #8]
 8002f3e:	f011 fd9d 	bl	8014a7c <memset>
    TfLiteTensor* output;
#if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;
#endif
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 8002f42:	4b73      	ldr	r3, [pc, #460]	; (8003110 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1e8>)
 8002f44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f46:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002f4a:	f107 0320 	add.w	r3, r7, #32
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fd42 	bl	80039da <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_us, &input, &output,
 8002f56:	f107 0320 	add.w	r3, r7, #32
 8002f5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f5e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002f62:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002f66:	f7ff fe15 	bl	8002b94 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    #if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
        &output_labels,
        &output_scores,
    #endif
        p_tensor_arena);
    if (init_res != EI_IMPULSE_OK) {
 8002f70:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x56>
        return init_res;
 8002f78:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 8002f7c:	e0b6      	b.n	80030ec <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1c4>
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b09      	cmp	r3, #9
 8002f84:	d002      	beq.n	8002f8c <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x64>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8002f86:	f06f 0408 	mvn.w	r4, #8
 8002f8a:	e0af      	b.n	80030ec <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1c4>
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 8002f8c:	f00b f8d8 	bl	800e140 <_Z16ei_read_timer_usv>
 8002f90:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE, input->data.int8);
 8002f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f107 0010 	add.w	r0, r7, #16
 8002f9c:	2207      	movs	r2, #7
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	f7fe f919 	bl	80011d6 <_ZN2ei12ei_matrix_i8C1EmmPa>

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(signal, &features_matrix, ei_dsp_blocks[0].config, EI_CLASSIFIER_FREQUENCY);
 8002fa4:	4b5b      	ldr	r3, [pc, #364]	; (8003114 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ec>)
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	f107 0310 	add.w	r3, r7, #16
 8002fac:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f7ff faf8 	bl	80025a8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf>
 8002fb8:	6478      	str	r0, [r7, #68]	; 0x44
    if (ret != EIDSP_OK) {
 8002fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d006      	beq.n	8002fce <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0xa6>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8002fc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002fc2:	4855      	ldr	r0, [pc, #340]	; (8003118 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f0>)
 8002fc4:	f000 fa65 	bl	8003492 <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 8002fc8:	f06f 0404 	mvn.w	r4, #4
 8002fcc:	e089      	b.n	80030e2 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ba>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8002fce:	f00b f8af 	bl	800e130 <_Z29ei_run_impulse_check_canceledv>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f113 0f02 	cmn.w	r3, #2
 8002fd8:	bf0c      	ite	eq
 8002fda:	2301      	moveq	r3, #1
 8002fdc:	2300      	movne	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0xc2>
        return EI_IMPULSE_CANCELED;
 8002fe4:	f06f 0401 	mvn.w	r4, #1
 8002fe8:	e07b      	b.n	80030e2 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ba>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8002fea:	f00b f8a9 	bl	800e140 <_Z16ei_read_timer_usv>
 8002fee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ff2:	ebb0 0802 	subs.w	r8, r0, r2
 8002ff6:	eb61 0903 	sbc.w	r9, r1, r3
 8002ffa:	4642      	mov	r2, r8
 8002ffc:	464b      	mov	r3, r9
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	e9c1 2308 	strd	r2, r3, [r1, #32]
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800300a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	f7fd fe43 	bl	8000c9c <__aeabi_ldivmod>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	615a      	str	r2, [r3, #20]

    if (debug) {
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d02e      	beq.n	8003082 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x15a>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	4619      	mov	r1, r3
 800302a:	483c      	ldr	r0, [pc, #240]	; (800311c <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>)
 800302c:	f000 fa31 	bl	8003492 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8003030:	2300      	movs	r3, #0
 8003032:	657b      	str	r3, [r7, #84]	; 0x54
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003038:	429a      	cmp	r2, r3
 800303a:	d21f      	bcs.n	800307c <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x154>
            ei_printf_float((features_matrix.buffer[ix] - EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT) * EI_CLASSIFIER_TFLITE_INPUT_SCALE);
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003040:	4413      	add	r3, r2
 8003042:	f993 3000 	ldrsb.w	r3, [r3]
 8003046:	3380      	adds	r3, #128	; 0x80
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd fa75 	bl	8000538 <__aeabi_i2d>
 800304e:	a32e      	add	r3, pc, #184	; (adr r3, 8003108 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1e0>)
 8003050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003054:	f7fd fada 	bl	800060c <__aeabi_dmul>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	f7fd fdcc 	bl	8000bfc <__aeabi_d2f>
 8003064:	4603      	mov	r3, r0
 8003066:	ee00 3a10 	vmov	s0, r3
 800306a:	f00b f87d 	bl	800e168 <_Z15ei_printf_floatf>
            ei_printf(" ");
 800306e:	482c      	ldr	r0, [pc, #176]	; (8003120 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f8>)
 8003070:	f000 fa0f 	bl	8003492 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8003074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003076:	3301      	adds	r3, #1
 8003078:	657b      	str	r3, [r7, #84]	; 0x54
 800307a:	e7db      	b.n	8003034 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x10c>
        }
        ei_printf("\n");
 800307c:	4829      	ldr	r0, [pc, #164]	; (8003124 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1fc>)
 800307e:	f000 fa08 	bl	8003492 <_Z9ei_printfPKcz>
    }

    ctx_start_us = ei_read_timer_us();
 8003082:	f00b f85d 	bl	800e140 <_Z16ei_read_timer_usv>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
 800308e:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8003092:	6abe      	ldr	r6, [r7, #40]	; 0x28
    #if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
        output_labels,
        output_scores,
    #endif
        static_cast<uint8_t*>(p_tensor_arena.get()),
 8003094:	f107 0320 	add.w	r3, r7, #32
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fcd4 	bl	8003a46 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 800309e:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	9301      	str	r3, [sp, #4]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	4613      	mov	r3, r2
 80030aa:	4632      	mov	r2, r6
 80030ac:	4640      	mov	r0, r8
 80030ae:	4649      	mov	r1, r9
 80030b0:	f7ff fe10 	bl	8002cd4 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        result, debug);

    if (run_res != EI_IMPULSE_OK) {
 80030ba:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1a0>
        return run_res;
 80030c2:	f997 4043 	ldrsb.w	r4, [r7, #67]	; 0x43
 80030c6:	e00c      	b.n	80030e2 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ba>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 80030c8:	f00b f83a 	bl	800e140 <_Z16ei_read_timer_usv>
 80030cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80030d0:	1a84      	subs	r4, r0, r2
 80030d2:	eb61 0503 	sbc.w	r5, r1, r3
 80030d6:	4622      	mov	r2, r4
 80030d8:	462b      	mov	r3, r5
 80030da:	68b9      	ldr	r1, [r7, #8]
 80030dc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    return EI_IMPULSE_OK;
 80030e0:	2400      	movs	r4, #0
    ei::matrix_i8_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE, input->data.int8);
 80030e2:	f107 0310 	add.w	r3, r7, #16
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe f89f 	bl	800122a <_ZN2ei12ei_matrix_i8D1Ev>
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 80030ec:	f107 0320 	add.w	r3, r7, #32
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fc87 	bl	8003a04 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 80030f6:	4623      	mov	r3, r4
 80030f8:	4618      	mov	r0, r3
 80030fa:	375c      	adds	r7, #92	; 0x5c
 80030fc:	46bd      	mov	sp, r7
 80030fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003102:	bf00      	nop
 8003104:	f3af 8000 	nop.w
 8003108:	60000000 	.word	0x60000000
 800310c:	401ad4d2 	.word	0x401ad4d2
 8003110:	080012e1 	.word	0x080012e1
 8003114:	20000018 	.word	0x20000018
 8003118:	08019ac0 	.word	0x08019ac0
 800311c:	08019ae8 	.word	0x08019ae8
 8003120:	08019afc 	.word	0x08019afc
 8003124:	080197f8 	.word	0x080197f8

08003128 <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	330c      	adds	r3, #12
 8003134:	4618      	mov	r0, r3
 8003136:	f7fe ff19 	bl	8001f6c <_ZN2ei11ei_signal_tD1Ev>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <run_inference>:
 */
extern "C" EI_IMPULSE_ERROR run_inference(
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	4613      	mov	r3, r2
 8003150:	71fb      	strb	r3, [r7, #7]
#if (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE_FULL)

    EI_IMPULSE_ERROR run_res = run_nn_inference(fmatrix, result, debug);
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	461a      	mov	r2, r3
 8003156:	68b9      	ldr	r1, [r7, #8]
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f7ff fe39 	bl	8002dd0 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb>
 800315e:	4603      	mov	r3, r0
 8003160:	75fb      	strb	r3, [r7, #23]
    if (run_res != EI_IMPULSE_OK) {
 8003162:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <run_inference+0x2c>
        return run_res;
 800316a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800316e:	e00e      	b.n	800318e <run_inference+0x4a>
        }
    }

#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8003170:	f00a ffde 	bl	800e130 <_Z29ei_run_impulse_check_canceledv>
 8003174:	4603      	mov	r3, r0
 8003176:	f113 0f02 	cmn.w	r3, #2
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <run_inference+0x48>
        return EI_IMPULSE_CANCELED;
 8003186:	f06f 0301 	mvn.w	r3, #1
 800318a:	e000      	b.n	800318e <run_inference+0x4a>
    }

    return EI_IMPULSE_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8003198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800319c:	b0a1      	sub	sp, #132	; 0x84
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	4613      	mov	r3, r2
 80031a6:	71fb      	strb	r3, [r7, #7]
 80031a8:	2600      	movs	r6, #0
#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1 && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TENSAIFLOW)

    // Shortcut for quantized image models
    if (can_run_classifier_image_quantized() == EI_IMPULSE_OK) {
 80031aa:	f000 f8fd 	bl	80033a8 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bf0c      	ite	eq
 80031b4:	2301      	moveq	r3, #1
 80031b6:	2300      	movne	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d008      	beq.n	80031d0 <run_classifier+0x38>
        return run_classifier_image_quantized(signal, result, debug);
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	461a      	mov	r2, r3
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f903 	bl	80033d0 <run_classifier_image_quantized>
 80031ca:	4603      	mov	r3, r0
 80031cc:	461e      	mov	r6, r3
 80031ce:	e0d6      	b.n	800337e <run_classifier+0x1e6>
    //     }
    // }
    // printf("\n");
    // }

    memset(result, 0, sizeof(ei_impulse_result_t));
 80031d0:	2240      	movs	r2, #64	; 0x40
 80031d2:	2100      	movs	r1, #0
 80031d4:	68b8      	ldr	r0, [r7, #8]
 80031d6:	f011 fc51 	bl	8014a7c <memset>

    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 80031da:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80031de:	2300      	movs	r3, #0
 80031e0:	2207      	movs	r2, #7
 80031e2:	2101      	movs	r1, #1
 80031e4:	f7fd ffb6 	bl	8001154 <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_us = ei_read_timer_us();
 80031e8:	f00a ffaa 	bl	800e140 <_Z16ei_read_timer_usv>
 80031ec:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

    size_t out_features_index = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	67fb      	str	r3, [r7, #124]	; 0x7c

    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 80031f4:	2300      	movs	r3, #0
 80031f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80031f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d16c      	bne.n	80032d8 <run_classifier+0x140>
        ei_model_dsp_t block = ei_dsp_blocks[ix];
 80031fe:	4963      	ldr	r1, [pc, #396]	; (800338c <run_classifier+0x1f4>)
 8003200:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003210:	461d      	mov	r5, r3
 8003212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003216:	682b      	ldr	r3, [r5, #0]
 8003218:	6023      	str	r3, [r4, #0]

        if (out_features_index + block.n_output_features > EI_CLASSIFIER_NN_INPUT_FRAME_SIZE) {
 800321a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800321c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800321e:	4413      	add	r3, r2
 8003220:	2b07      	cmp	r3, #7
 8003222:	d905      	bls.n	8003230 <run_classifier+0x98>
            ei_printf("ERR: Would write outside feature buffer\n");
 8003224:	485a      	ldr	r0, [pc, #360]	; (8003390 <run_classifier+0x1f8>)
 8003226:	f000 f934 	bl	8003492 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 800322a:	f06f 0604 	mvn.w	r6, #4
 800322e:	e0a0      	b.n	8003372 <run_classifier+0x1da>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 8003230:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003232:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003234:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800323e:	460a      	mov	r2, r1
 8003240:	2101      	movs	r1, #1
 8003242:	f7fd ff87 	bl	8001154 <_ZN2ei9ei_matrixC1EmmPf>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, &fm, block.config, EI_CLASSIFIER_FREQUENCY);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size);
 8003246:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800324a:	f107 0010 	add.w	r0, r7, #16
 800324e:	68f9      	ldr	r1, [r7, #12]
 8003250:	f7ff fb6e 	bl	8002930 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhj>
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, EI_CLASSIFIER_FREQUENCY);
 8003254:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8003256:	f107 0310 	add.w	r3, r7, #16
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff fb95 	bl	800298a <_ZN14SignalWithAxes10get_signalEv>
 8003260:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003262:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003266:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800326a:	4619      	mov	r1, r3
 800326c:	47a0      	blx	r4
 800326e:	6678      	str	r0, [r7, #100]	; 0x64
#endif

        if (ret != EIDSP_OK) {
 8003270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003272:	2b00      	cmp	r3, #0
 8003274:	d007      	beq.n	8003286 <run_classifier+0xee>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8003276:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003278:	4846      	ldr	r0, [pc, #280]	; (8003394 <run_classifier+0x1fc>)
 800327a:	f000 f90a 	bl	8003492 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 800327e:	f06f 0604 	mvn.w	r6, #4
 8003282:	2400      	movs	r4, #0
 8003284:	e013      	b.n	80032ae <run_classifier+0x116>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8003286:	f00a ff53 	bl	800e130 <_Z29ei_run_impulse_check_canceledv>
 800328a:	4603      	mov	r3, r0
 800328c:	f113 0f02 	cmn.w	r3, #2
 8003290:	bf0c      	ite	eq
 8003292:	2301      	moveq	r3, #1
 8003294:	2300      	movne	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <run_classifier+0x10c>
            return EI_IMPULSE_CANCELED;
 800329c:	f06f 0601 	mvn.w	r6, #1
 80032a0:	2400      	movs	r4, #0
 80032a2:	e004      	b.n	80032ae <run_classifier+0x116>
        }

        out_features_index += block.n_output_features;
 80032a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80032a8:	4413      	add	r3, r2
 80032aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032ac:	2401      	movs	r4, #1
 80032ae:	f107 0310 	add.w	r3, r7, #16
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff ff38 	bl	8003128 <_ZN14SignalWithAxesD1Ev>
 80032b8:	2c01      	cmp	r4, #1
 80032ba:	d001      	beq.n	80032c0 <run_classifier+0x128>
 80032bc:	2400      	movs	r4, #0
 80032be:	e000      	b.n	80032c2 <run_classifier+0x12a>
 80032c0:	2401      	movs	r4, #1
 80032c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd ff6f 	bl	80011aa <_ZN2ei9ei_matrixD1Ev>
 80032cc:	2c01      	cmp	r4, #1
 80032ce:	d150      	bne.n	8003372 <run_classifier+0x1da>
    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 80032d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032d2:	3301      	adds	r3, #1
 80032d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80032d6:	e78f      	b.n	80031f8 <run_classifier+0x60>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 80032d8:	f00a ff32 	bl	800e140 <_Z16ei_read_timer_usv>
 80032dc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80032e0:	ebb0 0802 	subs.w	r8, r0, r2
 80032e4:	eb61 0903 	sbc.w	r9, r1, r3
 80032e8:	4642      	mov	r2, r8
 80032ea:	464b      	mov	r3, r9
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	e9c1 2308 	strd	r2, r3, [r1, #32]
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80032f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	f7fd fccc 	bl	8000c9c <__aeabi_ldivmod>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	615a      	str	r2, [r3, #20]

    if (debug) {
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d01f      	beq.n	8003352 <run_classifier+0x1ba>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	4619      	mov	r1, r3
 8003318:	481f      	ldr	r0, [pc, #124]	; (8003398 <run_classifier+0x200>)
 800331a:	f000 f8ba 	bl	8003492 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 800331e:	2300      	movs	r3, #0
 8003320:	677b      	str	r3, [r7, #116]	; 0x74
 8003322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003324:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003326:	429a      	cmp	r2, r3
 8003328:	d210      	bcs.n	800334c <run_classifier+0x1b4>
            ei_printf_float(features_matrix.buffer[ix]);
 800332a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800332c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	edd3 7a00 	vldr	s15, [r3]
 8003336:	eeb0 0a67 	vmov.f32	s0, s15
 800333a:	f00a ff15 	bl	800e168 <_Z15ei_printf_floatf>
            ei_printf(" ");
 800333e:	4817      	ldr	r0, [pc, #92]	; (800339c <run_classifier+0x204>)
 8003340:	f000 f8a7 	bl	8003492 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8003344:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003346:	3301      	adds	r3, #1
 8003348:	677b      	str	r3, [r7, #116]	; 0x74
 800334a:	e7ea      	b.n	8003322 <run_classifier+0x18a>
        }
        ei_printf("\n");
 800334c:	4814      	ldr	r0, [pc, #80]	; (80033a0 <run_classifier+0x208>)
 800334e:	f000 f8a0 	bl	8003492 <_Z9ei_printfPKcz>
    }

#if EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE
    if (debug) {
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <run_classifier+0x1c6>
        ei_printf("Running neural network...\n");
 8003358:	4812      	ldr	r0, [pc, #72]	; (80033a4 <run_classifier+0x20c>)
 800335a:	f000 f89a 	bl	8003492 <_Z9ei_printfPKcz>
    }
#endif

    return run_inference(&features_matrix, result, debug);
 800335e:	79fa      	ldrb	r2, [r7, #7]
 8003360:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff feec 	bl	8003144 <run_inference>
 800336c:	4603      	mov	r3, r0
 800336e:	461e      	mov	r6, r3
 8003370:	e000      	b.n	8003374 <run_classifier+0x1dc>
            return EI_IMPULSE_DSP_ERROR;
 8003372:	bf00      	nop
    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8003374:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd ff16 	bl	80011aa <_ZN2ei9ei_matrixD1Ev>
}
 800337e:	4633      	mov	r3, r6
 8003380:	4618      	mov	r0, r3
 8003382:	3784      	adds	r7, #132	; 0x84
 8003384:	46bd      	mov	sp, r7
 8003386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800338a:	bf00      	nop
 800338c:	20000018 	.word	0x20000018
 8003390:	08019b00 	.word	0x08019b00
 8003394:	08019ac0 	.word	0x08019ac0
 8003398:	08019ae8 	.word	0x08019ae8
 800339c:	08019afc 	.word	0x08019afc
 80033a0:	080197f8 	.word	0x080197f8
 80033a4:	08019b90 	.word	0x08019b90

080033a8 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>:
}

/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized() {
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED != 1
    return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
#endif

    // And if we have one DSP block which operates on images...
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x20>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4a06      	ldr	r2, [pc, #24]	; (80033cc <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x24>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d002      	beq.n	80033bc <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x14>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 80033b6:	f06f 0308 	mvn.w	r3, #8
 80033ba:	e000      	b.n	80033be <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x16>
    }

    return EI_IMPULSE_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	20000018 	.word	0x20000018
 80033cc:	08002395 	.word	0x08002395

080033d0 <run_classifier_image_quantized>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	4613      	mov	r3, r2
 80033dc:	71fb      	strb	r3, [r7, #7]
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized();
 80033de:	f7ff ffe3 	bl	80033a8 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>
 80033e2:	4603      	mov	r3, r0
 80033e4:	75fb      	strb	r3, [r7, #23]
    if (verify_res != EI_IMPULSE_OK) {
 80033e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <run_classifier_image_quantized+0x24>
        return verify_res;
 80033ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033f2:	e00c      	b.n	800340e <run_classifier_image_quantized+0x3e>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 80033f4:	2240      	movs	r2, #64	; 0x40
 80033f6:	2100      	movs	r1, #0
 80033f8:	68b8      	ldr	r0, [r7, #8]
 80033fa:	f011 fb3f 	bl	8014a7c <memset>

#if (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TFLITE)
    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
#else

    return run_nn_inference_image_quantized(signal, result, debug);
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	461a      	mov	r2, r3
 8003402:	68b9      	ldr	r1, [r7, #8]
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f7ff fd8f 	bl	8002f28 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb>
 800340a:	4603      	mov	r3, r0
 800340c:	bf00      	nop
        result->classification[ix].value = value;
    }

    return EI_IMPULSE_OK;
#endif // (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TENSAIFLOW)
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <_Z16get_feature_datajjPf>:
static int64_t time_between_samples_us = (1000000 / (sampling_freq - 1));

static float features[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE];
float cvalue[300];
using namespace ei;
int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float));
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4a06      	ldr	r2, [pc, #24]	; (8003444 <_Z16get_feature_datajjPf+0x2c>)
 800342a:	1899      	adds	r1, r3, r2
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	461a      	mov	r2, r3
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f011 fafa 	bl	8014a2c <memcpy>
    return 0;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000488 	.word	0x20000488

08003448 <_Z6vprintPKcSt9__va_list>:
void vprint(const char *fmt, va_list argp)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b0b4      	sub	sp, #208	; 0xd0
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 8003452:	f107 0308 	add.w	r3, r7, #8
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4618      	mov	r0, r3
 800345c:	f013 fbba 	bl	8016bd4 <vsiprintf>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	bfcc      	ite	gt
 8003466:	2301      	movgt	r3, #1
 8003468:	2300      	movle	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00c      	beq.n	800348a <_Z6vprintPKcSt9__va_list+0x42>
    {
        //HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    	CDC_Transmit_FS((uint8_t *) string, strlen(string));
 8003470:	f107 0308 	add.w	r3, r7, #8
 8003474:	4618      	mov	r0, r3
 8003476:	f7fc ff05 	bl	8000284 <strlen>
 800347a:	4603      	mov	r3, r0
 800347c:	b29a      	uxth	r2, r3
 800347e:	f107 0308 	add.w	r3, r7, #8
 8003482:	4611      	mov	r1, r2
 8003484:	4618      	mov	r0, r3
 8003486:	f00f fbe9 	bl	8012c5c <CDC_Transmit_FS>
    }
}
 800348a:	bf00      	nop
 800348c:	37d0      	adds	r7, #208	; 0xd0
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 8003492:	b40f      	push	{r0, r1, r2, r3}
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 800349a:	f107 0314 	add.w	r3, r7, #20
 800349e:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	6938      	ldr	r0, [r7, #16]
 80034a4:	f7ff ffd0 	bl	8003448 <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034b2:	b004      	add	sp, #16
 80034b4:	4770      	bx	lr
	...

080034b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034b8:	b5b0      	push	{r4, r5, r7, lr}
 80034ba:	b09e      	sub	sp, #120	; 0x78
 80034bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034be:	f001 fbf7 	bl	8004cb0 <HAL_Init>

  /* USER CODE BEGIN Init */
  signal_t signal;
 80034c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fe fd43 	bl	8001f52 <_ZN2ei11ei_signal_tC1Ev>
  signal.total_length = sizeof(features) / sizeof(features[0]);
 80034cc:	230a      	movs	r3, #10
 80034ce:	667b      	str	r3, [r7, #100]	; 0x64
  signal.get_data = &get_feature_data;
 80034d0:	4b52      	ldr	r3, [pc, #328]	; (800361c <main+0x164>)
 80034d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80034d4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80034d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fa2b 	bl	800393a <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034e4:	f000 f8aa 	bl	800363c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034e8:	f000 f992 	bl	8003810 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80034ec:	f000 f91c 	bl	8003728 <_ZL12MX_ADC1_Initv>
  MX_USB_DEVICE_Init();
 80034f0:	f00f faf6 	bl	8012ae0 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 80034f4:	f000 f974 	bl	80037e0 <_ZL11MX_CRC_Initv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (size_t ix = 0; ix < EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME)
 80034f8:	2300      	movs	r3, #0
 80034fa:	677b      	str	r3, [r7, #116]	; 0x74
 80034fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034fe:	2b09      	cmp	r3, #9
 8003500:	d81e      	bhi.n	8003540 <main+0x88>
	  	  {
		  HAL_ADC_Start(&hadc1);
 8003502:	4847      	ldr	r0, [pc, #284]	; (8003620 <main+0x168>)
 8003504:	f001 fcae 	bl	8004e64 <HAL_ADC_Start>
		 	  	  HAL_ADC_PollForConversion(&hadc1, 100);
 8003508:	2164      	movs	r1, #100	; 0x64
 800350a:	4845      	ldr	r0, [pc, #276]	; (8003620 <main+0x168>)
 800350c:	f001 fdaf 	bl	800506e <HAL_ADC_PollForConversion>
		 	  	  adc_val = HAL_ADC_GetValue(&hadc1);
 8003510:	4843      	ldr	r0, [pc, #268]	; (8003620 <main+0x168>)
 8003512:	f001 fe37 	bl	8005184 <HAL_ADC_GetValue>
 8003516:	ee07 0a90 	vmov	s15, r0
 800351a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800351e:	4b41      	ldr	r3, [pc, #260]	; (8003624 <main+0x16c>)
 8003520:	edc3 7a00 	vstr	s15, [r3]
		  features[ix + 0] = adc_val;
 8003524:	4b3f      	ldr	r3, [pc, #252]	; (8003624 <main+0x16c>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	493f      	ldr	r1, [pc, #252]	; (8003628 <main+0x170>)
 800352a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	601a      	str	r2, [r3, #0]
		  HAL_ADC_Stop(&hadc1);
 8003532:	483b      	ldr	r0, [pc, #236]	; (8003620 <main+0x168>)
 8003534:	f001 fd68 	bl	8005008 <HAL_ADC_Stop>
	  for (size_t ix = 0; ix < EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME)
 8003538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800353a:	3301      	adds	r3, #1
 800353c:	677b      	str	r3, [r7, #116]	; 0x74
 800353e:	e7dd      	b.n	80034fc <main+0x44>


	  	  }//for

	  	  ei_impulse_result_t result = { 0 };
 8003540:	463b      	mov	r3, r7
 8003542:	2240      	movs	r2, #64	; 0x40
 8003544:	2100      	movs	r1, #0
 8003546:	4618      	mov	r0, r3
 8003548:	f011 fa98 	bl	8014a7c <memset>
	  	       signal_t signal;
 800354c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003550:	4618      	mov	r0, r3
 8003552:	f7fe fcfe 	bl	8001f52 <_ZN2ei11ei_signal_tC1Ev>
	  	       numpy::signal_from_buffer(features, EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, &signal);
 8003556:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800355a:	461a      	mov	r2, r3
 800355c:	210a      	movs	r1, #10
 800355e:	4832      	ldr	r0, [pc, #200]	; (8003628 <main+0x170>)
 8003560:	f7fe fa3f 	bl	80019e2 <_ZN2ei5numpy18signal_from_bufferEPKfjPNS_11ei_signal_tE>
	  	       // run classifier
	  	            EI_IMPULSE_ERROR res = run_classifier(&signal, &result, false);
 8003564:	4639      	mov	r1, r7
 8003566:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800356a:	2200      	movs	r2, #0
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fe13 	bl	8003198 <run_classifier>
 8003572:	4603      	mov	r3, r0
 8003574:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	  	            ei_printf("run_classifier returned: %d\n", res);
 8003578:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800357c:	4619      	mov	r1, r3
 800357e:	482b      	ldr	r0, [pc, #172]	; (800362c <main+0x174>)
 8003580:	f7ff ff87 	bl	8003492 <_Z9ei_printfPKcz>
	  	            if (res != 0) return 1;
 8003584:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <main+0xda>
 800358c:	2501      	movs	r5, #1
 800358e:	2400      	movs	r4, #0
 8003590:	e032      	b.n	80035f8 <main+0x140>

	  	            // print predictions
	  	            ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
 8003592:	6979      	ldr	r1, [r7, #20]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	4825      	ldr	r0, [pc, #148]	; (8003630 <main+0x178>)
 800359a:	f7ff ff7a 	bl	8003492 <_Z9ei_printfPKcz>
	  	                result.timing.dsp, result.timing.classification, result.timing.anomaly);

	  	            // print the predictions
	  	           for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 800359e:	2300      	movs	r3, #0
 80035a0:	673b      	str	r3, [r7, #112]	; 0x70
 80035a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d122      	bne.n	80035ee <main+0x136>
	  	                cvalue[ix] = result.classification[ix].value;
 80035a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	3378      	adds	r3, #120	; 0x78
 80035ae:	443b      	add	r3, r7
 80035b0:	3b74      	subs	r3, #116	; 0x74
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	491f      	ldr	r1, [pc, #124]	; (8003634 <main+0x17c>)
 80035b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	601a      	str	r2, [r3, #0]
	  	          	  ei_printf("%s:\t%f\n", result.classification[ix].label, cvalue[ix]);
 80035be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	3378      	adds	r3, #120	; 0x78
 80035c4:	443b      	add	r3, r7
 80035c6:	f853 4c78 	ldr.w	r4, [r3, #-120]
 80035ca:	4a1a      	ldr	r2, [pc, #104]	; (8003634 <main+0x17c>)
 80035cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fc ffc1 	bl	800055c <__aeabi_f2d>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4621      	mov	r1, r4
 80035e0:	4815      	ldr	r0, [pc, #84]	; (8003638 <main+0x180>)
 80035e2:	f7ff ff56 	bl	8003492 <_Z9ei_printfPKcz>
	  	           for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 80035e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035e8:	3301      	adds	r3, #1
 80035ea:	673b      	str	r3, [r7, #112]	; 0x70
 80035ec:	e7d9      	b.n	80035a2 <main+0xea>

	  	            }
	  	         HAL_Delay(1000);
 80035ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035f2:	f001 fbcf 	bl	8004d94 <HAL_Delay>
 80035f6:	2401      	movs	r4, #1
 80035f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe fcb5 	bl	8001f6c <_ZN2ei11ei_signal_tD1Ev>
 8003602:	2c01      	cmp	r4, #1
 8003604:	d100      	bne.n	8003608 <main+0x150>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8003606:	e777      	b.n	80034f8 <main+0x40>
  signal_t signal;
 8003608:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800360c:	4618      	mov	r0, r3
 800360e:	f7fe fcad 	bl	8001f6c <_ZN2ei11ei_signal_tD1Ev>
  /* USER CODE END 3 */
}
 8003612:	462b      	mov	r3, r5
 8003614:	4618      	mov	r0, r3
 8003616:	3778      	adds	r7, #120	; 0x78
 8003618:	46bd      	mov	sp, r7
 800361a:	bdb0      	pop	{r4, r5, r7, pc}
 800361c:	08003419 	.word	0x08003419
 8003620:	20000424 	.word	0x20000424
 8003624:	20000474 	.word	0x20000474
 8003628:	20000488 	.word	0x20000488
 800362c:	08019bd4 	.word	0x08019bd4
 8003630:	08019bf4 	.word	0x08019bf4
 8003634:	200004b0 	.word	0x200004b0
 8003638:	08019c3c 	.word	0x08019c3c

0800363c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b094      	sub	sp, #80	; 0x50
 8003640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003642:	f107 0320 	add.w	r3, r7, #32
 8003646:	2230      	movs	r2, #48	; 0x30
 8003648:	2100      	movs	r1, #0
 800364a:	4618      	mov	r0, r3
 800364c:	f011 fa16 	bl	8014a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003650:	f107 030c 	add.w	r3, r7, #12
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003660:	2300      	movs	r3, #0
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	4b2e      	ldr	r3, [pc, #184]	; (8003720 <_Z18SystemClock_Configv+0xe4>)
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	4a2d      	ldr	r2, [pc, #180]	; (8003720 <_Z18SystemClock_Configv+0xe4>)
 800366a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366e:	6413      	str	r3, [r2, #64]	; 0x40
 8003670:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <_Z18SystemClock_Configv+0xe4>)
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800367c:	2300      	movs	r3, #0
 800367e:	607b      	str	r3, [r7, #4]
 8003680:	4b28      	ldr	r3, [pc, #160]	; (8003724 <_Z18SystemClock_Configv+0xe8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a27      	ldr	r2, [pc, #156]	; (8003724 <_Z18SystemClock_Configv+0xe8>)
 8003686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4b25      	ldr	r3, [pc, #148]	; (8003724 <_Z18SystemClock_Configv+0xe8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003694:	607b      	str	r3, [r7, #4]
 8003696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003698:	2303      	movs	r3, #3
 800369a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800369c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036a2:	2301      	movs	r3, #1
 80036a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036a6:	2310      	movs	r3, #16
 80036a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036aa:	2302      	movs	r3, #2
 80036ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80036b4:	2304      	movs	r3, #4
 80036b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80036b8:	2348      	movs	r3, #72	; 0x48
 80036ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036bc:	2302      	movs	r3, #2
 80036be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80036c0:	2303      	movs	r3, #3
 80036c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036c4:	f107 0320 	add.w	r3, r7, #32
 80036c8:	4618      	mov	r0, r3
 80036ca:	f003 fccf 	bl	800706c <HAL_RCC_OscConfig>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf14      	ite	ne
 80036d4:	2301      	movne	r3, #1
 80036d6:	2300      	moveq	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80036de:	f000 f8cd 	bl	800387c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036e2:	230f      	movs	r3, #15
 80036e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80036f6:	f107 030c 	add.w	r3, r7, #12
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f003 ff2d 	bl	800755c <HAL_RCC_ClockConfig>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	bf14      	ite	ne
 8003708:	2301      	movne	r3, #1
 800370a:	2300      	moveq	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8003712:	f000 f8b3 	bl	800387c <Error_Handler>
  }
}
 8003716:	bf00      	nop
 8003718:	3750      	adds	r7, #80	; 0x50
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40023800 	.word	0x40023800
 8003724:	40007000 	.word	0x40007000

08003728 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800372e:	463b      	mov	r3, r7
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800373a:	4b26      	ldr	r3, [pc, #152]	; (80037d4 <_ZL12MX_ADC1_Initv+0xac>)
 800373c:	4a26      	ldr	r2, [pc, #152]	; (80037d8 <_ZL12MX_ADC1_Initv+0xb0>)
 800373e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003740:	4b24      	ldr	r3, [pc, #144]	; (80037d4 <_ZL12MX_ADC1_Initv+0xac>)
 8003742:	2200      	movs	r2, #0
 8003744:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003746:	4b23      	ldr	r3, [pc, #140]	; (80037d4 <_ZL12MX_ADC1_Initv+0xac>)
 8003748:	2200      	movs	r2, #0
 800374a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800374c:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <_ZL12MX_ADC1_Initv+0xac>)
 800374e:	2200      	movs	r2, #0
 8003750:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003752:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <_ZL12MX_ADC1_Initv+0xac>)
 8003754:	2200      	movs	r2, #0
 8003756:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003758:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <_ZL12MX_ADC1_Initv+0xac>)
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003760:	4b1c      	ldr	r3, [pc, #112]	; (80037d4 <_ZL12MX_ADC1_Initv+0xac>)
 8003762:	2200      	movs	r2, #0
 8003764:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003766:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <_ZL12MX_ADC1_Initv+0xac>)
 8003768:	4a1c      	ldr	r2, [pc, #112]	; (80037dc <_ZL12MX_ADC1_Initv+0xb4>)
 800376a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800376c:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <_ZL12MX_ADC1_Initv+0xac>)
 800376e:	2200      	movs	r2, #0
 8003770:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003772:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <_ZL12MX_ADC1_Initv+0xac>)
 8003774:	2201      	movs	r2, #1
 8003776:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003778:	4b16      	ldr	r3, [pc, #88]	; (80037d4 <_ZL12MX_ADC1_Initv+0xac>)
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003780:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <_ZL12MX_ADC1_Initv+0xac>)
 8003782:	2201      	movs	r2, #1
 8003784:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003786:	4813      	ldr	r0, [pc, #76]	; (80037d4 <_ZL12MX_ADC1_Initv+0xac>)
 8003788:	f001 fb28 	bl	8004ddc <HAL_ADC_Init>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	bf14      	ite	ne
 8003792:	2301      	movne	r3, #1
 8003794:	2300      	moveq	r3, #0
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 800379c:	f000 f86e 	bl	800387c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80037a0:	2300      	movs	r3, #0
 80037a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80037a4:	2301      	movs	r3, #1
 80037a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80037a8:	2307      	movs	r3, #7
 80037aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037ac:	463b      	mov	r3, r7
 80037ae:	4619      	mov	r1, r3
 80037b0:	4808      	ldr	r0, [pc, #32]	; (80037d4 <_ZL12MX_ADC1_Initv+0xac>)
 80037b2:	f001 fcf5 	bl	80051a0 <HAL_ADC_ConfigChannel>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf14      	ite	ne
 80037bc:	2301      	movne	r3, #1
 80037be:	2300      	moveq	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 80037c6:	f000 f859 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80037ca:	bf00      	nop
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000424 	.word	0x20000424
 80037d8:	40012000 	.word	0x40012000
 80037dc:	0f000001 	.word	0x0f000001

080037e0 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80037e4:	4b08      	ldr	r3, [pc, #32]	; (8003808 <_ZL11MX_CRC_Initv+0x28>)
 80037e6:	4a09      	ldr	r2, [pc, #36]	; (800380c <_ZL11MX_CRC_Initv+0x2c>)
 80037e8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80037ea:	4807      	ldr	r0, [pc, #28]	; (8003808 <_ZL11MX_CRC_Initv+0x28>)
 80037ec:	f002 f807 	bl	80057fe <HAL_CRC_Init>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bf14      	ite	ne
 80037f6:	2301      	movne	r3, #1
 80037f8:	2300      	moveq	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 8003800:	f000 f83c 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003804:	bf00      	nop
 8003806:	bd80      	pop	{r7, pc}
 8003808:	2000046c 	.word	0x2000046c
 800380c:	40023000 	.word	0x40023000

08003810 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	4b17      	ldr	r3, [pc, #92]	; (8003878 <_ZL12MX_GPIO_Initv+0x68>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	4a16      	ldr	r2, [pc, #88]	; (8003878 <_ZL12MX_GPIO_Initv+0x68>)
 8003820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003824:	6313      	str	r3, [r2, #48]	; 0x30
 8003826:	4b14      	ldr	r3, [pc, #80]	; (8003878 <_ZL12MX_GPIO_Initv+0x68>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	4b10      	ldr	r3, [pc, #64]	; (8003878 <_ZL12MX_GPIO_Initv+0x68>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	4a0f      	ldr	r2, [pc, #60]	; (8003878 <_ZL12MX_GPIO_Initv+0x68>)
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	6313      	str	r3, [r2, #48]	; 0x30
 8003842:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <_ZL12MX_GPIO_Initv+0x68>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <_ZL12MX_GPIO_Initv+0x68>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	4a08      	ldr	r2, [pc, #32]	; (8003878 <_ZL12MX_GPIO_Initv+0x68>)
 8003858:	f043 0302 	orr.w	r3, r3, #2
 800385c:	6313      	str	r3, [r2, #48]	; 0x30
 800385e:	4b06      	ldr	r3, [pc, #24]	; (8003878 <_ZL12MX_GPIO_Initv+0x68>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	607b      	str	r3, [r7, #4]
 8003868:	687b      	ldr	r3, [r7, #4]

}
 800386a:	bf00      	nop
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800

0800387c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003880:	b672      	cpsid	i
}
 8003882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003884:	e7fe      	b.n	8003884 <Error_Handler+0x8>

08003886 <_ZNSt8functionIFijjPfEEaSIZN2ei5numpy18signal_from_bufferEPKfjPNS4_11ei_signal_tEEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSG_JjjS0_EEEE5valueERS2_E4typeEOSE_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
 8003886:	b580      	push	{r7, lr}
 8003888:	b086      	sub	sp, #24
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	6039      	str	r1, [r7, #0]
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
 8003890:	6838      	ldr	r0, [r7, #0]
 8003892:	f000 f8e5 	bl	8003a60 <_ZSt7forwardIZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EOT_RNSt16remove_referenceIS8_E4typeE>
 8003896:	4602      	mov	r2, r0
 8003898:	f107 0308 	add.w	r3, r7, #8
 800389c:	6811      	ldr	r1, [r2, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 f8ea 	bl	8003a78 <_ZNSt8functionIFijjPfEEC1IZN2ei5numpy18signal_from_bufferEPKfjPNS4_11ei_signal_tEEUljjS0_E_vvEET_>
 80038a4:	f107 0308 	add.w	r3, r7, #8
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 f90e 	bl	8003acc <_ZNSt8functionIFijjPfEE4swapERS2_>
 80038b0:	f107 0308 	add.w	r3, r7, #8
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fe fb3f 	bl	8001f38 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 80038ba:	687b      	ldr	r3, [r7, #4]
	}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80038c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fd fc2b 	bl	8001132 <_ZNKSt14_Function_base8_M_emptyEv>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 80038e2:	f7fd fcb8 	bl	8001256 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	68dc      	ldr	r4, [r3, #12]
 80038ea:	68fd      	ldr	r5, [r7, #12]
 80038ec:	f107 0308 	add.w	r3, r7, #8
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 f90c 	bl	8003b0e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80038f6:	4606      	mov	r6, r0
 80038f8:	1d3b      	adds	r3, r7, #4
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f907 	bl	8003b0e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003900:	4680      	mov	r8, r0
 8003902:	463b      	mov	r3, r7
 8003904:	4618      	mov	r0, r3
 8003906:	f000 f90d 	bl	8003b24 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800390a:	4603      	mov	r3, r0
 800390c:	4642      	mov	r2, r8
 800390e:	4631      	mov	r1, r6
 8003910:	4628      	mov	r0, r5
 8003912:	47a0      	blx	r4
 8003914:	4603      	mov	r3, r0
    }
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003920 <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4618      	mov	r0, r3
 800392c:	f7fd fbe0 	bl	80010f0 <_ZNSt14_Function_baseC1Ev>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 800393a:	b580      	push	{r7, lr}
 800393c:	b086      	sub	sp, #24
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8003944:	6838      	ldr	r0, [r7, #0]
 8003946:	f000 f8f8 	bl	8003b3a <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800394a:	4603      	mov	r3, r0
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	f107 0308 	add.w	r3, r7, #8
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f000 f8fb 	bl	8003b50 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 800395a:	f107 0308 	add.w	r3, r7, #8
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4618      	mov	r0, r3
 8003962:	f000 f8b3 	bl	8003acc <_ZNSt8functionIFijjPfEE4swapERS2_>
 8003966:	f107 0308 	add.w	r3, r7, #8
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe fae4 	bl	8001f38 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8003970:	687b      	ldr	r3, [r7, #4]
	}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>:
	operator=(_Functor&& __f)
 800397a:	b580      	push	{r7, lr}
 800397c:	b086      	sub	sp, #24
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8003984:	6838      	ldr	r0, [r7, #0]
 8003986:	f000 f90d 	bl	8003ba4 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800398a:	4602      	mov	r2, r0
 800398c:	f107 0308 	add.w	r3, r7, #8
 8003990:	6811      	ldr	r1, [r2, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f000 f912 	bl	8003bbc <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>
 8003998:	f107 0308 	add.w	r3, r7, #8
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 f894 	bl	8003acc <_ZNSt8functionIFijjPfEE4swapERS2_>
 80039a4:	f107 0308 	add.w	r3, r7, #8
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fe fac5 	bl	8001f38 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 80039ae:	687b      	ldr	r3, [r7, #4]
	}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	68b9      	ldr	r1, [r7, #8]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 f92b 	bl	8003c26 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
       *
       * The deleter will be initialized with @p std::move(__d)
       */
      template<typename _Del = deleter_type,
	       typename = _Require<is_move_constructible<_Del>>>
	unique_ptr(pointer __p,
 80039da:	b590      	push	{r4, r7, lr}
 80039dc:	b085      	sub	sp, #20
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
		   __enable_if_t<!is_lvalue_reference<_Del>::value,
				 _Del&&> __d) noexcept
	: _M_t(__p, std::move(__d))
 80039e6:	68fc      	ldr	r4, [r7, #12]
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f911 	bl	8003c10 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 80039ee:	4603      	mov	r3, r0
 80039f0:	461a      	mov	r2, r3
 80039f2:	68b9      	ldr	r1, [r7, #8]
 80039f4:	4620      	mov	r0, r4
 80039f6:	f7ff ffdf 	bl	80039b8 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4618      	mov	r0, r3
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd90      	pop	{r4, r7, pc}

08003a04 <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8003a04:	b590      	push	{r4, r7, lr}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 f91f 	bl	8003c52 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8003a14:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00b      	beq.n	8003a36 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f924 	bl	8003c6c <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 8003a24:	4603      	mov	r3, r0
 8003a26:	681c      	ldr	r4, [r3, #0]
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f92c 	bl	8003c86 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	47a0      	blx	r4
	__ptr = pointer();
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
      }
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd90      	pop	{r4, r7, pc}

08003a46 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
	return get();
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b082      	sub	sp, #8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 f923 	bl	8003c9c <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8003a56:	4603      	mov	r3, r0
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <_ZSt7forwardIZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EOT_RNSt16remove_referenceIS8_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
	...

08003a78 <_ZNSt8functionIFijjPfEEC1IZN2ei5numpy18signal_from_bufferEPKfjPNS4_11ei_signal_tEEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8003a78:	b590      	push	{r4, r7, lr}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fd fb33 	bl	80010f0 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8003a8a:	463b      	mov	r3, r7
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 f913 	bl	8003cb8 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E21_M_not_empty_functionIS8_EEbRKT_>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00f      	beq.n	8003ab8 <_ZNSt8functionIFijjPfEEC1IZN2ei5numpy18signal_from_bufferEPKfjPNS4_11ei_signal_tEEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8003a98:	687c      	ldr	r4, [r7, #4]
 8003a9a:	463b      	mov	r3, r7
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 f916 	bl	8003cce <_ZSt4moveIRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EONSt16remove_referenceIT_E4typeEOSA_>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	f000 f91c 	bl	8003ce4 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E15_M_init_functorERSt9_Any_dataOS8_>
	    _M_invoker = &_My_handler::_M_invoke;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a05      	ldr	r2, [pc, #20]	; (8003ac4 <_ZNSt8functionIFijjPfEEC1IZN2ei5numpy18signal_from_bufferEPKfjPNS4_11ei_signal_tEEUljjS0_E_vvEET_+0x4c>)
 8003ab0:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a04      	ldr	r2, [pc, #16]	; (8003ac8 <_ZNSt8functionIFijjPfEEC1IZN2ei5numpy18signal_from_bufferEPKfjPNS4_11ei_signal_tEEUljjS0_E_vvEET_+0x50>)
 8003ab6:	609a      	str	r2, [r3, #8]
      }
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd90      	pop	{r4, r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	08003d09 	.word	0x08003d09
 8003ac8:	08003d4b 	.word	0x08003d4b

08003acc <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	4611      	mov	r1, r2
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 f95e 	bl	8003d9e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f103 0208 	add.w	r2, r3, #8
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	3308      	adds	r3, #8
 8003aec:	4619      	mov	r1, r3
 8003aee:	4610      	mov	r0, r2
 8003af0:	f000 f987 	bl	8003e02 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f103 020c 	add.w	r2, r3, #12
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	330c      	adds	r3, #12
 8003afe:	4619      	mov	r1, r3
 8003b00:	4610      	mov	r0, r2
 8003b02:	f000 f9a8 	bl	8003e56 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8003b50:	b590      	push	{r4, r7, lr}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fd fac7 	bl	80010f0 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 f995 	bl	8003e94 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00f      	beq.n	8003b90 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8003b70:	687c      	ldr	r4, [r7, #4]
 8003b72:	463b      	mov	r3, r7
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 f99d 	bl	8003eb4 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4620      	mov	r0, r4
 8003b80:	f000 f9a3 	bl	8003eca <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a05      	ldr	r2, [pc, #20]	; (8003b9c <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 8003b88:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a04      	ldr	r2, [pc, #16]	; (8003ba0 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 8003b8e:	609a      	str	r2, [r3, #8]
      }
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd90      	pop	{r4, r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	08003eef 	.word	0x08003eef
 8003ba0:	08003f31 	.word	0x08003f31

08003ba4 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
	...

08003bbc <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8003bbc:	b590      	push	{r4, r7, lr}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fd fa91 	bl	80010f0 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8003bce:	463b      	mov	r3, r7
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 f9cc 	bl	8003f6e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00f      	beq.n	8003bfc <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8003bdc:	687c      	ldr	r4, [r7, #4]
 8003bde:	463b      	mov	r3, r7
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 f9cf 	bl	8003f84 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8003be6:	4603      	mov	r3, r0
 8003be8:	4619      	mov	r1, r3
 8003bea:	4620      	mov	r0, r4
 8003bec:	f000 f9d5 	bl	8003f9a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a05      	ldr	r2, [pc, #20]	; (8003c08 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x4c>)
 8003bf4:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x50>)
 8003bfa:	609a      	str	r2, [r3, #8]
      }
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd90      	pop	{r4, r7, pc}
 8003c06:	bf00      	nop
 8003c08:	08003fbf 	.word	0x08003fbf
 8003c0c:	08004001 	.word	0x08004001

08003c10 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8003c26:	b590      	push	{r4, r7, lr}
 8003c28:	b085      	sub	sp, #20
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8003c32:	68fc      	ldr	r4, [r7, #12]
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fa02 	bl	800403e <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	f107 0308 	add.w	r3, r7, #8
 8003c40:	4619      	mov	r1, r3
 8003c42:	4620      	mov	r0, r4
 8003c44:	f000 fa06 	bl	8004054 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd90      	pop	{r4, r7, pc}

08003c52 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 fa12 	bl	8004086 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8003c62:	4603      	mov	r3, r0
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fa12 	bl	80040a0 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fa07 	bl	80040ba <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 8003cac:	4603      	mov	r3, r0
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E21_M_not_empty_functionIS8_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
	  { return true; }
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <_ZSt4moveIRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E15_M_init_functorERSt9_Any_dataOS8_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8003ce4:	b590      	push	{r4, r7, lr}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8003cee:	6838      	ldr	r0, [r7, #0]
 8003cf0:	f7ff ffed 	bl	8003cce <_ZSt4moveIRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EONSt16remove_referenceIT_E4typeEOSA_>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	4622      	mov	r2, r4
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f9ea 	bl	80040d4 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E15_M_init_functorERSt9_Any_dataOS8_St17integral_constantIbLb1EE>
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd90      	pop	{r4, r7, pc}

08003d08 <_ZNSt17_Function_handlerIFijjPfEZN2ei5numpy18signal_from_bufferEPKfjPNS2_11ei_signal_tEEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjSD_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f9f5 	bl	8004106 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8003d1c:	4604      	mov	r4, r0
 8003d1e:	68b8      	ldr	r0, [r7, #8]
 8003d20:	f7ff fef5 	bl	8003b0e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003d24:	4605      	mov	r5, r0
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7ff fef1 	bl	8003b0e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003d2c:	4606      	mov	r6, r0
 8003d2e:	6838      	ldr	r0, [r7, #0]
 8003d30:	f7ff fef8 	bl	8003b24 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003d34:	4603      	mov	r3, r0
 8003d36:	4632      	mov	r2, r6
 8003d38:	4629      	mov	r1, r5
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f000 f9f4 	bl	8004128 <_ZSt10__invoke_rIiRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_JjjS6_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeESD_EEE5valueESD_E4typeEOSI_DpOSJ_>
 8003d40:	4603      	mov	r3, r0
      }
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d4a <_ZNSt17_Function_handlerIFijjPfEZN2ei5numpy18signal_from_bufferEPKfjPNS2_11ei_signal_tEEUljjS0_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8003d4a:	b590      	push	{r4, r7, lr}
 8003d4c:	b085      	sub	sp, #20
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	4613      	mov	r3, r2
 8003d56:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d109      	bne.n	8003d72 <_ZNSt17_Function_handlerIFijjPfEZN2ei5numpy18signal_from_bufferEPKfjPNS2_11ei_signal_tEEUljjS0_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fa07 	bl	8004172 <_ZNSt9_Any_data9_M_accessIPZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERT_v>
 8003d64:	4604      	mov	r4, r0
 8003d66:	68b8      	ldr	r0, [r7, #8]
 8003d68:	f000 f9cd 	bl	8004106 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	6023      	str	r3, [r4, #0]
	    break;
 8003d70:	e005      	b.n	8003d7e <_ZNSt17_Function_handlerIFijjPfEZN2ei5numpy18signal_from_bufferEPKfjPNS2_11ei_signal_tEEUljjS0_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	461a      	mov	r2, r3
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 fa06 	bl	800418a <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>
	return false;
 8003d7e:	2300      	movs	r3, #0
      }
 8003d80:	4618      	mov	r0, r3
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd90      	pop	{r4, r7, pc}

08003d88 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4618      	mov	r0, r3
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b084      	sub	sp, #16
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ffed 	bl	8003d88 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8003dae:	4602      	mov	r2, r0
 8003db0:	f107 0308 	add.w	r3, r7, #8
 8003db4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003db8:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8003dbc:	6838      	ldr	r0, [r7, #0]
 8003dbe:	f7ff ffe3 	bl	8003d88 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dca:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8003dce:	f107 0308 	add.w	r3, r7, #8
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff ffd8 	bl	8003d88 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003de0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff ffed 	bl	8003dec <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8003e12:	4603      	mov	r3, r0
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8003e18:	6838      	ldr	r0, [r7, #0]
 8003e1a:	f7ff ffe7 	bl	8003dec <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003e26:	f107 030c 	add.w	r3, r7, #12
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff ffde 	bl	8003dec <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8003e30:	4603      	mov	r3, r0
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	601a      	str	r2, [r3, #0]
    }
 8003e38:	bf00      	nop
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b084      	sub	sp, #16
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff ffed 	bl	8003e40 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8003e66:	4603      	mov	r3, r0
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8003e6c:	6838      	ldr	r0, [r7, #0]
 8003e6e:	f7ff ffe7 	bl	8003e40 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8003e72:	4603      	mov	r3, r0
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003e7a:	f107 030c 	add.w	r3, r7, #12
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff ffde 	bl	8003e40 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8003e84:	4603      	mov	r3, r0
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	601a      	str	r2, [r3, #0]
    }
 8003e8c:	bf00      	nop
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	bf14      	ite	ne
 8003ea2:	2301      	movne	r3, #1
 8003ea4:	2300      	moveq	r3, #0
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8003eca:	b590      	push	{r4, r7, lr}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8003ed4:	6838      	ldr	r0, [r7, #0]
 8003ed6:	f7ff ffed 	bl	8003eb4 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8003eda:	4603      	mov	r3, r0
 8003edc:	4622      	mov	r2, r4
 8003ede:	4619      	mov	r1, r3
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f991 	bl	8004208 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd90      	pop	{r4, r7, pc}

08003eee <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003eee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ef0:	b085      	sub	sp, #20
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	60f8      	str	r0, [r7, #12]
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	607a      	str	r2, [r7, #4]
 8003efa:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f99c 	bl	800423a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8003f02:	4604      	mov	r4, r0
 8003f04:	68b8      	ldr	r0, [r7, #8]
 8003f06:	f7ff fe02 	bl	8003b0e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003f0a:	4605      	mov	r5, r0
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff fdfe 	bl	8003b0e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003f12:	4606      	mov	r6, r0
 8003f14:	6838      	ldr	r0, [r7, #0]
 8003f16:	f7ff fe05 	bl	8003b24 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	4632      	mov	r2, r6
 8003f1e:	4629      	mov	r1, r5
 8003f20:	4620      	mov	r0, r4
 8003f22:	f000 f99b 	bl	800425c <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8003f26:	4603      	mov	r3, r0
      }
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f30 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8003f30:	b590      	push	{r4, r7, lr}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8003f3e:	79fb      	ldrb	r3, [r7, #7]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d109      	bne.n	8003f58 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f9ae 	bl	80042a6 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	68b8      	ldr	r0, [r7, #8]
 8003f4e:	f000 f974 	bl	800423a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8003f52:	4603      	mov	r3, r0
 8003f54:	6023      	str	r3, [r4, #0]
	    break;
 8003f56:	e005      	b.n	8003f64 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68b9      	ldr	r1, [r7, #8]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f9ad 	bl	80042be <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8003f64:	2300      	movs	r3, #0
      }
 8003f66:	4618      	mov	r0, r3
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd90      	pop	{r4, r7, pc}

08003f6e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
	  { return true; }
 8003f76:	2301      	movs	r3, #1
 8003f78:	4618      	mov	r0, r3
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8003f9a:	b590      	push	{r4, r7, lr}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8003fa4:	6838      	ldr	r0, [r7, #0]
 8003fa6:	f7ff ffed 	bl	8003f84 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8003faa:	4603      	mov	r3, r0
 8003fac:	4622      	mov	r2, r4
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f9af 	bl	8004314 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd90      	pop	{r4, r7, pc}

08003fbe <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003fbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fc0:	b085      	sub	sp, #20
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
 8003fca:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f9ba 	bl	8004346 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8003fd2:	4604      	mov	r4, r0
 8003fd4:	68b8      	ldr	r0, [r7, #8]
 8003fd6:	f7ff fd9a 	bl	8003b0e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003fda:	4605      	mov	r5, r0
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7ff fd96 	bl	8003b0e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003fe2:	4606      	mov	r6, r0
 8003fe4:	6838      	ldr	r0, [r7, #0]
 8003fe6:	f7ff fd9d 	bl	8003b24 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003fea:	4603      	mov	r3, r0
 8003fec:	4632      	mov	r2, r6
 8003fee:	4629      	mov	r1, r5
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f000 f9b9 	bl	8004368 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8003ff6:	4603      	mov	r3, r0
      }
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004000 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	4613      	mov	r3, r2
 800400c:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d109      	bne.n	8004028 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f9cc 	bl	80043b2 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 800401a:	4604      	mov	r4, r0
 800401c:	68b8      	ldr	r0, [r7, #8]
 800401e:	f000 f992 	bl	8004346 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8004022:	4603      	mov	r3, r0
 8004024:	6023      	str	r3, [r4, #0]
	    break;
 8004026:	e005      	b.n	8004034 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8004028:	79fb      	ldrb	r3, [r7, #7]
 800402a:	461a      	mov	r2, r3
 800402c:	68b9      	ldr	r1, [r7, #8]
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f9cb 	bl	80043ca <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8004034:	2300      	movs	r3, #0
      }
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	bd90      	pop	{r4, r7, pc}

0800403e <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4618      	mov	r0, r3
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 8004054:	b5b0      	push	{r4, r5, r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8004060:	68fc      	ldr	r4, [r7, #12]
 8004062:	68b8      	ldr	r0, [r7, #8]
 8004064:	f000 f9dc 	bl	8004420 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8004068:	4605      	mov	r5, r0
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff ffe7 	bl	800403e <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004070:	4603      	mov	r3, r0
 8004072:	461a      	mov	r2, r3
 8004074:	4629      	mov	r1, r5
 8004076:	4620      	mov	r0, r4
 8004078:	f000 f9dd 	bl	8004436 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bdb0      	pop	{r4, r5, r7, pc}

08004086 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4618      	mov	r0, r3
 8004092:	f000 f9ee 	bl	8004472 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8004096:	4603      	mov	r3, r0
 8004098:	4618      	mov	r0, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 f9ed 	bl	800448a <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 80040b0:	4603      	mov	r3, r0
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 f9ed 	bl	80044a4 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80040ca:	4603      	mov	r3, r0
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E15_M_init_functorERSt9_Any_dataOS8_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80040d4:	b590      	push	{r4, r7, lr}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80040e0:	68b8      	ldr	r0, [r7, #8]
 80040e2:	f7ff fdf4 	bl	8003cce <_ZSt4moveIRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EONSt16remove_referenceIT_E4typeEOSA_>
 80040e6:	4604      	mov	r4, r0
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f7fc ffeb 	bl	80010c4 <_ZNSt9_Any_data9_M_accessEv>
 80040ee:	4603      	mov	r3, r0
 80040f0:	4619      	mov	r1, r3
 80040f2:	2004      	movs	r0, #4
 80040f4:	f7fc ffda 	bl	80010ac <_ZnwjPv>
 80040f8:	4602      	mov	r2, r0
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	bf00      	nop
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	bd90      	pop	{r4, r7, pc}

08004106 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f9d4 	bl	80044bc <_ZNKSt9_Any_data9_M_accessIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERKT_v>
 8004114:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 f9dc 	bl	80044d4 <_ZSt11__addressofIKZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EPT_RS9_>
 800411c:	4603      	mov	r3, r0
 800411e:	bf00      	nop
	}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <_ZSt10__invoke_rIiRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_JjjS6_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeESD_EEE5valueESD_E4typeEOSI_DpOSJ_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8004128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800412c:	b086      	sub	sp, #24
 800412e:	af02      	add	r7, sp, #8
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	607a      	str	r2, [r7, #4]
 8004136:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 f9d6 	bl	80044ea <_ZSt7forwardIRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EOT_RNSt16remove_referenceIS9_E4typeE>
 800413e:	4604      	mov	r4, r0
 8004140:	68b8      	ldr	r0, [r7, #8]
 8004142:	f7ff fce4 	bl	8003b0e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004146:	4605      	mov	r5, r0
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff fce0 	bl	8003b0e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800414e:	4606      	mov	r6, r0
 8004150:	6838      	ldr	r0, [r7, #0]
 8004152:	f7ff fce7 	bl	8003b24 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004156:	4603      	mov	r3, r0
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	4633      	mov	r3, r6
 800415c:	462a      	mov	r2, r5
 800415e:	4621      	mov	r1, r4
 8004160:	4640      	mov	r0, r8
 8004162:	f000 f9cd 	bl	8004500 <_ZSt13__invoke_implIiRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_JjjS6_EET_St14__invoke_otherOT0_DpOT1_>
 8004166:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004172 <_ZNSt9_Any_data9_M_accessIPZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERT_v>:
      _M_access()
 8004172:	b580      	push	{r7, lr}
 8004174:	b082      	sub	sp, #8
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fc ffa2 	bl	80010c4 <_ZNSt9_Any_data9_M_accessEv>
 8004180:	4603      	mov	r3, r0
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800418a:	b5b0      	push	{r4, r5, r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	4613      	mov	r3, r2
 8004196:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	2b03      	cmp	r3, #3
 800419c:	d016      	beq.n	80041cc <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
 800419e:	2b03      	cmp	r3, #3
 80041a0:	dc19      	bgt.n	80041d6 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d002      	beq.n	80041ac <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x22>
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d00a      	beq.n	80041c0 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x36>
 80041aa:	e014      	b.n	80041d6 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f7ff ffe0 	bl	8004172 <_ZNSt9_Any_data9_M_accessIPZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERT_v>
 80041b2:	4604      	mov	r4, r0
 80041b4:	68b8      	ldr	r0, [r7, #8]
 80041b6:	f7ff ffa6 	bl	8004106 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 80041ba:	4603      	mov	r3, r0
 80041bc:	6023      	str	r3, [r4, #0]
	      break;
 80041be:	e00a      	b.n	80041d6 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80041c0:	462a      	mov	r2, r5
 80041c2:	68b9      	ldr	r1, [r7, #8]
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f9bf 	bl	8004548 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E8_M_cloneERSt9_Any_dataRKSA_St17integral_constantIbLb1EE>
	      break;
 80041ca:	e004      	b.n	80041d6 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80041cc:	4621      	mov	r1, r4
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 f9d3 	bl	800457a <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80041d4:	bf00      	nop
	  return false;
 80041d6:	2300      	movs	r3, #0
	}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bdb0      	pop	{r4, r5, r7, pc}

080041e0 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d201      	bcs.n	80041fa <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	e000      	b.n	80041fc <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80041fa:	687b      	ldr	r3, [r7, #4]
    }
 80041fc:	4618      	mov	r0, r3
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8004208:	b590      	push	{r4, r7, lr}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8004214:	68b8      	ldr	r0, [r7, #8]
 8004216:	f7ff fe4d 	bl	8003eb4 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 800421a:	4603      	mov	r3, r0
 800421c:	681c      	ldr	r4, [r3, #0]
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f7fc ff50 	bl	80010c4 <_ZNSt9_Any_data9_M_accessEv>
 8004224:	4603      	mov	r3, r0
 8004226:	4619      	mov	r1, r3
 8004228:	2004      	movs	r0, #4
 800422a:	f7fc ff3f 	bl	80010ac <_ZnwjPv>
 800422e:	4603      	mov	r3, r0
 8004230:	601c      	str	r4, [r3, #0]
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	bd90      	pop	{r4, r7, pc}

0800423a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f9a5 	bl	8004592 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8004248:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f9ad 	bl	80045aa <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8004250:	4603      	mov	r3, r0
 8004252:	bf00      	nop
	}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800425c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004260:	b086      	sub	sp, #24
 8004262:	af02      	add	r7, sp, #8
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
 800426a:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 f9a7 	bl	80045c0 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004272:	4604      	mov	r4, r0
 8004274:	68b8      	ldr	r0, [r7, #8]
 8004276:	f7ff fc4a 	bl	8003b0e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800427a:	4605      	mov	r5, r0
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7ff fc46 	bl	8003b0e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004282:	4606      	mov	r6, r0
 8004284:	6838      	ldr	r0, [r7, #0]
 8004286:	f7ff fc4d 	bl	8003b24 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800428a:	4603      	mov	r3, r0
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	4633      	mov	r3, r6
 8004290:	462a      	mov	r2, r5
 8004292:	4621      	mov	r1, r4
 8004294:	4640      	mov	r0, r8
 8004296:	f000 f99e 	bl	80045d6 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 800429a:	4603      	mov	r3, r0
    }
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080042a6 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fc ff08 	bl	80010c4 <_ZNSt9_Any_data9_M_accessEv>
 80042b4:	4603      	mov	r3, r0
 80042b6:	4618      	mov	r0, r3
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80042be:	b5b0      	push	{r4, r5, r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	4613      	mov	r3, r2
 80042ca:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d016      	beq.n	8004300 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	dc19      	bgt.n	800430a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d002      	beq.n	80042e0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d00a      	beq.n	80042f4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 80042de:	e014      	b.n	800430a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f7ff ffe0 	bl	80042a6 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 80042e6:	4604      	mov	r4, r0
 80042e8:	68b8      	ldr	r0, [r7, #8]
 80042ea:	f7ff ffa6 	bl	800423a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 80042ee:	4603      	mov	r3, r0
 80042f0:	6023      	str	r3, [r4, #0]
	      break;
 80042f2:	e00a      	b.n	800430a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80042f4:	462a      	mov	r2, r5
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f990 	bl	800461e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 80042fe:	e004      	b.n	800430a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8004300:	4621      	mov	r1, r4
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f9a4 	bl	8004650 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8004308:	bf00      	nop
	  return false;
 800430a:	2300      	movs	r3, #0
	}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bdb0      	pop	{r4, r5, r7, pc}

08004314 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8004314:	b590      	push	{r4, r7, lr}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8004320:	68b8      	ldr	r0, [r7, #8]
 8004322:	f7ff fe2f 	bl	8003f84 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8004326:	4604      	mov	r4, r0
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f7fc fecb 	bl	80010c4 <_ZNSt9_Any_data9_M_accessEv>
 800432e:	4603      	mov	r3, r0
 8004330:	4619      	mov	r1, r3
 8004332:	2004      	movs	r0, #4
 8004334:	f7fc feba 	bl	80010ac <_ZnwjPv>
 8004338:	4602      	mov	r2, r0
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	bf00      	nop
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	bd90      	pop	{r4, r7, pc}

08004346 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f98a 	bl	8004668 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8004354:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f992 	bl	8004680 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 800435c:	4603      	mov	r3, r0
 800435e:	bf00      	nop
	}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8004368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800436c:	b086      	sub	sp, #24
 800436e:	af02      	add	r7, sp, #8
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	607a      	str	r2, [r7, #4]
 8004376:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 f98c 	bl	8004696 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800437e:	4604      	mov	r4, r0
 8004380:	68b8      	ldr	r0, [r7, #8]
 8004382:	f7ff fbc4 	bl	8003b0e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004386:	4605      	mov	r5, r0
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7ff fbc0 	bl	8003b0e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800438e:	4606      	mov	r6, r0
 8004390:	6838      	ldr	r0, [r7, #0]
 8004392:	f7ff fbc7 	bl	8003b24 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004396:	4603      	mov	r3, r0
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	4633      	mov	r3, r6
 800439c:	462a      	mov	r2, r5
 800439e:	4621      	mov	r1, r4
 80043a0:	4640      	mov	r0, r8
 80043a2:	f000 f983 	bl	80046ac <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 80043a6:	4603      	mov	r3, r0
    }
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080043b2 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fc fe82 	bl	80010c4 <_ZNSt9_Any_data9_M_accessEv>
 80043c0:	4603      	mov	r3, r0
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80043ca:	b5b0      	push	{r4, r5, r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	4613      	mov	r3, r2
 80043d6:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d016      	beq.n	800440c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 80043de:	2b03      	cmp	r3, #3
 80043e0:	dc19      	bgt.n	8004416 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d002      	beq.n	80043ec <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d00a      	beq.n	8004400 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 80043ea:	e014      	b.n	8004416 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f7ff ffe0 	bl	80043b2 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 80043f2:	4604      	mov	r4, r0
 80043f4:	68b8      	ldr	r0, [r7, #8]
 80043f6:	f7ff ffa6 	bl	8004346 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 80043fa:	4603      	mov	r3, r0
 80043fc:	6023      	str	r3, [r4, #0]
	      break;
 80043fe:	e00a      	b.n	8004416 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8004400:	462a      	mov	r2, r5
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f975 	bl	80046f4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 800440a:	e004      	b.n	8004416 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800440c:	4621      	mov	r1, r4
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f989 	bl	8004726 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8004414:	bf00      	nop
	  return false;
 8004416:	2300      	movs	r3, #0
	}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bdb0      	pop	{r4, r5, r7, pc}

08004420 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4618      	mov	r0, r3
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8004436:	b590      	push	{r4, r7, lr}
 8004438:	b085      	sub	sp, #20
 800443a:	af00      	add	r7, sp, #0
 800443c:	60f8      	str	r0, [r7, #12]
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8004442:	68fc      	ldr	r4, [r7, #12]
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff fdfa 	bl	800403e <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800444a:	4603      	mov	r3, r0
 800444c:	4619      	mov	r1, r3
 800444e:	4620      	mov	r0, r4
 8004450:	f000 f975 	bl	800473e <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1d1c      	adds	r4, r3, #4
 8004458:	68b8      	ldr	r0, [r7, #8]
 800445a:	f7ff ffe1 	bl	8004420 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800445e:	4603      	mov	r3, r0
 8004460:	4619      	mov	r1, r3
 8004462:	4620      	mov	r0, r4
 8004464:	f000 f97e 	bl	8004764 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	bd90      	pop	{r4, r7, pc}

08004472 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004472:	b580      	push	{r7, lr}
 8004474:	b082      	sub	sp, #8
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f983 	bl	8004786 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 8004480:	4603      	mov	r3, r0
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4618      	mov	r0, r3
 8004496:	f000 f984 	bl	80047a2 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800449a:	4603      	mov	r3, r0
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f984 	bl	80047ba <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 80044b2:	4603      	mov	r3, r0
 80044b4:	4618      	mov	r0, r3
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <_ZNKSt9_Any_data9_M_accessIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERKT_v>:
      _M_access() const
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7fc fe08 	bl	80010da <_ZNKSt9_Any_data9_M_accessEv>
 80044ca:	4603      	mov	r3, r0
 80044cc:	4618      	mov	r0, r3
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <_ZSt11__addressofIKZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EPT_RS9_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4618      	mov	r0, r3
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <_ZSt7forwardIRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4618      	mov	r0, r3
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <_ZSt13__invoke_implIiRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_JjjS6_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8004500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	7338      	strb	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800450e:	68b8      	ldr	r0, [r7, #8]
 8004510:	f7ff ffeb 	bl	80044ea <_ZSt7forwardIRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EOT_RNSt16remove_referenceIS9_E4typeE>
 8004514:	4606      	mov	r6, r0
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7ff faf9 	bl	8003b0e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800451c:	4603      	mov	r3, r0
 800451e:	681c      	ldr	r4, [r3, #0]
 8004520:	6838      	ldr	r0, [r7, #0]
 8004522:	f7ff faf4 	bl	8003b0e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004526:	4603      	mov	r3, r0
 8004528:	681d      	ldr	r5, [r3, #0]
 800452a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800452c:	f7ff fafa 	bl	8003b24 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004530:	4603      	mov	r3, r0
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	462a      	mov	r2, r5
 8004536:	4621      	mov	r1, r4
 8004538:	4630      	mov	r0, r6
 800453a:	f7fd fa3f 	bl	80019bc <_ZZN2ei5numpy18signal_from_bufferEPKfjPNS_11ei_signal_tEENKUljjPfE_clEjjS5_>
 800453e:	4603      	mov	r3, r0
 8004540:	4618      	mov	r0, r3
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004548 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E8_M_cloneERSt9_Any_dataRKSA_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8004548:	b590      	push	{r4, r7, lr}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8004554:	68b8      	ldr	r0, [r7, #8]
 8004556:	f7ff ffb1 	bl	80044bc <_ZNKSt9_Any_data9_M_accessIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERKT_v>
 800455a:	4604      	mov	r4, r0
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f7fc fdb1 	bl	80010c4 <_ZNSt9_Any_data9_M_accessEv>
 8004562:	4603      	mov	r3, r0
 8004564:	4619      	mov	r1, r3
 8004566:	2004      	movs	r0, #4
 8004568:	f7fc fda0 	bl	80010ac <_ZnwjPv>
 800456c:	4602      	mov	r2, r0
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	6013      	str	r3, [r2, #0]
	}
 8004572:	bf00      	nop
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	bd90      	pop	{r4, r7, pc}

0800457a <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f926 	bl	80047d6 <_ZNSt9_Any_data9_M_accessIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERT_v>
	}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 8004592:	b580      	push	{r7, lr}
 8004594:	b082      	sub	sp, #8
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fc fd9d 	bl	80010da <_ZNKSt9_Any_data9_M_accessEv>
 80045a0:	4603      	mov	r3, r0
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4618      	mov	r0, r3
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80045d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045d8:	b085      	sub	sp, #20
 80045da:	af00      	add	r7, sp, #0
 80045dc:	7338      	strb	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
 80045e2:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80045e4:	68b8      	ldr	r0, [r7, #8]
 80045e6:	f7ff ffeb 	bl	80045c0 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 80045ea:	4603      	mov	r3, r0
 80045ec:	681c      	ldr	r4, [r3, #0]
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff fa8d 	bl	8003b0e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80045f4:	4603      	mov	r3, r0
 80045f6:	681d      	ldr	r5, [r3, #0]
 80045f8:	6838      	ldr	r0, [r7, #0]
 80045fa:	f7ff fa88 	bl	8003b0e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80045fe:	4603      	mov	r3, r0
 8004600:	681e      	ldr	r6, [r3, #0]
 8004602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004604:	f7ff fa8e 	bl	8003b24 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004608:	4603      	mov	r3, r0
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	461a      	mov	r2, r3
 800460e:	4631      	mov	r1, r6
 8004610:	4628      	mov	r0, r5
 8004612:	47a0      	blx	r4
 8004614:	4603      	mov	r3, r0
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800461e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800461e:	b590      	push	{r4, r7, lr}
 8004620:	b085      	sub	sp, #20
 8004622:	af00      	add	r7, sp, #0
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	60b9      	str	r1, [r7, #8]
 8004628:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800462a:	68b8      	ldr	r0, [r7, #8]
 800462c:	f7ff ffb1 	bl	8004592 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8004630:	4603      	mov	r3, r0
 8004632:	681c      	ldr	r4, [r3, #0]
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f7fc fd45 	bl	80010c4 <_ZNSt9_Any_data9_M_accessEv>
 800463a:	4603      	mov	r3, r0
 800463c:	4619      	mov	r1, r3
 800463e:	2004      	movs	r0, #4
 8004640:	f7fc fd34 	bl	80010ac <_ZnwjPv>
 8004644:	4603      	mov	r3, r0
 8004646:	601c      	str	r4, [r3, #0]
	}
 8004648:	bf00      	nop
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	bd90      	pop	{r4, r7, pc}

08004650 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f8db 	bl	8004816 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7fc fd32 	bl	80010da <_ZNKSt9_Any_data9_M_accessEv>
 8004676:	4603      	mov	r3, r0
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80046ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	7338      	strb	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80046ba:	68b8      	ldr	r0, [r7, #8]
 80046bc:	f7ff ffeb 	bl	8004696 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 80046c0:	4606      	mov	r6, r0
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7ff fa23 	bl	8003b0e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80046c8:	4603      	mov	r3, r0
 80046ca:	681c      	ldr	r4, [r3, #0]
 80046cc:	6838      	ldr	r0, [r7, #0]
 80046ce:	f7ff fa1e 	bl	8003b0e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80046d2:	4603      	mov	r3, r0
 80046d4:	681d      	ldr	r5, [r3, #0]
 80046d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046d8:	f7ff fa24 	bl	8003b24 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80046dc:	4603      	mov	r3, r0
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	462a      	mov	r2, r5
 80046e2:	4621      	mov	r1, r4
 80046e4:	4630      	mov	r0, r6
 80046e6:	f7fe f93d 	bl	8002964 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 80046ea:	4603      	mov	r3, r0
 80046ec:	4618      	mov	r0, r3
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046f4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80046f4:	b590      	push	{r4, r7, lr}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8004700:	68b8      	ldr	r0, [r7, #8]
 8004702:	f7ff ffb1 	bl	8004668 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8004706:	4604      	mov	r4, r0
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f7fc fcdb 	bl	80010c4 <_ZNSt9_Any_data9_M_accessEv>
 800470e:	4603      	mov	r3, r0
 8004710:	4619      	mov	r1, r3
 8004712:	2004      	movs	r0, #4
 8004714:	f7fc fcca 	bl	80010ac <_ZnwjPv>
 8004718:	4602      	mov	r2, r0
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	6013      	str	r3, [r2, #0]
	}
 800471e:	bf00      	nop
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	bd90      	pop	{r4, r7, pc}

08004726 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8004726:	b580      	push	{r7, lr}
 8004728:	b082      	sub	sp, #8
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f87c 	bl	800482e <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 8004736:	bf00      	nop
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 800473e:	b590      	push	{r4, r7, lr}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8004748:	687c      	ldr	r4, [r7, #4]
 800474a:	6838      	ldr	r0, [r7, #0]
 800474c:	f7ff fc77 	bl	800403e <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004750:	4603      	mov	r3, r0
 8004752:	4619      	mov	r1, r3
 8004754:	4620      	mov	r0, r4
 8004756:	f000 f876 	bl	8004846 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4618      	mov	r0, r3
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	bd90      	pop	{r4, r7, pc}

08004764 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800476e:	6838      	ldr	r0, [r7, #0]
 8004770:	f7ff fe56 	bl	8004420 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8004774:	4603      	mov	r3, r0
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3304      	adds	r3, #4
 8004792:	4618      	mov	r0, r3
 8004794:	f000 f868 	bl	8004868 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 8004798:	4603      	mov	r3, r0
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f867 	bl	800487e <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 80047b0:	4603      	mov	r3, r0
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b082      	sub	sp, #8
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3304      	adds	r3, #4
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 f866 	bl	8004898 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 80047cc:	4603      	mov	r3, r0
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <_ZNSt9_Any_data9_M_accessIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERT_v>:
      _M_access()
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fc fc70 	bl	80010c4 <_ZNSt9_Any_data9_M_accessEv>
 80047e4:	4603      	mov	r3, r0
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d201      	bcs.n	8004808 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	e000      	b.n	800480a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8004808:	687b      	ldr	r3, [r7, #4]
    }
 800480a:	4618      	mov	r0, r3
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fc fc50 	bl	80010c4 <_ZNSt9_Any_data9_M_accessEv>
 8004824:	4603      	mov	r3, r0
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fc fc44 	bl	80010c4 <_ZNSt9_Any_data9_M_accessEv>
 800483c:	4603      	mov	r3, r0
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004850:	6838      	ldr	r0, [r7, #0]
 8004852:	f7ff fbf4 	bl	800403e <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004856:	4603      	mov	r3, r0
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4618      	mov	r0, r3
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800487e:	b580      	push	{r7, lr}
 8004880:	b082      	sub	sp, #8
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4618      	mov	r0, r3
 800488a:	f000 f810 	bl	80048ae <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 800488e:	4603      	mov	r3, r0
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4618      	mov	r0, r3
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4618      	mov	r0, r3
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80048c4:	b5b0      	push	{r4, r5, r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d116      	bne.n	8004902 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048da:	4293      	cmp	r3, r2
 80048dc:	d111      	bne.n	8004902 <_Z41__static_initialization_and_destruction_0ii+0x3e>
static int64_t time_between_samples_us = (1000000 / (sampling_freq - 1));
 80048de:	4b0b      	ldr	r3, [pc, #44]	; (800490c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80048e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e4:	1e54      	subs	r4, r2, #1
 80048e6:	f143 35ff 	adc.w	r5, r3, #4294967295
 80048ea:	4622      	mov	r2, r4
 80048ec:	462b      	mov	r3, r5
 80048ee:	4808      	ldr	r0, [pc, #32]	; (8004910 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80048f0:	f04f 0100 	mov.w	r1, #0
 80048f4:	f7fc f9d2 	bl	8000c9c <__aeabi_ldivmod>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4905      	ldr	r1, [pc, #20]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80048fe:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bdb0      	pop	{r4, r5, r7, pc}
 800490a:	bf00      	nop
 800490c:	20000030 	.word	0x20000030
 8004910:	000f4240 	.word	0x000f4240
 8004914:	20000480 	.word	0x20000480

08004918 <_GLOBAL__sub_I_hadc1>:
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
 800491c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004920:	2001      	movs	r0, #1
 8004922:	f7ff ffcf 	bl	80048c4 <_Z41__static_initialization_and_destruction_0ii>
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800492e:	2300      	movs	r3, #0
 8004930:	607b      	str	r3, [r7, #4]
 8004932:	4b10      	ldr	r3, [pc, #64]	; (8004974 <HAL_MspInit+0x4c>)
 8004934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004936:	4a0f      	ldr	r2, [pc, #60]	; (8004974 <HAL_MspInit+0x4c>)
 8004938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800493c:	6453      	str	r3, [r2, #68]	; 0x44
 800493e:	4b0d      	ldr	r3, [pc, #52]	; (8004974 <HAL_MspInit+0x4c>)
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004946:	607b      	str	r3, [r7, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800494a:	2300      	movs	r3, #0
 800494c:	603b      	str	r3, [r7, #0]
 800494e:	4b09      	ldr	r3, [pc, #36]	; (8004974 <HAL_MspInit+0x4c>)
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	4a08      	ldr	r2, [pc, #32]	; (8004974 <HAL_MspInit+0x4c>)
 8004954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004958:	6413      	str	r3, [r2, #64]	; 0x40
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_MspInit+0x4c>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004962:	603b      	str	r3, [r7, #0]
 8004964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	40023800 	.word	0x40023800

08004978 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08a      	sub	sp, #40	; 0x28
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004980:	f107 0314 	add.w	r3, r7, #20
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	605a      	str	r2, [r3, #4]
 800498a:	609a      	str	r2, [r3, #8]
 800498c:	60da      	str	r2, [r3, #12]
 800498e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a17      	ldr	r2, [pc, #92]	; (80049f4 <HAL_ADC_MspInit+0x7c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d127      	bne.n	80049ea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800499a:	2300      	movs	r3, #0
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	4b16      	ldr	r3, [pc, #88]	; (80049f8 <HAL_ADC_MspInit+0x80>)
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	4a15      	ldr	r2, [pc, #84]	; (80049f8 <HAL_ADC_MspInit+0x80>)
 80049a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a8:	6453      	str	r3, [r2, #68]	; 0x44
 80049aa:	4b13      	ldr	r3, [pc, #76]	; (80049f8 <HAL_ADC_MspInit+0x80>)
 80049ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049b6:	2300      	movs	r3, #0
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <HAL_ADC_MspInit+0x80>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	4a0e      	ldr	r2, [pc, #56]	; (80049f8 <HAL_ADC_MspInit+0x80>)
 80049c0:	f043 0301 	orr.w	r3, r3, #1
 80049c4:	6313      	str	r3, [r2, #48]	; 0x30
 80049c6:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <HAL_ADC_MspInit+0x80>)
 80049c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80049d2:	2301      	movs	r3, #1
 80049d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049d6:	2303      	movs	r3, #3
 80049d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049da:	2300      	movs	r3, #0
 80049dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049de:	f107 0314 	add.w	r3, r7, #20
 80049e2:	4619      	mov	r1, r3
 80049e4:	4805      	ldr	r0, [pc, #20]	; (80049fc <HAL_ADC_MspInit+0x84>)
 80049e6:	f000 ff27 	bl	8005838 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80049ea:	bf00      	nop
 80049ec:	3728      	adds	r7, #40	; 0x28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	40012000 	.word	0x40012000
 80049f8:	40023800 	.word	0x40023800
 80049fc:	40020000 	.word	0x40020000

08004a00 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a0b      	ldr	r2, [pc, #44]	; (8004a3c <HAL_CRC_MspInit+0x3c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d10d      	bne.n	8004a2e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004a12:	2300      	movs	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <HAL_CRC_MspInit+0x40>)
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1a:	4a09      	ldr	r2, [pc, #36]	; (8004a40 <HAL_CRC_MspInit+0x40>)
 8004a1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a20:	6313      	str	r3, [r2, #48]	; 0x30
 8004a22:	4b07      	ldr	r3, [pc, #28]	; (8004a40 <HAL_CRC_MspInit+0x40>)
 8004a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004a2e:	bf00      	nop
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40023000 	.word	0x40023000
 8004a40:	40023800 	.word	0x40023800

08004a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a48:	e7fe      	b.n	8004a48 <NMI_Handler+0x4>

08004a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a4e:	e7fe      	b.n	8004a4e <HardFault_Handler+0x4>

08004a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a54:	e7fe      	b.n	8004a54 <MemManage_Handler+0x4>

08004a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a56:	b480      	push	{r7}
 8004a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a5a:	e7fe      	b.n	8004a5a <BusFault_Handler+0x4>

08004a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a60:	e7fe      	b.n	8004a60 <UsageFault_Handler+0x4>

08004a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a62:	b480      	push	{r7}
 8004a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a82:	bf00      	nop
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a90:	f000 f960 	bl	8004d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a94:	bf00      	nop
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004a9c:	4802      	ldr	r0, [pc, #8]	; (8004aa8 <OTG_FS_IRQHandler+0x10>)
 8004a9e:	f001 f9b7 	bl	8005e10 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20002268 	.word	0x20002268

08004aac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
	return 1;
 8004ab0:	2301      	movs	r3, #1
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <_kill>:

int _kill(int pid, int sig)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004ac6:	f00f ff61 	bl	801498c <__errno>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2216      	movs	r2, #22
 8004ace:	601a      	str	r2, [r3, #0]
	return -1;
 8004ad0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <_exit>:

void _exit (int status)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7ff ffe7 	bl	8004abc <_kill>
	while (1) {}		/* Make sure we hang here */
 8004aee:	e7fe      	b.n	8004aee <_exit+0x12>

08004af0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	e00a      	b.n	8004b18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004b02:	f3af 8000 	nop.w
 8004b06:	4601      	mov	r1, r0
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	60ba      	str	r2, [r7, #8]
 8004b0e:	b2ca      	uxtb	r2, r1
 8004b10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	3301      	adds	r3, #1
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	dbf0      	blt.n	8004b02 <_read+0x12>
	}

return len;
 8004b20:	687b      	ldr	r3, [r7, #4]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b086      	sub	sp, #24
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	e009      	b.n	8004b50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	60ba      	str	r2, [r7, #8]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	dbf1      	blt.n	8004b3c <_write+0x12>
	}
	return len;
 8004b58:	687b      	ldr	r3, [r7, #4]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <_close>:

int _close(int file)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
	return -1;
 8004b6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b8a:	605a      	str	r2, [r3, #4]
	return 0;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <_isatty>:

int _isatty(int file)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
	return 1;
 8004ba2:	2301      	movs	r3, #1
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
	return 0;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
	...

08004bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bd4:	4a14      	ldr	r2, [pc, #80]	; (8004c28 <_sbrk+0x5c>)
 8004bd6:	4b15      	ldr	r3, [pc, #84]	; (8004c2c <_sbrk+0x60>)
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004be0:	4b13      	ldr	r3, [pc, #76]	; (8004c30 <_sbrk+0x64>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d102      	bne.n	8004bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004be8:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <_sbrk+0x64>)
 8004bea:	4a12      	ldr	r2, [pc, #72]	; (8004c34 <_sbrk+0x68>)
 8004bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bee:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <_sbrk+0x64>)
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d207      	bcs.n	8004c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bfc:	f00f fec6 	bl	801498c <__errno>
 8004c00:	4603      	mov	r3, r0
 8004c02:	220c      	movs	r2, #12
 8004c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c06:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0a:	e009      	b.n	8004c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c0c:	4b08      	ldr	r3, [pc, #32]	; (8004c30 <_sbrk+0x64>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c12:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <_sbrk+0x64>)
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4413      	add	r3, r2
 8004c1a:	4a05      	ldr	r2, [pc, #20]	; (8004c30 <_sbrk+0x64>)
 8004c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	20020000 	.word	0x20020000
 8004c2c:	00000400 	.word	0x00000400
 8004c30:	20000960 	.word	0x20000960
 8004c34:	200029a8 	.word	0x200029a8

08004c38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c3c:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <SystemInit+0x20>)
 8004c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c42:	4a05      	ldr	r2, [pc, #20]	; (8004c58 <SystemInit+0x20>)
 8004c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c4c:	bf00      	nop
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	e000ed00 	.word	0xe000ed00

08004c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c60:	480d      	ldr	r0, [pc, #52]	; (8004c98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004c62:	490e      	ldr	r1, [pc, #56]	; (8004c9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004c64:	4a0e      	ldr	r2, [pc, #56]	; (8004ca0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c68:	e002      	b.n	8004c70 <LoopCopyDataInit>

08004c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c6e:	3304      	adds	r3, #4

08004c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c74:	d3f9      	bcc.n	8004c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c76:	4a0b      	ldr	r2, [pc, #44]	; (8004ca4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c78:	4c0b      	ldr	r4, [pc, #44]	; (8004ca8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c7c:	e001      	b.n	8004c82 <LoopFillZerobss>

08004c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c80:	3204      	adds	r2, #4

08004c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c84:	d3fb      	bcc.n	8004c7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004c86:	f7ff ffd7 	bl	8004c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c8a:	f00f fe97 	bl	80149bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c8e:	f7fe fc13 	bl	80034b8 <main>
  bx  lr    
 8004c92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004c94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c9c:	20000404 	.word	0x20000404
  ldr r2, =_sidata
 8004ca0:	08059f98 	.word	0x08059f98
  ldr r2, =_sbss
 8004ca4:	20000408 	.word	0x20000408
  ldr r4, =_ebss
 8004ca8:	200029a8 	.word	0x200029a8

08004cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004cac:	e7fe      	b.n	8004cac <ADC_IRQHandler>
	...

08004cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004cb4:	4b0e      	ldr	r3, [pc, #56]	; (8004cf0 <HAL_Init+0x40>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a0d      	ldr	r2, [pc, #52]	; (8004cf0 <HAL_Init+0x40>)
 8004cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <HAL_Init+0x40>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a0a      	ldr	r2, [pc, #40]	; (8004cf0 <HAL_Init+0x40>)
 8004cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ccc:	4b08      	ldr	r3, [pc, #32]	; (8004cf0 <HAL_Init+0x40>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a07      	ldr	r2, [pc, #28]	; (8004cf0 <HAL_Init+0x40>)
 8004cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cd8:	2003      	movs	r0, #3
 8004cda:	f000 fd4f 	bl	800577c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cde:	200f      	movs	r0, #15
 8004ce0:	f000 f808 	bl	8004cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ce4:	f7ff fe20 	bl	8004928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40023c00 	.word	0x40023c00

08004cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004cfc:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <HAL_InitTick+0x54>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	4b12      	ldr	r3, [pc, #72]	; (8004d4c <HAL_InitTick+0x58>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	4619      	mov	r1, r3
 8004d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fd67 	bl	80057e6 <HAL_SYSTICK_Config>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e00e      	b.n	8004d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b0f      	cmp	r3, #15
 8004d26:	d80a      	bhi.n	8004d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d28:	2200      	movs	r2, #0
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d30:	f000 fd2f 	bl	8005792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d34:	4a06      	ldr	r2, [pc, #24]	; (8004d50 <HAL_InitTick+0x5c>)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	e000      	b.n	8004d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	20000038 	.word	0x20000038
 8004d4c:	20000040 	.word	0x20000040
 8004d50:	2000003c 	.word	0x2000003c

08004d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d58:	4b06      	ldr	r3, [pc, #24]	; (8004d74 <HAL_IncTick+0x20>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <HAL_IncTick+0x24>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4413      	add	r3, r2
 8004d64:	4a04      	ldr	r2, [pc, #16]	; (8004d78 <HAL_IncTick+0x24>)
 8004d66:	6013      	str	r3, [r2, #0]
}
 8004d68:	bf00      	nop
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	20000040 	.word	0x20000040
 8004d78:	20000964 	.word	0x20000964

08004d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8004d80:	4b03      	ldr	r3, [pc, #12]	; (8004d90 <HAL_GetTick+0x14>)
 8004d82:	681b      	ldr	r3, [r3, #0]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	20000964 	.word	0x20000964

08004d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d9c:	f7ff ffee 	bl	8004d7c <HAL_GetTick>
 8004da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dac:	d005      	beq.n	8004dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004dae:	4b0a      	ldr	r3, [pc, #40]	; (8004dd8 <HAL_Delay+0x44>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004dba:	bf00      	nop
 8004dbc:	f7ff ffde 	bl	8004d7c <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d8f7      	bhi.n	8004dbc <HAL_Delay+0x28>
  {
  }
}
 8004dcc:	bf00      	nop
 8004dce:	bf00      	nop
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000040 	.word	0x20000040

08004ddc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e033      	b.n	8004e5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d109      	bne.n	8004e0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7ff fdbc 	bl	8004978 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	f003 0310 	and.w	r3, r3, #16
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d118      	bne.n	8004e4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004e22:	f023 0302 	bic.w	r3, r3, #2
 8004e26:	f043 0202 	orr.w	r2, r3, #2
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fad8 	bl	80053e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f023 0303 	bic.w	r3, r3, #3
 8004e42:	f043 0201 	orr.w	r2, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	641a      	str	r2, [r3, #64]	; 0x40
 8004e4a:	e001      	b.n	8004e50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d101      	bne.n	8004e7e <HAL_ADC_Start+0x1a>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e0b2      	b.n	8004fe4 <HAL_ADC_Start+0x180>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d018      	beq.n	8004ec6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004ea4:	4b52      	ldr	r3, [pc, #328]	; (8004ff0 <HAL_ADC_Start+0x18c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a52      	ldr	r2, [pc, #328]	; (8004ff4 <HAL_ADC_Start+0x190>)
 8004eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004eae:	0c9a      	lsrs	r2, r3, #18
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	4413      	add	r3, r2
 8004eb6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004eb8:	e002      	b.n	8004ec0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f9      	bne.n	8004eba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d17a      	bne.n	8004fca <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004edc:	f023 0301 	bic.w	r3, r3, #1
 8004ee0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d007      	beq.n	8004f06 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004efe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f12:	d106      	bne.n	8004f22 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f18:	f023 0206 	bic.w	r2, r3, #6
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	645a      	str	r2, [r3, #68]	; 0x44
 8004f20:	e002      	b.n	8004f28 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f30:	4b31      	ldr	r3, [pc, #196]	; (8004ff8 <HAL_ADC_Start+0x194>)
 8004f32:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004f3c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f003 031f 	and.w	r3, r3, #31
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d12a      	bne.n	8004fa0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a2b      	ldr	r2, [pc, #172]	; (8004ffc <HAL_ADC_Start+0x198>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d015      	beq.n	8004f80 <HAL_ADC_Start+0x11c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a29      	ldr	r2, [pc, #164]	; (8005000 <HAL_ADC_Start+0x19c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d105      	bne.n	8004f6a <HAL_ADC_Start+0x106>
 8004f5e:	4b26      	ldr	r3, [pc, #152]	; (8004ff8 <HAL_ADC_Start+0x194>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f003 031f 	and.w	r3, r3, #31
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a25      	ldr	r2, [pc, #148]	; (8005004 <HAL_ADC_Start+0x1a0>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d136      	bne.n	8004fe2 <HAL_ADC_Start+0x17e>
 8004f74:	4b20      	ldr	r3, [pc, #128]	; (8004ff8 <HAL_ADC_Start+0x194>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d130      	bne.n	8004fe2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d129      	bne.n	8004fe2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004f9c:	609a      	str	r2, [r3, #8]
 8004f9e:	e020      	b.n	8004fe2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a15      	ldr	r2, [pc, #84]	; (8004ffc <HAL_ADC_Start+0x198>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d11b      	bne.n	8004fe2 <HAL_ADC_Start+0x17e>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d114      	bne.n	8004fe2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004fc6:	609a      	str	r2, [r3, #8]
 8004fc8:	e00b      	b.n	8004fe2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	f043 0210 	orr.w	r2, r3, #16
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fda:	f043 0201 	orr.w	r2, r3, #1
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	20000038 	.word	0x20000038
 8004ff4:	431bde83 	.word	0x431bde83
 8004ff8:	40012300 	.word	0x40012300
 8004ffc:	40012000 	.word	0x40012000
 8005000:	40012100 	.word	0x40012100
 8005004:	40012200 	.word	0x40012200

08005008 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <HAL_ADC_Stop+0x16>
 800501a:	2302      	movs	r3, #2
 800501c:	e021      	b.n	8005062 <HAL_ADC_Stop+0x5a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0201 	bic.w	r2, r2, #1
 8005034:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d109      	bne.n	8005058 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005048:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800504c:	f023 0301 	bic.w	r3, r3, #1
 8005050:	f043 0201 	orr.w	r2, r3, #1
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800508a:	d113      	bne.n	80050b4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800509a:	d10b      	bne.n	80050b4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	f043 0220 	orr.w	r2, r3, #32
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e063      	b.n	800517c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80050b4:	f7ff fe62 	bl	8004d7c <HAL_GetTick>
 80050b8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80050ba:	e021      	b.n	8005100 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c2:	d01d      	beq.n	8005100 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d007      	beq.n	80050da <HAL_ADC_PollForConversion+0x6c>
 80050ca:	f7ff fe57 	bl	8004d7c <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d212      	bcs.n	8005100 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d00b      	beq.n	8005100 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ec:	f043 0204 	orr.w	r2, r3, #4
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e03d      	b.n	800517c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b02      	cmp	r3, #2
 800510c:	d1d6      	bne.n	80050bc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f06f 0212 	mvn.w	r2, #18
 8005116:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d123      	bne.n	800517a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005136:	2b00      	cmp	r3, #0
 8005138:	d11f      	bne.n	800517a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005140:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005144:	2b00      	cmp	r3, #0
 8005146:	d006      	beq.n	8005156 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005152:	2b00      	cmp	r3, #0
 8005154:	d111      	bne.n	800517a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d105      	bne.n	800517a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	f043 0201 	orr.w	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005192:	4618      	mov	r0, r3
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
	...

080051a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_ADC_ConfigChannel+0x1c>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e105      	b.n	80053c8 <HAL_ADC_ConfigChannel+0x228>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b09      	cmp	r3, #9
 80051ca:	d925      	bls.n	8005218 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68d9      	ldr	r1, [r3, #12]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	461a      	mov	r2, r3
 80051da:	4613      	mov	r3, r2
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	4413      	add	r3, r2
 80051e0:	3b1e      	subs	r3, #30
 80051e2:	2207      	movs	r2, #7
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	43da      	mvns	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	400a      	ands	r2, r1
 80051f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68d9      	ldr	r1, [r3, #12]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	4618      	mov	r0, r3
 8005204:	4603      	mov	r3, r0
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	4403      	add	r3, r0
 800520a:	3b1e      	subs	r3, #30
 800520c:	409a      	lsls	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	60da      	str	r2, [r3, #12]
 8005216:	e022      	b.n	800525e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6919      	ldr	r1, [r3, #16]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	b29b      	uxth	r3, r3
 8005224:	461a      	mov	r2, r3
 8005226:	4613      	mov	r3, r2
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	4413      	add	r3, r2
 800522c:	2207      	movs	r2, #7
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	43da      	mvns	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	400a      	ands	r2, r1
 800523a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6919      	ldr	r1, [r3, #16]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	b29b      	uxth	r3, r3
 800524c:	4618      	mov	r0, r3
 800524e:	4603      	mov	r3, r0
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	4403      	add	r3, r0
 8005254:	409a      	lsls	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b06      	cmp	r3, #6
 8005264:	d824      	bhi.n	80052b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	3b05      	subs	r3, #5
 8005278:	221f      	movs	r2, #31
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	43da      	mvns	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	400a      	ands	r2, r1
 8005286:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	b29b      	uxth	r3, r3
 8005294:	4618      	mov	r0, r3
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	3b05      	subs	r3, #5
 80052a2:	fa00 f203 	lsl.w	r2, r0, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	635a      	str	r2, [r3, #52]	; 0x34
 80052ae:	e04c      	b.n	800534a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b0c      	cmp	r3, #12
 80052b6:	d824      	bhi.n	8005302 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	3b23      	subs	r3, #35	; 0x23
 80052ca:	221f      	movs	r2, #31
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	43da      	mvns	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	400a      	ands	r2, r1
 80052d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	4618      	mov	r0, r3
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	3b23      	subs	r3, #35	; 0x23
 80052f4:	fa00 f203 	lsl.w	r2, r0, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	631a      	str	r2, [r3, #48]	; 0x30
 8005300:	e023      	b.n	800534a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	3b41      	subs	r3, #65	; 0x41
 8005314:	221f      	movs	r2, #31
 8005316:	fa02 f303 	lsl.w	r3, r2, r3
 800531a:	43da      	mvns	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	400a      	ands	r2, r1
 8005322:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	b29b      	uxth	r3, r3
 8005330:	4618      	mov	r0, r3
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	3b41      	subs	r3, #65	; 0x41
 800533e:	fa00 f203 	lsl.w	r2, r0, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800534a:	4b22      	ldr	r3, [pc, #136]	; (80053d4 <HAL_ADC_ConfigChannel+0x234>)
 800534c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a21      	ldr	r2, [pc, #132]	; (80053d8 <HAL_ADC_ConfigChannel+0x238>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d109      	bne.n	800536c <HAL_ADC_ConfigChannel+0x1cc>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b12      	cmp	r3, #18
 800535e:	d105      	bne.n	800536c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a19      	ldr	r2, [pc, #100]	; (80053d8 <HAL_ADC_ConfigChannel+0x238>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d123      	bne.n	80053be <HAL_ADC_ConfigChannel+0x21e>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b10      	cmp	r3, #16
 800537c:	d003      	beq.n	8005386 <HAL_ADC_ConfigChannel+0x1e6>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b11      	cmp	r3, #17
 8005384:	d11b      	bne.n	80053be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b10      	cmp	r3, #16
 8005398:	d111      	bne.n	80053be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800539a:	4b10      	ldr	r3, [pc, #64]	; (80053dc <HAL_ADC_ConfigChannel+0x23c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a10      	ldr	r2, [pc, #64]	; (80053e0 <HAL_ADC_ConfigChannel+0x240>)
 80053a0:	fba2 2303 	umull	r2, r3, r2, r3
 80053a4:	0c9a      	lsrs	r2, r3, #18
 80053a6:	4613      	mov	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80053b0:	e002      	b.n	80053b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	3b01      	subs	r3, #1
 80053b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f9      	bne.n	80053b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	40012300 	.word	0x40012300
 80053d8:	40012000 	.word	0x40012000
 80053dc:	20000038 	.word	0x20000038
 80053e0:	431bde83 	.word	0x431bde83

080053e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053ec:	4b79      	ldr	r3, [pc, #484]	; (80055d4 <ADC_Init+0x1f0>)
 80053ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	431a      	orrs	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005418:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6859      	ldr	r1, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	021a      	lsls	r2, r3, #8
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800543c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6859      	ldr	r1, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800545e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6899      	ldr	r1, [r3, #8]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005476:	4a58      	ldr	r2, [pc, #352]	; (80055d8 <ADC_Init+0x1f4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d022      	beq.n	80054c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800548a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6899      	ldr	r1, [r3, #8]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80054ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6899      	ldr	r1, [r3, #8]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	609a      	str	r2, [r3, #8]
 80054c0:	e00f      	b.n	80054e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80054e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0202 	bic.w	r2, r2, #2
 80054f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6899      	ldr	r1, [r3, #8]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	7e1b      	ldrb	r3, [r3, #24]
 80054fc:	005a      	lsls	r2, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01b      	beq.n	8005548 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800551e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800552e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6859      	ldr	r1, [r3, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	3b01      	subs	r3, #1
 800553c:	035a      	lsls	r2, r3, #13
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	605a      	str	r2, [r3, #4]
 8005546:	e007      	b.n	8005558 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005556:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005566:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	3b01      	subs	r3, #1
 8005574:	051a      	lsls	r2, r3, #20
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800558c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6899      	ldr	r1, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800559a:	025a      	lsls	r2, r3, #9
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6899      	ldr	r1, [r3, #8]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	029a      	lsls	r2, r3, #10
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	609a      	str	r2, [r3, #8]
}
 80055c8:	bf00      	nop
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	40012300 	.word	0x40012300
 80055d8:	0f000001 	.word	0x0f000001

080055dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055ec:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <__NVIC_SetPriorityGrouping+0x44>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055f8:	4013      	ands	r3, r2
 80055fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800560c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800560e:	4a04      	ldr	r2, [pc, #16]	; (8005620 <__NVIC_SetPriorityGrouping+0x44>)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	60d3      	str	r3, [r2, #12]
}
 8005614:	bf00      	nop
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	e000ed00 	.word	0xe000ed00

08005624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005628:	4b04      	ldr	r3, [pc, #16]	; (800563c <__NVIC_GetPriorityGrouping+0x18>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	0a1b      	lsrs	r3, r3, #8
 800562e:	f003 0307 	and.w	r3, r3, #7
}
 8005632:	4618      	mov	r0, r3
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	e000ed00 	.word	0xe000ed00

08005640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	4603      	mov	r3, r0
 8005648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800564a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800564e:	2b00      	cmp	r3, #0
 8005650:	db0b      	blt.n	800566a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005652:	79fb      	ldrb	r3, [r7, #7]
 8005654:	f003 021f 	and.w	r2, r3, #31
 8005658:	4907      	ldr	r1, [pc, #28]	; (8005678 <__NVIC_EnableIRQ+0x38>)
 800565a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	2001      	movs	r0, #1
 8005662:	fa00 f202 	lsl.w	r2, r0, r2
 8005666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	e000e100 	.word	0xe000e100

0800567c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	4603      	mov	r3, r0
 8005684:	6039      	str	r1, [r7, #0]
 8005686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800568c:	2b00      	cmp	r3, #0
 800568e:	db0a      	blt.n	80056a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	b2da      	uxtb	r2, r3
 8005694:	490c      	ldr	r1, [pc, #48]	; (80056c8 <__NVIC_SetPriority+0x4c>)
 8005696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800569a:	0112      	lsls	r2, r2, #4
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	440b      	add	r3, r1
 80056a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056a4:	e00a      	b.n	80056bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	4908      	ldr	r1, [pc, #32]	; (80056cc <__NVIC_SetPriority+0x50>)
 80056ac:	79fb      	ldrb	r3, [r7, #7]
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	3b04      	subs	r3, #4
 80056b4:	0112      	lsls	r2, r2, #4
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	440b      	add	r3, r1
 80056ba:	761a      	strb	r2, [r3, #24]
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	e000e100 	.word	0xe000e100
 80056cc:	e000ed00 	.word	0xe000ed00

080056d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b089      	sub	sp, #36	; 0x24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f003 0307 	and.w	r3, r3, #7
 80056e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	f1c3 0307 	rsb	r3, r3, #7
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	bf28      	it	cs
 80056ee:	2304      	movcs	r3, #4
 80056f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	3304      	adds	r3, #4
 80056f6:	2b06      	cmp	r3, #6
 80056f8:	d902      	bls.n	8005700 <NVIC_EncodePriority+0x30>
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	3b03      	subs	r3, #3
 80056fe:	e000      	b.n	8005702 <NVIC_EncodePriority+0x32>
 8005700:	2300      	movs	r3, #0
 8005702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005704:	f04f 32ff 	mov.w	r2, #4294967295
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	43da      	mvns	r2, r3
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	401a      	ands	r2, r3
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005718:	f04f 31ff 	mov.w	r1, #4294967295
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	fa01 f303 	lsl.w	r3, r1, r3
 8005722:	43d9      	mvns	r1, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005728:	4313      	orrs	r3, r2
         );
}
 800572a:	4618      	mov	r0, r3
 800572c:	3724      	adds	r7, #36	; 0x24
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
	...

08005738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3b01      	subs	r3, #1
 8005744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005748:	d301      	bcc.n	800574e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800574a:	2301      	movs	r3, #1
 800574c:	e00f      	b.n	800576e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800574e:	4a0a      	ldr	r2, [pc, #40]	; (8005778 <SysTick_Config+0x40>)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3b01      	subs	r3, #1
 8005754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005756:	210f      	movs	r1, #15
 8005758:	f04f 30ff 	mov.w	r0, #4294967295
 800575c:	f7ff ff8e 	bl	800567c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005760:	4b05      	ldr	r3, [pc, #20]	; (8005778 <SysTick_Config+0x40>)
 8005762:	2200      	movs	r2, #0
 8005764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005766:	4b04      	ldr	r3, [pc, #16]	; (8005778 <SysTick_Config+0x40>)
 8005768:	2207      	movs	r2, #7
 800576a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	e000e010 	.word	0xe000e010

0800577c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7ff ff29 	bl	80055dc <__NVIC_SetPriorityGrouping>
}
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005792:	b580      	push	{r7, lr}
 8005794:	b086      	sub	sp, #24
 8005796:	af00      	add	r7, sp, #0
 8005798:	4603      	mov	r3, r0
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	607a      	str	r2, [r7, #4]
 800579e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057a4:	f7ff ff3e 	bl	8005624 <__NVIC_GetPriorityGrouping>
 80057a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	6978      	ldr	r0, [r7, #20]
 80057b0:	f7ff ff8e 	bl	80056d0 <NVIC_EncodePriority>
 80057b4:	4602      	mov	r2, r0
 80057b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ba:	4611      	mov	r1, r2
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff ff5d 	bl	800567c <__NVIC_SetPriority>
}
 80057c2:	bf00      	nop
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b082      	sub	sp, #8
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	4603      	mov	r3, r0
 80057d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff ff31 	bl	8005640 <__NVIC_EnableIRQ>
}
 80057de:	bf00      	nop
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b082      	sub	sp, #8
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7ff ffa2 	bl	8005738 <SysTick_Config>
 80057f4:	4603      	mov	r3, r0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b082      	sub	sp, #8
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e00e      	b.n	800582e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	795b      	ldrb	r3, [r3, #5]
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d105      	bne.n	8005826 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff f8ed 	bl	8004a00 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005838:	b480      	push	{r7}
 800583a:	b089      	sub	sp, #36	; 0x24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005842:	2300      	movs	r3, #0
 8005844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005846:	2300      	movs	r3, #0
 8005848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800584a:	2300      	movs	r3, #0
 800584c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800584e:	2300      	movs	r3, #0
 8005850:	61fb      	str	r3, [r7, #28]
 8005852:	e16b      	b.n	8005b2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005854:	2201      	movs	r2, #1
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	fa02 f303 	lsl.w	r3, r2, r3
 800585c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4013      	ands	r3, r2
 8005866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	429a      	cmp	r2, r3
 800586e:	f040 815a 	bne.w	8005b26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	2b01      	cmp	r3, #1
 800587c:	d005      	beq.n	800588a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005886:	2b02      	cmp	r3, #2
 8005888:	d130      	bne.n	80058ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	2203      	movs	r2, #3
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	43db      	mvns	r3, r3
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	4013      	ands	r3, r2
 80058a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68da      	ldr	r2, [r3, #12]
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058c0:	2201      	movs	r2, #1
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	43db      	mvns	r3, r3
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	4013      	ands	r3, r2
 80058ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	091b      	lsrs	r3, r3, #4
 80058d6:	f003 0201 	and.w	r2, r3, #1
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f003 0303 	and.w	r3, r3, #3
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d017      	beq.n	8005928 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	2203      	movs	r2, #3
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	43db      	mvns	r3, r3
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	4013      	ands	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	4313      	orrs	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f003 0303 	and.w	r3, r3, #3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d123      	bne.n	800597c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	08da      	lsrs	r2, r3, #3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3208      	adds	r2, #8
 800593c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	220f      	movs	r2, #15
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	43db      	mvns	r3, r3
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	4013      	ands	r3, r2
 8005956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	691a      	ldr	r2, [r3, #16]
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	fa02 f303 	lsl.w	r3, r2, r3
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	4313      	orrs	r3, r2
 800596c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	08da      	lsrs	r2, r3, #3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3208      	adds	r2, #8
 8005976:	69b9      	ldr	r1, [r7, #24]
 8005978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	2203      	movs	r2, #3
 8005988:	fa02 f303 	lsl.w	r3, r2, r3
 800598c:	43db      	mvns	r3, r3
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	4013      	ands	r3, r2
 8005992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f003 0203 	and.w	r2, r3, #3
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	fa02 f303 	lsl.w	r3, r2, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 80b4 	beq.w	8005b26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	4b60      	ldr	r3, [pc, #384]	; (8005b44 <HAL_GPIO_Init+0x30c>)
 80059c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c6:	4a5f      	ldr	r2, [pc, #380]	; (8005b44 <HAL_GPIO_Init+0x30c>)
 80059c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059cc:	6453      	str	r3, [r2, #68]	; 0x44
 80059ce:	4b5d      	ldr	r3, [pc, #372]	; (8005b44 <HAL_GPIO_Init+0x30c>)
 80059d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059da:	4a5b      	ldr	r2, [pc, #364]	; (8005b48 <HAL_GPIO_Init+0x310>)
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	089b      	lsrs	r3, r3, #2
 80059e0:	3302      	adds	r3, #2
 80059e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	220f      	movs	r2, #15
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	43db      	mvns	r3, r3
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	4013      	ands	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a52      	ldr	r2, [pc, #328]	; (8005b4c <HAL_GPIO_Init+0x314>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d02b      	beq.n	8005a5e <HAL_GPIO_Init+0x226>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a51      	ldr	r2, [pc, #324]	; (8005b50 <HAL_GPIO_Init+0x318>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d025      	beq.n	8005a5a <HAL_GPIO_Init+0x222>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a50      	ldr	r2, [pc, #320]	; (8005b54 <HAL_GPIO_Init+0x31c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d01f      	beq.n	8005a56 <HAL_GPIO_Init+0x21e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a4f      	ldr	r2, [pc, #316]	; (8005b58 <HAL_GPIO_Init+0x320>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d019      	beq.n	8005a52 <HAL_GPIO_Init+0x21a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a4e      	ldr	r2, [pc, #312]	; (8005b5c <HAL_GPIO_Init+0x324>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d013      	beq.n	8005a4e <HAL_GPIO_Init+0x216>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a4d      	ldr	r2, [pc, #308]	; (8005b60 <HAL_GPIO_Init+0x328>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00d      	beq.n	8005a4a <HAL_GPIO_Init+0x212>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a4c      	ldr	r2, [pc, #304]	; (8005b64 <HAL_GPIO_Init+0x32c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d007      	beq.n	8005a46 <HAL_GPIO_Init+0x20e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a4b      	ldr	r2, [pc, #300]	; (8005b68 <HAL_GPIO_Init+0x330>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d101      	bne.n	8005a42 <HAL_GPIO_Init+0x20a>
 8005a3e:	2307      	movs	r3, #7
 8005a40:	e00e      	b.n	8005a60 <HAL_GPIO_Init+0x228>
 8005a42:	2308      	movs	r3, #8
 8005a44:	e00c      	b.n	8005a60 <HAL_GPIO_Init+0x228>
 8005a46:	2306      	movs	r3, #6
 8005a48:	e00a      	b.n	8005a60 <HAL_GPIO_Init+0x228>
 8005a4a:	2305      	movs	r3, #5
 8005a4c:	e008      	b.n	8005a60 <HAL_GPIO_Init+0x228>
 8005a4e:	2304      	movs	r3, #4
 8005a50:	e006      	b.n	8005a60 <HAL_GPIO_Init+0x228>
 8005a52:	2303      	movs	r3, #3
 8005a54:	e004      	b.n	8005a60 <HAL_GPIO_Init+0x228>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e002      	b.n	8005a60 <HAL_GPIO_Init+0x228>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e000      	b.n	8005a60 <HAL_GPIO_Init+0x228>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	f002 0203 	and.w	r2, r2, #3
 8005a66:	0092      	lsls	r2, r2, #2
 8005a68:	4093      	lsls	r3, r2
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a70:	4935      	ldr	r1, [pc, #212]	; (8005b48 <HAL_GPIO_Init+0x310>)
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	089b      	lsrs	r3, r3, #2
 8005a76:	3302      	adds	r3, #2
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a7e:	4b3b      	ldr	r3, [pc, #236]	; (8005b6c <HAL_GPIO_Init+0x334>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	43db      	mvns	r3, r3
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005aa2:	4a32      	ldr	r2, [pc, #200]	; (8005b6c <HAL_GPIO_Init+0x334>)
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005aa8:	4b30      	ldr	r3, [pc, #192]	; (8005b6c <HAL_GPIO_Init+0x334>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005acc:	4a27      	ldr	r2, [pc, #156]	; (8005b6c <HAL_GPIO_Init+0x334>)
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005ad2:	4b26      	ldr	r3, [pc, #152]	; (8005b6c <HAL_GPIO_Init+0x334>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	43db      	mvns	r3, r3
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005af6:	4a1d      	ldr	r2, [pc, #116]	; (8005b6c <HAL_GPIO_Init+0x334>)
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005afc:	4b1b      	ldr	r3, [pc, #108]	; (8005b6c <HAL_GPIO_Init+0x334>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	43db      	mvns	r3, r3
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b20:	4a12      	ldr	r2, [pc, #72]	; (8005b6c <HAL_GPIO_Init+0x334>)
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	61fb      	str	r3, [r7, #28]
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	2b0f      	cmp	r3, #15
 8005b30:	f67f ae90 	bls.w	8005854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b34:	bf00      	nop
 8005b36:	bf00      	nop
 8005b38:	3724      	adds	r7, #36	; 0x24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40023800 	.word	0x40023800
 8005b48:	40013800 	.word	0x40013800
 8005b4c:	40020000 	.word	0x40020000
 8005b50:	40020400 	.word	0x40020400
 8005b54:	40020800 	.word	0x40020800
 8005b58:	40020c00 	.word	0x40020c00
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	40021400 	.word	0x40021400
 8005b64:	40021800 	.word	0x40021800
 8005b68:	40021c00 	.word	0x40021c00
 8005b6c:	40013c00 	.word	0x40013c00

08005b70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b72:	b08f      	sub	sp, #60	; 0x3c
 8005b74:	af0a      	add	r7, sp, #40	; 0x28
 8005b76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e10f      	b.n	8005da2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d106      	bne.n	8005ba2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f00d f9a5 	bl	8012eec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2203      	movs	r2, #3
 8005ba6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d102      	bne.n	8005bbc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f001 ffd8 	bl	8007b76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	687e      	ldr	r6, [r7, #4]
 8005bce:	466d      	mov	r5, sp
 8005bd0:	f106 0410 	add.w	r4, r6, #16
 8005bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005be0:	e885 0003 	stmia.w	r5, {r0, r1}
 8005be4:	1d33      	adds	r3, r6, #4
 8005be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005be8:	6838      	ldr	r0, [r7, #0]
 8005bea:	f001 feaf 	bl	800794c <USB_CoreInit>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d005      	beq.n	8005c00 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e0d0      	b.n	8005da2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2100      	movs	r1, #0
 8005c06:	4618      	mov	r0, r3
 8005c08:	f001 ffc6 	bl	8007b98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	73fb      	strb	r3, [r7, #15]
 8005c10:	e04a      	b.n	8005ca8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005c12:	7bfa      	ldrb	r2, [r7, #15]
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	4613      	mov	r3, r2
 8005c18:	00db      	lsls	r3, r3, #3
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	333d      	adds	r3, #61	; 0x3d
 8005c22:	2201      	movs	r2, #1
 8005c24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005c26:	7bfa      	ldrb	r2, [r7, #15]
 8005c28:	6879      	ldr	r1, [r7, #4]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	4413      	add	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	440b      	add	r3, r1
 8005c34:	333c      	adds	r3, #60	; 0x3c
 8005c36:	7bfa      	ldrb	r2, [r7, #15]
 8005c38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005c3a:	7bfa      	ldrb	r2, [r7, #15]
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
 8005c3e:	b298      	uxth	r0, r3
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	4613      	mov	r3, r2
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	3344      	adds	r3, #68	; 0x44
 8005c4e:	4602      	mov	r2, r0
 8005c50:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c52:	7bfa      	ldrb	r2, [r7, #15]
 8005c54:	6879      	ldr	r1, [r7, #4]
 8005c56:	4613      	mov	r3, r2
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	4413      	add	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	440b      	add	r3, r1
 8005c60:	3340      	adds	r3, #64	; 0x40
 8005c62:	2200      	movs	r2, #0
 8005c64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005c66:	7bfa      	ldrb	r2, [r7, #15]
 8005c68:	6879      	ldr	r1, [r7, #4]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	440b      	add	r3, r1
 8005c74:	3348      	adds	r3, #72	; 0x48
 8005c76:	2200      	movs	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c7a:	7bfa      	ldrb	r2, [r7, #15]
 8005c7c:	6879      	ldr	r1, [r7, #4]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	440b      	add	r3, r1
 8005c88:	334c      	adds	r3, #76	; 0x4c
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c8e:	7bfa      	ldrb	r2, [r7, #15]
 8005c90:	6879      	ldr	r1, [r7, #4]
 8005c92:	4613      	mov	r3, r2
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	440b      	add	r3, r1
 8005c9c:	3354      	adds	r3, #84	; 0x54
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	73fb      	strb	r3, [r7, #15]
 8005ca8:	7bfa      	ldrb	r2, [r7, #15]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d3af      	bcc.n	8005c12 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	73fb      	strb	r3, [r7, #15]
 8005cb6:	e044      	b.n	8005d42 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005cb8:	7bfa      	ldrb	r2, [r7, #15]
 8005cba:	6879      	ldr	r1, [r7, #4]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005cca:	2200      	movs	r2, #0
 8005ccc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005cce:	7bfa      	ldrb	r2, [r7, #15]
 8005cd0:	6879      	ldr	r1, [r7, #4]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	4413      	add	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	440b      	add	r3, r1
 8005cdc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005ce0:	7bfa      	ldrb	r2, [r7, #15]
 8005ce2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ce4:	7bfa      	ldrb	r2, [r7, #15]
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	4413      	add	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	440b      	add	r3, r1
 8005cf2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005cfa:	7bfa      	ldrb	r2, [r7, #15]
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	440b      	add	r3, r1
 8005d08:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005d10:	7bfa      	ldrb	r2, [r7, #15]
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	4613      	mov	r3, r2
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	4413      	add	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005d26:	7bfa      	ldrb	r2, [r7, #15]
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	440b      	add	r3, r1
 8005d34:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	73fb      	strb	r3, [r7, #15]
 8005d42:	7bfa      	ldrb	r2, [r7, #15]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d3b5      	bcc.n	8005cb8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	603b      	str	r3, [r7, #0]
 8005d52:	687e      	ldr	r6, [r7, #4]
 8005d54:	466d      	mov	r5, sp
 8005d56:	f106 0410 	add.w	r4, r6, #16
 8005d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d66:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d6a:	1d33      	adds	r3, r6, #4
 8005d6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d6e:	6838      	ldr	r0, [r7, #0]
 8005d70:	f001 ff5e 	bl	8007c30 <USB_DevInit>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d005      	beq.n	8005d86 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e00d      	b.n	8005da2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f003 f8ad 	bl	8008efa <USB_DevDisconnect>

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005daa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d101      	bne.n	8005dc6 <HAL_PCD_Start+0x1c>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e020      	b.n	8005e08 <HAL_PCD_Start+0x5e>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d109      	bne.n	8005dea <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d005      	beq.n	8005dea <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f001 feb0 	bl	8007b54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f003 f85d 	bl	8008eb8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005e10:	b590      	push	{r4, r7, lr}
 8005e12:	b08d      	sub	sp, #52	; 0x34
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f003 f91b 	bl	8009062 <USB_GetMode>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f040 848a 	bne.w	8006748 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f003 f87f 	bl	8008f3c <USB_ReadInterrupts>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 8480 	beq.w	8006746 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	0a1b      	lsrs	r3, r3, #8
 8005e50:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f003 f86c 	bl	8008f3c <USB_ReadInterrupts>
 8005e64:	4603      	mov	r3, r0
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d107      	bne.n	8005e7e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	695a      	ldr	r2, [r3, #20]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f002 0202 	and.w	r2, r2, #2
 8005e7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f003 f85a 	bl	8008f3c <USB_ReadInterrupts>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	f003 0310 	and.w	r3, r3, #16
 8005e8e:	2b10      	cmp	r3, #16
 8005e90:	d161      	bne.n	8005f56 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	699a      	ldr	r2, [r3, #24]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0210 	bic.w	r2, r2, #16
 8005ea0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	f003 020f 	and.w	r2, r3, #15
 8005eae:	4613      	mov	r3, r2
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	4413      	add	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	0c5b      	lsrs	r3, r3, #17
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d124      	bne.n	8005f18 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d035      	beq.n	8005f46 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	091b      	lsrs	r3, r3, #4
 8005ee2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005ee4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	461a      	mov	r2, r3
 8005eec:	6a38      	ldr	r0, [r7, #32]
 8005eee:	f002 fe91 	bl	8008c14 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	691a      	ldr	r2, [r3, #16]
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	091b      	lsrs	r3, r3, #4
 8005efa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005efe:	441a      	add	r2, r3
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	6a1a      	ldr	r2, [r3, #32]
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	091b      	lsrs	r3, r3, #4
 8005f0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f10:	441a      	add	r2, r3
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	621a      	str	r2, [r3, #32]
 8005f16:	e016      	b.n	8005f46 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	0c5b      	lsrs	r3, r3, #17
 8005f1c:	f003 030f 	and.w	r3, r3, #15
 8005f20:	2b06      	cmp	r3, #6
 8005f22:	d110      	bne.n	8005f46 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005f2a:	2208      	movs	r2, #8
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	6a38      	ldr	r0, [r7, #32]
 8005f30:	f002 fe70 	bl	8008c14 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	6a1a      	ldr	r2, [r3, #32]
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	091b      	lsrs	r3, r3, #4
 8005f3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f40:	441a      	add	r2, r3
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	699a      	ldr	r2, [r3, #24]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f042 0210 	orr.w	r2, r2, #16
 8005f54:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f002 ffee 	bl	8008f3c <USB_ReadInterrupts>
 8005f60:	4603      	mov	r3, r0
 8005f62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f6a:	f040 80a7 	bne.w	80060bc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f002 fff3 	bl	8008f62 <USB_ReadDevAllOutEpInterrupt>
 8005f7c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005f7e:	e099      	b.n	80060b4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 808e 	beq.w	80060a8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f92:	b2d2      	uxtb	r2, r2
 8005f94:	4611      	mov	r1, r2
 8005f96:	4618      	mov	r0, r3
 8005f98:	f003 f817 	bl	8008fca <USB_ReadDevOutEPInterrupt>
 8005f9c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00c      	beq.n	8005fc2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005fba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fec3 	bl	8006d48 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f003 0308 	and.w	r3, r3, #8
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00c      	beq.n	8005fe6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd8:	461a      	mov	r2, r3
 8005fda:	2308      	movs	r3, #8
 8005fdc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005fde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 ff99 	bl	8006f18 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f003 0310 	and.w	r3, r3, #16
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d008      	beq.n	8006002 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	2310      	movs	r3, #16
 8006000:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b00      	cmp	r3, #0
 800600a:	d030      	beq.n	800606e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006014:	2b80      	cmp	r3, #128	; 0x80
 8006016:	d109      	bne.n	800602c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	69fa      	ldr	r2, [r7, #28]
 8006022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800602a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800602c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800602e:	4613      	mov	r3, r2
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	4413      	add	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	4413      	add	r3, r2
 800603e:	3304      	adds	r3, #4
 8006040:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	78db      	ldrb	r3, [r3, #3]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d108      	bne.n	800605c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	2200      	movs	r2, #0
 800604e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	b2db      	uxtb	r3, r3
 8006054:	4619      	mov	r1, r3
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f00d f84e 	bl	80130f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006068:	461a      	mov	r2, r3
 800606a:	2302      	movs	r3, #2
 800606c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f003 0320 	and.w	r3, r3, #32
 8006074:	2b00      	cmp	r3, #0
 8006076:	d008      	beq.n	800608a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006084:	461a      	mov	r2, r3
 8006086:	2320      	movs	r3, #32
 8006088:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d009      	beq.n	80060a8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a0:	461a      	mov	r2, r3
 80060a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	3301      	adds	r3, #1
 80060ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80060ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b0:	085b      	lsrs	r3, r3, #1
 80060b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f47f af62 	bne.w	8005f80 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f002 ff3b 	bl	8008f3c <USB_ReadInterrupts>
 80060c6:	4603      	mov	r3, r0
 80060c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060d0:	f040 80db 	bne.w	800628a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4618      	mov	r0, r3
 80060da:	f002 ff5c 	bl	8008f96 <USB_ReadDevAllInEpInterrupt>
 80060de:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80060e4:	e0cd      	b.n	8006282 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 80c2 	beq.w	8006276 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	4611      	mov	r1, r2
 80060fc:	4618      	mov	r0, r3
 80060fe:	f002 ff82 	bl	8009006 <USB_ReadDevInEPInterrupt>
 8006102:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d057      	beq.n	80061be <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	f003 030f 	and.w	r3, r3, #15
 8006114:	2201      	movs	r2, #1
 8006116:	fa02 f303 	lsl.w	r3, r2, r3
 800611a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	43db      	mvns	r3, r3
 8006128:	69f9      	ldr	r1, [r7, #28]
 800612a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800612e:	4013      	ands	r3, r2
 8006130:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613e:	461a      	mov	r2, r3
 8006140:	2301      	movs	r3, #1
 8006142:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d132      	bne.n	80061b2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800614c:	6879      	ldr	r1, [r7, #4]
 800614e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006150:	4613      	mov	r3, r2
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	440b      	add	r3, r1
 800615a:	334c      	adds	r3, #76	; 0x4c
 800615c:	6819      	ldr	r1, [r3, #0]
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006162:	4613      	mov	r3, r2
 8006164:	00db      	lsls	r3, r3, #3
 8006166:	4413      	add	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4403      	add	r3, r0
 800616c:	3348      	adds	r3, #72	; 0x48
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4419      	add	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006176:	4613      	mov	r3, r2
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	4413      	add	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4403      	add	r3, r0
 8006180:	334c      	adds	r3, #76	; 0x4c
 8006182:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	2b00      	cmp	r3, #0
 8006188:	d113      	bne.n	80061b2 <HAL_PCD_IRQHandler+0x3a2>
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800618e:	4613      	mov	r3, r2
 8006190:	00db      	lsls	r3, r3, #3
 8006192:	4413      	add	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	440b      	add	r3, r1
 8006198:	3354      	adds	r3, #84	; 0x54
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d108      	bne.n	80061b2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6818      	ldr	r0, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80061aa:	461a      	mov	r2, r3
 80061ac:	2101      	movs	r1, #1
 80061ae:	f002 ff89 	bl	80090c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	4619      	mov	r1, r3
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f00c ff18 	bl	8012fee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d008      	beq.n	80061da <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d4:	461a      	mov	r2, r3
 80061d6:	2308      	movs	r3, #8
 80061d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f003 0310 	and.w	r3, r3, #16
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d008      	beq.n	80061f6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f0:	461a      	mov	r2, r3
 80061f2:	2310      	movs	r3, #16
 80061f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d008      	beq.n	8006212 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620c:	461a      	mov	r2, r3
 800620e:	2340      	movs	r3, #64	; 0x40
 8006210:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b00      	cmp	r3, #0
 800621a:	d023      	beq.n	8006264 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800621c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800621e:	6a38      	ldr	r0, [r7, #32]
 8006220:	f001 fe6a 	bl	8007ef8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006226:	4613      	mov	r3, r2
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	4413      	add	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	3338      	adds	r3, #56	; 0x38
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	4413      	add	r3, r2
 8006234:	3304      	adds	r3, #4
 8006236:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	78db      	ldrb	r3, [r3, #3]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d108      	bne.n	8006252 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	2200      	movs	r2, #0
 8006244:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	b2db      	uxtb	r3, r3
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f00c ff65 	bl	801311c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625e:	461a      	mov	r2, r3
 8006260:	2302      	movs	r3, #2
 8006262:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800626e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fcdb 	bl	8006c2c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	3301      	adds	r3, #1
 800627a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627e:	085b      	lsrs	r3, r3, #1
 8006280:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006284:	2b00      	cmp	r3, #0
 8006286:	f47f af2e 	bne.w	80060e6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4618      	mov	r0, r3
 8006290:	f002 fe54 	bl	8008f3c <USB_ReadInterrupts>
 8006294:	4603      	mov	r3, r0
 8006296:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800629a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800629e:	d122      	bne.n	80062e6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	69fa      	ldr	r2, [r7, #28]
 80062aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062ae:	f023 0301 	bic.w	r3, r3, #1
 80062b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d108      	bne.n	80062d0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80062c6:	2100      	movs	r1, #0
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fec3 	bl	8007054 <HAL_PCDEx_LPM_Callback>
 80062ce:	e002      	b.n	80062d6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f00c ff03 	bl	80130dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695a      	ldr	r2, [r3, #20]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80062e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f002 fe26 	bl	8008f3c <USB_ReadInterrupts>
 80062f0:	4603      	mov	r3, r0
 80062f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062fa:	d112      	bne.n	8006322 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b01      	cmp	r3, #1
 800630a:	d102      	bne.n	8006312 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f00c febf 	bl	8013090 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695a      	ldr	r2, [r3, #20]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006320:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4618      	mov	r0, r3
 8006328:	f002 fe08 	bl	8008f3c <USB_ReadInterrupts>
 800632c:	4603      	mov	r3, r0
 800632e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006336:	f040 80b7 	bne.w	80064a8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006348:	f023 0301 	bic.w	r3, r3, #1
 800634c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2110      	movs	r1, #16
 8006354:	4618      	mov	r0, r3
 8006356:	f001 fdcf 	bl	8007ef8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800635a:	2300      	movs	r3, #0
 800635c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800635e:	e046      	b.n	80063ee <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800636c:	461a      	mov	r2, r3
 800636e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006372:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006384:	0151      	lsls	r1, r2, #5
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	440a      	add	r2, r1
 800638a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800638e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006392:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a0:	461a      	mov	r2, r3
 80063a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063a6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80063a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063b8:	0151      	lsls	r1, r2, #5
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	440a      	add	r2, r1
 80063be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063d8:	0151      	lsls	r1, r2, #5
 80063da:	69fa      	ldr	r2, [r7, #28]
 80063dc:	440a      	add	r2, r1
 80063de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063e6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ea:	3301      	adds	r3, #1
 80063ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d3b3      	bcc.n	8006360 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	69fa      	ldr	r2, [r7, #28]
 8006402:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006406:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800640a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006410:	2b00      	cmp	r3, #0
 8006412:	d016      	beq.n	8006442 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006424:	f043 030b 	orr.w	r3, r3, #11
 8006428:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006434:	69fa      	ldr	r2, [r7, #28]
 8006436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800643a:	f043 030b 	orr.w	r3, r3, #11
 800643e:	6453      	str	r3, [r2, #68]	; 0x44
 8006440:	e015      	b.n	800646e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006450:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006454:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006458:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	69fa      	ldr	r2, [r7, #28]
 8006464:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006468:	f043 030b 	orr.w	r3, r3, #11
 800646c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800647c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006480:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6818      	ldr	r0, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006492:	461a      	mov	r2, r3
 8006494:	f002 fe16 	bl	80090c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	695a      	ldr	r2, [r3, #20]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80064a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f002 fd45 	bl	8008f3c <USB_ReadInterrupts>
 80064b2:	4603      	mov	r3, r0
 80064b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064bc:	d124      	bne.n	8006508 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f002 fddb 	bl	800907e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f001 fd90 	bl	8007ff2 <USB_GetDevSpeed>
 80064d2:	4603      	mov	r3, r0
 80064d4:	461a      	mov	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681c      	ldr	r4, [r3, #0]
 80064de:	f001 fa29 	bl	8007934 <HAL_RCC_GetHCLKFreq>
 80064e2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	461a      	mov	r2, r3
 80064ec:	4620      	mov	r0, r4
 80064ee:	f001 fa8f 	bl	8007a10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f00c fda3 	bl	801303e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	695a      	ldr	r2, [r3, #20]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006506:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4618      	mov	r0, r3
 800650e:	f002 fd15 	bl	8008f3c <USB_ReadInterrupts>
 8006512:	4603      	mov	r3, r0
 8006514:	f003 0308 	and.w	r3, r3, #8
 8006518:	2b08      	cmp	r3, #8
 800651a:	d10a      	bne.n	8006532 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f00c fd80 	bl	8013022 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695a      	ldr	r2, [r3, #20]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f002 0208 	and.w	r2, r2, #8
 8006530:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4618      	mov	r0, r3
 8006538:	f002 fd00 	bl	8008f3c <USB_ReadInterrupts>
 800653c:	4603      	mov	r3, r0
 800653e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006542:	2b80      	cmp	r3, #128	; 0x80
 8006544:	d122      	bne.n	800658c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006552:	2301      	movs	r3, #1
 8006554:	627b      	str	r3, [r7, #36]	; 0x24
 8006556:	e014      	b.n	8006582 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655c:	4613      	mov	r3, r2
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	4413      	add	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	440b      	add	r3, r1
 8006566:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d105      	bne.n	800657c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	b2db      	uxtb	r3, r3
 8006574:	4619      	mov	r1, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fb27 	bl	8006bca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	3301      	adds	r3, #1
 8006580:	627b      	str	r3, [r7, #36]	; 0x24
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006588:	429a      	cmp	r2, r3
 800658a:	d3e5      	bcc.n	8006558 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4618      	mov	r0, r3
 8006592:	f002 fcd3 	bl	8008f3c <USB_ReadInterrupts>
 8006596:	4603      	mov	r3, r0
 8006598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800659c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065a0:	d13b      	bne.n	800661a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065a2:	2301      	movs	r3, #1
 80065a4:	627b      	str	r3, [r7, #36]	; 0x24
 80065a6:	e02b      	b.n	8006600 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065bc:	4613      	mov	r3, r2
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	4413      	add	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	440b      	add	r3, r1
 80065c6:	3340      	adds	r3, #64	; 0x40
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d115      	bne.n	80065fa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80065ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	da12      	bge.n	80065fa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d8:	4613      	mov	r3, r2
 80065da:	00db      	lsls	r3, r3, #3
 80065dc:	4413      	add	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	440b      	add	r3, r1
 80065e2:	333f      	adds	r3, #63	; 0x3f
 80065e4:	2201      	movs	r2, #1
 80065e6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fae8 	bl	8006bca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	3301      	adds	r3, #1
 80065fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006606:	429a      	cmp	r2, r3
 8006608:	d3ce      	bcc.n	80065a8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	695a      	ldr	r2, [r3, #20]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006618:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4618      	mov	r0, r3
 8006620:	f002 fc8c 	bl	8008f3c <USB_ReadInterrupts>
 8006624:	4603      	mov	r3, r0
 8006626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800662a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800662e:	d155      	bne.n	80066dc <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006630:	2301      	movs	r3, #1
 8006632:	627b      	str	r3, [r7, #36]	; 0x24
 8006634:	e045      	b.n	80066c2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006646:	6879      	ldr	r1, [r7, #4]
 8006648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664a:	4613      	mov	r3, r2
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	440b      	add	r3, r1
 8006654:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d12e      	bne.n	80066bc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800665e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006660:	2b00      	cmp	r3, #0
 8006662:	da2b      	bge.n	80066bc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006670:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006674:	429a      	cmp	r2, r3
 8006676:	d121      	bne.n	80066bc <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667c:	4613      	mov	r3, r2
 800667e:	00db      	lsls	r3, r3, #3
 8006680:	4413      	add	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	440b      	add	r3, r1
 8006686:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800668a:	2201      	movs	r2, #1
 800668c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10a      	bne.n	80066bc <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	69fa      	ldr	r2, [r7, #28]
 80066b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066b8:	6053      	str	r3, [r2, #4]
            break;
 80066ba:	e007      	b.n	80066cc <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	3301      	adds	r3, #1
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d3b4      	bcc.n	8006636 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	695a      	ldr	r2, [r3, #20]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80066da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f002 fc2b 	bl	8008f3c <USB_ReadInterrupts>
 80066e6:	4603      	mov	r3, r0
 80066e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f0:	d10a      	bne.n	8006708 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f00c fd24 	bl	8013140 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	695a      	ldr	r2, [r3, #20]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006706:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4618      	mov	r0, r3
 800670e:	f002 fc15 	bl	8008f3c <USB_ReadInterrupts>
 8006712:	4603      	mov	r3, r0
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b04      	cmp	r3, #4
 800671a:	d115      	bne.n	8006748 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	f003 0304 	and.w	r3, r3, #4
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f00c fd14 	bl	801315c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6859      	ldr	r1, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	430a      	orrs	r2, r1
 8006742:	605a      	str	r2, [r3, #4]
 8006744:	e000      	b.n	8006748 <HAL_PCD_IRQHandler+0x938>
      return;
 8006746:	bf00      	nop
    }
  }
}
 8006748:	3734      	adds	r7, #52	; 0x34
 800674a:	46bd      	mov	sp, r7
 800674c:	bd90      	pop	{r4, r7, pc}

0800674e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	460b      	mov	r3, r1
 8006758:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <HAL_PCD_SetAddress+0x1a>
 8006764:	2302      	movs	r3, #2
 8006766:	e013      	b.n	8006790 <HAL_PCD_SetAddress+0x42>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	78fa      	ldrb	r2, [r7, #3]
 8006774:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	78fa      	ldrb	r2, [r7, #3]
 800677e:	4611      	mov	r1, r2
 8006780:	4618      	mov	r0, r3
 8006782:	f002 fb73 	bl	8008e6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	4608      	mov	r0, r1
 80067a2:	4611      	mov	r1, r2
 80067a4:	461a      	mov	r2, r3
 80067a6:	4603      	mov	r3, r0
 80067a8:	70fb      	strb	r3, [r7, #3]
 80067aa:	460b      	mov	r3, r1
 80067ac:	803b      	strh	r3, [r7, #0]
 80067ae:	4613      	mov	r3, r2
 80067b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80067b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	da0f      	bge.n	80067de <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067be:	78fb      	ldrb	r3, [r7, #3]
 80067c0:	f003 020f 	and.w	r2, r3, #15
 80067c4:	4613      	mov	r3, r2
 80067c6:	00db      	lsls	r3, r3, #3
 80067c8:	4413      	add	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	3338      	adds	r3, #56	; 0x38
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	4413      	add	r3, r2
 80067d2:	3304      	adds	r3, #4
 80067d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2201      	movs	r2, #1
 80067da:	705a      	strb	r2, [r3, #1]
 80067dc:	e00f      	b.n	80067fe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067de:	78fb      	ldrb	r3, [r7, #3]
 80067e0:	f003 020f 	and.w	r2, r3, #15
 80067e4:	4613      	mov	r3, r2
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	4413      	add	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	4413      	add	r3, r2
 80067f4:	3304      	adds	r3, #4
 80067f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80067fe:	78fb      	ldrb	r3, [r7, #3]
 8006800:	f003 030f 	and.w	r3, r3, #15
 8006804:	b2da      	uxtb	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800680a:	883a      	ldrh	r2, [r7, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	78ba      	ldrb	r2, [r7, #2]
 8006814:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	785b      	ldrb	r3, [r3, #1]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d004      	beq.n	8006828 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	b29a      	uxth	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006828:	78bb      	ldrb	r3, [r7, #2]
 800682a:	2b02      	cmp	r3, #2
 800682c:	d102      	bne.n	8006834 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800683a:	2b01      	cmp	r3, #1
 800683c:	d101      	bne.n	8006842 <HAL_PCD_EP_Open+0xaa>
 800683e:	2302      	movs	r3, #2
 8006840:	e00e      	b.n	8006860 <HAL_PCD_EP_Open+0xc8>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68f9      	ldr	r1, [r7, #12]
 8006850:	4618      	mov	r0, r3
 8006852:	f001 fbf3 	bl	800803c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800685e:	7afb      	ldrb	r3, [r7, #11]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006874:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006878:	2b00      	cmp	r3, #0
 800687a:	da0f      	bge.n	800689c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	f003 020f 	and.w	r2, r3, #15
 8006882:	4613      	mov	r3, r2
 8006884:	00db      	lsls	r3, r3, #3
 8006886:	4413      	add	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	3338      	adds	r3, #56	; 0x38
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	4413      	add	r3, r2
 8006890:	3304      	adds	r3, #4
 8006892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2201      	movs	r2, #1
 8006898:	705a      	strb	r2, [r3, #1]
 800689a:	e00f      	b.n	80068bc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800689c:	78fb      	ldrb	r3, [r7, #3]
 800689e:	f003 020f 	and.w	r2, r3, #15
 80068a2:	4613      	mov	r3, r2
 80068a4:	00db      	lsls	r3, r3, #3
 80068a6:	4413      	add	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	4413      	add	r3, r2
 80068b2:	3304      	adds	r3, #4
 80068b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80068bc:	78fb      	ldrb	r3, [r7, #3]
 80068be:	f003 030f 	and.w	r3, r3, #15
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d101      	bne.n	80068d6 <HAL_PCD_EP_Close+0x6e>
 80068d2:	2302      	movs	r3, #2
 80068d4:	e00e      	b.n	80068f4 <HAL_PCD_EP_Close+0x8c>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68f9      	ldr	r1, [r7, #12]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f001 fc31 	bl	800814c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	607a      	str	r2, [r7, #4]
 8006906:	603b      	str	r3, [r7, #0]
 8006908:	460b      	mov	r3, r1
 800690a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800690c:	7afb      	ldrb	r3, [r7, #11]
 800690e:	f003 020f 	and.w	r2, r3, #15
 8006912:	4613      	mov	r3, r2
 8006914:	00db      	lsls	r3, r3, #3
 8006916:	4413      	add	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	4413      	add	r3, r2
 8006922:	3304      	adds	r3, #4
 8006924:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2200      	movs	r2, #0
 8006936:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	2200      	movs	r2, #0
 800693c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800693e:	7afb      	ldrb	r3, [r7, #11]
 8006940:	f003 030f 	and.w	r3, r3, #15
 8006944:	b2da      	uxtb	r2, r3
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d102      	bne.n	8006958 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006958:	7afb      	ldrb	r3, [r7, #11]
 800695a:	f003 030f 	and.w	r3, r3, #15
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6818      	ldr	r0, [r3, #0]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	b2db      	uxtb	r3, r3
 800696c:	461a      	mov	r2, r3
 800696e:	6979      	ldr	r1, [r7, #20]
 8006970:	f001 ff10 	bl	8008794 <USB_EP0StartXfer>
 8006974:	e008      	b.n	8006988 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	b2db      	uxtb	r3, r3
 8006980:	461a      	mov	r2, r3
 8006982:	6979      	ldr	r1, [r7, #20]
 8006984:	f001 fcbe 	bl	8008304 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	460b      	mov	r3, r1
 800699c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800699e:	78fb      	ldrb	r3, [r7, #3]
 80069a0:	f003 020f 	and.w	r2, r3, #15
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	4613      	mov	r3, r2
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	4413      	add	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	440b      	add	r3, r1
 80069b0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80069b4:	681b      	ldr	r3, [r3, #0]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b086      	sub	sp, #24
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	60f8      	str	r0, [r7, #12]
 80069ca:	607a      	str	r2, [r7, #4]
 80069cc:	603b      	str	r3, [r7, #0]
 80069ce:	460b      	mov	r3, r1
 80069d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069d2:	7afb      	ldrb	r3, [r7, #11]
 80069d4:	f003 020f 	and.w	r2, r3, #15
 80069d8:	4613      	mov	r3, r2
 80069da:	00db      	lsls	r3, r3, #3
 80069dc:	4413      	add	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	3338      	adds	r3, #56	; 0x38
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	4413      	add	r3, r2
 80069e6:	3304      	adds	r3, #4
 80069e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	2200      	movs	r2, #0
 80069fa:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	2201      	movs	r2, #1
 8006a00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a02:	7afb      	ldrb	r3, [r7, #11]
 8006a04:	f003 030f 	and.w	r3, r3, #15
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d102      	bne.n	8006a1c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a1c:	7afb      	ldrb	r3, [r7, #11]
 8006a1e:	f003 030f 	and.w	r3, r3, #15
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d109      	bne.n	8006a3a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6818      	ldr	r0, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	461a      	mov	r2, r3
 8006a32:	6979      	ldr	r1, [r7, #20]
 8006a34:	f001 feae 	bl	8008794 <USB_EP0StartXfer>
 8006a38:	e008      	b.n	8006a4c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6818      	ldr	r0, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	461a      	mov	r2, r3
 8006a46:	6979      	ldr	r1, [r7, #20]
 8006a48:	f001 fc5c 	bl	8008304 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b084      	sub	sp, #16
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	460b      	mov	r3, r1
 8006a60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006a62:	78fb      	ldrb	r3, [r7, #3]
 8006a64:	f003 020f 	and.w	r2, r3, #15
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d901      	bls.n	8006a74 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e050      	b.n	8006b16 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	da0f      	bge.n	8006a9c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a7c:	78fb      	ldrb	r3, [r7, #3]
 8006a7e:	f003 020f 	and.w	r2, r3, #15
 8006a82:	4613      	mov	r3, r2
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	4413      	add	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	3338      	adds	r3, #56	; 0x38
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	4413      	add	r3, r2
 8006a90:	3304      	adds	r3, #4
 8006a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	705a      	strb	r2, [r3, #1]
 8006a9a:	e00d      	b.n	8006ab8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006a9c:	78fa      	ldrb	r2, [r7, #3]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	00db      	lsls	r3, r3, #3
 8006aa2:	4413      	add	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	4413      	add	r3, r2
 8006aae:	3304      	adds	r3, #4
 8006ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2201      	movs	r2, #1
 8006abc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006abe:	78fb      	ldrb	r3, [r7, #3]
 8006ac0:	f003 030f 	and.w	r3, r3, #15
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d101      	bne.n	8006ad8 <HAL_PCD_EP_SetStall+0x82>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	e01e      	b.n	8006b16 <HAL_PCD_EP_SetStall+0xc0>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68f9      	ldr	r1, [r7, #12]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f002 f8ec 	bl	8008cc4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006aec:	78fb      	ldrb	r3, [r7, #3]
 8006aee:	f003 030f 	and.w	r3, r3, #15
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10a      	bne.n	8006b0c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6818      	ldr	r0, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	b2d9      	uxtb	r1, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006b06:	461a      	mov	r2, r3
 8006b08:	f002 fadc 	bl	80090c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b084      	sub	sp, #16
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
 8006b26:	460b      	mov	r3, r1
 8006b28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006b2a:	78fb      	ldrb	r3, [r7, #3]
 8006b2c:	f003 020f 	and.w	r2, r3, #15
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d901      	bls.n	8006b3c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e042      	b.n	8006bc2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006b3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	da0f      	bge.n	8006b64 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b44:	78fb      	ldrb	r3, [r7, #3]
 8006b46:	f003 020f 	and.w	r2, r3, #15
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	00db      	lsls	r3, r3, #3
 8006b4e:	4413      	add	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	3338      	adds	r3, #56	; 0x38
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	4413      	add	r3, r2
 8006b58:	3304      	adds	r3, #4
 8006b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	705a      	strb	r2, [r3, #1]
 8006b62:	e00f      	b.n	8006b84 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b64:	78fb      	ldrb	r3, [r7, #3]
 8006b66:	f003 020f 	and.w	r2, r3, #15
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	4413      	add	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	4413      	add	r3, r2
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b8a:	78fb      	ldrb	r3, [r7, #3]
 8006b8c:	f003 030f 	and.w	r3, r3, #15
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d101      	bne.n	8006ba4 <HAL_PCD_EP_ClrStall+0x86>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e00e      	b.n	8006bc2 <HAL_PCD_EP_ClrStall+0xa4>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68f9      	ldr	r1, [r7, #12]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f002 f8f4 	bl	8008da0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b084      	sub	sp, #16
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006bd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	da0c      	bge.n	8006bf8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bde:	78fb      	ldrb	r3, [r7, #3]
 8006be0:	f003 020f 	and.w	r2, r3, #15
 8006be4:	4613      	mov	r3, r2
 8006be6:	00db      	lsls	r3, r3, #3
 8006be8:	4413      	add	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	3338      	adds	r3, #56	; 0x38
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	60fb      	str	r3, [r7, #12]
 8006bf6:	e00c      	b.n	8006c12 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bf8:	78fb      	ldrb	r3, [r7, #3]
 8006bfa:	f003 020f 	and.w	r2, r3, #15
 8006bfe:	4613      	mov	r3, r2
 8006c00:	00db      	lsls	r3, r3, #3
 8006c02:	4413      	add	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	3304      	adds	r3, #4
 8006c10:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68f9      	ldr	r1, [r7, #12]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f001 ff13 	bl	8008a44 <USB_EPStopXfer>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006c22:	7afb      	ldrb	r3, [r7, #11]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08a      	sub	sp, #40	; 0x28
 8006c30:	af02      	add	r7, sp, #8
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	4613      	mov	r3, r2
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	4413      	add	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	3338      	adds	r3, #56	; 0x38
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	4413      	add	r3, r2
 8006c50:	3304      	adds	r3, #4
 8006c52:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a1a      	ldr	r2, [r3, #32]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d901      	bls.n	8006c64 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e06c      	b.n	8006d3e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	699a      	ldr	r2, [r3, #24]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	69fa      	ldr	r2, [r7, #28]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d902      	bls.n	8006c80 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	3303      	adds	r3, #3
 8006c84:	089b      	lsrs	r3, r3, #2
 8006c86:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c88:	e02b      	b.n	8006ce2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	699a      	ldr	r2, [r3, #24]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d902      	bls.n	8006ca6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	3303      	adds	r3, #3
 8006caa:	089b      	lsrs	r3, r3, #2
 8006cac:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6919      	ldr	r1, [r3, #16]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	6978      	ldr	r0, [r7, #20]
 8006cc6:	f001 ff67 	bl	8008b98 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	691a      	ldr	r2, [r3, #16]
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	441a      	add	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a1a      	ldr	r2, [r3, #32]
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	441a      	add	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d809      	bhi.n	8006d0c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6a1a      	ldr	r2, [r3, #32]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d203      	bcs.n	8006d0c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1be      	bne.n	8006c8a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	699a      	ldr	r2, [r3, #24]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d811      	bhi.n	8006d3c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	f003 030f 	and.w	r3, r3, #15
 8006d1e:	2201      	movs	r2, #1
 8006d20:	fa02 f303 	lsl.w	r3, r2, r3
 8006d24:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	43db      	mvns	r3, r3
 8006d32:	6939      	ldr	r1, [r7, #16]
 8006d34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d38:	4013      	ands	r3, r2
 8006d3a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3720      	adds	r7, #32
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
	...

08006d48 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b088      	sub	sp, #32
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	333c      	adds	r3, #60	; 0x3c
 8006d60:	3304      	adds	r3, #4
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d17b      	bne.n	8006e76 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f003 0308 	and.w	r3, r3, #8
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d015      	beq.n	8006db4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	4a61      	ldr	r2, [pc, #388]	; (8006f10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	f240 80b9 	bls.w	8006f04 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 80b3 	beq.w	8006f04 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006daa:	461a      	mov	r2, r3
 8006dac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006db0:	6093      	str	r3, [r2, #8]
 8006db2:	e0a7      	b.n	8006f04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	f003 0320 	and.w	r3, r3, #32
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d009      	beq.n	8006dd2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dca:	461a      	mov	r2, r3
 8006dcc:	2320      	movs	r3, #32
 8006dce:	6093      	str	r3, [r2, #8]
 8006dd0:	e098      	b.n	8006f04 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f040 8093 	bne.w	8006f04 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	4a4b      	ldr	r2, [pc, #300]	; (8006f10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d90f      	bls.n	8006e06 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00a      	beq.n	8006e06 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e02:	6093      	str	r3, [r2, #8]
 8006e04:	e07e      	b.n	8006f04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	4413      	add	r3, r2
 8006e18:	3304      	adds	r3, #4
 8006e1a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	69da      	ldr	r2, [r3, #28]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	0159      	lsls	r1, r3, #5
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	440b      	add	r3, r1
 8006e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e32:	1ad2      	subs	r2, r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d114      	bne.n	8006e68 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d109      	bne.n	8006e5a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006e50:	461a      	mov	r2, r3
 8006e52:	2101      	movs	r1, #1
 8006e54:	f002 f936 	bl	80090c4 <USB_EP0_OutStart>
 8006e58:	e006      	b.n	8006e68 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	691a      	ldr	r2, [r3, #16]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	441a      	add	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f00c f8a2 	bl	8012fb8 <HAL_PCD_DataOutStageCallback>
 8006e74:	e046      	b.n	8006f04 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	4a26      	ldr	r2, [pc, #152]	; (8006f14 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d124      	bne.n	8006ec8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00a      	beq.n	8006e9e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e94:	461a      	mov	r2, r3
 8006e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e9a:	6093      	str	r3, [r2, #8]
 8006e9c:	e032      	b.n	8006f04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f003 0320 	and.w	r3, r3, #32
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d008      	beq.n	8006eba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	2320      	movs	r3, #32
 8006eb8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f00c f879 	bl	8012fb8 <HAL_PCD_DataOutStageCallback>
 8006ec6:	e01d      	b.n	8006f04 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d114      	bne.n	8006ef8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006ece:	6879      	ldr	r1, [r7, #4]
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	00db      	lsls	r3, r3, #3
 8006ed6:	4413      	add	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	440b      	add	r3, r1
 8006edc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d108      	bne.n	8006ef8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6818      	ldr	r0, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	f002 f8e6 	bl	80090c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f00c f85a 	bl	8012fb8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3720      	adds	r7, #32
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	4f54300a 	.word	0x4f54300a
 8006f14:	4f54310a 	.word	0x4f54310a

08006f18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	333c      	adds	r3, #60	; 0x3c
 8006f30:	3304      	adds	r3, #4
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4a15      	ldr	r2, [pc, #84]	; (8006fa0 <PCD_EP_OutSetupPacket_int+0x88>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d90e      	bls.n	8006f6c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d009      	beq.n	8006f6c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f64:	461a      	mov	r2, r3
 8006f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f6a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f00c f811 	bl	8012f94 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	4a0a      	ldr	r2, [pc, #40]	; (8006fa0 <PCD_EP_OutSetupPacket_int+0x88>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d90c      	bls.n	8006f94 <PCD_EP_OutSetupPacket_int+0x7c>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d108      	bne.n	8006f94 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6818      	ldr	r0, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	2101      	movs	r1, #1
 8006f90:	f002 f898 	bl	80090c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	4f54300a 	.word	0x4f54300a

08006fa4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	70fb      	strb	r3, [r7, #3]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006fbc:	78fb      	ldrb	r3, [r7, #3]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d107      	bne.n	8006fd2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006fc2:	883b      	ldrh	r3, [r7, #0]
 8006fc4:	0419      	lsls	r1, r3, #16
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	629a      	str	r2, [r3, #40]	; 0x28
 8006fd0:	e028      	b.n	8007024 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd8:	0c1b      	lsrs	r3, r3, #16
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	4413      	add	r3, r2
 8006fde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	73fb      	strb	r3, [r7, #15]
 8006fe4:	e00d      	b.n	8007002 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
 8006fec:	3340      	adds	r3, #64	; 0x40
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	0c1b      	lsrs	r3, r3, #16
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	3301      	adds	r3, #1
 8007000:	73fb      	strb	r3, [r7, #15]
 8007002:	7bfa      	ldrb	r2, [r7, #15]
 8007004:	78fb      	ldrb	r3, [r7, #3]
 8007006:	3b01      	subs	r3, #1
 8007008:	429a      	cmp	r2, r3
 800700a:	d3ec      	bcc.n	8006fe6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800700c:	883b      	ldrh	r3, [r7, #0]
 800700e:	0418      	lsls	r0, r3, #16
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6819      	ldr	r1, [r3, #0]
 8007014:	78fb      	ldrb	r3, [r7, #3]
 8007016:	3b01      	subs	r3, #1
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	4302      	orrs	r2, r0
 800701c:	3340      	adds	r3, #64	; 0x40
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	440b      	add	r3, r1
 8007022:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	460b      	mov	r3, r1
 800703c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	887a      	ldrh	r2, [r7, #2]
 8007044:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	460b      	mov	r3, r1
 800705e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e267      	b.n	800754e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d075      	beq.n	8007176 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800708a:	4b88      	ldr	r3, [pc, #544]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f003 030c 	and.w	r3, r3, #12
 8007092:	2b04      	cmp	r3, #4
 8007094:	d00c      	beq.n	80070b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007096:	4b85      	ldr	r3, [pc, #532]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800709e:	2b08      	cmp	r3, #8
 80070a0:	d112      	bne.n	80070c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070a2:	4b82      	ldr	r3, [pc, #520]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070ae:	d10b      	bne.n	80070c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070b0:	4b7e      	ldr	r3, [pc, #504]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d05b      	beq.n	8007174 <HAL_RCC_OscConfig+0x108>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d157      	bne.n	8007174 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e242      	b.n	800754e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d0:	d106      	bne.n	80070e0 <HAL_RCC_OscConfig+0x74>
 80070d2:	4b76      	ldr	r3, [pc, #472]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a75      	ldr	r2, [pc, #468]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 80070d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070dc:	6013      	str	r3, [r2, #0]
 80070de:	e01d      	b.n	800711c <HAL_RCC_OscConfig+0xb0>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070e8:	d10c      	bne.n	8007104 <HAL_RCC_OscConfig+0x98>
 80070ea:	4b70      	ldr	r3, [pc, #448]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a6f      	ldr	r2, [pc, #444]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 80070f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070f4:	6013      	str	r3, [r2, #0]
 80070f6:	4b6d      	ldr	r3, [pc, #436]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a6c      	ldr	r2, [pc, #432]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 80070fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	e00b      	b.n	800711c <HAL_RCC_OscConfig+0xb0>
 8007104:	4b69      	ldr	r3, [pc, #420]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a68      	ldr	r2, [pc, #416]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 800710a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800710e:	6013      	str	r3, [r2, #0]
 8007110:	4b66      	ldr	r3, [pc, #408]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a65      	ldr	r2, [pc, #404]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 8007116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800711a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d013      	beq.n	800714c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007124:	f7fd fe2a 	bl	8004d7c <HAL_GetTick>
 8007128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800712a:	e008      	b.n	800713e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800712c:	f7fd fe26 	bl	8004d7c <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b64      	cmp	r3, #100	; 0x64
 8007138:	d901      	bls.n	800713e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e207      	b.n	800754e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800713e:	4b5b      	ldr	r3, [pc, #364]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d0f0      	beq.n	800712c <HAL_RCC_OscConfig+0xc0>
 800714a:	e014      	b.n	8007176 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800714c:	f7fd fe16 	bl	8004d7c <HAL_GetTick>
 8007150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007152:	e008      	b.n	8007166 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007154:	f7fd fe12 	bl	8004d7c <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	2b64      	cmp	r3, #100	; 0x64
 8007160:	d901      	bls.n	8007166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e1f3      	b.n	800754e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007166:	4b51      	ldr	r3, [pc, #324]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1f0      	bne.n	8007154 <HAL_RCC_OscConfig+0xe8>
 8007172:	e000      	b.n	8007176 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d063      	beq.n	800724a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007182:	4b4a      	ldr	r3, [pc, #296]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f003 030c 	and.w	r3, r3, #12
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00b      	beq.n	80071a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800718e:	4b47      	ldr	r3, [pc, #284]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007196:	2b08      	cmp	r3, #8
 8007198:	d11c      	bne.n	80071d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800719a:	4b44      	ldr	r3, [pc, #272]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d116      	bne.n	80071d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071a6:	4b41      	ldr	r3, [pc, #260]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d005      	beq.n	80071be <HAL_RCC_OscConfig+0x152>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d001      	beq.n	80071be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e1c7      	b.n	800754e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071be:	4b3b      	ldr	r3, [pc, #236]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	00db      	lsls	r3, r3, #3
 80071cc:	4937      	ldr	r1, [pc, #220]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071d2:	e03a      	b.n	800724a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d020      	beq.n	800721e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071dc:	4b34      	ldr	r3, [pc, #208]	; (80072b0 <HAL_RCC_OscConfig+0x244>)
 80071de:	2201      	movs	r2, #1
 80071e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e2:	f7fd fdcb 	bl	8004d7c <HAL_GetTick>
 80071e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071e8:	e008      	b.n	80071fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071ea:	f7fd fdc7 	bl	8004d7c <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d901      	bls.n	80071fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e1a8      	b.n	800754e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071fc:	4b2b      	ldr	r3, [pc, #172]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	d0f0      	beq.n	80071ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007208:	4b28      	ldr	r3, [pc, #160]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	00db      	lsls	r3, r3, #3
 8007216:	4925      	ldr	r1, [pc, #148]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 8007218:	4313      	orrs	r3, r2
 800721a:	600b      	str	r3, [r1, #0]
 800721c:	e015      	b.n	800724a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800721e:	4b24      	ldr	r3, [pc, #144]	; (80072b0 <HAL_RCC_OscConfig+0x244>)
 8007220:	2200      	movs	r2, #0
 8007222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007224:	f7fd fdaa 	bl	8004d7c <HAL_GetTick>
 8007228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800722a:	e008      	b.n	800723e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800722c:	f7fd fda6 	bl	8004d7c <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	2b02      	cmp	r3, #2
 8007238:	d901      	bls.n	800723e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e187      	b.n	800754e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800723e:	4b1b      	ldr	r3, [pc, #108]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1f0      	bne.n	800722c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0308 	and.w	r3, r3, #8
 8007252:	2b00      	cmp	r3, #0
 8007254:	d036      	beq.n	80072c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d016      	beq.n	800728c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800725e:	4b15      	ldr	r3, [pc, #84]	; (80072b4 <HAL_RCC_OscConfig+0x248>)
 8007260:	2201      	movs	r2, #1
 8007262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007264:	f7fd fd8a 	bl	8004d7c <HAL_GetTick>
 8007268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800726a:	e008      	b.n	800727e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800726c:	f7fd fd86 	bl	8004d7c <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e167      	b.n	800754e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800727e:	4b0b      	ldr	r3, [pc, #44]	; (80072ac <HAL_RCC_OscConfig+0x240>)
 8007280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0f0      	beq.n	800726c <HAL_RCC_OscConfig+0x200>
 800728a:	e01b      	b.n	80072c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800728c:	4b09      	ldr	r3, [pc, #36]	; (80072b4 <HAL_RCC_OscConfig+0x248>)
 800728e:	2200      	movs	r2, #0
 8007290:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007292:	f7fd fd73 	bl	8004d7c <HAL_GetTick>
 8007296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007298:	e00e      	b.n	80072b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800729a:	f7fd fd6f 	bl	8004d7c <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d907      	bls.n	80072b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e150      	b.n	800754e <HAL_RCC_OscConfig+0x4e2>
 80072ac:	40023800 	.word	0x40023800
 80072b0:	42470000 	.word	0x42470000
 80072b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072b8:	4b88      	ldr	r3, [pc, #544]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 80072ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1ea      	bne.n	800729a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 8097 	beq.w	8007400 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072d2:	2300      	movs	r3, #0
 80072d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072d6:	4b81      	ldr	r3, [pc, #516]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10f      	bne.n	8007302 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072e2:	2300      	movs	r3, #0
 80072e4:	60bb      	str	r3, [r7, #8]
 80072e6:	4b7d      	ldr	r3, [pc, #500]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	4a7c      	ldr	r2, [pc, #496]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 80072ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072f0:	6413      	str	r3, [r2, #64]	; 0x40
 80072f2:	4b7a      	ldr	r3, [pc, #488]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 80072f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072fa:	60bb      	str	r3, [r7, #8]
 80072fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072fe:	2301      	movs	r3, #1
 8007300:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007302:	4b77      	ldr	r3, [pc, #476]	; (80074e0 <HAL_RCC_OscConfig+0x474>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800730a:	2b00      	cmp	r3, #0
 800730c:	d118      	bne.n	8007340 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800730e:	4b74      	ldr	r3, [pc, #464]	; (80074e0 <HAL_RCC_OscConfig+0x474>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a73      	ldr	r2, [pc, #460]	; (80074e0 <HAL_RCC_OscConfig+0x474>)
 8007314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800731a:	f7fd fd2f 	bl	8004d7c <HAL_GetTick>
 800731e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007320:	e008      	b.n	8007334 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007322:	f7fd fd2b 	bl	8004d7c <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	2b02      	cmp	r3, #2
 800732e:	d901      	bls.n	8007334 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e10c      	b.n	800754e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007334:	4b6a      	ldr	r3, [pc, #424]	; (80074e0 <HAL_RCC_OscConfig+0x474>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800733c:	2b00      	cmp	r3, #0
 800733e:	d0f0      	beq.n	8007322 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d106      	bne.n	8007356 <HAL_RCC_OscConfig+0x2ea>
 8007348:	4b64      	ldr	r3, [pc, #400]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 800734a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734c:	4a63      	ldr	r2, [pc, #396]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 800734e:	f043 0301 	orr.w	r3, r3, #1
 8007352:	6713      	str	r3, [r2, #112]	; 0x70
 8007354:	e01c      	b.n	8007390 <HAL_RCC_OscConfig+0x324>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	2b05      	cmp	r3, #5
 800735c:	d10c      	bne.n	8007378 <HAL_RCC_OscConfig+0x30c>
 800735e:	4b5f      	ldr	r3, [pc, #380]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 8007360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007362:	4a5e      	ldr	r2, [pc, #376]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 8007364:	f043 0304 	orr.w	r3, r3, #4
 8007368:	6713      	str	r3, [r2, #112]	; 0x70
 800736a:	4b5c      	ldr	r3, [pc, #368]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 800736c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736e:	4a5b      	ldr	r2, [pc, #364]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 8007370:	f043 0301 	orr.w	r3, r3, #1
 8007374:	6713      	str	r3, [r2, #112]	; 0x70
 8007376:	e00b      	b.n	8007390 <HAL_RCC_OscConfig+0x324>
 8007378:	4b58      	ldr	r3, [pc, #352]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 800737a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737c:	4a57      	ldr	r2, [pc, #348]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 800737e:	f023 0301 	bic.w	r3, r3, #1
 8007382:	6713      	str	r3, [r2, #112]	; 0x70
 8007384:	4b55      	ldr	r3, [pc, #340]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 8007386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007388:	4a54      	ldr	r2, [pc, #336]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 800738a:	f023 0304 	bic.w	r3, r3, #4
 800738e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d015      	beq.n	80073c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007398:	f7fd fcf0 	bl	8004d7c <HAL_GetTick>
 800739c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800739e:	e00a      	b.n	80073b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073a0:	f7fd fcec 	bl	8004d7c <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d901      	bls.n	80073b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e0cb      	b.n	800754e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073b6:	4b49      	ldr	r3, [pc, #292]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 80073b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d0ee      	beq.n	80073a0 <HAL_RCC_OscConfig+0x334>
 80073c2:	e014      	b.n	80073ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073c4:	f7fd fcda 	bl	8004d7c <HAL_GetTick>
 80073c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073ca:	e00a      	b.n	80073e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073cc:	f7fd fcd6 	bl	8004d7c <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80073da:	4293      	cmp	r3, r2
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e0b5      	b.n	800754e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073e2:	4b3e      	ldr	r3, [pc, #248]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 80073e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1ee      	bne.n	80073cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073ee:	7dfb      	ldrb	r3, [r7, #23]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d105      	bne.n	8007400 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073f4:	4b39      	ldr	r3, [pc, #228]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	4a38      	ldr	r2, [pc, #224]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 80073fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 80a1 	beq.w	800754c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800740a:	4b34      	ldr	r3, [pc, #208]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f003 030c 	and.w	r3, r3, #12
 8007412:	2b08      	cmp	r3, #8
 8007414:	d05c      	beq.n	80074d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	2b02      	cmp	r3, #2
 800741c:	d141      	bne.n	80074a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800741e:	4b31      	ldr	r3, [pc, #196]	; (80074e4 <HAL_RCC_OscConfig+0x478>)
 8007420:	2200      	movs	r2, #0
 8007422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007424:	f7fd fcaa 	bl	8004d7c <HAL_GetTick>
 8007428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800742a:	e008      	b.n	800743e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800742c:	f7fd fca6 	bl	8004d7c <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	2b02      	cmp	r3, #2
 8007438:	d901      	bls.n	800743e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e087      	b.n	800754e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800743e:	4b27      	ldr	r3, [pc, #156]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1f0      	bne.n	800742c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	69da      	ldr	r2, [r3, #28]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	431a      	orrs	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	019b      	lsls	r3, r3, #6
 800745a:	431a      	orrs	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007460:	085b      	lsrs	r3, r3, #1
 8007462:	3b01      	subs	r3, #1
 8007464:	041b      	lsls	r3, r3, #16
 8007466:	431a      	orrs	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746c:	061b      	lsls	r3, r3, #24
 800746e:	491b      	ldr	r1, [pc, #108]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 8007470:	4313      	orrs	r3, r2
 8007472:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007474:	4b1b      	ldr	r3, [pc, #108]	; (80074e4 <HAL_RCC_OscConfig+0x478>)
 8007476:	2201      	movs	r2, #1
 8007478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800747a:	f7fd fc7f 	bl	8004d7c <HAL_GetTick>
 800747e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007480:	e008      	b.n	8007494 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007482:	f7fd fc7b 	bl	8004d7c <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	2b02      	cmp	r3, #2
 800748e:	d901      	bls.n	8007494 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007490:	2303      	movs	r3, #3
 8007492:	e05c      	b.n	800754e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007494:	4b11      	ldr	r3, [pc, #68]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d0f0      	beq.n	8007482 <HAL_RCC_OscConfig+0x416>
 80074a0:	e054      	b.n	800754c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074a2:	4b10      	ldr	r3, [pc, #64]	; (80074e4 <HAL_RCC_OscConfig+0x478>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074a8:	f7fd fc68 	bl	8004d7c <HAL_GetTick>
 80074ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ae:	e008      	b.n	80074c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074b0:	f7fd fc64 	bl	8004d7c <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d901      	bls.n	80074c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e045      	b.n	800754e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074c2:	4b06      	ldr	r3, [pc, #24]	; (80074dc <HAL_RCC_OscConfig+0x470>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1f0      	bne.n	80074b0 <HAL_RCC_OscConfig+0x444>
 80074ce:	e03d      	b.n	800754c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d107      	bne.n	80074e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e038      	b.n	800754e <HAL_RCC_OscConfig+0x4e2>
 80074dc:	40023800 	.word	0x40023800
 80074e0:	40007000 	.word	0x40007000
 80074e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80074e8:	4b1b      	ldr	r3, [pc, #108]	; (8007558 <HAL_RCC_OscConfig+0x4ec>)
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d028      	beq.n	8007548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007500:	429a      	cmp	r2, r3
 8007502:	d121      	bne.n	8007548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800750e:	429a      	cmp	r2, r3
 8007510:	d11a      	bne.n	8007548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007518:	4013      	ands	r3, r2
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800751e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007520:	4293      	cmp	r3, r2
 8007522:	d111      	bne.n	8007548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752e:	085b      	lsrs	r3, r3, #1
 8007530:	3b01      	subs	r3, #1
 8007532:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007534:	429a      	cmp	r2, r3
 8007536:	d107      	bne.n	8007548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007542:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007544:	429a      	cmp	r2, r3
 8007546:	d001      	beq.n	800754c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e000      	b.n	800754e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	40023800 	.word	0x40023800

0800755c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e0cc      	b.n	800770a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007570:	4b68      	ldr	r3, [pc, #416]	; (8007714 <HAL_RCC_ClockConfig+0x1b8>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0307 	and.w	r3, r3, #7
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	429a      	cmp	r2, r3
 800757c:	d90c      	bls.n	8007598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800757e:	4b65      	ldr	r3, [pc, #404]	; (8007714 <HAL_RCC_ClockConfig+0x1b8>)
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	b2d2      	uxtb	r2, r2
 8007584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007586:	4b63      	ldr	r3, [pc, #396]	; (8007714 <HAL_RCC_ClockConfig+0x1b8>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0307 	and.w	r3, r3, #7
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	429a      	cmp	r2, r3
 8007592:	d001      	beq.n	8007598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e0b8      	b.n	800770a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0302 	and.w	r3, r3, #2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d020      	beq.n	80075e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0304 	and.w	r3, r3, #4
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d005      	beq.n	80075bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075b0:	4b59      	ldr	r3, [pc, #356]	; (8007718 <HAL_RCC_ClockConfig+0x1bc>)
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	4a58      	ldr	r2, [pc, #352]	; (8007718 <HAL_RCC_ClockConfig+0x1bc>)
 80075b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80075ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0308 	and.w	r3, r3, #8
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d005      	beq.n	80075d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075c8:	4b53      	ldr	r3, [pc, #332]	; (8007718 <HAL_RCC_ClockConfig+0x1bc>)
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	4a52      	ldr	r2, [pc, #328]	; (8007718 <HAL_RCC_ClockConfig+0x1bc>)
 80075ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80075d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075d4:	4b50      	ldr	r3, [pc, #320]	; (8007718 <HAL_RCC_ClockConfig+0x1bc>)
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	494d      	ldr	r1, [pc, #308]	; (8007718 <HAL_RCC_ClockConfig+0x1bc>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d044      	beq.n	800767c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d107      	bne.n	800760a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075fa:	4b47      	ldr	r3, [pc, #284]	; (8007718 <HAL_RCC_ClockConfig+0x1bc>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d119      	bne.n	800763a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e07f      	b.n	800770a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	2b02      	cmp	r3, #2
 8007610:	d003      	beq.n	800761a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007616:	2b03      	cmp	r3, #3
 8007618:	d107      	bne.n	800762a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800761a:	4b3f      	ldr	r3, [pc, #252]	; (8007718 <HAL_RCC_ClockConfig+0x1bc>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d109      	bne.n	800763a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e06f      	b.n	800770a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800762a:	4b3b      	ldr	r3, [pc, #236]	; (8007718 <HAL_RCC_ClockConfig+0x1bc>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e067      	b.n	800770a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800763a:	4b37      	ldr	r3, [pc, #220]	; (8007718 <HAL_RCC_ClockConfig+0x1bc>)
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f023 0203 	bic.w	r2, r3, #3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	4934      	ldr	r1, [pc, #208]	; (8007718 <HAL_RCC_ClockConfig+0x1bc>)
 8007648:	4313      	orrs	r3, r2
 800764a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800764c:	f7fd fb96 	bl	8004d7c <HAL_GetTick>
 8007650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007652:	e00a      	b.n	800766a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007654:	f7fd fb92 	bl	8004d7c <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007662:	4293      	cmp	r3, r2
 8007664:	d901      	bls.n	800766a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e04f      	b.n	800770a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800766a:	4b2b      	ldr	r3, [pc, #172]	; (8007718 <HAL_RCC_ClockConfig+0x1bc>)
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f003 020c 	and.w	r2, r3, #12
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	429a      	cmp	r2, r3
 800767a:	d1eb      	bne.n	8007654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800767c:	4b25      	ldr	r3, [pc, #148]	; (8007714 <HAL_RCC_ClockConfig+0x1b8>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0307 	and.w	r3, r3, #7
 8007684:	683a      	ldr	r2, [r7, #0]
 8007686:	429a      	cmp	r2, r3
 8007688:	d20c      	bcs.n	80076a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800768a:	4b22      	ldr	r3, [pc, #136]	; (8007714 <HAL_RCC_ClockConfig+0x1b8>)
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	b2d2      	uxtb	r2, r2
 8007690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007692:	4b20      	ldr	r3, [pc, #128]	; (8007714 <HAL_RCC_ClockConfig+0x1b8>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0307 	and.w	r3, r3, #7
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	429a      	cmp	r2, r3
 800769e:	d001      	beq.n	80076a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e032      	b.n	800770a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0304 	and.w	r3, r3, #4
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d008      	beq.n	80076c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076b0:	4b19      	ldr	r3, [pc, #100]	; (8007718 <HAL_RCC_ClockConfig+0x1bc>)
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	4916      	ldr	r1, [pc, #88]	; (8007718 <HAL_RCC_ClockConfig+0x1bc>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0308 	and.w	r3, r3, #8
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d009      	beq.n	80076e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076ce:	4b12      	ldr	r3, [pc, #72]	; (8007718 <HAL_RCC_ClockConfig+0x1bc>)
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	00db      	lsls	r3, r3, #3
 80076dc:	490e      	ldr	r1, [pc, #56]	; (8007718 <HAL_RCC_ClockConfig+0x1bc>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80076e2:	f000 f821 	bl	8007728 <HAL_RCC_GetSysClockFreq>
 80076e6:	4602      	mov	r2, r0
 80076e8:	4b0b      	ldr	r3, [pc, #44]	; (8007718 <HAL_RCC_ClockConfig+0x1bc>)
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	091b      	lsrs	r3, r3, #4
 80076ee:	f003 030f 	and.w	r3, r3, #15
 80076f2:	490a      	ldr	r1, [pc, #40]	; (800771c <HAL_RCC_ClockConfig+0x1c0>)
 80076f4:	5ccb      	ldrb	r3, [r1, r3]
 80076f6:	fa22 f303 	lsr.w	r3, r2, r3
 80076fa:	4a09      	ldr	r2, [pc, #36]	; (8007720 <HAL_RCC_ClockConfig+0x1c4>)
 80076fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80076fe:	4b09      	ldr	r3, [pc, #36]	; (8007724 <HAL_RCC_ClockConfig+0x1c8>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4618      	mov	r0, r3
 8007704:	f7fd faf6 	bl	8004cf4 <HAL_InitTick>

  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	40023c00 	.word	0x40023c00
 8007718:	40023800 	.word	0x40023800
 800771c:	0801a86c 	.word	0x0801a86c
 8007720:	20000038 	.word	0x20000038
 8007724:	2000003c 	.word	0x2000003c

08007728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800772c:	b094      	sub	sp, #80	; 0x50
 800772e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	647b      	str	r3, [r7, #68]	; 0x44
 8007734:	2300      	movs	r3, #0
 8007736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007738:	2300      	movs	r3, #0
 800773a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800773c:	2300      	movs	r3, #0
 800773e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007740:	4b79      	ldr	r3, [pc, #484]	; (8007928 <HAL_RCC_GetSysClockFreq+0x200>)
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f003 030c 	and.w	r3, r3, #12
 8007748:	2b08      	cmp	r3, #8
 800774a:	d00d      	beq.n	8007768 <HAL_RCC_GetSysClockFreq+0x40>
 800774c:	2b08      	cmp	r3, #8
 800774e:	f200 80e1 	bhi.w	8007914 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <HAL_RCC_GetSysClockFreq+0x34>
 8007756:	2b04      	cmp	r3, #4
 8007758:	d003      	beq.n	8007762 <HAL_RCC_GetSysClockFreq+0x3a>
 800775a:	e0db      	b.n	8007914 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800775c:	4b73      	ldr	r3, [pc, #460]	; (800792c <HAL_RCC_GetSysClockFreq+0x204>)
 800775e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007760:	e0db      	b.n	800791a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007762:	4b73      	ldr	r3, [pc, #460]	; (8007930 <HAL_RCC_GetSysClockFreq+0x208>)
 8007764:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007766:	e0d8      	b.n	800791a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007768:	4b6f      	ldr	r3, [pc, #444]	; (8007928 <HAL_RCC_GetSysClockFreq+0x200>)
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007770:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007772:	4b6d      	ldr	r3, [pc, #436]	; (8007928 <HAL_RCC_GetSysClockFreq+0x200>)
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d063      	beq.n	8007846 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800777e:	4b6a      	ldr	r3, [pc, #424]	; (8007928 <HAL_RCC_GetSysClockFreq+0x200>)
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	099b      	lsrs	r3, r3, #6
 8007784:	2200      	movs	r2, #0
 8007786:	63bb      	str	r3, [r7, #56]	; 0x38
 8007788:	63fa      	str	r2, [r7, #60]	; 0x3c
 800778a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007790:	633b      	str	r3, [r7, #48]	; 0x30
 8007792:	2300      	movs	r3, #0
 8007794:	637b      	str	r3, [r7, #52]	; 0x34
 8007796:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800779a:	4622      	mov	r2, r4
 800779c:	462b      	mov	r3, r5
 800779e:	f04f 0000 	mov.w	r0, #0
 80077a2:	f04f 0100 	mov.w	r1, #0
 80077a6:	0159      	lsls	r1, r3, #5
 80077a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077ac:	0150      	lsls	r0, r2, #5
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	4621      	mov	r1, r4
 80077b4:	1a51      	subs	r1, r2, r1
 80077b6:	6139      	str	r1, [r7, #16]
 80077b8:	4629      	mov	r1, r5
 80077ba:	eb63 0301 	sbc.w	r3, r3, r1
 80077be:	617b      	str	r3, [r7, #20]
 80077c0:	f04f 0200 	mov.w	r2, #0
 80077c4:	f04f 0300 	mov.w	r3, #0
 80077c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077cc:	4659      	mov	r1, fp
 80077ce:	018b      	lsls	r3, r1, #6
 80077d0:	4651      	mov	r1, sl
 80077d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80077d6:	4651      	mov	r1, sl
 80077d8:	018a      	lsls	r2, r1, #6
 80077da:	4651      	mov	r1, sl
 80077dc:	ebb2 0801 	subs.w	r8, r2, r1
 80077e0:	4659      	mov	r1, fp
 80077e2:	eb63 0901 	sbc.w	r9, r3, r1
 80077e6:	f04f 0200 	mov.w	r2, #0
 80077ea:	f04f 0300 	mov.w	r3, #0
 80077ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077fa:	4690      	mov	r8, r2
 80077fc:	4699      	mov	r9, r3
 80077fe:	4623      	mov	r3, r4
 8007800:	eb18 0303 	adds.w	r3, r8, r3
 8007804:	60bb      	str	r3, [r7, #8]
 8007806:	462b      	mov	r3, r5
 8007808:	eb49 0303 	adc.w	r3, r9, r3
 800780c:	60fb      	str	r3, [r7, #12]
 800780e:	f04f 0200 	mov.w	r2, #0
 8007812:	f04f 0300 	mov.w	r3, #0
 8007816:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800781a:	4629      	mov	r1, r5
 800781c:	024b      	lsls	r3, r1, #9
 800781e:	4621      	mov	r1, r4
 8007820:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007824:	4621      	mov	r1, r4
 8007826:	024a      	lsls	r2, r1, #9
 8007828:	4610      	mov	r0, r2
 800782a:	4619      	mov	r1, r3
 800782c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800782e:	2200      	movs	r2, #0
 8007830:	62bb      	str	r3, [r7, #40]	; 0x28
 8007832:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007834:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007838:	f7f9 fa80 	bl	8000d3c <__aeabi_uldivmod>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	4613      	mov	r3, r2
 8007842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007844:	e058      	b.n	80078f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007846:	4b38      	ldr	r3, [pc, #224]	; (8007928 <HAL_RCC_GetSysClockFreq+0x200>)
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	099b      	lsrs	r3, r3, #6
 800784c:	2200      	movs	r2, #0
 800784e:	4618      	mov	r0, r3
 8007850:	4611      	mov	r1, r2
 8007852:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007856:	623b      	str	r3, [r7, #32]
 8007858:	2300      	movs	r3, #0
 800785a:	627b      	str	r3, [r7, #36]	; 0x24
 800785c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007860:	4642      	mov	r2, r8
 8007862:	464b      	mov	r3, r9
 8007864:	f04f 0000 	mov.w	r0, #0
 8007868:	f04f 0100 	mov.w	r1, #0
 800786c:	0159      	lsls	r1, r3, #5
 800786e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007872:	0150      	lsls	r0, r2, #5
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4641      	mov	r1, r8
 800787a:	ebb2 0a01 	subs.w	sl, r2, r1
 800787e:	4649      	mov	r1, r9
 8007880:	eb63 0b01 	sbc.w	fp, r3, r1
 8007884:	f04f 0200 	mov.w	r2, #0
 8007888:	f04f 0300 	mov.w	r3, #0
 800788c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007890:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007894:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007898:	ebb2 040a 	subs.w	r4, r2, sl
 800789c:	eb63 050b 	sbc.w	r5, r3, fp
 80078a0:	f04f 0200 	mov.w	r2, #0
 80078a4:	f04f 0300 	mov.w	r3, #0
 80078a8:	00eb      	lsls	r3, r5, #3
 80078aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078ae:	00e2      	lsls	r2, r4, #3
 80078b0:	4614      	mov	r4, r2
 80078b2:	461d      	mov	r5, r3
 80078b4:	4643      	mov	r3, r8
 80078b6:	18e3      	adds	r3, r4, r3
 80078b8:	603b      	str	r3, [r7, #0]
 80078ba:	464b      	mov	r3, r9
 80078bc:	eb45 0303 	adc.w	r3, r5, r3
 80078c0:	607b      	str	r3, [r7, #4]
 80078c2:	f04f 0200 	mov.w	r2, #0
 80078c6:	f04f 0300 	mov.w	r3, #0
 80078ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80078ce:	4629      	mov	r1, r5
 80078d0:	028b      	lsls	r3, r1, #10
 80078d2:	4621      	mov	r1, r4
 80078d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80078d8:	4621      	mov	r1, r4
 80078da:	028a      	lsls	r2, r1, #10
 80078dc:	4610      	mov	r0, r2
 80078de:	4619      	mov	r1, r3
 80078e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078e2:	2200      	movs	r2, #0
 80078e4:	61bb      	str	r3, [r7, #24]
 80078e6:	61fa      	str	r2, [r7, #28]
 80078e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078ec:	f7f9 fa26 	bl	8000d3c <__aeabi_uldivmod>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	4613      	mov	r3, r2
 80078f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80078f8:	4b0b      	ldr	r3, [pc, #44]	; (8007928 <HAL_RCC_GetSysClockFreq+0x200>)
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	0c1b      	lsrs	r3, r3, #16
 80078fe:	f003 0303 	and.w	r3, r3, #3
 8007902:	3301      	adds	r3, #1
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007908:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800790a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800790c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007910:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007912:	e002      	b.n	800791a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007914:	4b05      	ldr	r3, [pc, #20]	; (800792c <HAL_RCC_GetSysClockFreq+0x204>)
 8007916:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800791a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800791c:	4618      	mov	r0, r3
 800791e:	3750      	adds	r7, #80	; 0x50
 8007920:	46bd      	mov	sp, r7
 8007922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007926:	bf00      	nop
 8007928:	40023800 	.word	0x40023800
 800792c:	00f42400 	.word	0x00f42400
 8007930:	007a1200 	.word	0x007a1200

08007934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007934:	b480      	push	{r7}
 8007936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007938:	4b03      	ldr	r3, [pc, #12]	; (8007948 <HAL_RCC_GetHCLKFreq+0x14>)
 800793a:	681b      	ldr	r3, [r3, #0]
}
 800793c:	4618      	mov	r0, r3
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	20000038 	.word	0x20000038

0800794c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800794c:	b084      	sub	sp, #16
 800794e:	b580      	push	{r7, lr}
 8007950:	b084      	sub	sp, #16
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	f107 001c 	add.w	r0, r7, #28
 800795a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007960:	2b01      	cmp	r3, #1
 8007962:	d122      	bne.n	80079aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007968:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800798c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800798e:	2b01      	cmp	r3, #1
 8007990:	d105      	bne.n	800799e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f001 fbee 	bl	8009180 <USB_CoreReset>
 80079a4:	4603      	mov	r3, r0
 80079a6:	73fb      	strb	r3, [r7, #15]
 80079a8:	e01a      	b.n	80079e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f001 fbe2 	bl	8009180 <USB_CoreReset>
 80079bc:	4603      	mov	r3, r0
 80079be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80079c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d106      	bne.n	80079d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	639a      	str	r2, [r3, #56]	; 0x38
 80079d2:	e005      	b.n	80079e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80079e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d10b      	bne.n	80079fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f043 0206 	orr.w	r2, r3, #6
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f043 0220 	orr.w	r2, r3, #32
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a0a:	b004      	add	sp, #16
 8007a0c:	4770      	bx	lr
	...

08007a10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b087      	sub	sp, #28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007a1e:	79fb      	ldrb	r3, [r7, #7]
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d165      	bne.n	8007af0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	4a41      	ldr	r2, [pc, #260]	; (8007b2c <USB_SetTurnaroundTime+0x11c>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d906      	bls.n	8007a3a <USB_SetTurnaroundTime+0x2a>
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	4a40      	ldr	r2, [pc, #256]	; (8007b30 <USB_SetTurnaroundTime+0x120>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d202      	bcs.n	8007a3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007a34:	230f      	movs	r3, #15
 8007a36:	617b      	str	r3, [r7, #20]
 8007a38:	e062      	b.n	8007b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	4a3c      	ldr	r2, [pc, #240]	; (8007b30 <USB_SetTurnaroundTime+0x120>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d306      	bcc.n	8007a50 <USB_SetTurnaroundTime+0x40>
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	4a3b      	ldr	r2, [pc, #236]	; (8007b34 <USB_SetTurnaroundTime+0x124>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d202      	bcs.n	8007a50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007a4a:	230e      	movs	r3, #14
 8007a4c:	617b      	str	r3, [r7, #20]
 8007a4e:	e057      	b.n	8007b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	4a38      	ldr	r2, [pc, #224]	; (8007b34 <USB_SetTurnaroundTime+0x124>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d306      	bcc.n	8007a66 <USB_SetTurnaroundTime+0x56>
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	4a37      	ldr	r2, [pc, #220]	; (8007b38 <USB_SetTurnaroundTime+0x128>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d202      	bcs.n	8007a66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007a60:	230d      	movs	r3, #13
 8007a62:	617b      	str	r3, [r7, #20]
 8007a64:	e04c      	b.n	8007b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	4a33      	ldr	r2, [pc, #204]	; (8007b38 <USB_SetTurnaroundTime+0x128>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d306      	bcc.n	8007a7c <USB_SetTurnaroundTime+0x6c>
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	4a32      	ldr	r2, [pc, #200]	; (8007b3c <USB_SetTurnaroundTime+0x12c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d802      	bhi.n	8007a7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007a76:	230c      	movs	r3, #12
 8007a78:	617b      	str	r3, [r7, #20]
 8007a7a:	e041      	b.n	8007b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	4a2f      	ldr	r2, [pc, #188]	; (8007b3c <USB_SetTurnaroundTime+0x12c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d906      	bls.n	8007a92 <USB_SetTurnaroundTime+0x82>
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	4a2e      	ldr	r2, [pc, #184]	; (8007b40 <USB_SetTurnaroundTime+0x130>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d802      	bhi.n	8007a92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007a8c:	230b      	movs	r3, #11
 8007a8e:	617b      	str	r3, [r7, #20]
 8007a90:	e036      	b.n	8007b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	4a2a      	ldr	r2, [pc, #168]	; (8007b40 <USB_SetTurnaroundTime+0x130>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d906      	bls.n	8007aa8 <USB_SetTurnaroundTime+0x98>
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	4a29      	ldr	r2, [pc, #164]	; (8007b44 <USB_SetTurnaroundTime+0x134>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d802      	bhi.n	8007aa8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007aa2:	230a      	movs	r3, #10
 8007aa4:	617b      	str	r3, [r7, #20]
 8007aa6:	e02b      	b.n	8007b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	4a26      	ldr	r2, [pc, #152]	; (8007b44 <USB_SetTurnaroundTime+0x134>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d906      	bls.n	8007abe <USB_SetTurnaroundTime+0xae>
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	4a25      	ldr	r2, [pc, #148]	; (8007b48 <USB_SetTurnaroundTime+0x138>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d202      	bcs.n	8007abe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007ab8:	2309      	movs	r3, #9
 8007aba:	617b      	str	r3, [r7, #20]
 8007abc:	e020      	b.n	8007b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	4a21      	ldr	r2, [pc, #132]	; (8007b48 <USB_SetTurnaroundTime+0x138>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d306      	bcc.n	8007ad4 <USB_SetTurnaroundTime+0xc4>
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	4a20      	ldr	r2, [pc, #128]	; (8007b4c <USB_SetTurnaroundTime+0x13c>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d802      	bhi.n	8007ad4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007ace:	2308      	movs	r3, #8
 8007ad0:	617b      	str	r3, [r7, #20]
 8007ad2:	e015      	b.n	8007b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	4a1d      	ldr	r2, [pc, #116]	; (8007b4c <USB_SetTurnaroundTime+0x13c>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d906      	bls.n	8007aea <USB_SetTurnaroundTime+0xda>
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	4a1c      	ldr	r2, [pc, #112]	; (8007b50 <USB_SetTurnaroundTime+0x140>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d202      	bcs.n	8007aea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007ae4:	2307      	movs	r3, #7
 8007ae6:	617b      	str	r3, [r7, #20]
 8007ae8:	e00a      	b.n	8007b00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007aea:	2306      	movs	r3, #6
 8007aec:	617b      	str	r3, [r7, #20]
 8007aee:	e007      	b.n	8007b00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007af0:	79fb      	ldrb	r3, [r7, #7]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d102      	bne.n	8007afc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007af6:	2309      	movs	r3, #9
 8007af8:	617b      	str	r3, [r7, #20]
 8007afa:	e001      	b.n	8007b00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007afc:	2309      	movs	r3, #9
 8007afe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	68da      	ldr	r2, [r3, #12]
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	029b      	lsls	r3, r3, #10
 8007b14:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007b18:	431a      	orrs	r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	371c      	adds	r7, #28
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	00d8acbf 	.word	0x00d8acbf
 8007b30:	00e4e1c0 	.word	0x00e4e1c0
 8007b34:	00f42400 	.word	0x00f42400
 8007b38:	01067380 	.word	0x01067380
 8007b3c:	011a499f 	.word	0x011a499f
 8007b40:	01312cff 	.word	0x01312cff
 8007b44:	014ca43f 	.word	0x014ca43f
 8007b48:	016e3600 	.word	0x016e3600
 8007b4c:	01a6ab1f 	.word	0x01a6ab1f
 8007b50:	01e84800 	.word	0x01e84800

08007b54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f043 0201 	orr.w	r2, r3, #1
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b083      	sub	sp, #12
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f023 0201 	bic.w	r2, r3, #1
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007bb4:	78fb      	ldrb	r3, [r7, #3]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d115      	bne.n	8007be6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007bc6:	2001      	movs	r0, #1
 8007bc8:	f7fd f8e4 	bl	8004d94 <HAL_Delay>
      ms++;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f001 fa45 	bl	8009062 <USB_GetMode>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d01e      	beq.n	8007c1c <USB_SetCurrentMode+0x84>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b31      	cmp	r3, #49	; 0x31
 8007be2:	d9f0      	bls.n	8007bc6 <USB_SetCurrentMode+0x2e>
 8007be4:	e01a      	b.n	8007c1c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007be6:	78fb      	ldrb	r3, [r7, #3]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d115      	bne.n	8007c18 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007bf8:	2001      	movs	r0, #1
 8007bfa:	f7fd f8cb 	bl	8004d94 <HAL_Delay>
      ms++;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	3301      	adds	r3, #1
 8007c02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f001 fa2c 	bl	8009062 <USB_GetMode>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d005      	beq.n	8007c1c <USB_SetCurrentMode+0x84>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2b31      	cmp	r3, #49	; 0x31
 8007c14:	d9f0      	bls.n	8007bf8 <USB_SetCurrentMode+0x60>
 8007c16:	e001      	b.n	8007c1c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e005      	b.n	8007c28 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b32      	cmp	r3, #50	; 0x32
 8007c20:	d101      	bne.n	8007c26 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e000      	b.n	8007c28 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c30:	b084      	sub	sp, #16
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b086      	sub	sp, #24
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007c3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	613b      	str	r3, [r7, #16]
 8007c4e:	e009      	b.n	8007c64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	3340      	adds	r3, #64	; 0x40
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	3301      	adds	r3, #1
 8007c62:	613b      	str	r3, [r7, #16]
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	2b0e      	cmp	r3, #14
 8007c68:	d9f2      	bls.n	8007c50 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d11c      	bne.n	8007caa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c7e:	f043 0302 	orr.w	r3, r3, #2
 8007c82:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c94:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	639a      	str	r2, [r3, #56]	; 0x38
 8007ca8:	e00b      	b.n	8007cc2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cc8:	461a      	mov	r2, r3
 8007cca:	2300      	movs	r3, #0
 8007ccc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cdc:	461a      	mov	r2, r3
 8007cde:	680b      	ldr	r3, [r1, #0]
 8007ce0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d10c      	bne.n	8007d02 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d104      	bne.n	8007cf8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007cee:	2100      	movs	r1, #0
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f965 	bl	8007fc0 <USB_SetDevSpeed>
 8007cf6:	e008      	b.n	8007d0a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f960 	bl	8007fc0 <USB_SetDevSpeed>
 8007d00:	e003      	b.n	8007d0a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007d02:	2103      	movs	r1, #3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f95b 	bl	8007fc0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d0a:	2110      	movs	r1, #16
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f8f3 	bl	8007ef8 <USB_FlushTxFifo>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f91f 	bl	8007f60 <USB_FlushRxFifo>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d32:	461a      	mov	r2, r3
 8007d34:	2300      	movs	r3, #0
 8007d36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d3e:	461a      	mov	r2, r3
 8007d40:	2300      	movs	r3, #0
 8007d42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d50:	2300      	movs	r3, #0
 8007d52:	613b      	str	r3, [r7, #16]
 8007d54:	e043      	b.n	8007dde <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	015a      	lsls	r2, r3, #5
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d6c:	d118      	bne.n	8007da0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10a      	bne.n	8007d8a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d80:	461a      	mov	r2, r3
 8007d82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d86:	6013      	str	r3, [r2, #0]
 8007d88:	e013      	b.n	8007db2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d96:	461a      	mov	r2, r3
 8007d98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d9c:	6013      	str	r3, [r2, #0]
 8007d9e:	e008      	b.n	8007db2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	015a      	lsls	r2, r3, #5
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	4413      	add	r3, r2
 8007da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dac:	461a      	mov	r2, r3
 8007dae:	2300      	movs	r3, #0
 8007db0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	015a      	lsls	r2, r3, #5
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	4413      	add	r3, r2
 8007dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007dd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	613b      	str	r3, [r7, #16]
 8007dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d3b7      	bcc.n	8007d56 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007de6:	2300      	movs	r3, #0
 8007de8:	613b      	str	r3, [r7, #16]
 8007dea:	e043      	b.n	8007e74 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e02:	d118      	bne.n	8007e36 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10a      	bne.n	8007e20 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	015a      	lsls	r2, r3, #5
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	4413      	add	r3, r2
 8007e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e16:	461a      	mov	r2, r3
 8007e18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e1c:	6013      	str	r3, [r2, #0]
 8007e1e:	e013      	b.n	8007e48 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e32:	6013      	str	r3, [r2, #0]
 8007e34:	e008      	b.n	8007e48 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	015a      	lsls	r2, r3, #5
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e42:	461a      	mov	r2, r3
 8007e44:	2300      	movs	r3, #0
 8007e46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e54:	461a      	mov	r2, r3
 8007e56:	2300      	movs	r3, #0
 8007e58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	015a      	lsls	r2, r3, #5
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	4413      	add	r3, r2
 8007e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e66:	461a      	mov	r2, r3
 8007e68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	3301      	adds	r3, #1
 8007e72:	613b      	str	r3, [r7, #16]
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d3b7      	bcc.n	8007dec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007e9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d105      	bne.n	8007eb0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	f043 0210 	orr.w	r2, r3, #16
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	699a      	ldr	r2, [r3, #24]
 8007eb4:	4b0f      	ldr	r3, [pc, #60]	; (8007ef4 <USB_DevInit+0x2c4>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d005      	beq.n	8007ece <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	f043 0208 	orr.w	r2, r3, #8
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d107      	bne.n	8007ee4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007edc:	f043 0304 	orr.w	r3, r3, #4
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3718      	adds	r7, #24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ef0:	b004      	add	sp, #16
 8007ef2:	4770      	bx	lr
 8007ef4:	803c3800 	.word	0x803c3800

08007ef8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f02:	2300      	movs	r3, #0
 8007f04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4a13      	ldr	r2, [pc, #76]	; (8007f5c <USB_FlushTxFifo+0x64>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d901      	bls.n	8007f18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e01b      	b.n	8007f50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	daf2      	bge.n	8007f06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f20:	2300      	movs	r3, #0
 8007f22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	019b      	lsls	r3, r3, #6
 8007f28:	f043 0220 	orr.w	r2, r3, #32
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	3301      	adds	r3, #1
 8007f34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	4a08      	ldr	r2, [pc, #32]	; (8007f5c <USB_FlushTxFifo+0x64>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d901      	bls.n	8007f42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e006      	b.n	8007f50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	f003 0320 	and.w	r3, r3, #32
 8007f4a:	2b20      	cmp	r3, #32
 8007f4c:	d0f0      	beq.n	8007f30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr
 8007f5c:	00030d40 	.word	0x00030d40

08007f60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4a11      	ldr	r2, [pc, #68]	; (8007fbc <USB_FlushRxFifo+0x5c>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d901      	bls.n	8007f7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e018      	b.n	8007fb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	daf2      	bge.n	8007f6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2210      	movs	r2, #16
 8007f8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	3301      	adds	r3, #1
 8007f94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4a08      	ldr	r2, [pc, #32]	; (8007fbc <USB_FlushRxFifo+0x5c>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d901      	bls.n	8007fa2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e006      	b.n	8007fb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	f003 0310 	and.w	r3, r3, #16
 8007faa:	2b10      	cmp	r3, #16
 8007fac:	d0f0      	beq.n	8007f90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	00030d40 	.word	0x00030d40

08007fc0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	78fb      	ldrb	r3, [r7, #3]
 8007fda:	68f9      	ldr	r1, [r7, #12]
 8007fdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b087      	sub	sp, #28
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f003 0306 	and.w	r3, r3, #6
 800800a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d102      	bne.n	8008018 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008012:	2300      	movs	r3, #0
 8008014:	75fb      	strb	r3, [r7, #23]
 8008016:	e00a      	b.n	800802e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2b02      	cmp	r3, #2
 800801c:	d002      	beq.n	8008024 <USB_GetDevSpeed+0x32>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2b06      	cmp	r3, #6
 8008022:	d102      	bne.n	800802a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008024:	2302      	movs	r3, #2
 8008026:	75fb      	strb	r3, [r7, #23]
 8008028:	e001      	b.n	800802e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800802a:	230f      	movs	r3, #15
 800802c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800802e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008030:	4618      	mov	r0, r3
 8008032:	371c      	adds	r7, #28
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	785b      	ldrb	r3, [r3, #1]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d13a      	bne.n	80080ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800805e:	69da      	ldr	r2, [r3, #28]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	f003 030f 	and.w	r3, r3, #15
 8008068:	2101      	movs	r1, #1
 800806a:	fa01 f303 	lsl.w	r3, r1, r3
 800806e:	b29b      	uxth	r3, r3
 8008070:	68f9      	ldr	r1, [r7, #12]
 8008072:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008076:	4313      	orrs	r3, r2
 8008078:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	4413      	add	r3, r2
 8008082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d155      	bne.n	800813c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	015a      	lsls	r2, r3, #5
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	4413      	add	r3, r2
 8008098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	791b      	ldrb	r3, [r3, #4]
 80080aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80080ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	059b      	lsls	r3, r3, #22
 80080b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80080b4:	4313      	orrs	r3, r2
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	0151      	lsls	r1, r2, #5
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	440a      	add	r2, r1
 80080be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080ca:	6013      	str	r3, [r2, #0]
 80080cc:	e036      	b.n	800813c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d4:	69da      	ldr	r2, [r3, #28]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	f003 030f 	and.w	r3, r3, #15
 80080de:	2101      	movs	r1, #1
 80080e0:	fa01 f303 	lsl.w	r3, r1, r3
 80080e4:	041b      	lsls	r3, r3, #16
 80080e6:	68f9      	ldr	r1, [r7, #12]
 80080e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080ec:	4313      	orrs	r3, r2
 80080ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d11a      	bne.n	800813c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	4413      	add	r3, r2
 800810e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	791b      	ldrb	r3, [r3, #4]
 8008120:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008122:	430b      	orrs	r3, r1
 8008124:	4313      	orrs	r3, r2
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	0151      	lsls	r1, r2, #5
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	440a      	add	r2, r1
 800812e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800813a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
	...

0800814c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	785b      	ldrb	r3, [r3, #1]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d161      	bne.n	800822c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800817a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800817e:	d11f      	bne.n	80081c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	4413      	add	r3, r2
 8008188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	0151      	lsls	r1, r2, #5
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	440a      	add	r2, r1
 8008196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800819a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800819e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	015a      	lsls	r2, r3, #5
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4413      	add	r3, r2
 80081a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	0151      	lsls	r1, r2, #5
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	440a      	add	r2, r1
 80081b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	f003 030f 	and.w	r3, r3, #15
 80081d0:	2101      	movs	r1, #1
 80081d2:	fa01 f303 	lsl.w	r3, r1, r3
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	43db      	mvns	r3, r3
 80081da:	68f9      	ldr	r1, [r7, #12]
 80081dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081e0:	4013      	ands	r3, r2
 80081e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ea:	69da      	ldr	r2, [r3, #28]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	f003 030f 	and.w	r3, r3, #15
 80081f4:	2101      	movs	r1, #1
 80081f6:	fa01 f303 	lsl.w	r3, r1, r3
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	43db      	mvns	r3, r3
 80081fe:	68f9      	ldr	r1, [r7, #12]
 8008200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008204:	4013      	ands	r3, r2
 8008206:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4413      	add	r3, r2
 8008210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	0159      	lsls	r1, r3, #5
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	440b      	add	r3, r1
 800821e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008222:	4619      	mov	r1, r3
 8008224:	4b35      	ldr	r3, [pc, #212]	; (80082fc <USB_DeactivateEndpoint+0x1b0>)
 8008226:	4013      	ands	r3, r2
 8008228:	600b      	str	r3, [r1, #0]
 800822a:	e060      	b.n	80082ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	4413      	add	r3, r2
 8008234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800823e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008242:	d11f      	bne.n	8008284 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	015a      	lsls	r2, r3, #5
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	4413      	add	r3, r2
 800824c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	0151      	lsls	r1, r2, #5
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	440a      	add	r2, r1
 800825a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800825e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008262:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	4413      	add	r3, r2
 800826c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	0151      	lsls	r1, r2, #5
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	440a      	add	r2, r1
 800827a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800827e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008282:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800828a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	f003 030f 	and.w	r3, r3, #15
 8008294:	2101      	movs	r1, #1
 8008296:	fa01 f303 	lsl.w	r3, r1, r3
 800829a:	041b      	lsls	r3, r3, #16
 800829c:	43db      	mvns	r3, r3
 800829e:	68f9      	ldr	r1, [r7, #12]
 80082a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082a4:	4013      	ands	r3, r2
 80082a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ae:	69da      	ldr	r2, [r3, #28]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	f003 030f 	and.w	r3, r3, #15
 80082b8:	2101      	movs	r1, #1
 80082ba:	fa01 f303 	lsl.w	r3, r1, r3
 80082be:	041b      	lsls	r3, r3, #16
 80082c0:	43db      	mvns	r3, r3
 80082c2:	68f9      	ldr	r1, [r7, #12]
 80082c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082c8:	4013      	ands	r3, r2
 80082ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	0159      	lsls	r1, r3, #5
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	440b      	add	r3, r1
 80082e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e6:	4619      	mov	r1, r3
 80082e8:	4b05      	ldr	r3, [pc, #20]	; (8008300 <USB_DeactivateEndpoint+0x1b4>)
 80082ea:	4013      	ands	r3, r2
 80082ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3714      	adds	r7, #20
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	ec337800 	.word	0xec337800
 8008300:	eff37800 	.word	0xeff37800

08008304 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b08a      	sub	sp, #40	; 0x28
 8008308:	af02      	add	r7, sp, #8
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	4613      	mov	r3, r2
 8008310:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	785b      	ldrb	r3, [r3, #1]
 8008320:	2b01      	cmp	r3, #1
 8008322:	f040 815c 	bne.w	80085de <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	699b      	ldr	r3, [r3, #24]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d132      	bne.n	8008394 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	015a      	lsls	r2, r3, #5
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	4413      	add	r3, r2
 8008336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	69ba      	ldr	r2, [r7, #24]
 800833e:	0151      	lsls	r1, r2, #5
 8008340:	69fa      	ldr	r2, [r7, #28]
 8008342:	440a      	add	r2, r1
 8008344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008348:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800834c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008350:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	015a      	lsls	r2, r3, #5
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	4413      	add	r3, r2
 800835a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	69ba      	ldr	r2, [r7, #24]
 8008362:	0151      	lsls	r1, r2, #5
 8008364:	69fa      	ldr	r2, [r7, #28]
 8008366:	440a      	add	r2, r1
 8008368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800836c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008370:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	015a      	lsls	r2, r3, #5
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	4413      	add	r3, r2
 800837a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	69ba      	ldr	r2, [r7, #24]
 8008382:	0151      	lsls	r1, r2, #5
 8008384:	69fa      	ldr	r2, [r7, #28]
 8008386:	440a      	add	r2, r1
 8008388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800838c:	0cdb      	lsrs	r3, r3, #19
 800838e:	04db      	lsls	r3, r3, #19
 8008390:	6113      	str	r3, [r2, #16]
 8008392:	e074      	b.n	800847e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	015a      	lsls	r2, r3, #5
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	4413      	add	r3, r2
 800839c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	69ba      	ldr	r2, [r7, #24]
 80083a4:	0151      	lsls	r1, r2, #5
 80083a6:	69fa      	ldr	r2, [r7, #28]
 80083a8:	440a      	add	r2, r1
 80083aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083ae:	0cdb      	lsrs	r3, r3, #19
 80083b0:	04db      	lsls	r3, r3, #19
 80083b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	015a      	lsls	r2, r3, #5
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	4413      	add	r3, r2
 80083bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	69ba      	ldr	r2, [r7, #24]
 80083c4:	0151      	lsls	r1, r2, #5
 80083c6:	69fa      	ldr	r2, [r7, #28]
 80083c8:	440a      	add	r2, r1
 80083ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	6999      	ldr	r1, [r3, #24]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	440b      	add	r3, r1
 80083f0:	1e59      	subs	r1, r3, #1
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80083fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80083fc:	4b9d      	ldr	r3, [pc, #628]	; (8008674 <USB_EPStartXfer+0x370>)
 80083fe:	400b      	ands	r3, r1
 8008400:	69b9      	ldr	r1, [r7, #24]
 8008402:	0148      	lsls	r0, r1, #5
 8008404:	69f9      	ldr	r1, [r7, #28]
 8008406:	4401      	add	r1, r0
 8008408:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800840c:	4313      	orrs	r3, r2
 800840e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	4413      	add	r3, r2
 8008418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800841c:	691a      	ldr	r2, [r3, #16]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008426:	69b9      	ldr	r1, [r7, #24]
 8008428:	0148      	lsls	r0, r1, #5
 800842a:	69f9      	ldr	r1, [r7, #28]
 800842c:	4401      	add	r1, r0
 800842e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008432:	4313      	orrs	r3, r2
 8008434:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	791b      	ldrb	r3, [r3, #4]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d11f      	bne.n	800847e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	015a      	lsls	r2, r3, #5
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	4413      	add	r3, r2
 8008446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	69ba      	ldr	r2, [r7, #24]
 800844e:	0151      	lsls	r1, r2, #5
 8008450:	69fa      	ldr	r2, [r7, #28]
 8008452:	440a      	add	r2, r1
 8008454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008458:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800845c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	015a      	lsls	r2, r3, #5
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	4413      	add	r3, r2
 8008466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	0151      	lsls	r1, r2, #5
 8008470:	69fa      	ldr	r2, [r7, #28]
 8008472:	440a      	add	r2, r1
 8008474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008478:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800847c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800847e:	79fb      	ldrb	r3, [r7, #7]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d14b      	bne.n	800851c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	695b      	ldr	r3, [r3, #20]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d009      	beq.n	80084a0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	4413      	add	r3, r2
 8008494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008498:	461a      	mov	r2, r3
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	791b      	ldrb	r3, [r3, #4]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d128      	bne.n	80084fa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d110      	bne.n	80084da <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	69ba      	ldr	r2, [r7, #24]
 80084c8:	0151      	lsls	r1, r2, #5
 80084ca:	69fa      	ldr	r2, [r7, #28]
 80084cc:	440a      	add	r2, r1
 80084ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084d6:	6013      	str	r3, [r2, #0]
 80084d8:	e00f      	b.n	80084fa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	015a      	lsls	r2, r3, #5
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	4413      	add	r3, r2
 80084e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	0151      	lsls	r1, r2, #5
 80084ec:	69fa      	ldr	r2, [r7, #28]
 80084ee:	440a      	add	r2, r1
 80084f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	015a      	lsls	r2, r3, #5
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	4413      	add	r3, r2
 8008502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	69ba      	ldr	r2, [r7, #24]
 800850a:	0151      	lsls	r1, r2, #5
 800850c:	69fa      	ldr	r2, [r7, #28]
 800850e:	440a      	add	r2, r1
 8008510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008514:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008518:	6013      	str	r3, [r2, #0]
 800851a:	e133      	b.n	8008784 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	4413      	add	r3, r2
 8008524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	0151      	lsls	r1, r2, #5
 800852e:	69fa      	ldr	r2, [r7, #28]
 8008530:	440a      	add	r2, r1
 8008532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008536:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800853a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	791b      	ldrb	r3, [r3, #4]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d015      	beq.n	8008570 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	2b00      	cmp	r3, #0
 800854a:	f000 811b 	beq.w	8008784 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	f003 030f 	and.w	r3, r3, #15
 800855e:	2101      	movs	r1, #1
 8008560:	fa01 f303 	lsl.w	r3, r1, r3
 8008564:	69f9      	ldr	r1, [r7, #28]
 8008566:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800856a:	4313      	orrs	r3, r2
 800856c:	634b      	str	r3, [r1, #52]	; 0x34
 800856e:	e109      	b.n	8008784 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800857c:	2b00      	cmp	r3, #0
 800857e:	d110      	bne.n	80085a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	69ba      	ldr	r2, [r7, #24]
 8008590:	0151      	lsls	r1, r2, #5
 8008592:	69fa      	ldr	r2, [r7, #28]
 8008594:	440a      	add	r2, r1
 8008596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800859a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800859e:	6013      	str	r3, [r2, #0]
 80085a0:	e00f      	b.n	80085c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	015a      	lsls	r2, r3, #5
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	4413      	add	r3, r2
 80085aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	0151      	lsls	r1, r2, #5
 80085b4:	69fa      	ldr	r2, [r7, #28]
 80085b6:	440a      	add	r2, r1
 80085b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	6919      	ldr	r1, [r3, #16]
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	781a      	ldrb	r2, [r3, #0]
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	b298      	uxth	r0, r3
 80085d0:	79fb      	ldrb	r3, [r7, #7]
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	4603      	mov	r3, r0
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f000 fade 	bl	8008b98 <USB_WritePacket>
 80085dc:	e0d2      	b.n	8008784 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	69ba      	ldr	r2, [r7, #24]
 80085ee:	0151      	lsls	r1, r2, #5
 80085f0:	69fa      	ldr	r2, [r7, #28]
 80085f2:	440a      	add	r2, r1
 80085f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085f8:	0cdb      	lsrs	r3, r3, #19
 80085fa:	04db      	lsls	r3, r3, #19
 80085fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	4413      	add	r3, r2
 8008606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	0151      	lsls	r1, r2, #5
 8008610:	69fa      	ldr	r2, [r7, #28]
 8008612:	440a      	add	r2, r1
 8008614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008618:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800861c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008620:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d126      	bne.n	8008678 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	015a      	lsls	r2, r3, #5
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	4413      	add	r3, r2
 8008632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008636:	691a      	ldr	r2, [r3, #16]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008640:	69b9      	ldr	r1, [r7, #24]
 8008642:	0148      	lsls	r0, r1, #5
 8008644:	69f9      	ldr	r1, [r7, #28]
 8008646:	4401      	add	r1, r0
 8008648:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800864c:	4313      	orrs	r3, r2
 800864e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	4413      	add	r3, r2
 8008658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	69ba      	ldr	r2, [r7, #24]
 8008660:	0151      	lsls	r1, r2, #5
 8008662:	69fa      	ldr	r2, [r7, #28]
 8008664:	440a      	add	r2, r1
 8008666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800866a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800866e:	6113      	str	r3, [r2, #16]
 8008670:	e03a      	b.n	80086e8 <USB_EPStartXfer+0x3e4>
 8008672:	bf00      	nop
 8008674:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	699a      	ldr	r2, [r3, #24]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	4413      	add	r3, r2
 8008682:	1e5a      	subs	r2, r3, #1
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	fbb2 f3f3 	udiv	r3, r2, r3
 800868c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	8afa      	ldrh	r2, [r7, #22]
 8008694:	fb03 f202 	mul.w	r2, r3, r2
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a8:	691a      	ldr	r2, [r3, #16]
 80086aa:	8afb      	ldrh	r3, [r7, #22]
 80086ac:	04d9      	lsls	r1, r3, #19
 80086ae:	4b38      	ldr	r3, [pc, #224]	; (8008790 <USB_EPStartXfer+0x48c>)
 80086b0:	400b      	ands	r3, r1
 80086b2:	69b9      	ldr	r1, [r7, #24]
 80086b4:	0148      	lsls	r0, r1, #5
 80086b6:	69f9      	ldr	r1, [r7, #28]
 80086b8:	4401      	add	r1, r0
 80086ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80086be:	4313      	orrs	r3, r2
 80086c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	015a      	lsls	r2, r3, #5
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	4413      	add	r3, r2
 80086ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ce:	691a      	ldr	r2, [r3, #16]
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	69db      	ldr	r3, [r3, #28]
 80086d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086d8:	69b9      	ldr	r1, [r7, #24]
 80086da:	0148      	lsls	r0, r1, #5
 80086dc:	69f9      	ldr	r1, [r7, #28]
 80086de:	4401      	add	r1, r0
 80086e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80086e4:	4313      	orrs	r3, r2
 80086e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80086e8:	79fb      	ldrb	r3, [r7, #7]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d10d      	bne.n	800870a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d009      	beq.n	800870a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	6919      	ldr	r1, [r3, #16]
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	4413      	add	r3, r2
 8008702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008706:	460a      	mov	r2, r1
 8008708:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	791b      	ldrb	r3, [r3, #4]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d128      	bne.n	8008764 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800871e:	2b00      	cmp	r3, #0
 8008720:	d110      	bne.n	8008744 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	015a      	lsls	r2, r3, #5
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	4413      	add	r3, r2
 800872a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	69ba      	ldr	r2, [r7, #24]
 8008732:	0151      	lsls	r1, r2, #5
 8008734:	69fa      	ldr	r2, [r7, #28]
 8008736:	440a      	add	r2, r1
 8008738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800873c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008740:	6013      	str	r3, [r2, #0]
 8008742:	e00f      	b.n	8008764 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	015a      	lsls	r2, r3, #5
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	4413      	add	r3, r2
 800874c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	0151      	lsls	r1, r2, #5
 8008756:	69fa      	ldr	r2, [r7, #28]
 8008758:	440a      	add	r2, r1
 800875a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800875e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008762:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	015a      	lsls	r2, r3, #5
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	4413      	add	r3, r2
 800876c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	69ba      	ldr	r2, [r7, #24]
 8008774:	0151      	lsls	r1, r2, #5
 8008776:	69fa      	ldr	r2, [r7, #28]
 8008778:	440a      	add	r2, r1
 800877a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800877e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008782:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3720      	adds	r7, #32
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	1ff80000 	.word	0x1ff80000

08008794 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008794:	b480      	push	{r7}
 8008796:	b087      	sub	sp, #28
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	4613      	mov	r3, r2
 80087a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	785b      	ldrb	r3, [r3, #1]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	f040 80ce 	bne.w	8008952 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d132      	bne.n	8008824 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	015a      	lsls	r2, r3, #5
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	4413      	add	r3, r2
 80087c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	693a      	ldr	r2, [r7, #16]
 80087ce:	0151      	lsls	r1, r2, #5
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	440a      	add	r2, r1
 80087d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	015a      	lsls	r2, r3, #5
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	4413      	add	r3, r2
 80087ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	693a      	ldr	r2, [r7, #16]
 80087f2:	0151      	lsls	r1, r2, #5
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	440a      	add	r2, r1
 80087f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008800:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	015a      	lsls	r2, r3, #5
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	4413      	add	r3, r2
 800880a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	0151      	lsls	r1, r2, #5
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	440a      	add	r2, r1
 8008818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800881c:	0cdb      	lsrs	r3, r3, #19
 800881e:	04db      	lsls	r3, r3, #19
 8008820:	6113      	str	r3, [r2, #16]
 8008822:	e04e      	b.n	80088c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	4413      	add	r3, r2
 800882c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	0151      	lsls	r1, r2, #5
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	440a      	add	r2, r1
 800883a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800883e:	0cdb      	lsrs	r3, r3, #19
 8008840:	04db      	lsls	r3, r3, #19
 8008842:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	015a      	lsls	r2, r3, #5
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	4413      	add	r3, r2
 800884c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	0151      	lsls	r1, r2, #5
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	440a      	add	r2, r1
 800885a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800885e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008862:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008866:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	699a      	ldr	r2, [r3, #24]
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	429a      	cmp	r2, r3
 8008872:	d903      	bls.n	800887c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	68da      	ldr	r2, [r3, #12]
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	693a      	ldr	r2, [r7, #16]
 800888c:	0151      	lsls	r1, r2, #5
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	440a      	add	r2, r1
 8008892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008896:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800889a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	015a      	lsls	r2, r3, #5
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a8:	691a      	ldr	r2, [r3, #16]
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088b2:	6939      	ldr	r1, [r7, #16]
 80088b4:	0148      	lsls	r0, r1, #5
 80088b6:	6979      	ldr	r1, [r7, #20]
 80088b8:	4401      	add	r1, r0
 80088ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80088be:	4313      	orrs	r3, r2
 80088c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80088c2:	79fb      	ldrb	r3, [r7, #7]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d11e      	bne.n	8008906 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d009      	beq.n	80088e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088dc:	461a      	mov	r2, r3
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	695b      	ldr	r3, [r3, #20]
 80088e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	015a      	lsls	r2, r3, #5
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	4413      	add	r3, r2
 80088ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	0151      	lsls	r1, r2, #5
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	440a      	add	r2, r1
 80088fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008902:	6013      	str	r3, [r2, #0]
 8008904:	e097      	b.n	8008a36 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	015a      	lsls	r2, r3, #5
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	4413      	add	r3, r2
 800890e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	0151      	lsls	r1, r2, #5
 8008918:	697a      	ldr	r2, [r7, #20]
 800891a:	440a      	add	r2, r1
 800891c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008920:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008924:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	2b00      	cmp	r3, #0
 800892c:	f000 8083 	beq.w	8008a36 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	f003 030f 	and.w	r3, r3, #15
 8008940:	2101      	movs	r1, #1
 8008942:	fa01 f303 	lsl.w	r3, r1, r3
 8008946:	6979      	ldr	r1, [r7, #20]
 8008948:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800894c:	4313      	orrs	r3, r2
 800894e:	634b      	str	r3, [r1, #52]	; 0x34
 8008950:	e071      	b.n	8008a36 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	015a      	lsls	r2, r3, #5
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	4413      	add	r3, r2
 800895a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	0151      	lsls	r1, r2, #5
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	440a      	add	r2, r1
 8008968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800896c:	0cdb      	lsrs	r3, r3, #19
 800896e:	04db      	lsls	r3, r3, #19
 8008970:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	015a      	lsls	r2, r3, #5
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	4413      	add	r3, r2
 800897a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	0151      	lsls	r1, r2, #5
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	440a      	add	r2, r1
 8008988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800898c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008990:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008994:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d003      	beq.n	80089a6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	68da      	ldr	r2, [r3, #12]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	68da      	ldr	r2, [r3, #12]
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	0151      	lsls	r1, r2, #5
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	440a      	add	r2, r1
 80089c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	015a      	lsls	r2, r3, #5
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	4413      	add	r3, r2
 80089d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089da:	691a      	ldr	r2, [r3, #16]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	69db      	ldr	r3, [r3, #28]
 80089e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089e4:	6939      	ldr	r1, [r7, #16]
 80089e6:	0148      	lsls	r0, r1, #5
 80089e8:	6979      	ldr	r1, [r7, #20]
 80089ea:	4401      	add	r1, r0
 80089ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80089f0:	4313      	orrs	r3, r2
 80089f2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80089f4:	79fb      	ldrb	r3, [r7, #7]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d10d      	bne.n	8008a16 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d009      	beq.n	8008a16 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	6919      	ldr	r1, [r3, #16]
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a12:	460a      	mov	r2, r1
 8008a14:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	0151      	lsls	r1, r2, #5
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	440a      	add	r2, r1
 8008a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	371c      	adds	r7, #28
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b087      	sub	sp, #28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	785b      	ldrb	r3, [r3, #1]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d14a      	bne.n	8008af8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	015a      	lsls	r2, r3, #5
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a7a:	f040 8086 	bne.w	8008b8a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	7812      	ldrb	r2, [r2, #0]
 8008a92:	0151      	lsls	r1, r2, #5
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	440a      	add	r2, r1
 8008a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008aa0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	015a      	lsls	r2, r3, #5
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	4413      	add	r3, r2
 8008aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	7812      	ldrb	r2, [r2, #0]
 8008ab6:	0151      	lsls	r1, r2, #5
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	440a      	add	r2, r1
 8008abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ac0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ac4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f242 7210 	movw	r2, #10000	; 0x2710
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d902      	bls.n	8008adc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	75fb      	strb	r3, [r7, #23]
          break;
 8008ada:	e056      	b.n	8008b8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008af4:	d0e7      	beq.n	8008ac6 <USB_EPStopXfer+0x82>
 8008af6:	e048      	b.n	8008b8a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	015a      	lsls	r2, r3, #5
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	4413      	add	r3, r2
 8008b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b10:	d13b      	bne.n	8008b8a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	015a      	lsls	r2, r3, #5
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	7812      	ldrb	r2, [r2, #0]
 8008b26:	0151      	lsls	r1, r2, #5
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	440a      	add	r2, r1
 8008b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b34:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	015a      	lsls	r2, r3, #5
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	4413      	add	r3, r2
 8008b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	7812      	ldrb	r2, [r2, #0]
 8008b4a:	0151      	lsls	r1, r2, #5
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	440a      	add	r2, r1
 8008b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f242 7210 	movw	r2, #10000	; 0x2710
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d902      	bls.n	8008b70 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	75fb      	strb	r3, [r7, #23]
          break;
 8008b6e:	e00c      	b.n	8008b8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	015a      	lsls	r2, r3, #5
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b88:	d0e7      	beq.n	8008b5a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	371c      	adds	r7, #28
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b089      	sub	sp, #36	; 0x24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	71fb      	strb	r3, [r7, #7]
 8008baa:	4613      	mov	r3, r2
 8008bac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008bb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d123      	bne.n	8008c06 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008bbe:	88bb      	ldrh	r3, [r7, #4]
 8008bc0:	3303      	adds	r3, #3
 8008bc2:	089b      	lsrs	r3, r3, #2
 8008bc4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	61bb      	str	r3, [r7, #24]
 8008bca:	e018      	b.n	8008bfe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008bcc:	79fb      	ldrb	r3, [r7, #7]
 8008bce:	031a      	lsls	r2, r3, #12
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bd8:	461a      	mov	r2, r3
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	3301      	adds	r3, #1
 8008be4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	3301      	adds	r3, #1
 8008bea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	61bb      	str	r3, [r7, #24]
 8008bfe:	69ba      	ldr	r2, [r7, #24]
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d3e2      	bcc.n	8008bcc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3724      	adds	r7, #36	; 0x24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b08b      	sub	sp, #44	; 0x2c
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008c2a:	88fb      	ldrh	r3, [r7, #6]
 8008c2c:	089b      	lsrs	r3, r3, #2
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008c32:	88fb      	ldrh	r3, [r7, #6]
 8008c34:	f003 0303 	and.w	r3, r3, #3
 8008c38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	623b      	str	r3, [r7, #32]
 8008c3e:	e014      	b.n	8008c6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4e:	3301      	adds	r3, #1
 8008c50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c54:	3301      	adds	r3, #1
 8008c56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c60:	3301      	adds	r3, #1
 8008c62:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008c64:	6a3b      	ldr	r3, [r7, #32]
 8008c66:	3301      	adds	r3, #1
 8008c68:	623b      	str	r3, [r7, #32]
 8008c6a:	6a3a      	ldr	r2, [r7, #32]
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d3e6      	bcc.n	8008c40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008c72:	8bfb      	ldrh	r3, [r7, #30]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d01e      	beq.n	8008cb6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c82:	461a      	mov	r2, r3
 8008c84:	f107 0310 	add.w	r3, r7, #16
 8008c88:	6812      	ldr	r2, [r2, #0]
 8008c8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	00db      	lsls	r3, r3, #3
 8008c94:	fa22 f303 	lsr.w	r3, r2, r3
 8008c98:	b2da      	uxtb	r2, r3
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9c:	701a      	strb	r2, [r3, #0]
      i++;
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	623b      	str	r3, [r7, #32]
      pDest++;
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008caa:	8bfb      	ldrh	r3, [r7, #30]
 8008cac:	3b01      	subs	r3, #1
 8008cae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008cb0:	8bfb      	ldrh	r3, [r7, #30]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1ea      	bne.n	8008c8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	372c      	adds	r7, #44	; 0x2c
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	785b      	ldrb	r3, [r3, #1]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d12c      	bne.n	8008d3a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	db12      	blt.n	8008d18 <USB_EPSetStall+0x54>
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00f      	beq.n	8008d18 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	0151      	lsls	r1, r2, #5
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	440a      	add	r2, r1
 8008d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d16:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	0151      	lsls	r1, r2, #5
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	440a      	add	r2, r1
 8008d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d36:	6013      	str	r3, [r2, #0]
 8008d38:	e02b      	b.n	8008d92 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	015a      	lsls	r2, r3, #5
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	4413      	add	r3, r2
 8008d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	db12      	blt.n	8008d72 <USB_EPSetStall+0xae>
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00f      	beq.n	8008d72 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	015a      	lsls	r2, r3, #5
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	4413      	add	r3, r2
 8008d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	0151      	lsls	r1, r2, #5
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	440a      	add	r2, r1
 8008d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d70:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	015a      	lsls	r2, r3, #5
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	4413      	add	r3, r2
 8008d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	0151      	lsls	r1, r2, #5
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	440a      	add	r2, r1
 8008d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	785b      	ldrb	r3, [r3, #1]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d128      	bne.n	8008e0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	0151      	lsls	r1, r2, #5
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	440a      	add	r2, r1
 8008dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008dda:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	791b      	ldrb	r3, [r3, #4]
 8008de0:	2b03      	cmp	r3, #3
 8008de2:	d003      	beq.n	8008dec <USB_EPClearStall+0x4c>
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	791b      	ldrb	r3, [r3, #4]
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d138      	bne.n	8008e5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	015a      	lsls	r2, r3, #5
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	4413      	add	r3, r2
 8008df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	0151      	lsls	r1, r2, #5
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	440a      	add	r2, r1
 8008e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e0a:	6013      	str	r3, [r2, #0]
 8008e0c:	e027      	b.n	8008e5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	015a      	lsls	r2, r3, #5
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	4413      	add	r3, r2
 8008e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68ba      	ldr	r2, [r7, #8]
 8008e1e:	0151      	lsls	r1, r2, #5
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	440a      	add	r2, r1
 8008e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	791b      	ldrb	r3, [r3, #4]
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	d003      	beq.n	8008e3e <USB_EPClearStall+0x9e>
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	791b      	ldrb	r3, [r3, #4]
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d10f      	bne.n	8008e5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	015a      	lsls	r2, r3, #5
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	4413      	add	r3, r2
 8008e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	0151      	lsls	r1, r2, #5
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	440a      	add	r2, r1
 8008e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008e8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	78fb      	ldrb	r3, [r7, #3]
 8008e9a:	011b      	lsls	r3, r3, #4
 8008e9c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008ea0:	68f9      	ldr	r1, [r7, #12]
 8008ea2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3714      	adds	r7, #20
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ed2:	f023 0303 	bic.w	r3, r3, #3
 8008ed6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ee6:	f023 0302 	bic.w	r3, r3, #2
 8008eea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr

08008efa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008efa:	b480      	push	{r7}
 8008efc:	b085      	sub	sp, #20
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f14:	f023 0303 	bic.w	r3, r3, #3
 8008f18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f28:	f043 0302 	orr.w	r3, r3, #2
 8008f2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	695b      	ldr	r3, [r3, #20]
 8008f48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	4013      	ands	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008f54:	68fb      	ldr	r3, [r7, #12]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b085      	sub	sp, #20
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f7e:	69db      	ldr	r3, [r3, #28]
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	4013      	ands	r3, r2
 8008f84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	0c1b      	lsrs	r3, r3, #16
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f96:	b480      	push	{r7}
 8008f98:	b085      	sub	sp, #20
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fb2:	69db      	ldr	r3, [r3, #28]
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	b29b      	uxth	r3, r3
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008fca:	b480      	push	{r7}
 8008fcc:	b085      	sub	sp, #20
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008fda:	78fb      	ldrb	r3, [r7, #3]
 8008fdc:	015a      	lsls	r2, r3, #5
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ff8:	68bb      	ldr	r3, [r7, #8]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3714      	adds	r7, #20
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr

08009006 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009006:	b480      	push	{r7}
 8009008:	b087      	sub	sp, #28
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	460b      	mov	r3, r1
 8009010:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009028:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800902a:	78fb      	ldrb	r3, [r7, #3]
 800902c:	f003 030f 	and.w	r3, r3, #15
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	fa22 f303 	lsr.w	r3, r2, r3
 8009036:	01db      	lsls	r3, r3, #7
 8009038:	b2db      	uxtb	r3, r3
 800903a:	693a      	ldr	r2, [r7, #16]
 800903c:	4313      	orrs	r3, r2
 800903e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009040:	78fb      	ldrb	r3, [r7, #3]
 8009042:	015a      	lsls	r2, r3, #5
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	4413      	add	r3, r2
 8009048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	4013      	ands	r3, r2
 8009052:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009054:	68bb      	ldr	r3, [r7, #8]
}
 8009056:	4618      	mov	r0, r3
 8009058:	371c      	adds	r7, #28
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr

08009062 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009062:	b480      	push	{r7}
 8009064:	b083      	sub	sp, #12
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	f003 0301 	and.w	r3, r3, #1
}
 8009072:	4618      	mov	r0, r3
 8009074:	370c      	adds	r7, #12
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800907e:	b480      	push	{r7}
 8009080:	b085      	sub	sp, #20
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009098:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800909c:	f023 0307 	bic.w	r3, r3, #7
 80090a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3714      	adds	r7, #20
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b087      	sub	sp, #28
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	460b      	mov	r3, r1
 80090ce:	607a      	str	r2, [r7, #4]
 80090d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	333c      	adds	r3, #60	; 0x3c
 80090da:	3304      	adds	r3, #4
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	4a26      	ldr	r2, [pc, #152]	; (800917c <USB_EP0_OutStart+0xb8>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d90a      	bls.n	80090fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090f8:	d101      	bne.n	80090fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	e037      	b.n	800916e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009104:	461a      	mov	r2, r3
 8009106:	2300      	movs	r3, #0
 8009108:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	697a      	ldr	r2, [r7, #20]
 8009114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009118:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800911c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800912c:	f043 0318 	orr.w	r3, r3, #24
 8009130:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	697a      	ldr	r2, [r7, #20]
 800913c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009140:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009144:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009146:	7afb      	ldrb	r3, [r7, #11]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d10f      	bne.n	800916c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009152:	461a      	mov	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	697a      	ldr	r2, [r7, #20]
 8009162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009166:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800916a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	371c      	adds	r7, #28
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	4f54300a 	.word	0x4f54300a

08009180 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009188:	2300      	movs	r3, #0
 800918a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	3301      	adds	r3, #1
 8009190:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	4a13      	ldr	r2, [pc, #76]	; (80091e4 <USB_CoreReset+0x64>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d901      	bls.n	800919e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e01b      	b.n	80091d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	daf2      	bge.n	800918c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80091a6:	2300      	movs	r3, #0
 80091a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	f043 0201 	orr.w	r2, r3, #1
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	3301      	adds	r3, #1
 80091ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	4a09      	ldr	r2, [pc, #36]	; (80091e4 <USB_CoreReset+0x64>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d901      	bls.n	80091c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80091c4:	2303      	movs	r3, #3
 80091c6:	e006      	b.n	80091d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	f003 0301 	and.w	r3, r3, #1
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d0f0      	beq.n	80091b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	00030d40 	.word	0x00030d40

080091e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	460b      	mov	r3, r1
 80091f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80091f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80091f8:	f00a f948 	bl	801348c <USBD_static_malloc>
 80091fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d109      	bne.n	8009218 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	32b0      	adds	r2, #176	; 0xb0
 800920e:	2100      	movs	r1, #0
 8009210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009214:	2302      	movs	r3, #2
 8009216:	e0d4      	b.n	80093c2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009218:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800921c:	2100      	movs	r1, #0
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f00b fc2c 	bl	8014a7c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	32b0      	adds	r2, #176	; 0xb0
 800922e:	68f9      	ldr	r1, [r7, #12]
 8009230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	32b0      	adds	r2, #176	; 0xb0
 800923e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	7c1b      	ldrb	r3, [r3, #16]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d138      	bne.n	80092c2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009250:	4b5e      	ldr	r3, [pc, #376]	; (80093cc <USBD_CDC_Init+0x1e4>)
 8009252:	7819      	ldrb	r1, [r3, #0]
 8009254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009258:	2202      	movs	r2, #2
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f009 fff3 	bl	8013246 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009260:	4b5a      	ldr	r3, [pc, #360]	; (80093cc <USBD_CDC_Init+0x1e4>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	f003 020f 	and.w	r2, r3, #15
 8009268:	6879      	ldr	r1, [r7, #4]
 800926a:	4613      	mov	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	440b      	add	r3, r1
 8009274:	3324      	adds	r3, #36	; 0x24
 8009276:	2201      	movs	r2, #1
 8009278:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800927a:	4b55      	ldr	r3, [pc, #340]	; (80093d0 <USBD_CDC_Init+0x1e8>)
 800927c:	7819      	ldrb	r1, [r3, #0]
 800927e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009282:	2202      	movs	r2, #2
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f009 ffde 	bl	8013246 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800928a:	4b51      	ldr	r3, [pc, #324]	; (80093d0 <USBD_CDC_Init+0x1e8>)
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	f003 020f 	and.w	r2, r3, #15
 8009292:	6879      	ldr	r1, [r7, #4]
 8009294:	4613      	mov	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	4413      	add	r3, r2
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	440b      	add	r3, r1
 800929e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80092a2:	2201      	movs	r2, #1
 80092a4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80092a6:	4b4b      	ldr	r3, [pc, #300]	; (80093d4 <USBD_CDC_Init+0x1ec>)
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	f003 020f 	and.w	r2, r3, #15
 80092ae:	6879      	ldr	r1, [r7, #4]
 80092b0:	4613      	mov	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	4413      	add	r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	440b      	add	r3, r1
 80092ba:	3326      	adds	r3, #38	; 0x26
 80092bc:	2210      	movs	r2, #16
 80092be:	801a      	strh	r2, [r3, #0]
 80092c0:	e035      	b.n	800932e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80092c2:	4b42      	ldr	r3, [pc, #264]	; (80093cc <USBD_CDC_Init+0x1e4>)
 80092c4:	7819      	ldrb	r1, [r3, #0]
 80092c6:	2340      	movs	r3, #64	; 0x40
 80092c8:	2202      	movs	r2, #2
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f009 ffbb 	bl	8013246 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80092d0:	4b3e      	ldr	r3, [pc, #248]	; (80093cc <USBD_CDC_Init+0x1e4>)
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	f003 020f 	and.w	r2, r3, #15
 80092d8:	6879      	ldr	r1, [r7, #4]
 80092da:	4613      	mov	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4413      	add	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	440b      	add	r3, r1
 80092e4:	3324      	adds	r3, #36	; 0x24
 80092e6:	2201      	movs	r2, #1
 80092e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80092ea:	4b39      	ldr	r3, [pc, #228]	; (80093d0 <USBD_CDC_Init+0x1e8>)
 80092ec:	7819      	ldrb	r1, [r3, #0]
 80092ee:	2340      	movs	r3, #64	; 0x40
 80092f0:	2202      	movs	r2, #2
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f009 ffa7 	bl	8013246 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80092f8:	4b35      	ldr	r3, [pc, #212]	; (80093d0 <USBD_CDC_Init+0x1e8>)
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	f003 020f 	and.w	r2, r3, #15
 8009300:	6879      	ldr	r1, [r7, #4]
 8009302:	4613      	mov	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4413      	add	r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	440b      	add	r3, r1
 800930c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009310:	2201      	movs	r2, #1
 8009312:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009314:	4b2f      	ldr	r3, [pc, #188]	; (80093d4 <USBD_CDC_Init+0x1ec>)
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	f003 020f 	and.w	r2, r3, #15
 800931c:	6879      	ldr	r1, [r7, #4]
 800931e:	4613      	mov	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	440b      	add	r3, r1
 8009328:	3326      	adds	r3, #38	; 0x26
 800932a:	2210      	movs	r2, #16
 800932c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800932e:	4b29      	ldr	r3, [pc, #164]	; (80093d4 <USBD_CDC_Init+0x1ec>)
 8009330:	7819      	ldrb	r1, [r3, #0]
 8009332:	2308      	movs	r3, #8
 8009334:	2203      	movs	r2, #3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f009 ff85 	bl	8013246 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800933c:	4b25      	ldr	r3, [pc, #148]	; (80093d4 <USBD_CDC_Init+0x1ec>)
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	f003 020f 	and.w	r2, r3, #15
 8009344:	6879      	ldr	r1, [r7, #4]
 8009346:	4613      	mov	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4413      	add	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	440b      	add	r3, r1
 8009350:	3324      	adds	r3, #36	; 0x24
 8009352:	2201      	movs	r2, #1
 8009354:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	33b0      	adds	r3, #176	; 0xb0
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	4413      	add	r3, r2
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009388:	2b00      	cmp	r3, #0
 800938a:	d101      	bne.n	8009390 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800938c:	2302      	movs	r3, #2
 800938e:	e018      	b.n	80093c2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	7c1b      	ldrb	r3, [r3, #16]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d10a      	bne.n	80093ae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009398:	4b0d      	ldr	r3, [pc, #52]	; (80093d0 <USBD_CDC_Init+0x1e8>)
 800939a:	7819      	ldrb	r1, [r3, #0]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f00a f83c 	bl	8013424 <USBD_LL_PrepareReceive>
 80093ac:	e008      	b.n	80093c0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093ae:	4b08      	ldr	r3, [pc, #32]	; (80093d0 <USBD_CDC_Init+0x1e8>)
 80093b0:	7819      	ldrb	r1, [r3, #0]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093b8:	2340      	movs	r3, #64	; 0x40
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f00a f832 	bl	8013424 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	200000cb 	.word	0x200000cb
 80093d0:	200000cc 	.word	0x200000cc
 80093d4:	200000cd 	.word	0x200000cd

080093d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	460b      	mov	r3, r1
 80093e2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80093e4:	4b3a      	ldr	r3, [pc, #232]	; (80094d0 <USBD_CDC_DeInit+0xf8>)
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	4619      	mov	r1, r3
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f009 ff51 	bl	8013292 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80093f0:	4b37      	ldr	r3, [pc, #220]	; (80094d0 <USBD_CDC_DeInit+0xf8>)
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	f003 020f 	and.w	r2, r3, #15
 80093f8:	6879      	ldr	r1, [r7, #4]
 80093fa:	4613      	mov	r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	4413      	add	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	440b      	add	r3, r1
 8009404:	3324      	adds	r3, #36	; 0x24
 8009406:	2200      	movs	r2, #0
 8009408:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800940a:	4b32      	ldr	r3, [pc, #200]	; (80094d4 <USBD_CDC_DeInit+0xfc>)
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	4619      	mov	r1, r3
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f009 ff3e 	bl	8013292 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009416:	4b2f      	ldr	r3, [pc, #188]	; (80094d4 <USBD_CDC_DeInit+0xfc>)
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	f003 020f 	and.w	r2, r3, #15
 800941e:	6879      	ldr	r1, [r7, #4]
 8009420:	4613      	mov	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	4413      	add	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	440b      	add	r3, r1
 800942a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800942e:	2200      	movs	r2, #0
 8009430:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009432:	4b29      	ldr	r3, [pc, #164]	; (80094d8 <USBD_CDC_DeInit+0x100>)
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	4619      	mov	r1, r3
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f009 ff2a 	bl	8013292 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800943e:	4b26      	ldr	r3, [pc, #152]	; (80094d8 <USBD_CDC_DeInit+0x100>)
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	f003 020f 	and.w	r2, r3, #15
 8009446:	6879      	ldr	r1, [r7, #4]
 8009448:	4613      	mov	r3, r2
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	4413      	add	r3, r2
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	440b      	add	r3, r1
 8009452:	3324      	adds	r3, #36	; 0x24
 8009454:	2200      	movs	r2, #0
 8009456:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009458:	4b1f      	ldr	r3, [pc, #124]	; (80094d8 <USBD_CDC_DeInit+0x100>)
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	f003 020f 	and.w	r2, r3, #15
 8009460:	6879      	ldr	r1, [r7, #4]
 8009462:	4613      	mov	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4413      	add	r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	440b      	add	r3, r1
 800946c:	3326      	adds	r3, #38	; 0x26
 800946e:	2200      	movs	r2, #0
 8009470:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	32b0      	adds	r2, #176	; 0xb0
 800947c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d01f      	beq.n	80094c4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	33b0      	adds	r3, #176	; 0xb0
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	4413      	add	r3, r2
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	32b0      	adds	r2, #176	; 0xb0
 80094a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f009 fffe 	bl	80134a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	32b0      	adds	r2, #176	; 0xb0
 80094b6:	2100      	movs	r1, #0
 80094b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	200000cb 	.word	0x200000cb
 80094d4:	200000cc 	.word	0x200000cc
 80094d8:	200000cd 	.word	0x200000cd

080094dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	32b0      	adds	r2, #176	; 0xb0
 80094f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80094f6:	2300      	movs	r3, #0
 80094f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80094fa:	2300      	movs	r3, #0
 80094fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d101      	bne.n	800950c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009508:	2303      	movs	r3, #3
 800950a:	e0bf      	b.n	800968c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009514:	2b00      	cmp	r3, #0
 8009516:	d050      	beq.n	80095ba <USBD_CDC_Setup+0xde>
 8009518:	2b20      	cmp	r3, #32
 800951a:	f040 80af 	bne.w	800967c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	88db      	ldrh	r3, [r3, #6]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d03a      	beq.n	800959c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	b25b      	sxtb	r3, r3
 800952c:	2b00      	cmp	r3, #0
 800952e:	da1b      	bge.n	8009568 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	33b0      	adds	r3, #176	; 0xb0
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	4413      	add	r3, r2
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	683a      	ldr	r2, [r7, #0]
 8009544:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009546:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009548:	683a      	ldr	r2, [r7, #0]
 800954a:	88d2      	ldrh	r2, [r2, #6]
 800954c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	88db      	ldrh	r3, [r3, #6]
 8009552:	2b07      	cmp	r3, #7
 8009554:	bf28      	it	cs
 8009556:	2307      	movcs	r3, #7
 8009558:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	89fa      	ldrh	r2, [r7, #14]
 800955e:	4619      	mov	r1, r3
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f001 fd89 	bl	800b078 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009566:	e090      	b.n	800968a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	785a      	ldrb	r2, [r3, #1]
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	88db      	ldrh	r3, [r3, #6]
 8009576:	2b3f      	cmp	r3, #63	; 0x3f
 8009578:	d803      	bhi.n	8009582 <USBD_CDC_Setup+0xa6>
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	88db      	ldrh	r3, [r3, #6]
 800957e:	b2da      	uxtb	r2, r3
 8009580:	e000      	b.n	8009584 <USBD_CDC_Setup+0xa8>
 8009582:	2240      	movs	r2, #64	; 0x40
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800958a:	6939      	ldr	r1, [r7, #16]
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009592:	461a      	mov	r2, r3
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f001 fd9b 	bl	800b0d0 <USBD_CtlPrepareRx>
      break;
 800959a:	e076      	b.n	800968a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	33b0      	adds	r3, #176	; 0xb0
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	7850      	ldrb	r0, [r2, #1]
 80095b2:	2200      	movs	r2, #0
 80095b4:	6839      	ldr	r1, [r7, #0]
 80095b6:	4798      	blx	r3
      break;
 80095b8:	e067      	b.n	800968a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	785b      	ldrb	r3, [r3, #1]
 80095be:	2b0b      	cmp	r3, #11
 80095c0:	d851      	bhi.n	8009666 <USBD_CDC_Setup+0x18a>
 80095c2:	a201      	add	r2, pc, #4	; (adr r2, 80095c8 <USBD_CDC_Setup+0xec>)
 80095c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c8:	080095f9 	.word	0x080095f9
 80095cc:	08009675 	.word	0x08009675
 80095d0:	08009667 	.word	0x08009667
 80095d4:	08009667 	.word	0x08009667
 80095d8:	08009667 	.word	0x08009667
 80095dc:	08009667 	.word	0x08009667
 80095e0:	08009667 	.word	0x08009667
 80095e4:	08009667 	.word	0x08009667
 80095e8:	08009667 	.word	0x08009667
 80095ec:	08009667 	.word	0x08009667
 80095f0:	08009623 	.word	0x08009623
 80095f4:	0800964d 	.word	0x0800964d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	2b03      	cmp	r3, #3
 8009602:	d107      	bne.n	8009614 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009604:	f107 030a 	add.w	r3, r7, #10
 8009608:	2202      	movs	r2, #2
 800960a:	4619      	mov	r1, r3
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f001 fd33 	bl	800b078 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009612:	e032      	b.n	800967a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f001 fcbd 	bl	800af96 <USBD_CtlError>
            ret = USBD_FAIL;
 800961c:	2303      	movs	r3, #3
 800961e:	75fb      	strb	r3, [r7, #23]
          break;
 8009620:	e02b      	b.n	800967a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009628:	b2db      	uxtb	r3, r3
 800962a:	2b03      	cmp	r3, #3
 800962c:	d107      	bne.n	800963e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800962e:	f107 030d 	add.w	r3, r7, #13
 8009632:	2201      	movs	r2, #1
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f001 fd1e 	bl	800b078 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800963c:	e01d      	b.n	800967a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800963e:	6839      	ldr	r1, [r7, #0]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f001 fca8 	bl	800af96 <USBD_CtlError>
            ret = USBD_FAIL;
 8009646:	2303      	movs	r3, #3
 8009648:	75fb      	strb	r3, [r7, #23]
          break;
 800964a:	e016      	b.n	800967a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009652:	b2db      	uxtb	r3, r3
 8009654:	2b03      	cmp	r3, #3
 8009656:	d00f      	beq.n	8009678 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009658:	6839      	ldr	r1, [r7, #0]
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f001 fc9b 	bl	800af96 <USBD_CtlError>
            ret = USBD_FAIL;
 8009660:	2303      	movs	r3, #3
 8009662:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009664:	e008      	b.n	8009678 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009666:	6839      	ldr	r1, [r7, #0]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f001 fc94 	bl	800af96 <USBD_CtlError>
          ret = USBD_FAIL;
 800966e:	2303      	movs	r3, #3
 8009670:	75fb      	strb	r3, [r7, #23]
          break;
 8009672:	e002      	b.n	800967a <USBD_CDC_Setup+0x19e>
          break;
 8009674:	bf00      	nop
 8009676:	e008      	b.n	800968a <USBD_CDC_Setup+0x1ae>
          break;
 8009678:	bf00      	nop
      }
      break;
 800967a:	e006      	b.n	800968a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f001 fc89 	bl	800af96 <USBD_CtlError>
      ret = USBD_FAIL;
 8009684:	2303      	movs	r3, #3
 8009686:	75fb      	strb	r3, [r7, #23]
      break;
 8009688:	bf00      	nop
  }

  return (uint8_t)ret;
 800968a:	7dfb      	ldrb	r3, [r7, #23]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3718      	adds	r7, #24
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	460b      	mov	r3, r1
 800969e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	32b0      	adds	r2, #176	; 0xb0
 80096b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80096ba:	2303      	movs	r3, #3
 80096bc:	e065      	b.n	800978a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	32b0      	adds	r2, #176	; 0xb0
 80096c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80096ce:	78fb      	ldrb	r3, [r7, #3]
 80096d0:	f003 020f 	and.w	r2, r3, #15
 80096d4:	6879      	ldr	r1, [r7, #4]
 80096d6:	4613      	mov	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	440b      	add	r3, r1
 80096e0:	3318      	adds	r3, #24
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d02f      	beq.n	8009748 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80096e8:	78fb      	ldrb	r3, [r7, #3]
 80096ea:	f003 020f 	and.w	r2, r3, #15
 80096ee:	6879      	ldr	r1, [r7, #4]
 80096f0:	4613      	mov	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4413      	add	r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	440b      	add	r3, r1
 80096fa:	3318      	adds	r3, #24
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	78fb      	ldrb	r3, [r7, #3]
 8009700:	f003 010f 	and.w	r1, r3, #15
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	460b      	mov	r3, r1
 8009708:	00db      	lsls	r3, r3, #3
 800970a:	440b      	add	r3, r1
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4403      	add	r3, r0
 8009710:	3348      	adds	r3, #72	; 0x48
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	fbb2 f1f3 	udiv	r1, r2, r3
 8009718:	fb01 f303 	mul.w	r3, r1, r3
 800971c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800971e:	2b00      	cmp	r3, #0
 8009720:	d112      	bne.n	8009748 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009722:	78fb      	ldrb	r3, [r7, #3]
 8009724:	f003 020f 	and.w	r2, r3, #15
 8009728:	6879      	ldr	r1, [r7, #4]
 800972a:	4613      	mov	r3, r2
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	4413      	add	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	440b      	add	r3, r1
 8009734:	3318      	adds	r3, #24
 8009736:	2200      	movs	r2, #0
 8009738:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800973a:	78f9      	ldrb	r1, [r7, #3]
 800973c:	2300      	movs	r3, #0
 800973e:	2200      	movs	r2, #0
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f009 fe4e 	bl	80133e2 <USBD_LL_Transmit>
 8009746:	e01f      	b.n	8009788 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	2200      	movs	r2, #0
 800974c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	33b0      	adds	r3, #176	; 0xb0
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4413      	add	r3, r2
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d010      	beq.n	8009788 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	33b0      	adds	r3, #176	; 0xb0
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4413      	add	r3, r2
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800977e:	68ba      	ldr	r2, [r7, #8]
 8009780:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009784:	78fa      	ldrb	r2, [r7, #3]
 8009786:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b084      	sub	sp, #16
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
 800979a:	460b      	mov	r3, r1
 800979c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	32b0      	adds	r2, #176	; 0xb0
 80097a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	32b0      	adds	r2, #176	; 0xb0
 80097b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d101      	bne.n	80097c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80097c0:	2303      	movs	r3, #3
 80097c2:	e01a      	b.n	80097fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80097c4:	78fb      	ldrb	r3, [r7, #3]
 80097c6:	4619      	mov	r1, r3
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f009 fe4c 	bl	8013466 <USBD_LL_GetRxDataSize>
 80097ce:	4602      	mov	r2, r0
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	33b0      	adds	r3, #176	; 0xb0
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4413      	add	r3, r2
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80097f4:	4611      	mov	r1, r2
 80097f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b084      	sub	sp, #16
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	32b0      	adds	r2, #176	; 0xb0
 8009814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009818:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d101      	bne.n	8009824 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009820:	2303      	movs	r3, #3
 8009822:	e025      	b.n	8009870 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	33b0      	adds	r3, #176	; 0xb0
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d01a      	beq.n	800986e <USBD_CDC_EP0_RxReady+0x6c>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800983e:	2bff      	cmp	r3, #255	; 0xff
 8009840:	d015      	beq.n	800986e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	33b0      	adds	r3, #176	; 0xb0
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800985a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009862:	b292      	uxth	r2, r2
 8009864:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	22ff      	movs	r2, #255	; 0xff
 800986a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b086      	sub	sp, #24
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009880:	2182      	movs	r1, #130	; 0x82
 8009882:	4818      	ldr	r0, [pc, #96]	; (80098e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009884:	f000 fd4f 	bl	800a326 <USBD_GetEpDesc>
 8009888:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800988a:	2101      	movs	r1, #1
 800988c:	4815      	ldr	r0, [pc, #84]	; (80098e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800988e:	f000 fd4a 	bl	800a326 <USBD_GetEpDesc>
 8009892:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009894:	2181      	movs	r1, #129	; 0x81
 8009896:	4813      	ldr	r0, [pc, #76]	; (80098e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009898:	f000 fd45 	bl	800a326 <USBD_GetEpDesc>
 800989c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d002      	beq.n	80098aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	2210      	movs	r2, #16
 80098a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d006      	beq.n	80098be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098b8:	711a      	strb	r2, [r3, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d006      	beq.n	80098d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098cc:	711a      	strb	r2, [r3, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2243      	movs	r2, #67	; 0x43
 80098d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80098d8:	4b02      	ldr	r3, [pc, #8]	; (80098e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3718      	adds	r7, #24
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	20000088 	.word	0x20000088

080098e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80098f0:	2182      	movs	r1, #130	; 0x82
 80098f2:	4818      	ldr	r0, [pc, #96]	; (8009954 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80098f4:	f000 fd17 	bl	800a326 <USBD_GetEpDesc>
 80098f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80098fa:	2101      	movs	r1, #1
 80098fc:	4815      	ldr	r0, [pc, #84]	; (8009954 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80098fe:	f000 fd12 	bl	800a326 <USBD_GetEpDesc>
 8009902:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009904:	2181      	movs	r1, #129	; 0x81
 8009906:	4813      	ldr	r0, [pc, #76]	; (8009954 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009908:	f000 fd0d 	bl	800a326 <USBD_GetEpDesc>
 800990c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d002      	beq.n	800991a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	2210      	movs	r2, #16
 8009918:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d006      	beq.n	800992e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	2200      	movs	r2, #0
 8009924:	711a      	strb	r2, [r3, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	f042 0202 	orr.w	r2, r2, #2
 800992c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d006      	beq.n	8009942 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2200      	movs	r2, #0
 8009938:	711a      	strb	r2, [r3, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	f042 0202 	orr.w	r2, r2, #2
 8009940:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2243      	movs	r2, #67	; 0x43
 8009946:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009948:	4b02      	ldr	r3, [pc, #8]	; (8009954 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800994a:	4618      	mov	r0, r3
 800994c:	3718      	adds	r7, #24
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	20000088 	.word	0x20000088

08009958 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009960:	2182      	movs	r1, #130	; 0x82
 8009962:	4818      	ldr	r0, [pc, #96]	; (80099c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009964:	f000 fcdf 	bl	800a326 <USBD_GetEpDesc>
 8009968:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800996a:	2101      	movs	r1, #1
 800996c:	4815      	ldr	r0, [pc, #84]	; (80099c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800996e:	f000 fcda 	bl	800a326 <USBD_GetEpDesc>
 8009972:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009974:	2181      	movs	r1, #129	; 0x81
 8009976:	4813      	ldr	r0, [pc, #76]	; (80099c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009978:	f000 fcd5 	bl	800a326 <USBD_GetEpDesc>
 800997c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d002      	beq.n	800998a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	2210      	movs	r2, #16
 8009988:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d006      	beq.n	800999e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	2200      	movs	r2, #0
 8009994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009998:	711a      	strb	r2, [r3, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d006      	beq.n	80099b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099ac:	711a      	strb	r2, [r3, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2243      	movs	r2, #67	; 0x43
 80099b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80099b8:	4b02      	ldr	r3, [pc, #8]	; (80099c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3718      	adds	r7, #24
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	20000088 	.word	0x20000088

080099c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	220a      	movs	r2, #10
 80099d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80099d6:	4b03      	ldr	r3, [pc, #12]	; (80099e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80099d8:	4618      	mov	r0, r3
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr
 80099e4:	20000044 	.word	0x20000044

080099e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d101      	bne.n	80099fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80099f8:	2303      	movs	r3, #3
 80099fa:	e009      	b.n	8009a10 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	33b0      	adds	r3, #176	; 0xb0
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	4413      	add	r3, r2
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b087      	sub	sp, #28
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	32b0      	adds	r2, #176	; 0xb0
 8009a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a36:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d101      	bne.n	8009a42 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e008      	b.n	8009a54 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	371c      	adds	r7, #28
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	32b0      	adds	r2, #176	; 0xb0
 8009a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d101      	bne.n	8009a84 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009a80:	2303      	movs	r3, #3
 8009a82:	e004      	b.n	8009a8e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
	...

08009a9c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	32b0      	adds	r2, #176	; 0xb0
 8009aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ab2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	32b0      	adds	r2, #176	; 0xb0
 8009ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d101      	bne.n	8009ace <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009aca:	2303      	movs	r3, #3
 8009acc:	e025      	b.n	8009b1a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d11f      	bne.n	8009b18 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009ae0:	4b10      	ldr	r3, [pc, #64]	; (8009b24 <USBD_CDC_TransmitPacket+0x88>)
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	f003 020f 	and.w	r2, r3, #15
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	4613      	mov	r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	4413      	add	r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	4403      	add	r3, r0
 8009afa:	3318      	adds	r3, #24
 8009afc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009afe:	4b09      	ldr	r3, [pc, #36]	; (8009b24 <USBD_CDC_TransmitPacket+0x88>)
 8009b00:	7819      	ldrb	r1, [r3, #0]
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f009 fc67 	bl	80133e2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009b14:	2300      	movs	r3, #0
 8009b16:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	200000cb 	.word	0x200000cb

08009b28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	32b0      	adds	r2, #176	; 0xb0
 8009b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b3e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	32b0      	adds	r2, #176	; 0xb0
 8009b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d101      	bne.n	8009b56 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009b52:	2303      	movs	r3, #3
 8009b54:	e018      	b.n	8009b88 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	7c1b      	ldrb	r3, [r3, #16]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10a      	bne.n	8009b74 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b5e:	4b0c      	ldr	r3, [pc, #48]	; (8009b90 <USBD_CDC_ReceivePacket+0x68>)
 8009b60:	7819      	ldrb	r1, [r3, #0]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f009 fc59 	bl	8013424 <USBD_LL_PrepareReceive>
 8009b72:	e008      	b.n	8009b86 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b74:	4b06      	ldr	r3, [pc, #24]	; (8009b90 <USBD_CDC_ReceivePacket+0x68>)
 8009b76:	7819      	ldrb	r1, [r3, #0]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b7e:	2340      	movs	r3, #64	; 0x40
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f009 fc4f 	bl	8013424 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009b86:	2300      	movs	r3, #0
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	200000cc 	.word	0x200000cc

08009b94 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b086      	sub	sp, #24
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d101      	bne.n	8009bac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	e01f      	b.n	8009bec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d003      	beq.n	8009bd2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	79fa      	ldrb	r2, [r7, #7]
 8009bde:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f009 fac9 	bl	8013178 <USBD_LL_Init>
 8009be6:	4603      	mov	r3, r0
 8009be8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3718      	adds	r7, #24
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d101      	bne.n	8009c0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009c08:	2303      	movs	r3, #3
 8009c0a:	e025      	b.n	8009c58 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	32ae      	adds	r2, #174	; 0xae
 8009c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d00f      	beq.n	8009c48 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	32ae      	adds	r2, #174	; 0xae
 8009c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c38:	f107 020e 	add.w	r2, r7, #14
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	4798      	blx	r3
 8009c40:	4602      	mov	r2, r0
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009c4e:	1c5a      	adds	r2, r3, #1
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f009 fad1 	bl	8013210 <USBD_LL_Start>
 8009c6e:	4603      	mov	r3, r0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3708      	adds	r7, #8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c80:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	370c      	adds	r7, #12
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr

08009c8e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b084      	sub	sp, #16
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
 8009c96:	460b      	mov	r3, r1
 8009c98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d009      	beq.n	8009cbc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	78fa      	ldrb	r2, [r7, #3]
 8009cb2:	4611      	mov	r1, r2
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	4798      	blx	r3
 8009cb8:	4603      	mov	r3, r0
 8009cba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b084      	sub	sp, #16
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
 8009cce:	460b      	mov	r3, r1
 8009cd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	78fa      	ldrb	r2, [r7, #3]
 8009ce0:	4611      	mov	r1, r2
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	4798      	blx	r3
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d001      	beq.n	8009cf0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009cec:	2303      	movs	r3, #3
 8009cee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b084      	sub	sp, #16
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
 8009d02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d0a:	6839      	ldr	r1, [r7, #0]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f001 f908 	bl	800af22 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009d20:	461a      	mov	r2, r3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009d2e:	f003 031f 	and.w	r3, r3, #31
 8009d32:	2b02      	cmp	r3, #2
 8009d34:	d01a      	beq.n	8009d6c <USBD_LL_SetupStage+0x72>
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d822      	bhi.n	8009d80 <USBD_LL_SetupStage+0x86>
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d002      	beq.n	8009d44 <USBD_LL_SetupStage+0x4a>
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d00a      	beq.n	8009d58 <USBD_LL_SetupStage+0x5e>
 8009d42:	e01d      	b.n	8009d80 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 fb5f 	bl	800a410 <USBD_StdDevReq>
 8009d52:	4603      	mov	r3, r0
 8009d54:	73fb      	strb	r3, [r7, #15]
      break;
 8009d56:	e020      	b.n	8009d9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d5e:	4619      	mov	r1, r3
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fbc7 	bl	800a4f4 <USBD_StdItfReq>
 8009d66:	4603      	mov	r3, r0
 8009d68:	73fb      	strb	r3, [r7, #15]
      break;
 8009d6a:	e016      	b.n	8009d9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fc29 	bl	800a5cc <USBD_StdEPReq>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	73fb      	strb	r3, [r7, #15]
      break;
 8009d7e:	e00c      	b.n	8009d9a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009d86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f009 fa9e 	bl	80132d0 <USBD_LL_StallEP>
 8009d94:	4603      	mov	r3, r0
 8009d96:	73fb      	strb	r3, [r7, #15]
      break;
 8009d98:	bf00      	nop
  }

  return ret;
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3710      	adds	r7, #16
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b086      	sub	sp, #24
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	460b      	mov	r3, r1
 8009dae:	607a      	str	r2, [r7, #4]
 8009db0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009db6:	7afb      	ldrb	r3, [r7, #11]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d16e      	bne.n	8009e9a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009dc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	f040 8098 	bne.w	8009f00 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	689a      	ldr	r2, [r3, #8]
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d913      	bls.n	8009e04 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	689a      	ldr	r2, [r3, #8]
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	1ad2      	subs	r2, r2, r3
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	68da      	ldr	r2, [r3, #12]
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	4293      	cmp	r3, r2
 8009df4:	bf28      	it	cs
 8009df6:	4613      	movcs	r3, r2
 8009df8:	461a      	mov	r2, r3
 8009dfa:	6879      	ldr	r1, [r7, #4]
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f001 f984 	bl	800b10a <USBD_CtlContinueRx>
 8009e02:	e07d      	b.n	8009f00 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e0a:	f003 031f 	and.w	r3, r3, #31
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d014      	beq.n	8009e3c <USBD_LL_DataOutStage+0x98>
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d81d      	bhi.n	8009e52 <USBD_LL_DataOutStage+0xae>
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d002      	beq.n	8009e20 <USBD_LL_DataOutStage+0x7c>
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d003      	beq.n	8009e26 <USBD_LL_DataOutStage+0x82>
 8009e1e:	e018      	b.n	8009e52 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009e20:	2300      	movs	r3, #0
 8009e22:	75bb      	strb	r3, [r7, #22]
            break;
 8009e24:	e018      	b.n	8009e58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	4619      	mov	r1, r3
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f000 fa5e 	bl	800a2f2 <USBD_CoreFindIF>
 8009e36:	4603      	mov	r3, r0
 8009e38:	75bb      	strb	r3, [r7, #22]
            break;
 8009e3a:	e00d      	b.n	8009e58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	4619      	mov	r1, r3
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f000 fa60 	bl	800a30c <USBD_CoreFindEP>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	75bb      	strb	r3, [r7, #22]
            break;
 8009e50:	e002      	b.n	8009e58 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009e52:	2300      	movs	r3, #0
 8009e54:	75bb      	strb	r3, [r7, #22]
            break;
 8009e56:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009e58:	7dbb      	ldrb	r3, [r7, #22]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d119      	bne.n	8009e92 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	2b03      	cmp	r3, #3
 8009e68:	d113      	bne.n	8009e92 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009e6a:	7dba      	ldrb	r2, [r7, #22]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	32ae      	adds	r2, #174	; 0xae
 8009e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00b      	beq.n	8009e92 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009e7a:	7dba      	ldrb	r2, [r7, #22]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009e82:	7dba      	ldrb	r2, [r7, #22]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	32ae      	adds	r2, #174	; 0xae
 8009e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e8c:	691b      	ldr	r3, [r3, #16]
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	f001 f94a 	bl	800b12c <USBD_CtlSendStatus>
 8009e98:	e032      	b.n	8009f00 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009e9a:	7afb      	ldrb	r3, [r7, #11]
 8009e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f000 fa31 	bl	800a30c <USBD_CoreFindEP>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009eae:	7dbb      	ldrb	r3, [r7, #22]
 8009eb0:	2bff      	cmp	r3, #255	; 0xff
 8009eb2:	d025      	beq.n	8009f00 <USBD_LL_DataOutStage+0x15c>
 8009eb4:	7dbb      	ldrb	r3, [r7, #22]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d122      	bne.n	8009f00 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	2b03      	cmp	r3, #3
 8009ec4:	d117      	bne.n	8009ef6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009ec6:	7dba      	ldrb	r2, [r7, #22]
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	32ae      	adds	r2, #174	; 0xae
 8009ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed0:	699b      	ldr	r3, [r3, #24]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00f      	beq.n	8009ef6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009ed6:	7dba      	ldrb	r2, [r7, #22]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009ede:	7dba      	ldrb	r2, [r7, #22]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	32ae      	adds	r2, #174	; 0xae
 8009ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee8:	699b      	ldr	r3, [r3, #24]
 8009eea:	7afa      	ldrb	r2, [r7, #11]
 8009eec:	4611      	mov	r1, r2
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	4798      	blx	r3
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009ef6:	7dfb      	ldrb	r3, [r7, #23]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009efc:	7dfb      	ldrb	r3, [r7, #23]
 8009efe:	e000      	b.n	8009f02 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3718      	adds	r7, #24
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b086      	sub	sp, #24
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	60f8      	str	r0, [r7, #12]
 8009f12:	460b      	mov	r3, r1
 8009f14:	607a      	str	r2, [r7, #4]
 8009f16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009f18:	7afb      	ldrb	r3, [r7, #11]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d16f      	bne.n	8009ffe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	3314      	adds	r3, #20
 8009f22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	d15a      	bne.n	8009fe4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	689a      	ldr	r2, [r3, #8]
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d914      	bls.n	8009f64 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	689a      	ldr	r2, [r3, #8]
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	1ad2      	subs	r2, r2, r3
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	6879      	ldr	r1, [r7, #4]
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f001 f8ac 	bl	800b0ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f56:	2300      	movs	r3, #0
 8009f58:	2200      	movs	r2, #0
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f009 fa61 	bl	8013424 <USBD_LL_PrepareReceive>
 8009f62:	e03f      	b.n	8009fe4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	68da      	ldr	r2, [r3, #12]
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d11c      	bne.n	8009faa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	685a      	ldr	r2, [r3, #4]
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d316      	bcc.n	8009faa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	685a      	ldr	r2, [r3, #4]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d20f      	bcs.n	8009faa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f001 f88d 	bl	800b0ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f009 fa3e 	bl	8013424 <USBD_LL_PrepareReceive>
 8009fa8:	e01c      	b.n	8009fe4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	2b03      	cmp	r3, #3
 8009fb4:	d10f      	bne.n	8009fd6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d009      	beq.n	8009fd6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009fd6:	2180      	movs	r1, #128	; 0x80
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f009 f979 	bl	80132d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f001 f8b7 	bl	800b152 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d03a      	beq.n	800a064 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f7ff fe42 	bl	8009c78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009ffc:	e032      	b.n	800a064 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009ffe:	7afb      	ldrb	r3, [r7, #11]
 800a000:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a004:	b2db      	uxtb	r3, r3
 800a006:	4619      	mov	r1, r3
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 f97f 	bl	800a30c <USBD_CoreFindEP>
 800a00e:	4603      	mov	r3, r0
 800a010:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a012:	7dfb      	ldrb	r3, [r7, #23]
 800a014:	2bff      	cmp	r3, #255	; 0xff
 800a016:	d025      	beq.n	800a064 <USBD_LL_DataInStage+0x15a>
 800a018:	7dfb      	ldrb	r3, [r7, #23]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d122      	bne.n	800a064 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a024:	b2db      	uxtb	r3, r3
 800a026:	2b03      	cmp	r3, #3
 800a028:	d11c      	bne.n	800a064 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a02a:	7dfa      	ldrb	r2, [r7, #23]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	32ae      	adds	r2, #174	; 0xae
 800a030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a034:	695b      	ldr	r3, [r3, #20]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d014      	beq.n	800a064 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a03a:	7dfa      	ldrb	r2, [r7, #23]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a042:	7dfa      	ldrb	r2, [r7, #23]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	32ae      	adds	r2, #174	; 0xae
 800a048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a04c:	695b      	ldr	r3, [r3, #20]
 800a04e:	7afa      	ldrb	r2, [r7, #11]
 800a050:	4611      	mov	r1, r2
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	4798      	blx	r3
 800a056:	4603      	mov	r3, r0
 800a058:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a05a:	7dbb      	ldrb	r3, [r7, #22]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d001      	beq.n	800a064 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a060:	7dbb      	ldrb	r3, [r7, #22]
 800a062:	e000      	b.n	800a066 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a064:	2300      	movs	r3, #0
}
 800a066:	4618      	mov	r0, r3
 800a068:	3718      	adds	r7, #24
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b084      	sub	sp, #16
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d014      	beq.n	800a0d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00e      	beq.n	800a0d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	6852      	ldr	r2, [r2, #4]
 800a0c2:	b2d2      	uxtb	r2, r2
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	4798      	blx	r3
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d001      	beq.n	800a0d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0d4:	2340      	movs	r3, #64	; 0x40
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	2100      	movs	r1, #0
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f009 f8b3 	bl	8013246 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2240      	movs	r2, #64	; 0x40
 800a0ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0f0:	2340      	movs	r3, #64	; 0x40
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	2180      	movs	r1, #128	; 0x80
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f009 f8a5 	bl	8013246 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2201      	movs	r2, #1
 800a100:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2240      	movs	r2, #64	; 0x40
 800a106:	621a      	str	r2, [r3, #32]

  return ret;
 800a108:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a112:	b480      	push	{r7}
 800a114:	b083      	sub	sp, #12
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
 800a11a:	460b      	mov	r3, r1
 800a11c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	78fa      	ldrb	r2, [r7, #3]
 800a122:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	370c      	adds	r7, #12
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr

0800a132 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a132:	b480      	push	{r7}
 800a134:	b083      	sub	sp, #12
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a140:	b2da      	uxtb	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2204      	movs	r2, #4
 800a14c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	370c      	adds	r7, #12
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a15e:	b480      	push	{r7}
 800a160:	b083      	sub	sp, #12
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	2b04      	cmp	r3, #4
 800a170:	d106      	bne.n	800a180 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a178:	b2da      	uxtb	r2, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	370c      	adds	r7, #12
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr

0800a18e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b082      	sub	sp, #8
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	2b03      	cmp	r3, #3
 800a1a0:	d110      	bne.n	800a1c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00b      	beq.n	800a1c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1b2:	69db      	ldr	r3, [r3, #28]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d005      	beq.n	800a1c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1be:	69db      	ldr	r3, [r3, #28]
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b082      	sub	sp, #8
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	32ae      	adds	r2, #174	; 0xae
 800a1e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d101      	bne.n	800a1f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	e01c      	b.n	800a22a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	2b03      	cmp	r3, #3
 800a1fa:	d115      	bne.n	800a228 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	32ae      	adds	r2, #174	; 0xae
 800a206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a20a:	6a1b      	ldr	r3, [r3, #32]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00b      	beq.n	800a228 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	32ae      	adds	r2, #174	; 0xae
 800a21a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a21e:	6a1b      	ldr	r3, [r3, #32]
 800a220:	78fa      	ldrb	r2, [r7, #3]
 800a222:	4611      	mov	r1, r2
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3708      	adds	r7, #8
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b082      	sub	sp, #8
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	460b      	mov	r3, r1
 800a23c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	32ae      	adds	r2, #174	; 0xae
 800a248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d101      	bne.n	800a254 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a250:	2303      	movs	r3, #3
 800a252:	e01c      	b.n	800a28e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	2b03      	cmp	r3, #3
 800a25e:	d115      	bne.n	800a28c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	32ae      	adds	r2, #174	; 0xae
 800a26a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a270:	2b00      	cmp	r3, #0
 800a272:	d00b      	beq.n	800a28c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	32ae      	adds	r2, #174	; 0xae
 800a27e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a284:	78fa      	ldrb	r2, [r7, #3]
 800a286:	4611      	mov	r1, r2
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3708      	adds	r7, #8
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a296:	b480      	push	{r7}
 800a298:	b083      	sub	sp, #12
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a29e:	2300      	movs	r3, #0
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00e      	beq.n	800a2e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	6852      	ldr	r2, [r2, #4]
 800a2d6:	b2d2      	uxtb	r2, r2
 800a2d8:	4611      	mov	r1, r2
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	4798      	blx	r3
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d001      	beq.n	800a2e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a2e4:	2303      	movs	r3, #3
 800a2e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a2e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a2f2:	b480      	push	{r7}
 800a2f4:	b083      	sub	sp, #12
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a2fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a300:	4618      	mov	r0, r3
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	460b      	mov	r3, r1
 800a316:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a318:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	370c      	adds	r7, #12
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b086      	sub	sp, #24
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	460b      	mov	r3, r1
 800a330:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a33a:	2300      	movs	r3, #0
 800a33c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	885b      	ldrh	r3, [r3, #2]
 800a342:	b29a      	uxth	r2, r3
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	b29b      	uxth	r3, r3
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d920      	bls.n	800a390 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	b29b      	uxth	r3, r3
 800a354:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a356:	e013      	b.n	800a380 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a358:	f107 030a 	add.w	r3, r7, #10
 800a35c:	4619      	mov	r1, r3
 800a35e:	6978      	ldr	r0, [r7, #20]
 800a360:	f000 f81b 	bl	800a39a <USBD_GetNextDesc>
 800a364:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	785b      	ldrb	r3, [r3, #1]
 800a36a:	2b05      	cmp	r3, #5
 800a36c:	d108      	bne.n	800a380 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	789b      	ldrb	r3, [r3, #2]
 800a376:	78fa      	ldrb	r2, [r7, #3]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d008      	beq.n	800a38e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a37c:	2300      	movs	r3, #0
 800a37e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	885b      	ldrh	r3, [r3, #2]
 800a384:	b29a      	uxth	r2, r3
 800a386:	897b      	ldrh	r3, [r7, #10]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d8e5      	bhi.n	800a358 <USBD_GetEpDesc+0x32>
 800a38c:	e000      	b.n	800a390 <USBD_GetEpDesc+0x6a>
          break;
 800a38e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a390:	693b      	ldr	r3, [r7, #16]
}
 800a392:	4618      	mov	r0, r3
 800a394:	3718      	adds	r7, #24
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a39a:	b480      	push	{r7}
 800a39c:	b085      	sub	sp, #20
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
 800a3a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	881a      	ldrh	r2, [r3, #0]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	4413      	add	r3, r2
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b087      	sub	sp, #28
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a3f2:	8a3b      	ldrh	r3, [r7, #16]
 800a3f4:	021b      	lsls	r3, r3, #8
 800a3f6:	b21a      	sxth	r2, r3
 800a3f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	b21b      	sxth	r3, r3
 800a400:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a402:	89fb      	ldrh	r3, [r7, #14]
}
 800a404:	4618      	mov	r0, r3
 800a406:	371c      	adds	r7, #28
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a426:	2b40      	cmp	r3, #64	; 0x40
 800a428:	d005      	beq.n	800a436 <USBD_StdDevReq+0x26>
 800a42a:	2b40      	cmp	r3, #64	; 0x40
 800a42c:	d857      	bhi.n	800a4de <USBD_StdDevReq+0xce>
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00f      	beq.n	800a452 <USBD_StdDevReq+0x42>
 800a432:	2b20      	cmp	r3, #32
 800a434:	d153      	bne.n	800a4de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	32ae      	adds	r2, #174	; 0xae
 800a440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	6839      	ldr	r1, [r7, #0]
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	4798      	blx	r3
 800a44c:	4603      	mov	r3, r0
 800a44e:	73fb      	strb	r3, [r7, #15]
      break;
 800a450:	e04a      	b.n	800a4e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	785b      	ldrb	r3, [r3, #1]
 800a456:	2b09      	cmp	r3, #9
 800a458:	d83b      	bhi.n	800a4d2 <USBD_StdDevReq+0xc2>
 800a45a:	a201      	add	r2, pc, #4	; (adr r2, 800a460 <USBD_StdDevReq+0x50>)
 800a45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a460:	0800a4b5 	.word	0x0800a4b5
 800a464:	0800a4c9 	.word	0x0800a4c9
 800a468:	0800a4d3 	.word	0x0800a4d3
 800a46c:	0800a4bf 	.word	0x0800a4bf
 800a470:	0800a4d3 	.word	0x0800a4d3
 800a474:	0800a493 	.word	0x0800a493
 800a478:	0800a489 	.word	0x0800a489
 800a47c:	0800a4d3 	.word	0x0800a4d3
 800a480:	0800a4ab 	.word	0x0800a4ab
 800a484:	0800a49d 	.word	0x0800a49d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a488:	6839      	ldr	r1, [r7, #0]
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 fa3c 	bl	800a908 <USBD_GetDescriptor>
          break;
 800a490:	e024      	b.n	800a4dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a492:	6839      	ldr	r1, [r7, #0]
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 fba1 	bl	800abdc <USBD_SetAddress>
          break;
 800a49a:	e01f      	b.n	800a4dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a49c:	6839      	ldr	r1, [r7, #0]
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 fbe0 	bl	800ac64 <USBD_SetConfig>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	73fb      	strb	r3, [r7, #15]
          break;
 800a4a8:	e018      	b.n	800a4dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a4aa:	6839      	ldr	r1, [r7, #0]
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 fc83 	bl	800adb8 <USBD_GetConfig>
          break;
 800a4b2:	e013      	b.n	800a4dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a4b4:	6839      	ldr	r1, [r7, #0]
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 fcb4 	bl	800ae24 <USBD_GetStatus>
          break;
 800a4bc:	e00e      	b.n	800a4dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a4be:	6839      	ldr	r1, [r7, #0]
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 fce3 	bl	800ae8c <USBD_SetFeature>
          break;
 800a4c6:	e009      	b.n	800a4dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a4c8:	6839      	ldr	r1, [r7, #0]
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 fd07 	bl	800aede <USBD_ClrFeature>
          break;
 800a4d0:	e004      	b.n	800a4dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a4d2:	6839      	ldr	r1, [r7, #0]
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 fd5e 	bl	800af96 <USBD_CtlError>
          break;
 800a4da:	bf00      	nop
      }
      break;
 800a4dc:	e004      	b.n	800a4e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a4de:	6839      	ldr	r1, [r7, #0]
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 fd58 	bl	800af96 <USBD_CtlError>
      break;
 800a4e6:	bf00      	nop
  }

  return ret;
 800a4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop

0800a4f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a50a:	2b40      	cmp	r3, #64	; 0x40
 800a50c:	d005      	beq.n	800a51a <USBD_StdItfReq+0x26>
 800a50e:	2b40      	cmp	r3, #64	; 0x40
 800a510:	d852      	bhi.n	800a5b8 <USBD_StdItfReq+0xc4>
 800a512:	2b00      	cmp	r3, #0
 800a514:	d001      	beq.n	800a51a <USBD_StdItfReq+0x26>
 800a516:	2b20      	cmp	r3, #32
 800a518:	d14e      	bne.n	800a5b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a520:	b2db      	uxtb	r3, r3
 800a522:	3b01      	subs	r3, #1
 800a524:	2b02      	cmp	r3, #2
 800a526:	d840      	bhi.n	800a5aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	889b      	ldrh	r3, [r3, #4]
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d836      	bhi.n	800a5a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	889b      	ldrh	r3, [r3, #4]
 800a536:	b2db      	uxtb	r3, r3
 800a538:	4619      	mov	r1, r3
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7ff fed9 	bl	800a2f2 <USBD_CoreFindIF>
 800a540:	4603      	mov	r3, r0
 800a542:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a544:	7bbb      	ldrb	r3, [r7, #14]
 800a546:	2bff      	cmp	r3, #255	; 0xff
 800a548:	d01d      	beq.n	800a586 <USBD_StdItfReq+0x92>
 800a54a:	7bbb      	ldrb	r3, [r7, #14]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d11a      	bne.n	800a586 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a550:	7bba      	ldrb	r2, [r7, #14]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	32ae      	adds	r2, #174	; 0xae
 800a556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d00f      	beq.n	800a580 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a560:	7bba      	ldrb	r2, [r7, #14]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a568:	7bba      	ldrb	r2, [r7, #14]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	32ae      	adds	r2, #174	; 0xae
 800a56e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	6839      	ldr	r1, [r7, #0]
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	4798      	blx	r3
 800a57a:	4603      	mov	r3, r0
 800a57c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a57e:	e004      	b.n	800a58a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a580:	2303      	movs	r3, #3
 800a582:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a584:	e001      	b.n	800a58a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a586:	2303      	movs	r3, #3
 800a588:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	88db      	ldrh	r3, [r3, #6]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d110      	bne.n	800a5b4 <USBD_StdItfReq+0xc0>
 800a592:	7bfb      	ldrb	r3, [r7, #15]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d10d      	bne.n	800a5b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 fdc7 	bl	800b12c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a59e:	e009      	b.n	800a5b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a5a0:	6839      	ldr	r1, [r7, #0]
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 fcf7 	bl	800af96 <USBD_CtlError>
          break;
 800a5a8:	e004      	b.n	800a5b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a5aa:	6839      	ldr	r1, [r7, #0]
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 fcf2 	bl	800af96 <USBD_CtlError>
          break;
 800a5b2:	e000      	b.n	800a5b6 <USBD_StdItfReq+0xc2>
          break;
 800a5b4:	bf00      	nop
      }
      break;
 800a5b6:	e004      	b.n	800a5c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a5b8:	6839      	ldr	r1, [r7, #0]
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 fceb 	bl	800af96 <USBD_CtlError>
      break;
 800a5c0:	bf00      	nop
  }

  return ret;
 800a5c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	889b      	ldrh	r3, [r3, #4]
 800a5de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5e8:	2b40      	cmp	r3, #64	; 0x40
 800a5ea:	d007      	beq.n	800a5fc <USBD_StdEPReq+0x30>
 800a5ec:	2b40      	cmp	r3, #64	; 0x40
 800a5ee:	f200 817f 	bhi.w	800a8f0 <USBD_StdEPReq+0x324>
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d02a      	beq.n	800a64c <USBD_StdEPReq+0x80>
 800a5f6:	2b20      	cmp	r3, #32
 800a5f8:	f040 817a 	bne.w	800a8f0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a5fc:	7bbb      	ldrb	r3, [r7, #14]
 800a5fe:	4619      	mov	r1, r3
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f7ff fe83 	bl	800a30c <USBD_CoreFindEP>
 800a606:	4603      	mov	r3, r0
 800a608:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a60a:	7b7b      	ldrb	r3, [r7, #13]
 800a60c:	2bff      	cmp	r3, #255	; 0xff
 800a60e:	f000 8174 	beq.w	800a8fa <USBD_StdEPReq+0x32e>
 800a612:	7b7b      	ldrb	r3, [r7, #13]
 800a614:	2b00      	cmp	r3, #0
 800a616:	f040 8170 	bne.w	800a8fa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a61a:	7b7a      	ldrb	r2, [r7, #13]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a622:	7b7a      	ldrb	r2, [r7, #13]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	32ae      	adds	r2, #174	; 0xae
 800a628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	f000 8163 	beq.w	800a8fa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a634:	7b7a      	ldrb	r2, [r7, #13]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	32ae      	adds	r2, #174	; 0xae
 800a63a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	6839      	ldr	r1, [r7, #0]
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	4798      	blx	r3
 800a646:	4603      	mov	r3, r0
 800a648:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a64a:	e156      	b.n	800a8fa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	785b      	ldrb	r3, [r3, #1]
 800a650:	2b03      	cmp	r3, #3
 800a652:	d008      	beq.n	800a666 <USBD_StdEPReq+0x9a>
 800a654:	2b03      	cmp	r3, #3
 800a656:	f300 8145 	bgt.w	800a8e4 <USBD_StdEPReq+0x318>
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f000 809b 	beq.w	800a796 <USBD_StdEPReq+0x1ca>
 800a660:	2b01      	cmp	r3, #1
 800a662:	d03c      	beq.n	800a6de <USBD_StdEPReq+0x112>
 800a664:	e13e      	b.n	800a8e4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	2b02      	cmp	r3, #2
 800a670:	d002      	beq.n	800a678 <USBD_StdEPReq+0xac>
 800a672:	2b03      	cmp	r3, #3
 800a674:	d016      	beq.n	800a6a4 <USBD_StdEPReq+0xd8>
 800a676:	e02c      	b.n	800a6d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a678:	7bbb      	ldrb	r3, [r7, #14]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00d      	beq.n	800a69a <USBD_StdEPReq+0xce>
 800a67e:	7bbb      	ldrb	r3, [r7, #14]
 800a680:	2b80      	cmp	r3, #128	; 0x80
 800a682:	d00a      	beq.n	800a69a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a684:	7bbb      	ldrb	r3, [r7, #14]
 800a686:	4619      	mov	r1, r3
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f008 fe21 	bl	80132d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a68e:	2180      	movs	r1, #128	; 0x80
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f008 fe1d 	bl	80132d0 <USBD_LL_StallEP>
 800a696:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a698:	e020      	b.n	800a6dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a69a:	6839      	ldr	r1, [r7, #0]
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 fc7a 	bl	800af96 <USBD_CtlError>
              break;
 800a6a2:	e01b      	b.n	800a6dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	885b      	ldrh	r3, [r3, #2]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10e      	bne.n	800a6ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a6ac:	7bbb      	ldrb	r3, [r7, #14]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00b      	beq.n	800a6ca <USBD_StdEPReq+0xfe>
 800a6b2:	7bbb      	ldrb	r3, [r7, #14]
 800a6b4:	2b80      	cmp	r3, #128	; 0x80
 800a6b6:	d008      	beq.n	800a6ca <USBD_StdEPReq+0xfe>
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	88db      	ldrh	r3, [r3, #6]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d104      	bne.n	800a6ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a6c0:	7bbb      	ldrb	r3, [r7, #14]
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f008 fe03 	bl	80132d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 fd2e 	bl	800b12c <USBD_CtlSendStatus>

              break;
 800a6d0:	e004      	b.n	800a6dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a6d2:	6839      	ldr	r1, [r7, #0]
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fc5e 	bl	800af96 <USBD_CtlError>
              break;
 800a6da:	bf00      	nop
          }
          break;
 800a6dc:	e107      	b.n	800a8ee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d002      	beq.n	800a6f0 <USBD_StdEPReq+0x124>
 800a6ea:	2b03      	cmp	r3, #3
 800a6ec:	d016      	beq.n	800a71c <USBD_StdEPReq+0x150>
 800a6ee:	e04b      	b.n	800a788 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6f0:	7bbb      	ldrb	r3, [r7, #14]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00d      	beq.n	800a712 <USBD_StdEPReq+0x146>
 800a6f6:	7bbb      	ldrb	r3, [r7, #14]
 800a6f8:	2b80      	cmp	r3, #128	; 0x80
 800a6fa:	d00a      	beq.n	800a712 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a6fc:	7bbb      	ldrb	r3, [r7, #14]
 800a6fe:	4619      	mov	r1, r3
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f008 fde5 	bl	80132d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a706:	2180      	movs	r1, #128	; 0x80
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f008 fde1 	bl	80132d0 <USBD_LL_StallEP>
 800a70e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a710:	e040      	b.n	800a794 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a712:	6839      	ldr	r1, [r7, #0]
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 fc3e 	bl	800af96 <USBD_CtlError>
              break;
 800a71a:	e03b      	b.n	800a794 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	885b      	ldrh	r3, [r3, #2]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d136      	bne.n	800a792 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a724:	7bbb      	ldrb	r3, [r7, #14]
 800a726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d004      	beq.n	800a738 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a72e:	7bbb      	ldrb	r3, [r7, #14]
 800a730:	4619      	mov	r1, r3
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f008 fdeb 	bl	801330e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 fcf7 	bl	800b12c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a73e:	7bbb      	ldrb	r3, [r7, #14]
 800a740:	4619      	mov	r1, r3
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f7ff fde2 	bl	800a30c <USBD_CoreFindEP>
 800a748:	4603      	mov	r3, r0
 800a74a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a74c:	7b7b      	ldrb	r3, [r7, #13]
 800a74e:	2bff      	cmp	r3, #255	; 0xff
 800a750:	d01f      	beq.n	800a792 <USBD_StdEPReq+0x1c6>
 800a752:	7b7b      	ldrb	r3, [r7, #13]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d11c      	bne.n	800a792 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a758:	7b7a      	ldrb	r2, [r7, #13]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a760:	7b7a      	ldrb	r2, [r7, #13]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	32ae      	adds	r2, #174	; 0xae
 800a766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d010      	beq.n	800a792 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a770:	7b7a      	ldrb	r2, [r7, #13]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	32ae      	adds	r2, #174	; 0xae
 800a776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	6839      	ldr	r1, [r7, #0]
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	4798      	blx	r3
 800a782:	4603      	mov	r3, r0
 800a784:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a786:	e004      	b.n	800a792 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a788:	6839      	ldr	r1, [r7, #0]
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 fc03 	bl	800af96 <USBD_CtlError>
              break;
 800a790:	e000      	b.n	800a794 <USBD_StdEPReq+0x1c8>
              break;
 800a792:	bf00      	nop
          }
          break;
 800a794:	e0ab      	b.n	800a8ee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	d002      	beq.n	800a7a8 <USBD_StdEPReq+0x1dc>
 800a7a2:	2b03      	cmp	r3, #3
 800a7a4:	d032      	beq.n	800a80c <USBD_StdEPReq+0x240>
 800a7a6:	e097      	b.n	800a8d8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7a8:	7bbb      	ldrb	r3, [r7, #14]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d007      	beq.n	800a7be <USBD_StdEPReq+0x1f2>
 800a7ae:	7bbb      	ldrb	r3, [r7, #14]
 800a7b0:	2b80      	cmp	r3, #128	; 0x80
 800a7b2:	d004      	beq.n	800a7be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a7b4:	6839      	ldr	r1, [r7, #0]
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 fbed 	bl	800af96 <USBD_CtlError>
                break;
 800a7bc:	e091      	b.n	800a8e2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	da0b      	bge.n	800a7de <USBD_StdEPReq+0x212>
 800a7c6:	7bbb      	ldrb	r3, [r7, #14]
 800a7c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	4413      	add	r3, r2
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	3310      	adds	r3, #16
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	4413      	add	r3, r2
 800a7da:	3304      	adds	r3, #4
 800a7dc:	e00b      	b.n	800a7f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a7de:	7bbb      	ldrb	r3, [r7, #14]
 800a7e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7e4:	4613      	mov	r3, r2
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	4413      	add	r3, r2
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	3304      	adds	r3, #4
 800a7f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	2202      	movs	r2, #2
 800a802:	4619      	mov	r1, r3
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fc37 	bl	800b078 <USBD_CtlSendData>
              break;
 800a80a:	e06a      	b.n	800a8e2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a80c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a810:	2b00      	cmp	r3, #0
 800a812:	da11      	bge.n	800a838 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a814:	7bbb      	ldrb	r3, [r7, #14]
 800a816:	f003 020f 	and.w	r2, r3, #15
 800a81a:	6879      	ldr	r1, [r7, #4]
 800a81c:	4613      	mov	r3, r2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	4413      	add	r3, r2
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	440b      	add	r3, r1
 800a826:	3324      	adds	r3, #36	; 0x24
 800a828:	881b      	ldrh	r3, [r3, #0]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d117      	bne.n	800a85e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a82e:	6839      	ldr	r1, [r7, #0]
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 fbb0 	bl	800af96 <USBD_CtlError>
                  break;
 800a836:	e054      	b.n	800a8e2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a838:	7bbb      	ldrb	r3, [r7, #14]
 800a83a:	f003 020f 	and.w	r2, r3, #15
 800a83e:	6879      	ldr	r1, [r7, #4]
 800a840:	4613      	mov	r3, r2
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	4413      	add	r3, r2
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	440b      	add	r3, r1
 800a84a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a84e:	881b      	ldrh	r3, [r3, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d104      	bne.n	800a85e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fb9d 	bl	800af96 <USBD_CtlError>
                  break;
 800a85c:	e041      	b.n	800a8e2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a85e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a862:	2b00      	cmp	r3, #0
 800a864:	da0b      	bge.n	800a87e <USBD_StdEPReq+0x2b2>
 800a866:	7bbb      	ldrb	r3, [r7, #14]
 800a868:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a86c:	4613      	mov	r3, r2
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	4413      	add	r3, r2
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	3310      	adds	r3, #16
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	4413      	add	r3, r2
 800a87a:	3304      	adds	r3, #4
 800a87c:	e00b      	b.n	800a896 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a87e:	7bbb      	ldrb	r3, [r7, #14]
 800a880:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a884:	4613      	mov	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	4413      	add	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	4413      	add	r3, r2
 800a894:	3304      	adds	r3, #4
 800a896:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a898:	7bbb      	ldrb	r3, [r7, #14]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d002      	beq.n	800a8a4 <USBD_StdEPReq+0x2d8>
 800a89e:	7bbb      	ldrb	r3, [r7, #14]
 800a8a0:	2b80      	cmp	r3, #128	; 0x80
 800a8a2:	d103      	bne.n	800a8ac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	601a      	str	r2, [r3, #0]
 800a8aa:	e00e      	b.n	800a8ca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a8ac:	7bbb      	ldrb	r3, [r7, #14]
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f008 fd4b 	bl	801334c <USBD_LL_IsStallEP>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d003      	beq.n	800a8c4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	601a      	str	r2, [r3, #0]
 800a8c2:	e002      	b.n	800a8ca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	2202      	movs	r2, #2
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 fbd1 	bl	800b078 <USBD_CtlSendData>
              break;
 800a8d6:	e004      	b.n	800a8e2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a8d8:	6839      	ldr	r1, [r7, #0]
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 fb5b 	bl	800af96 <USBD_CtlError>
              break;
 800a8e0:	bf00      	nop
          }
          break;
 800a8e2:	e004      	b.n	800a8ee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a8e4:	6839      	ldr	r1, [r7, #0]
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 fb55 	bl	800af96 <USBD_CtlError>
          break;
 800a8ec:	bf00      	nop
      }
      break;
 800a8ee:	e005      	b.n	800a8fc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a8f0:	6839      	ldr	r1, [r7, #0]
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 fb4f 	bl	800af96 <USBD_CtlError>
      break;
 800a8f8:	e000      	b.n	800a8fc <USBD_StdEPReq+0x330>
      break;
 800a8fa:	bf00      	nop
  }

  return ret;
 800a8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
	...

0800a908 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a912:	2300      	movs	r3, #0
 800a914:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a916:	2300      	movs	r3, #0
 800a918:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a91a:	2300      	movs	r3, #0
 800a91c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	885b      	ldrh	r3, [r3, #2]
 800a922:	0a1b      	lsrs	r3, r3, #8
 800a924:	b29b      	uxth	r3, r3
 800a926:	3b01      	subs	r3, #1
 800a928:	2b06      	cmp	r3, #6
 800a92a:	f200 8128 	bhi.w	800ab7e <USBD_GetDescriptor+0x276>
 800a92e:	a201      	add	r2, pc, #4	; (adr r2, 800a934 <USBD_GetDescriptor+0x2c>)
 800a930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a934:	0800a951 	.word	0x0800a951
 800a938:	0800a969 	.word	0x0800a969
 800a93c:	0800a9a9 	.word	0x0800a9a9
 800a940:	0800ab7f 	.word	0x0800ab7f
 800a944:	0800ab7f 	.word	0x0800ab7f
 800a948:	0800ab1f 	.word	0x0800ab1f
 800a94c:	0800ab4b 	.word	0x0800ab4b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	7c12      	ldrb	r2, [r2, #16]
 800a95c:	f107 0108 	add.w	r1, r7, #8
 800a960:	4610      	mov	r0, r2
 800a962:	4798      	blx	r3
 800a964:	60f8      	str	r0, [r7, #12]
      break;
 800a966:	e112      	b.n	800ab8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	7c1b      	ldrb	r3, [r3, #16]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10d      	bne.n	800a98c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a978:	f107 0208 	add.w	r2, r7, #8
 800a97c:	4610      	mov	r0, r2
 800a97e:	4798      	blx	r3
 800a980:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	3301      	adds	r3, #1
 800a986:	2202      	movs	r2, #2
 800a988:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a98a:	e100      	b.n	800ab8e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a994:	f107 0208 	add.w	r2, r7, #8
 800a998:	4610      	mov	r0, r2
 800a99a:	4798      	blx	r3
 800a99c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	2202      	movs	r2, #2
 800a9a4:	701a      	strb	r2, [r3, #0]
      break;
 800a9a6:	e0f2      	b.n	800ab8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	885b      	ldrh	r3, [r3, #2]
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b05      	cmp	r3, #5
 800a9b0:	f200 80ac 	bhi.w	800ab0c <USBD_GetDescriptor+0x204>
 800a9b4:	a201      	add	r2, pc, #4	; (adr r2, 800a9bc <USBD_GetDescriptor+0xb4>)
 800a9b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ba:	bf00      	nop
 800a9bc:	0800a9d5 	.word	0x0800a9d5
 800a9c0:	0800aa09 	.word	0x0800aa09
 800a9c4:	0800aa3d 	.word	0x0800aa3d
 800a9c8:	0800aa71 	.word	0x0800aa71
 800a9cc:	0800aaa5 	.word	0x0800aaa5
 800a9d0:	0800aad9 	.word	0x0800aad9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00b      	beq.n	800a9f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	7c12      	ldrb	r2, [r2, #16]
 800a9ec:	f107 0108 	add.w	r1, r7, #8
 800a9f0:	4610      	mov	r0, r2
 800a9f2:	4798      	blx	r3
 800a9f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9f6:	e091      	b.n	800ab1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9f8:	6839      	ldr	r1, [r7, #0]
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 facb 	bl	800af96 <USBD_CtlError>
            err++;
 800aa00:	7afb      	ldrb	r3, [r7, #11]
 800aa02:	3301      	adds	r3, #1
 800aa04:	72fb      	strb	r3, [r7, #11]
          break;
 800aa06:	e089      	b.n	800ab1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00b      	beq.n	800aa2c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa1a:	689b      	ldr	r3, [r3, #8]
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	7c12      	ldrb	r2, [r2, #16]
 800aa20:	f107 0108 	add.w	r1, r7, #8
 800aa24:	4610      	mov	r0, r2
 800aa26:	4798      	blx	r3
 800aa28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa2a:	e077      	b.n	800ab1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa2c:	6839      	ldr	r1, [r7, #0]
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 fab1 	bl	800af96 <USBD_CtlError>
            err++;
 800aa34:	7afb      	ldrb	r3, [r7, #11]
 800aa36:	3301      	adds	r3, #1
 800aa38:	72fb      	strb	r3, [r7, #11]
          break;
 800aa3a:	e06f      	b.n	800ab1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00b      	beq.n	800aa60 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	7c12      	ldrb	r2, [r2, #16]
 800aa54:	f107 0108 	add.w	r1, r7, #8
 800aa58:	4610      	mov	r0, r2
 800aa5a:	4798      	blx	r3
 800aa5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa5e:	e05d      	b.n	800ab1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa60:	6839      	ldr	r1, [r7, #0]
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 fa97 	bl	800af96 <USBD_CtlError>
            err++;
 800aa68:	7afb      	ldrb	r3, [r7, #11]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa6e:	e055      	b.n	800ab1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d00b      	beq.n	800aa94 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	7c12      	ldrb	r2, [r2, #16]
 800aa88:	f107 0108 	add.w	r1, r7, #8
 800aa8c:	4610      	mov	r0, r2
 800aa8e:	4798      	blx	r3
 800aa90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa92:	e043      	b.n	800ab1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa94:	6839      	ldr	r1, [r7, #0]
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fa7d 	bl	800af96 <USBD_CtlError>
            err++;
 800aa9c:	7afb      	ldrb	r3, [r7, #11]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	72fb      	strb	r3, [r7, #11]
          break;
 800aaa2:	e03b      	b.n	800ab1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaaa:	695b      	ldr	r3, [r3, #20]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00b      	beq.n	800aac8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aab6:	695b      	ldr	r3, [r3, #20]
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	7c12      	ldrb	r2, [r2, #16]
 800aabc:	f107 0108 	add.w	r1, r7, #8
 800aac0:	4610      	mov	r0, r2
 800aac2:	4798      	blx	r3
 800aac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aac6:	e029      	b.n	800ab1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aac8:	6839      	ldr	r1, [r7, #0]
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 fa63 	bl	800af96 <USBD_CtlError>
            err++;
 800aad0:	7afb      	ldrb	r3, [r7, #11]
 800aad2:	3301      	adds	r3, #1
 800aad4:	72fb      	strb	r3, [r7, #11]
          break;
 800aad6:	e021      	b.n	800ab1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aade:	699b      	ldr	r3, [r3, #24]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d00b      	beq.n	800aafc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaea:	699b      	ldr	r3, [r3, #24]
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	7c12      	ldrb	r2, [r2, #16]
 800aaf0:	f107 0108 	add.w	r1, r7, #8
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	4798      	blx	r3
 800aaf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aafa:	e00f      	b.n	800ab1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aafc:	6839      	ldr	r1, [r7, #0]
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 fa49 	bl	800af96 <USBD_CtlError>
            err++;
 800ab04:	7afb      	ldrb	r3, [r7, #11]
 800ab06:	3301      	adds	r3, #1
 800ab08:	72fb      	strb	r3, [r7, #11]
          break;
 800ab0a:	e007      	b.n	800ab1c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ab0c:	6839      	ldr	r1, [r7, #0]
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 fa41 	bl	800af96 <USBD_CtlError>
          err++;
 800ab14:	7afb      	ldrb	r3, [r7, #11]
 800ab16:	3301      	adds	r3, #1
 800ab18:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ab1a:	bf00      	nop
      }
      break;
 800ab1c:	e037      	b.n	800ab8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	7c1b      	ldrb	r3, [r3, #16]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d109      	bne.n	800ab3a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab2e:	f107 0208 	add.w	r2, r7, #8
 800ab32:	4610      	mov	r0, r2
 800ab34:	4798      	blx	r3
 800ab36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab38:	e029      	b.n	800ab8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ab3a:	6839      	ldr	r1, [r7, #0]
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 fa2a 	bl	800af96 <USBD_CtlError>
        err++;
 800ab42:	7afb      	ldrb	r3, [r7, #11]
 800ab44:	3301      	adds	r3, #1
 800ab46:	72fb      	strb	r3, [r7, #11]
      break;
 800ab48:	e021      	b.n	800ab8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	7c1b      	ldrb	r3, [r3, #16]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d10d      	bne.n	800ab6e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab5a:	f107 0208 	add.w	r2, r7, #8
 800ab5e:	4610      	mov	r0, r2
 800ab60:	4798      	blx	r3
 800ab62:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	3301      	adds	r3, #1
 800ab68:	2207      	movs	r2, #7
 800ab6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab6c:	e00f      	b.n	800ab8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ab6e:	6839      	ldr	r1, [r7, #0]
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 fa10 	bl	800af96 <USBD_CtlError>
        err++;
 800ab76:	7afb      	ldrb	r3, [r7, #11]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	72fb      	strb	r3, [r7, #11]
      break;
 800ab7c:	e007      	b.n	800ab8e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ab7e:	6839      	ldr	r1, [r7, #0]
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 fa08 	bl	800af96 <USBD_CtlError>
      err++;
 800ab86:	7afb      	ldrb	r3, [r7, #11]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	72fb      	strb	r3, [r7, #11]
      break;
 800ab8c:	bf00      	nop
  }

  if (err != 0U)
 800ab8e:	7afb      	ldrb	r3, [r7, #11]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d11e      	bne.n	800abd2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	88db      	ldrh	r3, [r3, #6]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d016      	beq.n	800abca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ab9c:	893b      	ldrh	r3, [r7, #8]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00e      	beq.n	800abc0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	88da      	ldrh	r2, [r3, #6]
 800aba6:	893b      	ldrh	r3, [r7, #8]
 800aba8:	4293      	cmp	r3, r2
 800abaa:	bf28      	it	cs
 800abac:	4613      	movcs	r3, r2
 800abae:	b29b      	uxth	r3, r3
 800abb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800abb2:	893b      	ldrh	r3, [r7, #8]
 800abb4:	461a      	mov	r2, r3
 800abb6:	68f9      	ldr	r1, [r7, #12]
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 fa5d 	bl	800b078 <USBD_CtlSendData>
 800abbe:	e009      	b.n	800abd4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 f9e7 	bl	800af96 <USBD_CtlError>
 800abc8:	e004      	b.n	800abd4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 faae 	bl	800b12c <USBD_CtlSendStatus>
 800abd0:	e000      	b.n	800abd4 <USBD_GetDescriptor+0x2cc>
    return;
 800abd2:	bf00      	nop
  }
}
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop

0800abdc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	889b      	ldrh	r3, [r3, #4]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d131      	bne.n	800ac52 <USBD_SetAddress+0x76>
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	88db      	ldrh	r3, [r3, #6]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d12d      	bne.n	800ac52 <USBD_SetAddress+0x76>
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	885b      	ldrh	r3, [r3, #2]
 800abfa:	2b7f      	cmp	r3, #127	; 0x7f
 800abfc:	d829      	bhi.n	800ac52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	885b      	ldrh	r3, [r3, #2]
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	2b03      	cmp	r3, #3
 800ac14:	d104      	bne.n	800ac20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ac16:	6839      	ldr	r1, [r7, #0]
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 f9bc 	bl	800af96 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac1e:	e01d      	b.n	800ac5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	7bfa      	ldrb	r2, [r7, #15]
 800ac24:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f008 fbb9 	bl	80133a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 fa7a 	bl	800b12c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d004      	beq.n	800ac48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2202      	movs	r2, #2
 800ac42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac46:	e009      	b.n	800ac5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac50:	e004      	b.n	800ac5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ac52:	6839      	ldr	r1, [r7, #0]
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 f99e 	bl	800af96 <USBD_CtlError>
  }
}
 800ac5a:	bf00      	nop
 800ac5c:	bf00      	nop
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	885b      	ldrh	r3, [r3, #2]
 800ac76:	b2da      	uxtb	r2, r3
 800ac78:	4b4e      	ldr	r3, [pc, #312]	; (800adb4 <USBD_SetConfig+0x150>)
 800ac7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ac7c:	4b4d      	ldr	r3, [pc, #308]	; (800adb4 <USBD_SetConfig+0x150>)
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d905      	bls.n	800ac90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ac84:	6839      	ldr	r1, [r7, #0]
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 f985 	bl	800af96 <USBD_CtlError>
    return USBD_FAIL;
 800ac8c:	2303      	movs	r3, #3
 800ac8e:	e08c      	b.n	800adaa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	2b02      	cmp	r3, #2
 800ac9a:	d002      	beq.n	800aca2 <USBD_SetConfig+0x3e>
 800ac9c:	2b03      	cmp	r3, #3
 800ac9e:	d029      	beq.n	800acf4 <USBD_SetConfig+0x90>
 800aca0:	e075      	b.n	800ad8e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aca2:	4b44      	ldr	r3, [pc, #272]	; (800adb4 <USBD_SetConfig+0x150>)
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d020      	beq.n	800acec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800acaa:	4b42      	ldr	r3, [pc, #264]	; (800adb4 <USBD_SetConfig+0x150>)
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	461a      	mov	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800acb4:	4b3f      	ldr	r3, [pc, #252]	; (800adb4 <USBD_SetConfig+0x150>)
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	4619      	mov	r1, r3
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7fe ffe7 	bl	8009c8e <USBD_SetClassConfig>
 800acc0:	4603      	mov	r3, r0
 800acc2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800acc4:	7bfb      	ldrb	r3, [r7, #15]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d008      	beq.n	800acdc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f962 	bl	800af96 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2202      	movs	r2, #2
 800acd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800acda:	e065      	b.n	800ada8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 fa25 	bl	800b12c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2203      	movs	r2, #3
 800ace6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800acea:	e05d      	b.n	800ada8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 fa1d 	bl	800b12c <USBD_CtlSendStatus>
      break;
 800acf2:	e059      	b.n	800ada8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800acf4:	4b2f      	ldr	r3, [pc, #188]	; (800adb4 <USBD_SetConfig+0x150>)
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d112      	bne.n	800ad22 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2202      	movs	r2, #2
 800ad00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ad04:	4b2b      	ldr	r3, [pc, #172]	; (800adb4 <USBD_SetConfig+0x150>)
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	461a      	mov	r2, r3
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad0e:	4b29      	ldr	r3, [pc, #164]	; (800adb4 <USBD_SetConfig+0x150>)
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	4619      	mov	r1, r3
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f7fe ffd6 	bl	8009cc6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 fa06 	bl	800b12c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ad20:	e042      	b.n	800ada8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ad22:	4b24      	ldr	r3, [pc, #144]	; (800adb4 <USBD_SetConfig+0x150>)
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	461a      	mov	r2, r3
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d02a      	beq.n	800ad86 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	4619      	mov	r1, r3
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f7fe ffc4 	bl	8009cc6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ad3e:	4b1d      	ldr	r3, [pc, #116]	; (800adb4 <USBD_SetConfig+0x150>)
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	461a      	mov	r2, r3
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad48:	4b1a      	ldr	r3, [pc, #104]	; (800adb4 <USBD_SetConfig+0x150>)
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7fe ff9d 	bl	8009c8e <USBD_SetClassConfig>
 800ad54:	4603      	mov	r3, r0
 800ad56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ad58:	7bfb      	ldrb	r3, [r7, #15]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d00f      	beq.n	800ad7e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ad5e:	6839      	ldr	r1, [r7, #0]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 f918 	bl	800af96 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f7fe ffa9 	bl	8009cc6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2202      	movs	r2, #2
 800ad78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ad7c:	e014      	b.n	800ada8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f9d4 	bl	800b12c <USBD_CtlSendStatus>
      break;
 800ad84:	e010      	b.n	800ada8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 f9d0 	bl	800b12c <USBD_CtlSendStatus>
      break;
 800ad8c:	e00c      	b.n	800ada8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ad8e:	6839      	ldr	r1, [r7, #0]
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 f900 	bl	800af96 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad96:	4b07      	ldr	r3, [pc, #28]	; (800adb4 <USBD_SetConfig+0x150>)
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7fe ff92 	bl	8009cc6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ada2:	2303      	movs	r3, #3
 800ada4:	73fb      	strb	r3, [r7, #15]
      break;
 800ada6:	bf00      	nop
  }

  return ret;
 800ada8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	20000968 	.word	0x20000968

0800adb8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	88db      	ldrh	r3, [r3, #6]
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d004      	beq.n	800add4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800adca:	6839      	ldr	r1, [r7, #0]
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 f8e2 	bl	800af96 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800add2:	e023      	b.n	800ae1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adda:	b2db      	uxtb	r3, r3
 800addc:	2b02      	cmp	r3, #2
 800adde:	dc02      	bgt.n	800ade6 <USBD_GetConfig+0x2e>
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	dc03      	bgt.n	800adec <USBD_GetConfig+0x34>
 800ade4:	e015      	b.n	800ae12 <USBD_GetConfig+0x5a>
 800ade6:	2b03      	cmp	r3, #3
 800ade8:	d00b      	beq.n	800ae02 <USBD_GetConfig+0x4a>
 800adea:	e012      	b.n	800ae12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	3308      	adds	r3, #8
 800adf6:	2201      	movs	r2, #1
 800adf8:	4619      	mov	r1, r3
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 f93c 	bl	800b078 <USBD_CtlSendData>
        break;
 800ae00:	e00c      	b.n	800ae1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	3304      	adds	r3, #4
 800ae06:	2201      	movs	r2, #1
 800ae08:	4619      	mov	r1, r3
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 f934 	bl	800b078 <USBD_CtlSendData>
        break;
 800ae10:	e004      	b.n	800ae1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ae12:	6839      	ldr	r1, [r7, #0]
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 f8be 	bl	800af96 <USBD_CtlError>
        break;
 800ae1a:	bf00      	nop
}
 800ae1c:	bf00      	nop
 800ae1e:	3708      	adds	r7, #8
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	3b01      	subs	r3, #1
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d81e      	bhi.n	800ae7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	88db      	ldrh	r3, [r3, #6]
 800ae40:	2b02      	cmp	r3, #2
 800ae42:	d004      	beq.n	800ae4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 f8a5 	bl	800af96 <USBD_CtlError>
        break;
 800ae4c:	e01a      	b.n	800ae84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2201      	movs	r2, #1
 800ae52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d005      	beq.n	800ae6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	f043 0202 	orr.w	r2, r3, #2
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	330c      	adds	r3, #12
 800ae6e:	2202      	movs	r2, #2
 800ae70:	4619      	mov	r1, r3
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 f900 	bl	800b078 <USBD_CtlSendData>
      break;
 800ae78:	e004      	b.n	800ae84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ae7a:	6839      	ldr	r1, [r7, #0]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 f88a 	bl	800af96 <USBD_CtlError>
      break;
 800ae82:	bf00      	nop
  }
}
 800ae84:	bf00      	nop
 800ae86:	3708      	adds	r7, #8
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	885b      	ldrh	r3, [r3, #2]
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d107      	bne.n	800aeae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 f940 	bl	800b12c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800aeac:	e013      	b.n	800aed6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	885b      	ldrh	r3, [r3, #2]
 800aeb2:	2b02      	cmp	r3, #2
 800aeb4:	d10b      	bne.n	800aece <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	889b      	ldrh	r3, [r3, #4]
 800aeba:	0a1b      	lsrs	r3, r3, #8
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	b2da      	uxtb	r2, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 f930 	bl	800b12c <USBD_CtlSendStatus>
}
 800aecc:	e003      	b.n	800aed6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800aece:	6839      	ldr	r1, [r7, #0]
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 f860 	bl	800af96 <USBD_CtlError>
}
 800aed6:	bf00      	nop
 800aed8:	3708      	adds	r7, #8
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b082      	sub	sp, #8
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	3b01      	subs	r3, #1
 800aef2:	2b02      	cmp	r3, #2
 800aef4:	d80b      	bhi.n	800af0e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	885b      	ldrh	r3, [r3, #2]
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d10c      	bne.n	800af18 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 f910 	bl	800b12c <USBD_CtlSendStatus>
      }
      break;
 800af0c:	e004      	b.n	800af18 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800af0e:	6839      	ldr	r1, [r7, #0]
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 f840 	bl	800af96 <USBD_CtlError>
      break;
 800af16:	e000      	b.n	800af1a <USBD_ClrFeature+0x3c>
      break;
 800af18:	bf00      	nop
  }
}
 800af1a:	bf00      	nop
 800af1c:	3708      	adds	r7, #8
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b084      	sub	sp, #16
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	781a      	ldrb	r2, [r3, #0]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	3301      	adds	r3, #1
 800af3c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	781a      	ldrb	r2, [r3, #0]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	3301      	adds	r3, #1
 800af4a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f7ff fa41 	bl	800a3d4 <SWAPBYTE>
 800af52:	4603      	mov	r3, r0
 800af54:	461a      	mov	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	3301      	adds	r3, #1
 800af5e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	3301      	adds	r3, #1
 800af64:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f7ff fa34 	bl	800a3d4 <SWAPBYTE>
 800af6c:	4603      	mov	r3, r0
 800af6e:	461a      	mov	r2, r3
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	3301      	adds	r3, #1
 800af78:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	3301      	adds	r3, #1
 800af7e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f7ff fa27 	bl	800a3d4 <SWAPBYTE>
 800af86:	4603      	mov	r3, r0
 800af88:	461a      	mov	r2, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	80da      	strh	r2, [r3, #6]
}
 800af8e:	bf00      	nop
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b082      	sub	sp, #8
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
 800af9e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800afa0:	2180      	movs	r1, #128	; 0x80
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f008 f994 	bl	80132d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800afa8:	2100      	movs	r1, #0
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f008 f990 	bl	80132d0 <USBD_LL_StallEP>
}
 800afb0:	bf00      	nop
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b086      	sub	sp, #24
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800afc4:	2300      	movs	r3, #0
 800afc6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d036      	beq.n	800b03c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800afd2:	6938      	ldr	r0, [r7, #16]
 800afd4:	f000 f836 	bl	800b044 <USBD_GetLen>
 800afd8:	4603      	mov	r3, r0
 800afda:	3301      	adds	r3, #1
 800afdc:	b29b      	uxth	r3, r3
 800afde:	005b      	lsls	r3, r3, #1
 800afe0:	b29a      	uxth	r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800afe6:	7dfb      	ldrb	r3, [r7, #23]
 800afe8:	68ba      	ldr	r2, [r7, #8]
 800afea:	4413      	add	r3, r2
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	7812      	ldrb	r2, [r2, #0]
 800aff0:	701a      	strb	r2, [r3, #0]
  idx++;
 800aff2:	7dfb      	ldrb	r3, [r7, #23]
 800aff4:	3301      	adds	r3, #1
 800aff6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aff8:	7dfb      	ldrb	r3, [r7, #23]
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	4413      	add	r3, r2
 800affe:	2203      	movs	r2, #3
 800b000:	701a      	strb	r2, [r3, #0]
  idx++;
 800b002:	7dfb      	ldrb	r3, [r7, #23]
 800b004:	3301      	adds	r3, #1
 800b006:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b008:	e013      	b.n	800b032 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b00a:	7dfb      	ldrb	r3, [r7, #23]
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	4413      	add	r3, r2
 800b010:	693a      	ldr	r2, [r7, #16]
 800b012:	7812      	ldrb	r2, [r2, #0]
 800b014:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	3301      	adds	r3, #1
 800b01a:	613b      	str	r3, [r7, #16]
    idx++;
 800b01c:	7dfb      	ldrb	r3, [r7, #23]
 800b01e:	3301      	adds	r3, #1
 800b020:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b022:	7dfb      	ldrb	r3, [r7, #23]
 800b024:	68ba      	ldr	r2, [r7, #8]
 800b026:	4413      	add	r3, r2
 800b028:	2200      	movs	r2, #0
 800b02a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b02c:	7dfb      	ldrb	r3, [r7, #23]
 800b02e:	3301      	adds	r3, #1
 800b030:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d1e7      	bne.n	800b00a <USBD_GetString+0x52>
 800b03a:	e000      	b.n	800b03e <USBD_GetString+0x86>
    return;
 800b03c:	bf00      	nop
  }
}
 800b03e:	3718      	adds	r7, #24
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b04c:	2300      	movs	r3, #0
 800b04e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b054:	e005      	b.n	800b062 <USBD_GetLen+0x1e>
  {
    len++;
 800b056:	7bfb      	ldrb	r3, [r7, #15]
 800b058:	3301      	adds	r3, #1
 800b05a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	3301      	adds	r3, #1
 800b060:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1f5      	bne.n	800b056 <USBD_GetLen+0x12>
  }

  return len;
 800b06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3714      	adds	r7, #20
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	60b9      	str	r1, [r7, #8]
 800b082:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2202      	movs	r2, #2
 800b088:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	68ba      	ldr	r2, [r7, #8]
 800b09c:	2100      	movs	r1, #0
 800b09e:	68f8      	ldr	r0, [r7, #12]
 800b0a0:	f008 f99f 	bl	80133e2 <USBD_LL_Transmit>

  return USBD_OK;
 800b0a4:	2300      	movs	r3, #0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b084      	sub	sp, #16
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	60f8      	str	r0, [r7, #12]
 800b0b6:	60b9      	str	r1, [r7, #8]
 800b0b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	68ba      	ldr	r2, [r7, #8]
 800b0be:	2100      	movs	r1, #0
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f008 f98e 	bl	80133e2 <USBD_LL_Transmit>

  return USBD_OK;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2203      	movs	r2, #3
 800b0e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	68ba      	ldr	r2, [r7, #8]
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	68f8      	ldr	r0, [r7, #12]
 800b0fc:	f008 f992 	bl	8013424 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b100:	2300      	movs	r3, #0
}
 800b102:	4618      	mov	r0, r3
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b084      	sub	sp, #16
 800b10e:	af00      	add	r7, sp, #0
 800b110:	60f8      	str	r0, [r7, #12]
 800b112:	60b9      	str	r1, [r7, #8]
 800b114:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	2100      	movs	r1, #0
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f008 f981 	bl	8013424 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2204      	movs	r2, #4
 800b138:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b13c:	2300      	movs	r3, #0
 800b13e:	2200      	movs	r2, #0
 800b140:	2100      	movs	r1, #0
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f008 f94d 	bl	80133e2 <USBD_LL_Transmit>

  return USBD_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3708      	adds	r7, #8
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b152:	b580      	push	{r7, lr}
 800b154:	b082      	sub	sp, #8
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2205      	movs	r2, #5
 800b15e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b162:	2300      	movs	r3, #0
 800b164:	2200      	movs	r2, #0
 800b166:	2100      	movs	r1, #0
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f008 f95b 	bl	8013424 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b16e:	2300      	movs	r3, #0
}
 800b170:	4618      	mov	r0, r3
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800b178:	b480      	push	{r7}
 800b17a:	b08b      	sub	sp, #44	; 0x2c
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	ed87 0a02 	vstr	s0, [r7, #8]
 800b184:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	881b      	ldrh	r3, [r3, #0]
 800b196:	461a      	mov	r2, r3
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	885b      	ldrh	r3, [r3, #2]
 800b19c:	fb02 f303 	mul.w	r3, r2, r3
 800b1a0:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800b1a2:	69bb      	ldr	r3, [r7, #24]
 800b1a4:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800b1a6:	e010      	b.n	800b1ca <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800b1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1aa:	1d1a      	adds	r2, r3, #4
 800b1ac:	627a      	str	r2, [r7, #36]	; 0x24
 800b1ae:	ed93 7a00 	vldr	s14, [r3]
 800b1b2:	6a3b      	ldr	r3, [r7, #32]
 800b1b4:	1d1a      	adds	r2, r3, #4
 800b1b6:	623a      	str	r2, [r7, #32]
 800b1b8:	edd7 7a02 	vldr	s15, [r7, #8]
 800b1bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1c0:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1eb      	bne.n	800b1a8 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800b1d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	372c      	adds	r7, #44	; 0x2c
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b08b      	sub	sp, #44	; 0x2c
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	881b      	ldrh	r3, [r3, #0]
 800b1fe:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	885b      	ldrh	r3, [r3, #2]
 800b204:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800b206:	89fb      	ldrh	r3, [r7, #14]
 800b208:	61bb      	str	r3, [r7, #24]
 800b20a:	2300      	movs	r3, #0
 800b20c:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	693a      	ldr	r2, [r7, #16]
 800b214:	4413      	add	r3, r2
 800b216:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800b218:	89bb      	ldrh	r3, [r7, #12]
 800b21a:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800b21c:	e00d      	b.n	800b23a <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800b21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b220:	1d1a      	adds	r2, r3, #4
 800b222:	627a      	str	r2, [r7, #36]	; 0x24
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	6a3b      	ldr	r3, [r7, #32]
 800b228:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800b22a:	89fb      	ldrh	r3, [r7, #14]
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	6a3a      	ldr	r2, [r7, #32]
 800b230:	4413      	add	r3, r2
 800b232:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	3b01      	subs	r3, #1
 800b238:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800b23a:	69fb      	ldr	r3, [r7, #28]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d1ee      	bne.n	800b21e <arm_mat_trans_f32+0x3a>
      }

      i++;
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	3301      	adds	r3, #1
 800b244:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	3b01      	subs	r3, #1
 800b24a:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1dd      	bne.n	800b20e <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800b252:	2300      	movs	r3, #0
 800b254:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800b256:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	372c      	adds	r7, #44	; 0x2c
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr

0800b266 <arm_max_f32>:
void arm_max_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 800b266:	b480      	push	{r7}
 800b268:	b089      	sub	sp, #36	; 0x24
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	60f8      	str	r0, [r7, #12]
 800b26e:	60b9      	str	r1, [r7, #8]
 800b270:	607a      	str	r2, [r7, #4]
 800b272:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 800b274:	2300      	movs	r3, #0
 800b276:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	1d1a      	adds	r2, r3, #4
 800b27c:	60fa      	str	r2, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	3b01      	subs	r3, #1
 800b286:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800b288:	e016      	b.n	800b2b8 <arm_max_f32+0x52>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal = *pSrc++;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	1d1a      	adds	r2, r3, #4
 800b28e:	60fa      	str	r2, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal)
 800b294:	ed97 7a07 	vldr	s14, [r7, #28]
 800b298:	edd7 7a04 	vldr	s15, [r7, #16]
 800b29c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2a4:	d505      	bpl.n	800b2b2 <arm_max_f32+0x4c>
    {
      /* Update the maximum value and it's index */
      out = maxVal;
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 800b2aa:	68ba      	ldr	r2, [r7, #8]
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	1ad3      	subs	r3, r2, r3
 800b2b0:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	3b01      	subs	r3, #1
 800b2b6:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1e5      	bne.n	800b28a <arm_max_f32+0x24>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	69fa      	ldr	r2, [r7, #28]
 800b2c2:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	697a      	ldr	r2, [r7, #20]
 800b2c8:	601a      	str	r2, [r3, #0]
}
 800b2ca:	bf00      	nop
 800b2cc:	3724      	adds	r7, #36	; 0x24
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr

0800b2d6 <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800b2d6:	b480      	push	{r7}
 800b2d8:	b087      	sub	sp, #28
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	60f8      	str	r0, [r7, #12]
 800b2de:	60b9      	str	r1, [r7, #8]
 800b2e0:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800b2e2:	f04f 0300 	mov.w	r3, #0
 800b2e6:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800b2ec:	e00d      	b.n	800b30a <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	1d1a      	adds	r2, r3, #4
 800b2f2:	60fa      	str	r2, [r7, #12]
 800b2f4:	edd3 7a00 	vldr	s15, [r3]
 800b2f8:	ed97 7a04 	vldr	s14, [r7, #16]
 800b2fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b300:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	3b01      	subs	r3, #1
 800b308:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d1ee      	bne.n	800b2ee <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	ee07 3a90 	vmov	s15, r3
 800b316:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b31a:	edd7 6a04 	vldr	s13, [r7, #16]
 800b31e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	edc3 7a00 	vstr	s15, [r3]
}
 800b328:	bf00      	nop
 800b32a:	371c      	adds	r7, #28
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <arm_min_f32>:
void arm_min_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 800b334:	b480      	push	{r7}
 800b336:	b089      	sub	sp, #36	; 0x24
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	607a      	str	r2, [r7, #4]
 800b340:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 800b342:	2300      	movs	r3, #0
 800b344:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	1d1a      	adds	r2, r3, #4
 800b34a:	60fa      	str	r2, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	3b01      	subs	r3, #1
 800b354:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800b356:	e016      	b.n	800b386 <arm_min_f32+0x52>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal = *pSrc++;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	1d1a      	adds	r2, r3, #4
 800b35c:	60fa      	str	r2, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if (out > minVal)
 800b362:	ed97 7a07 	vldr	s14, [r7, #28]
 800b366:	edd7 7a04 	vldr	s15, [r7, #16]
 800b36a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b372:	dd05      	ble.n	800b380 <arm_min_f32+0x4c>
    {
      /* Update the minimum value and it's index */
      out = minVal;
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 800b378:	68ba      	ldr	r2, [r7, #8]
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	1ad3      	subs	r3, r2, r3
 800b37e:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	3b01      	subs	r3, #1
 800b384:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1e5      	bne.n	800b358 <arm_min_f32+0x24>
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	69fa      	ldr	r2, [r7, #28]
 800b390:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	697a      	ldr	r2, [r7, #20]
 800b396:	601a      	str	r2, [r3, #0]
}
 800b398:	bf00      	nop
 800b39a:	3724      	adds	r7, #36	; 0x24
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b08a      	sub	sp, #40	; 0x28
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800b3b0:	f04f 0300 	mov.w	r3, #0
 800b3b4:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800b3ba:	e011      	b.n	800b3e0 <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	1d1a      	adds	r2, r3, #4
 800b3c0:	60fa      	str	r2, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 800b3c6:	edd7 7a07 	vldr	s15, [r7, #28]
 800b3ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b3ce:	ed97 7a08 	vldr	s14, [r7, #32]
 800b3d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3d6:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 800b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 800b3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d1ea      	bne.n	800b3bc <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	ee07 3a90 	vmov	s15, r3
 800b3ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b3f0:	edd7 6a08 	vldr	s13, [r7, #32]
 800b3f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3f8:	edc7 7a06 	vstr	s15, [r7, #24]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 800b400:	edd7 7a06 	vldr	s15, [r7, #24]
 800b404:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b40c:	db09      	blt.n	800b422 <arm_rms_f32+0x7e>
      *pOut = sqrtf(in);
 800b40e:	ed97 0a06 	vldr	s0, [r7, #24]
 800b412:	f008 fa69 	bl	80138e8 <sqrtf>
 800b416:	eef0 7a40 	vmov.f32	s15, s0
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800b420:	e004      	b.n	800b42c <arm_rms_f32+0x88>
      *pOut = 0.0f;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	f04f 0200 	mov.w	r2, #0
 800b428:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800b42a:	bf00      	nop
}
 800b42c:	bf00      	nop
 800b42e:	3728      	adds	r7, #40	; 0x28
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
 800b434:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b436:	b093      	sub	sp, #76	; 0x4c
 800b438:	af0a      	add	r7, sp, #40	; 0x28
 800b43a:	6178      	str	r0, [r7, #20]
 800b43c:	6139      	str	r1, [r7, #16]
 800b43e:	60fa      	str	r2, [r7, #12]
 800b440:	60bb      	str	r3, [r7, #8]
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	61fb      	str	r3, [r7, #28]

    while (batch_cnt)
 800b448:	e033      	b.n	800b4b2 <arm_fully_connected_s8+0x7e>
    {
        arm_nn_vec_mat_mult_t_s8(input,
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	607b      	str	r3, [r7, #4]
 800b450:	693a      	ldr	r2, [r7, #16]
 800b452:	6852      	ldr	r2, [r2, #4]
 800b454:	6939      	ldr	r1, [r7, #16]
 800b456:	6889      	ldr	r1, [r1, #8]
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	6800      	ldr	r0, [r0, #0]
 800b45c:	68fc      	ldr	r4, [r7, #12]
 800b45e:	6864      	ldr	r4, [r4, #4]
 800b460:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 800b462:	682d      	ldr	r5, [r5, #0]
 800b464:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 800b466:	68f6      	ldr	r6, [r6, #12]
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	603b      	str	r3, [r7, #0]
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	9308      	str	r3, [sp, #32]
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	9307      	str	r3, [sp, #28]
 800b478:	9606      	str	r6, [sp, #24]
 800b47a:	9505      	str	r5, [sp, #20]
 800b47c:	9404      	str	r4, [sp, #16]
 800b47e:	9003      	str	r0, [sp, #12]
 800b480:	9102      	str	r1, [sp, #8]
 800b482:	9201      	str	r2, [sp, #4]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b48a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b48c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b48e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b490:	f000 f822 	bl	800b4d8 <arm_nn_vec_mat_mult_t_s8>
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
 800b494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	461a      	mov	r2, r3
 800b49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49c:	4413      	add	r3, r2
 800b49e:	63bb      	str	r3, [r7, #56]	; 0x38
        output += output_dims->c;
 800b4a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4a8:	4413      	add	r3, r2
 800b4aa:	653b      	str	r3, [r7, #80]	; 0x50
        batch_cnt--;
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	61fb      	str	r3, [r7, #28]
    while (batch_cnt)
 800b4b2:	69fb      	ldr	r3, [r7, #28]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d1c8      	bne.n	800b44a <arm_fully_connected_s8+0x16>
    }
    return (ARM_MATH_SUCCESS);
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3724      	adds	r7, #36	; 0x24
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b4c2 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
 800b4c2:	b480      	push	{r7}
 800b4c4:	b083      	sub	sp, #12
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
    (void)filter_dims;
    return 0;
 800b4ca:	2300      	movs	r3, #0
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 800b4d8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b4dc:	f5ad 6dc6 	sub.w	sp, sp, #1584	; 0x630
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	f507 64c6 	add.w	r4, r7, #1584	; 0x630
 800b4e6:	f2a4 54dc 	subw	r4, r4, #1500	; 0x5dc
 800b4ea:	6020      	str	r0, [r4, #0]
 800b4ec:	f507 60c6 	add.w	r0, r7, #1584	; 0x630
 800b4f0:	f5a0 60bc 	sub.w	r0, r0, #1504	; 0x5e0
 800b4f4:	6001      	str	r1, [r0, #0]
 800b4f6:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800b4fa:	f2a1 51e4 	subw	r1, r1, #1508	; 0x5e4
 800b4fe:	600a      	str	r2, [r1, #0]
 800b500:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800b504:	f5a2 62bd 	sub.w	r2, r2, #1512	; 0x5e8
 800b508:	6013      	str	r3, [r2, #0]
        *dst = MIN(acc_0, activation_max);
        dst++;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 800b50a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800b50e:	3b04      	subs	r3, #4
 800b510:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
    const int16_t lhs_offset_s16 = lhs_offset;
 800b514:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800b518:	f8a7 3612 	strh.w	r3, [r7, #1554]	; 0x612
    const int16_t rhs_offset_s16 = rhs_offset;
 800b51c:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800b520:	f8a7 3610 	strh.w	r3, [r7, #1552]	; 0x610

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 800b524:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 800b528:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 800b52c:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 800b530:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 800b534:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 800b538:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 800b53c:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 800b540:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 800b544:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 800b548:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 800b54c:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 800b550:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 800b554:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 800b558:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8
 800b55c:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 800b560:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 800b564:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 800b568:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 800b56c:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 800b570:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800b574:	2300      	movs	r3, #0
 800b576:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800b57a:	f001 bd13 	b.w	800cfa4 <arm_nn_vec_mat_mult_t_s8+0x1acc>
    {
        const q7_t *lhs_ptr = &lhs[0];
 800b57e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b582:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 800b586:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b58a:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	6013      	str	r3, [r2, #0]
        const q7_t *rhs_ptr = &rhs[0];
 800b592:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b596:	f2a3 5264 	subw	r2, r3, #1380	; 0x564
 800b59a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b59e:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	6013      	str	r3, [r2, #0]

        q31_t res00 = 0;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        q31_t res01 = 0;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        if (bias)
 800b5b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5b6:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d01b      	beq.n	800b5f8 <arm_nn_vec_mat_mult_t_s8+0x120>
        {
            res00 = *bias++;
 800b5c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5c4:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800b5c8:	6819      	ldr	r1, [r3, #0]
 800b5ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5ce:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 800b5d2:	1d0b      	adds	r3, r1, #4
 800b5d4:	6013      	str	r3, [r2, #0]
 800b5d6:	680b      	ldr	r3, [r1, #0]
 800b5d8:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 = *bias++;
 800b5dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5e0:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800b5e4:	6819      	ldr	r1, [r3, #0]
 800b5e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5ea:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 800b5ee:	1d0b      	adds	r3, r1, #4
 800b5f0:	6013      	str	r3, [r2, #0]
 800b5f2:	680b      	ldr	r3, [r1, #0]
 800b5f4:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        }

        int32_t rhs_cols_idx = 0;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620

        q31_t val0, val1, val2, val3, val4, val5;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800b5fe:	f001 b9db 	b.w	800c9b8 <arm_nn_vec_mat_mult_t_s8+0x14e0>
 800b602:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b606:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 800b60a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800b60e:	6013      	str	r3, [r2, #0]
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 800b610:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b614:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	461a      	mov	r2, r3
 800b620:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b624:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800b628:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800b62a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b62e:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	1d1a      	adds	r2, r3, #4
 800b638:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b63c:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	601a      	str	r2, [r3, #0]

    return (val);
 800b644:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b648:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800b64c:	681b      	ldr	r3, [r3, #0]
        {
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800b64e:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800b652:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800b656:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b65a:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 800b65e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b662:	6013      	str	r3, [r2, #0]
 800b664:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b668:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 800b66c:	6019      	str	r1, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b66e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b672:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b67c:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	fa22 f283 	sxtab16	r2, r2, r3
 800b686:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b68a:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800b68e:	601a      	str	r2, [r3, #0]
  return(result);
 800b690:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b694:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800b69e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6a2:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 800b6a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800b6aa:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800b6ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6b0:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6c0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800b6c4:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800b6c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6ca:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	1d1a      	adds	r2, r3, #4
 800b6d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6d8:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	601a      	str	r2, [r3, #0]
    return (val);
 800b6e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6e4:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800b6e8:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800b6ea:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800b6ee:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800b6f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6f6:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800b6fa:	601a      	str	r2, [r3, #0]
 800b6fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b700:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 800b704:	2308      	movs	r3, #8
 800b706:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800b708:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b70c:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 800b710:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b714:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f003 031f 	and.w	r3, r3, #31
 800b71e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800b720:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b724:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d105      	bne.n	800b73a <arm_nn_vec_mat_mult_t_s8+0x262>
    return op1;
 800b72e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b732:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800b736:	6819      	ldr	r1, [r3, #0]
 800b738:	e00b      	b.n	800b752 <arm_nn_vec_mat_mult_t_s8+0x27a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b73a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b73e:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 800b742:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b746:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800b74a:	6812      	ldr	r2, [r2, #0]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	fa62 f103 	ror.w	r1, r2, r3
 800b752:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b756:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 800b75a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b75e:	6013      	str	r3, [r2, #0]
 800b760:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b764:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800b768:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b76a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b76e:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b778:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	fa22 f283 	sxtab16	r2, r2, r3
 800b782:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b786:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800b78a:	601a      	str	r2, [r3, #0]
  return(result);
 800b78c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b790:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800b79a:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800b79e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7a2:	f5a3 723f 	sub.w	r2, r3, #764	; 0x2fc
 800b7a6:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800b7aa:	6013      	str	r3, [r2, #0]
 800b7ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7b0:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800b7b4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b7b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7ba:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7c4:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	fa22 f283 	sxtab16	r2, r2, r3
 800b7ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7d2:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800b7d6:	601a      	str	r2, [r3, #0]
  return(result);
 800b7d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7dc:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800b7e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7ea:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800b7f4:	441a      	add	r2, r3
 800b7f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7fa:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800b7fe:	601a      	str	r2, [r3, #0]
 800b800:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b804:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	461a      	mov	r2, r3
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
{
    q31_t val;
    memcpy(&val, in_q7, 4);
 800b80e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b812:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800b816:	601a      	str	r2, [r3, #0]

    return (val);
 800b818:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b81c:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800b826:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800b82a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b82e:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b838:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 800b83c:	2308      	movs	r3, #8
 800b83e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800b840:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b844:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 800b848:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b84c:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f003 031f 	and.w	r3, r3, #31
 800b856:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800b858:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b85c:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d105      	bne.n	800b872 <arm_nn_vec_mat_mult_t_s8+0x39a>
    return op1;
 800b866:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b86a:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800b86e:	6819      	ldr	r1, [r3, #0]
 800b870:	e00b      	b.n	800b88a <arm_nn_vec_mat_mult_t_s8+0x3b2>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b872:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b876:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 800b87a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b87e:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800b882:	6812      	ldr	r2, [r2, #0]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	fa62 f103 	ror.w	r1, r2, r3
 800b88a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b88e:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 800b892:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800b896:	6013      	str	r3, [r2, #0]
 800b898:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b89c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800b8a0:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b8a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8a6:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8b0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	fa22 f283 	sxtab16	r2, r2, r3
 800b8ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8be:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800b8c2:	601a      	str	r2, [r3, #0]
  return(result);
 800b8c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8c8:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800b8d2:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800b8d6:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800b8da:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800b8de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8e2:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800b8e6:	601a      	str	r2, [r3, #0]
 800b8e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8ec:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800b8f0:	6019      	str	r1, [r3, #0]
 800b8f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8f6:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800b8fa:	6018      	str	r0, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b8fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b900:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800b904:	6819      	ldr	r1, [r3, #0]
 800b906:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b90a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b914:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	fb21 3202 	smlad	r2, r1, r2, r3
 800b91e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b922:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b926:	601a      	str	r2, [r3, #0]
  return(result);
 800b928:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b92c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800b936:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800b93a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b93e:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 800b942:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b946:	6013      	str	r3, [r2, #0]
 800b948:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b94c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800b950:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b952:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b956:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b960:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	fa22 f283 	sxtab16	r2, r2, r3
 800b96a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b96e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800b972:	601a      	str	r2, [r3, #0]
  return(result);
 800b974:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b978:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800b982:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800b986:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800b98a:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800b98e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b992:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800b996:	601a      	str	r2, [r3, #0]
 800b998:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b99c:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800b9a0:	6019      	str	r1, [r3, #0]
 800b9a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9a6:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800b9aa:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b9ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9b0:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800b9b4:	6819      	ldr	r1, [r3, #0]
 800b9b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9ba:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9c4:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	fb21 3202 	smlad	r2, r1, r2, r3
 800b9ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9d2:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800b9d6:	601a      	str	r2, [r3, #0]
  return(result);
 800b9d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9dc:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800b9e6:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800b9ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9ee:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800b9f2:	601a      	str	r2, [r3, #0]
 800b9f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9f8:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 800b9fc:	2308      	movs	r3, #8
 800b9fe:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800ba00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba04:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 800ba08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba0c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f003 031f 	and.w	r3, r3, #31
 800ba16:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800ba18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba1c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d105      	bne.n	800ba32 <arm_nn_vec_mat_mult_t_s8+0x55a>
    return op1;
 800ba26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba2a:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800ba2e:	6819      	ldr	r1, [r3, #0]
 800ba30:	e00b      	b.n	800ba4a <arm_nn_vec_mat_mult_t_s8+0x572>
  return (op1 >> op2) | (op1 << (32U - op2));
 800ba32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba36:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 800ba3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba3e:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800ba42:	6812      	ldr	r2, [r2, #0]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	fa62 f103 	ror.w	r1, r2, r3
 800ba4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba4e:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 800ba52:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800ba56:	6013      	str	r3, [r2, #0]
 800ba58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba5c:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800ba60:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ba62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba66:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba70:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	fa22 f283 	sxtab16	r2, r2, r3
 800ba7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba7e:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800ba82:	601a      	str	r2, [r3, #0]
  return(result);
 800ba84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba88:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800ba92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba96:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 800ba9a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ba9e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800baa0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800baa4:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	461a      	mov	r2, r3
 800bab0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bab4:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 800bab8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800baba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800babe:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	1d1a      	adds	r2, r3, #4
 800bac8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bacc:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	601a      	str	r2, [r3, #0]
    return (val);
 800bad4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bad8:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 800badc:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800bade:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800bae2:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800bae6:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800baea:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800baee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800baf2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800baf6:	601a      	str	r2, [r3, #0]
 800baf8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bafc:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800bb00:	6019      	str	r1, [r3, #0]
 800bb02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb06:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800bb0a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800bb0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb10:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800bb14:	6819      	ldr	r1, [r3, #0]
 800bb16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb1a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb24:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	fb21 3202 	smlad	r2, r1, r2, r3
 800bb2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb32:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800bb36:	601a      	str	r2, [r3, #0]
  return(result);
 800bb38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb3c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800bb46:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800bb4a:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800bb4e:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800bb52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb56:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800bb5a:	601a      	str	r2, [r3, #0]
 800bb5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb60:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800bb64:	6019      	str	r1, [r3, #0]
 800bb66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb6a:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800bb6e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800bb70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb74:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800bb78:	6819      	ldr	r1, [r3, #0]
 800bb7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb7e:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb88:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	fb21 3202 	smlad	r2, r1, r2, r3
 800bb92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb96:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800bb9a:	601a      	str	r2, [r3, #0]
  return(result);
 800bb9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bba0:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800bbaa:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800bbae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbb2:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 800bbb6:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800bbba:	6013      	str	r3, [r2, #0]
 800bbbc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbc0:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800bbc4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bbc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbca:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbd4:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	fa22 f283 	sxtab16	r2, r2, r3
 800bbde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbe2:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800bbe6:	601a      	str	r2, [r3, #0]
  return(result);
 800bbe8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbec:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800bbf6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbfa:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 800bbfe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800bc02:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800bc04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc08:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	461a      	mov	r2, r3
 800bc14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc18:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 800bc1c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800bc1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc22:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	1d1a      	adds	r2, r3, #4
 800bc2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc30:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	601a      	str	r2, [r3, #0]
    return (val);
 800bc38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc3c:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 800bc40:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800bc42:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800bc46:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800bc4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc4e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800bc52:	601a      	str	r2, [r3, #0]
 800bc54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc58:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 800bc5c:	2308      	movs	r3, #8
 800bc5e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800bc60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc64:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 800bc68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc6c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f003 031f 	and.w	r3, r3, #31
 800bc76:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800bc78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc7c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d105      	bne.n	800bc92 <arm_nn_vec_mat_mult_t_s8+0x7ba>
    return op1;
 800bc86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc8a:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800bc8e:	6819      	ldr	r1, [r3, #0]
 800bc90:	e00b      	b.n	800bcaa <arm_nn_vec_mat_mult_t_s8+0x7d2>
  return (op1 >> op2) | (op1 << (32U - op2));
 800bc92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc96:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 800bc9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc9e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800bca2:	6812      	ldr	r2, [r2, #0]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	fa62 f103 	ror.w	r1, r2, r3
 800bcaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bcae:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 800bcb2:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800bcb6:	6013      	str	r3, [r2, #0]
 800bcb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bcbc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800bcc0:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bcc2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bcc6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bcd0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	fa22 f283 	sxtab16	r2, r2, r3
 800bcda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bcde:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800bce2:	601a      	str	r2, [r3, #0]
  return(result);
 800bce4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bce8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800bcf2:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800bcf6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bcfa:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 800bcfe:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800bd02:	6013      	str	r3, [r2, #0]
 800bd04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd08:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800bd0c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bd0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd12:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd1c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	fa22 f283 	sxtab16	r2, r2, r3
 800bd26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd2a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800bd2e:	601a      	str	r2, [r3, #0]
  return(result);
 800bd30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd34:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800bd3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd42:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800bd4c:	441a      	add	r2, r3
 800bd4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800bd56:	601a      	str	r2, [r3, #0]
 800bd58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800bd66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd6a:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 800bd6e:	601a      	str	r2, [r3, #0]
    return (val);
 800bd70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd74:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800bd7e:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800bd82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd86:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800bd8a:	601a      	str	r2, [r3, #0]
 800bd8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd90:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800bd94:	2308      	movs	r3, #8
 800bd96:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800bd98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd9c:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800bda0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bda4:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f003 031f 	and.w	r3, r3, #31
 800bdae:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800bdb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bdb4:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d105      	bne.n	800bdca <arm_nn_vec_mat_mult_t_s8+0x8f2>
    return op1;
 800bdbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bdc2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800bdc6:	6819      	ldr	r1, [r3, #0]
 800bdc8:	e00b      	b.n	800bde2 <arm_nn_vec_mat_mult_t_s8+0x90a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800bdca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bdce:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 800bdd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bdd6:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800bdda:	6812      	ldr	r2, [r2, #0]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	fa62 f103 	ror.w	r1, r2, r3
 800bde2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bde6:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 800bdea:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800bdee:	6013      	str	r3, [r2, #0]
 800bdf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bdf4:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800bdf8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bdfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bdfe:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be08:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	fa22 f283 	sxtab16	r2, r2, r3
 800be12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be16:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800be1a:	601a      	str	r2, [r3, #0]
  return(result);
 800be1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be20:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800be2a:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800be2e:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800be32:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800be36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be3a:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800be3e:	601a      	str	r2, [r3, #0]
 800be40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be44:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800be48:	6019      	str	r1, [r3, #0]
 800be4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be4e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800be52:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800be54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be58:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800be5c:	6819      	ldr	r1, [r3, #0]
 800be5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be62:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be6c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	fb21 3202 	smlad	r2, r1, r2, r3
 800be76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be7a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800be7e:	601a      	str	r2, [r3, #0]
  return(result);
 800be80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be84:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800be8e:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800be92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be96:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 800be9a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800be9e:	6013      	str	r3, [r2, #0]
 800bea0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bea4:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800bea8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800beaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800beae:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800beb8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	fa22 f283 	sxtab16	r2, r2, r3
 800bec2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bec6:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800beca:	601a      	str	r2, [r3, #0]
  return(result);
 800becc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bed0:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800beda:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800bede:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800bee2:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800bee6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800beea:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800beee:	601a      	str	r2, [r3, #0]
 800bef0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bef4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800bef8:	6019      	str	r1, [r3, #0]
 800befa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800befe:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800bf02:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800bf04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf08:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800bf0c:	6819      	ldr	r1, [r3, #0]
 800bf0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf12:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf1c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	fb21 3202 	smlad	r2, r1, r2, r3
 800bf26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf2a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800bf2e:	601a      	str	r2, [r3, #0]
  return(result);
 800bf30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf34:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800bf3e:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800bf42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800bf4a:	601a      	str	r2, [r3, #0]
 800bf4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf50:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800bf54:	2308      	movs	r3, #8
 800bf56:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800bf58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf5c:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800bf60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf64:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 031f 	and.w	r3, r3, #31
 800bf6e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800bf70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf74:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d105      	bne.n	800bf8a <arm_nn_vec_mat_mult_t_s8+0xab2>
    return op1;
 800bf7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800bf86:	6819      	ldr	r1, [r3, #0]
 800bf88:	e00b      	b.n	800bfa2 <arm_nn_vec_mat_mult_t_s8+0xaca>
  return (op1 >> op2) | (op1 << (32U - op2));
 800bf8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf8e:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 800bf92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf96:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800bf9a:	6812      	ldr	r2, [r2, #0]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	fa62 f103 	ror.w	r1, r2, r3
 800bfa2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bfa6:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 800bfaa:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800bfae:	6013      	str	r3, [r2, #0]
 800bfb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bfb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800bfb8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bfba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bfbe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800bfc2:	681a      	ldr	r2, [r3, #0]
 800bfc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bfc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	fa22 f283 	sxtab16	r2, r2, r3
 800bfd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bfd6:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800bfda:	601a      	str	r2, [r3, #0]
  return(result);
 800bfdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bfe0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800bfea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bfee:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800bff2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800bff6:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800bff8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bffc:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	461a      	mov	r2, r3
 800c008:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c00c:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 800c010:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c012:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c016:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	1d1a      	adds	r2, r3, #4
 800c020:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c024:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	601a      	str	r2, [r3, #0]
    return (val);
 800c02c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c030:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 800c034:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800c036:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800c03a:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800c03e:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800c042:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800c046:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c04a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800c04e:	601a      	str	r2, [r3, #0]
 800c050:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c054:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800c058:	6019      	str	r1, [r3, #0]
 800c05a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c05e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c062:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c064:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c068:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800c06c:	6819      	ldr	r1, [r3, #0]
 800c06e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c072:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c07c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	fb21 3202 	smlad	r2, r1, r2, r3
 800c086:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c08a:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800c08e:	601a      	str	r2, [r3, #0]
  return(result);
 800c090:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c094:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800c09e:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800c0a2:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800c0a6:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800c0aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0ae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800c0b2:	601a      	str	r2, [r3, #0]
 800c0b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800c0bc:	6019      	str	r1, [r3, #0]
 800c0be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0c2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800c0c6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c0c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0cc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800c0d0:	6819      	ldr	r1, [r3, #0]
 800c0d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0d6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0e0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	fb21 3202 	smlad	r2, r1, r2, r3
 800c0ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c0f2:	601a      	str	r2, [r3, #0]
  return(result);
 800c0f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800c102:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800c106:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c10a:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 800c10e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c112:	6013      	str	r3, [r2, #0]
 800c114:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c118:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800c11c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c11e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c122:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800c126:	681a      	ldr	r2, [r3, #0]
 800c128:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c12c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	fa22 f283 	sxtab16	r2, r2, r3
 800c136:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c13a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800c13e:	601a      	str	r2, [r3, #0]
  return(result);
 800c140:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c144:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800c14e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c152:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800c156:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800c15a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800c15c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c160:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	461a      	mov	r2, r3
 800c16c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c170:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800c174:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c176:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c17a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	1d1a      	adds	r2, r3, #4
 800c184:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c188:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	601a      	str	r2, [r3, #0]
    return (val);
 800c190:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c194:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800c198:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800c19a:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800c19e:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800c1a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1a6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800c1aa:	601a      	str	r2, [r3, #0]
 800c1ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1b0:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 800c1b4:	2308      	movs	r3, #8
 800c1b6:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800c1b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1bc:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 800c1c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1c4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f003 031f 	and.w	r3, r3, #31
 800c1ce:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800c1d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1d4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d105      	bne.n	800c1ea <arm_nn_vec_mat_mult_t_s8+0xd12>
    return op1;
 800c1de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1e2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800c1e6:	6819      	ldr	r1, [r3, #0]
 800c1e8:	e00b      	b.n	800c202 <arm_nn_vec_mat_mult_t_s8+0xd2a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c1ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1ee:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 800c1f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1f6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800c1fa:	6812      	ldr	r2, [r2, #0]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	fa62 f103 	ror.w	r1, r2, r3
 800c202:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c206:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 800c20a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c20e:	6013      	str	r3, [r2, #0]
 800c210:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c214:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800c218:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c21a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c21e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c228:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	fa22 f283 	sxtab16	r2, r2, r3
 800c232:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c236:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800c23a:	601a      	str	r2, [r3, #0]
  return(result);
 800c23c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c240:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800c24a:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800c24e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c252:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 800c256:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800c25a:	6013      	str	r3, [r2, #0]
 800c25c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c260:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800c264:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c266:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c26a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c274:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	fa22 f283 	sxtab16	r2, r2, r3
 800c27e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c282:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800c286:	601a      	str	r2, [r3, #0]
  return(result);
 800c288:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c28c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800c296:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c29a:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800c2a4:	441a      	add	r2, r3
 800c2a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2aa:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800c2ae:	601a      	str	r2, [r3, #0]
 800c2b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2b4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800c2be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2c2:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 800c2c6:	601a      	str	r2, [r3, #0]
    return (val);
 800c2c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2cc:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800c2d6:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800c2da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2de:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800c2e2:	601a      	str	r2, [r3, #0]
 800c2e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2e8:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800c2ec:	2308      	movs	r3, #8
 800c2ee:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800c2f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2f4:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800c2f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2fc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f003 031f 	and.w	r3, r3, #31
 800c306:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800c308:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c30c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d105      	bne.n	800c322 <arm_nn_vec_mat_mult_t_s8+0xe4a>
    return op1;
 800c316:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c31a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800c31e:	6819      	ldr	r1, [r3, #0]
 800c320:	e00b      	b.n	800c33a <arm_nn_vec_mat_mult_t_s8+0xe62>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c322:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c326:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 800c32a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c32e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800c332:	6812      	ldr	r2, [r2, #0]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	fa62 f103 	ror.w	r1, r2, r3
 800c33a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c33e:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800c342:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800c346:	6013      	str	r3, [r2, #0]
 800c348:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c34c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800c350:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c352:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c356:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c360:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	fa22 f283 	sxtab16	r2, r2, r3
 800c36a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c36e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800c372:	601a      	str	r2, [r3, #0]
  return(result);
 800c374:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c378:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800c382:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800c386:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800c38a:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800c38e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c392:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800c396:	601a      	str	r2, [r3, #0]
 800c398:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c39c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800c3a0:	6019      	str	r1, [r3, #0]
 800c3a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3a6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800c3aa:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c3ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3b0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800c3b4:	6819      	ldr	r1, [r3, #0]
 800c3b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3ba:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3c4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	fb21 3202 	smlad	r2, r1, r2, r3
 800c3ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3d2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800c3d6:	601a      	str	r2, [r3, #0]
  return(result);
 800c3d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800c3e6:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800c3ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3ee:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 800c3f2:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c3f6:	6013      	str	r3, [r2, #0]
 800c3f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3fc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800c400:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c402:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c406:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c410:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	fa22 f283 	sxtab16	r2, r2, r3
 800c41a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c41e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800c422:	601a      	str	r2, [r3, #0]
  return(result);
 800c424:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c428:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800c432:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800c436:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800c43a:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800c43e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c442:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800c446:	601a      	str	r2, [r3, #0]
 800c448:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c44c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800c450:	6019      	str	r1, [r3, #0]
 800c452:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c456:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800c45a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c45c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c460:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800c464:	6819      	ldr	r1, [r3, #0]
 800c466:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c46a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c474:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	fb21 3202 	smlad	r2, r1, r2, r3
 800c47e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c482:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800c486:	601a      	str	r2, [r3, #0]
  return(result);
 800c488:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c48c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800c496:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800c49a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c49e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800c4a2:	601a      	str	r2, [r3, #0]
 800c4a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4a8:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800c4ac:	2308      	movs	r3, #8
 800c4ae:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800c4b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4b4:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800c4b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4bc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f003 031f 	and.w	r3, r3, #31
 800c4c6:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800c4c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4cc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d105      	bne.n	800c4e2 <arm_nn_vec_mat_mult_t_s8+0x100a>
    return op1;
 800c4d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4da:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800c4de:	6819      	ldr	r1, [r3, #0]
 800c4e0:	e00b      	b.n	800c4fa <arm_nn_vec_mat_mult_t_s8+0x1022>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c4e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4e6:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 800c4ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4ee:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800c4f2:	6812      	ldr	r2, [r2, #0]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	fa62 f103 	ror.w	r1, r2, r3
 800c4fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4fe:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800c502:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c506:	6013      	str	r3, [r2, #0]
 800c508:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c50c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800c510:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c512:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c516:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c520:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	fa22 f283 	sxtab16	r2, r2, r3
 800c52a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c52e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800c532:	601a      	str	r2, [r3, #0]
  return(result);
 800c534:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c538:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800c542:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c546:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 800c54a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c54e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800c550:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c554:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	461a      	mov	r2, r3
 800c560:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c564:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 800c568:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c56a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c56e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	1d1a      	adds	r2, r3, #4
 800c578:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c57c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	601a      	str	r2, [r3, #0]
    return (val);
 800c584:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c588:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 800c58c:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800c58e:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800c592:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800c596:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800c59a:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800c59e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800c5a6:	601a      	str	r2, [r3, #0]
 800c5a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5ac:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800c5b0:	6019      	str	r1, [r3, #0]
 800c5b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5b6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800c5ba:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c5bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5c0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800c5c4:	6819      	ldr	r1, [r3, #0]
 800c5c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5ca:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	fb21 3202 	smlad	r2, r1, r2, r3
 800c5de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5e2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800c5e6:	601a      	str	r2, [r3, #0]
  return(result);
 800c5e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5ec:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800c5f6:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800c5fa:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800c5fe:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800c602:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c606:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800c60a:	601a      	str	r2, [r3, #0]
 800c60c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c610:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c614:	6019      	str	r1, [r3, #0]
 800c616:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c61a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c61e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c620:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c624:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800c628:	6819      	ldr	r1, [r3, #0]
 800c62a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c62e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c632:	681a      	ldr	r2, [r3, #0]
 800c634:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c638:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	fb21 3202 	smlad	r2, r1, r2, r3
 800c642:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c646:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c64a:	601a      	str	r2, [r3, #0]
  return(result);
 800c64c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c650:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800c65a:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800c65e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c662:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800c666:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c66a:	6013      	str	r3, [r2, #0]
 800c66c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c670:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800c674:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c676:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c67a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c684:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	fa22 f283 	sxtab16	r2, r2, r3
 800c68e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c692:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800c696:	601a      	str	r2, [r3, #0]
  return(result);
 800c698:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c69c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800c6a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6aa:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800c6ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800c6b2:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800c6b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6c8:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 800c6cc:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c6ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6d2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	1d1a      	adds	r2, r3, #4
 800c6dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	601a      	str	r2, [r3, #0]
    return (val);
 800c6e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6ec:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 800c6f0:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800c6f2:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800c6f6:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800c6fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6fe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800c702:	601a      	str	r2, [r3, #0]
 800c704:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c708:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800c70c:	2308      	movs	r3, #8
 800c70e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800c710:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c714:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800c718:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c71c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f003 031f 	and.w	r3, r3, #31
 800c726:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800c728:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c72c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d105      	bne.n	800c742 <arm_nn_vec_mat_mult_t_s8+0x126a>
    return op1;
 800c736:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c73a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800c73e:	6819      	ldr	r1, [r3, #0]
 800c740:	e00b      	b.n	800c75a <arm_nn_vec_mat_mult_t_s8+0x1282>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c742:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c746:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800c74a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c74e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800c752:	6812      	ldr	r2, [r2, #0]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	fa62 f103 	ror.w	r1, r2, r3
 800c75a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c75e:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 800c762:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c766:	6013      	str	r3, [r2, #0]
 800c768:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c76c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c770:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c772:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c776:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	fa22 f283 	sxtab16	r2, r2, r3
 800c78a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c78e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800c792:	601a      	str	r2, [r3, #0]
  return(result);
 800c794:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c798:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800c7a2:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800c7a6:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800c7aa:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 800c7ae:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c7b2:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
 800c7b6:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800c7ba:	fa22 f283 	sxtab16	r2, r2, r3
 800c7be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7c2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c7c6:	601a      	str	r2, [r3, #0]
  return(result);
 800c7c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800c7d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7da:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800c7de:	681a      	ldr	r2, [r3, #0]
 800c7e0:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800c7e4:	4413      	add	r3, r2
 800c7e6:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800c7ea:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800c7f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7f6:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 800c7fa:	601a      	str	r2, [r3, #0]
    return (val);
 800c7fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c800:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800c80a:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 800c80e:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800c812:	2308      	movs	r3, #8
 800c814:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  op2 %= 32U;
 800c818:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800c81c:	f003 031f 	and.w	r3, r3, #31
 800c820:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  if (op2 == 0U)
 800c824:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d102      	bne.n	800c832 <arm_nn_vec_mat_mult_t_s8+0x135a>
    return op1;
 800c82c:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800c830:	e004      	b.n	800c83c <arm_nn_vec_mat_mult_t_s8+0x1364>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c832:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800c836:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800c83a:	41da      	rors	r2, r3
 800c83c:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800c840:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 800c844:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c848:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 800c84c:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 800c850:	fa22 f383 	sxtab16	r3, r2, r3
 800c854:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
  return(result);
 800c858:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 800c85c:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800c860:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800c864:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	; 0x5c4
 800c868:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800c86c:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 800c870:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 800c874:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c878:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 800c87c:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 800c880:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 800c884:	fb21 3302 	smlad	r3, r1, r2, r3
 800c888:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
  return(result);
 800c88c:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 800c890:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800c894:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800c898:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c89c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800c8a0:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c8a4:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 800c8a8:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 800c8ac:	fa22 f383 	sxtab16	r3, r2, r3
 800c8b0:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
  return(result);
 800c8b4:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 800c8b8:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800c8bc:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800c8c0:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800c8c4:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800c8c8:	f8c7 157c 	str.w	r1, [r7, #1404]	; 0x57c
 800c8cc:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 800c8d0:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c8d4:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 800c8d8:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 800c8dc:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800c8e0:	fb21 3302 	smlad	r3, r1, r2, r3
 800c8e4:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
  return(result);
 800c8e8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800c8ec:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800c8f0:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 800c8f4:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800c8f8:	2308      	movs	r3, #8
 800c8fa:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  op2 %= 32U;
 800c8fe:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800c902:	f003 031f 	and.w	r3, r3, #31
 800c906:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  if (op2 == 0U)
 800c90a:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d102      	bne.n	800c918 <arm_nn_vec_mat_mult_t_s8+0x1440>
    return op1;
 800c912:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 800c916:	e004      	b.n	800c922 <arm_nn_vec_mat_mult_t_s8+0x144a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c918:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 800c91c:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800c920:	41da      	rors	r2, r3
 800c922:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c926:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 800c92a:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c92e:	f8d7 2590 	ldr.w	r2, [r7, #1424]	; 0x590
 800c932:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 800c936:	fa22 f383 	sxtab16	r3, r2, r3
 800c93a:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
  return(result);
 800c93e:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 800c942:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            res01 = __SMLAD(val3, val5, res01);
 800c946:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800c94a:	f8d7 25b4 	ldr.w	r2, [r7, #1460]	; 0x5b4
 800c94e:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800c952:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 800c956:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
 800c95a:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c95e:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 800c962:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 800c966:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 800c96a:	fb21 3302 	smlad	r3, r1, r2, r3
 800c96e:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
  return(result);
 800c972:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 800c976:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800c97a:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800c97e:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800c982:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800c986:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 800c98a:	f8c7 25ac 	str.w	r2, [r7, #1452]	; 0x5ac
 800c98e:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c992:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800c996:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 800c99a:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 800c99e:	fb21 3302 	smlad	r3, r1, r2, r3
 800c9a2:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
  return(result);
 800c9a6:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800c9aa:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800c9ae:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800c9b2:	3310      	adds	r3, #16
 800c9b4:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 800c9b8:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800c9bc:	f1a3 020f 	sub.w	r2, r3, #15
 800c9c0:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	f6fe ae1c 	blt.w	800b602 <arm_nn_vec_mat_mult_t_s8+0x12a>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800c9ca:	e05a      	b.n	800ca82 <arm_nn_vec_mat_mult_t_s8+0x15aa>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800c9cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9d0:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f993 3000 	ldrsb.w	r3, [r3]
 800c9da:	461a      	mov	r2, r3
 800c9dc:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800c9e0:	4413      	add	r3, r2
 800c9e2:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800c9e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9ea:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800c9f4:	4413      	add	r3, r2
 800c9f6:	f993 3000 	ldrsb.w	r3, [r3]
 800c9fa:	461a      	mov	r2, r3
 800c9fc:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800ca00:	4413      	add	r3, r2
 800ca02:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800ca06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca0a:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f993 3000 	ldrsb.w	r3, [r3]
 800ca14:	461a      	mov	r2, r3
 800ca16:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800ca1a:	4413      	add	r3, r2
 800ca1c:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc

            res00 += lhs_value * rhs_value0;
 800ca20:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800ca24:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 800ca28:	fb03 f202 	mul.w	r2, r3, r2
 800ca2c:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800ca30:	4413      	add	r3, r2
 800ca32:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 += lhs_value * rhs_value1;
 800ca36:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800ca3a:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800ca3e:	fb03 f202 	mul.w	r2, r3, r2
 800ca42:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800ca46:	4413      	add	r3, r2
 800ca48:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            ++rhs_ptr;
 800ca4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca50:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	1c5a      	adds	r2, r3, #1
 800ca58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca5c:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800ca60:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 800ca62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca66:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	1c5a      	adds	r2, r3, #1
 800ca6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca72:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800ca76:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ca78:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 800ca82:	f8d7 2620 	ldr.w	r2, [r7, #1568]	; 0x620
 800ca86:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	db9e      	blt.n	800c9cc <arm_nn_vec_mat_mult_t_s8+0x14f4>
 800ca8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca92:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800ca96:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800ca9a:	6013      	str	r3, [r2, #0]
 800ca9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800caa0:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 800caa4:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800caa8:	6013      	str	r3, [r2, #0]
 800caaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800caae:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 800cab2:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800cab6:	6013      	str	r3, [r2, #0]
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800cab8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cabc:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800cac6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800caca:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	fa03 f202 	lsl.w	r2, r3, r2
 800cad4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cad8:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800cadc:	601a      	str	r2, [r3, #0]
 800cade:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cae2:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 800cae6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800caea:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800caf2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800caf6:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 800cafa:	2300      	movs	r3, #0
 800cafc:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800cafe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800cb02:	461a      	mov	r2, r3
 800cb04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb08:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800cb0a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800cb0e:	461a      	mov	r2, r3
 800cb10:	2300      	movs	r3, #0
 800cb12:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800cb14:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800cb18:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cb1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb20:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	17da      	asrs	r2, r3, #31
 800cb28:	633b      	str	r3, [r7, #48]	; 0x30
 800cb2a:	637a      	str	r2, [r7, #52]	; 0x34
 800cb2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb30:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	17da      	asrs	r2, r3, #31
 800cb38:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb40:	fb02 f203 	mul.w	r2, r2, r3
 800cb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb46:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800cb48:	fb04 f303 	mul.w	r3, r4, r3
 800cb4c:	4413      	add	r3, r2
 800cb4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb50:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800cb52:	fba2 5604 	umull	r5, r6, r2, r4
 800cb56:	4433      	add	r3, r6
 800cb58:	461e      	mov	r6, r3
 800cb5a:	1943      	adds	r3, r0, r5
 800cb5c:	61bb      	str	r3, [r7, #24]
 800cb5e:	eb41 0306 	adc.w	r3, r1, r6
 800cb62:	61fb      	str	r3, [r7, #28]
 800cb64:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800cb68:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cb6c:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 800cb70:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800cb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb78:	f04f 0000 	mov.w	r0, #0
 800cb7c:	f04f 0100 	mov.w	r1, #0
 800cb80:	0fd0      	lsrs	r0, r2, #31
 800cb82:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800cb86:	17d9      	asrs	r1, r3, #31
 800cb88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb8c:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 800cb90:	4603      	mov	r3, r0
 800cb92:	6013      	str	r3, [r2, #0]
    return result;
 800cb94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb98:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 800cb9c:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800cb9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cba2:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	dc06      	bgt.n	800cbba <arm_nn_vec_mat_mult_t_s8+0x16e2>
 800cbac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbb0:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	425a      	negs	r2, r3
 800cbb8:	e000      	b.n	800cbbc <arm_nn_vec_mat_mult_t_s8+0x16e4>
 800cbba:	2200      	movs	r2, #0
 800cbbc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbc0:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 800cbc4:	6019      	str	r1, [r3, #0]
 800cbc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbca:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800cbce:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800cbd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbd4:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 800cbd8:	2300      	movs	r3, #0
 800cbda:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800cbdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbe0:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	fa02 f103 	lsl.w	r1, r2, r3
 800cbec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbf0:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 800cbf4:	1e4b      	subs	r3, r1, #1
 800cbf6:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800cbf8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbfc:	f5a3 7162 	sub.w	r1, r3, #904	; 0x388
 800cc00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc04:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 800cc08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc0c:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800cc10:	6812      	ldr	r2, [r2, #0]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4013      	ands	r3, r2
 800cc16:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800cc18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc1c:	f5a3 7160 	sub.w	r1, r3, #896	; 0x380
 800cc20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc24:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 800cc28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc2c:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800cc30:	6812      	ldr	r2, [r2, #0]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	fa42 f303 	asr.w	r3, r2, r3
 800cc38:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800cc3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc3e:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 800cc42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc46:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	105b      	asrs	r3, r3, #1
 800cc4e:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800cc50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc54:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	da0a      	bge.n	800cc74 <arm_nn_vec_mat_mult_t_s8+0x179c>
        threshold++;
 800cc5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc62:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 800cc66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc6a:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	3301      	adds	r3, #1
 800cc72:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800cc74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc78:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 800cc7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc80:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 800cc84:	6812      	ldr	r2, [r2, #0]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	dd0a      	ble.n	800cca2 <arm_nn_vec_mat_mult_t_s8+0x17ca>
        result++;
 800cc8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc90:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 800cc94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc98:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	3301      	adds	r3, #1
 800cca0:	6013      	str	r3, [r2, #0]
    return result;
 800cca2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cca6:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800ccaa:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800ccac:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 800ccae:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 800ccb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccb6:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 800ccba:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800ccbe:	6013      	str	r3, [r2, #0]
 800ccc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccc4:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 800ccc8:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800cccc:	6013      	str	r3, [r2, #0]
 800ccce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccd2:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 800ccd6:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800ccda:	6013      	str	r3, [r2, #0]
 800ccdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cce0:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800ccea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccee:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	fa03 f202 	lsl.w	r2, r3, r2
 800ccf8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccfc:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800cd00:	601a      	str	r2, [r3, #0]
 800cd02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd06:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 800cd0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd0e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800cd16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd1a:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800cd1e:	2300      	movs	r3, #0
 800cd20:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800cd22:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800cd26:	461a      	mov	r2, r3
 800cd28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cd2c:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 800cd30:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800cd34:	461a      	mov	r2, r3
 800cd36:	2300      	movs	r3, #0
 800cd38:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800cd3c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800cd40:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cd44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd48:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	17da      	asrs	r2, r3, #31
 800cd50:	643b      	str	r3, [r7, #64]	; 0x40
 800cd52:	647a      	str	r2, [r7, #68]	; 0x44
 800cd54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd58:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	17da      	asrs	r2, r3, #31
 800cd60:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd62:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cd64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd68:	fb02 f203 	mul.w	r2, r2, r3
 800cd6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd6e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800cd70:	fb04 f303 	mul.w	r3, r4, r3
 800cd74:	4413      	add	r3, r2
 800cd76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cd78:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800cd7a:	fba2 ab04 	umull	sl, fp, r2, r4
 800cd7e:	445b      	add	r3, fp
 800cd80:	469b      	mov	fp, r3
 800cd82:	eb10 030a 	adds.w	r3, r0, sl
 800cd86:	623b      	str	r3, [r7, #32]
 800cd88:	eb41 030b 	adc.w	r3, r1, fp
 800cd8c:	627b      	str	r3, [r7, #36]	; 0x24
 800cd8e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800cd92:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cd96:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 800cd9a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800cd9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cda2:	f04f 0000 	mov.w	r0, #0
 800cda6:	f04f 0100 	mov.w	r1, #0
 800cdaa:	0fd0      	lsrs	r0, r2, #31
 800cdac:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800cdb0:	17d9      	asrs	r1, r3, #31
 800cdb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdb6:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800cdba:	4603      	mov	r3, r0
 800cdbc:	6013      	str	r3, [r2, #0]
    return result;
 800cdbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdc2:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 800cdc6:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800cdc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdcc:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	dc06      	bgt.n	800cde4 <arm_nn_vec_mat_mult_t_s8+0x190c>
 800cdd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdda:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	425a      	negs	r2, r3
 800cde2:	e000      	b.n	800cde6 <arm_nn_vec_mat_mult_t_s8+0x190e>
 800cde4:	2200      	movs	r2, #0
 800cde6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdea:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 800cdee:	6019      	str	r1, [r3, #0]
 800cdf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdf4:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800cdf8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800cdfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdfe:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 800ce02:	2300      	movs	r3, #0
 800ce04:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800ce06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce0a:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800ce0e:	2201      	movs	r2, #1
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	fa02 f103 	lsl.w	r1, r2, r3
 800ce16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce1a:	f5a3 7255 	sub.w	r2, r3, #852	; 0x354
 800ce1e:	1e4b      	subs	r3, r1, #1
 800ce20:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800ce22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce26:	f5a3 7156 	sub.w	r1, r3, #856	; 0x358
 800ce2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce2e:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 800ce32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce36:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800ce3a:	6812      	ldr	r2, [r2, #0]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4013      	ands	r3, r2
 800ce40:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800ce42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce46:	f5a3 7154 	sub.w	r1, r3, #848	; 0x350
 800ce4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce4e:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 800ce52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce56:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800ce5a:	6812      	ldr	r2, [r2, #0]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	fa42 f303 	asr.w	r3, r2, r3
 800ce62:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800ce64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce68:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 800ce6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce70:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	105b      	asrs	r3, r3, #1
 800ce78:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800ce7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce7e:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	da0a      	bge.n	800ce9e <arm_nn_vec_mat_mult_t_s8+0x19c6>
        threshold++;
 800ce88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce8c:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 800ce90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce94:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800ce9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cea2:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 800cea6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ceaa:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800ceae:	6812      	ldr	r2, [r2, #0]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	dd0a      	ble.n	800cecc <arm_nn_vec_mat_mult_t_s8+0x19f4>
        result++;
 800ceb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ceba:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 800cebe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cec2:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	3301      	adds	r3, #1
 800ceca:	6013      	str	r3, [r2, #0]
    return result;
 800cecc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ced0:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800ced4:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800ced6:	bf00      	nop
        res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 800ced8:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Add offset
        res00 += dst_offset;
 800cedc:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800cee0:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800cee4:	4413      	add	r3, r2
 800cee6:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 += dst_offset;
 800ceea:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800ceee:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800cef2:	4413      	add	r3, r2
 800cef4:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Clamp the result
        res00 = MAX(res00, activation_min);
 800cef8:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800cefc:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800cf00:	4293      	cmp	r3, r2
 800cf02:	bfb8      	it	lt
 800cf04:	4613      	movlt	r3, r2
 800cf06:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res00 = MIN(res00, activation_max);
 800cf0a:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800cf0e:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800cf12:	4293      	cmp	r3, r2
 800cf14:	bfa8      	it	ge
 800cf16:	4613      	movge	r3, r2
 800cf18:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 = MAX(res01, activation_min);
 800cf1c:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800cf20:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800cf24:	4293      	cmp	r3, r2
 800cf26:	bfb8      	it	lt
 800cf28:	4613      	movlt	r3, r2
 800cf2a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        res01 = MIN(res01, activation_max);
 800cf2e:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800cf32:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800cf36:	4293      	cmp	r3, r2
 800cf38:	bfa8      	it	ge
 800cf3a:	4613      	movge	r3, r2
 800cf3c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        *dst++ = (q7_t)res00;
 800cf40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf44:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800cf48:	6819      	ldr	r1, [r3, #0]
 800cf4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf4e:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 800cf52:	1c4b      	adds	r3, r1, #1
 800cf54:	6013      	str	r3, [r2, #0]
 800cf56:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800cf5a:	b25b      	sxtb	r3, r3
 800cf5c:	700b      	strb	r3, [r1, #0]
        *dst++ = (q7_t)res01;
 800cf5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf62:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800cf66:	6819      	ldr	r1, [r3, #0]
 800cf68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf6c:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 800cf70:	1c4b      	adds	r3, r1, #1
 800cf72:	6013      	str	r3, [r2, #0]
 800cf74:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800cf78:	b25b      	sxtb	r3, r3
 800cf7a:	700b      	strb	r3, [r1, #0]

        rhs += 2 * rhs_cols;
 800cf7c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800cf80:	005b      	lsls	r3, r3, #1
 800cf82:	4619      	mov	r1, r3
 800cf84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf88:	f5a3 62bc 	sub.w	r2, r3, #1504	; 0x5e0
 800cf8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf90:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	440b      	add	r3, r1
 800cf98:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800cf9a:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800cf9e:	3302      	adds	r3, #2
 800cfa0:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800cfa4:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 800cfa8:	1e5a      	subs	r2, r3, #1
 800cfaa:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	f6fe aae5 	blt.w	800b57e <arm_nn_vec_mat_mult_t_s8+0xa6>
    }

    if (rhs_rows % 2)
 800cfb4:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 800cfb8:	f003 0301 	and.w	r3, r3, #1
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	f001 806e 	beq.w	800e09e <arm_nn_vec_mat_mult_t_s8+0x2bc6>
    {
        const q7_t *lhs_ptr = &lhs[0];
 800cfc2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfc6:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800cfca:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cfce:	f2a2 52dc 	subw	r2, r2, #1500	; 0x5dc
 800cfd2:	6812      	ldr	r2, [r2, #0]
 800cfd4:	601a      	str	r2, [r3, #0]
        const q7_t *rhs_ptr = &rhs[0];
 800cfd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfda:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800cfde:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cfe2:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 800cfe6:	6812      	ldr	r2, [r2, #0]
 800cfe8:	601a      	str	r2, [r3, #0]

        q31_t res00 = 0;
 800cfea:	2300      	movs	r3, #0
 800cfec:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        if (bias)
 800cff0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cff4:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d00d      	beq.n	800d01a <arm_nn_vec_mat_mult_t_s8+0x1b42>
        {
            res00 = *bias++;
 800cffe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d002:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d00c:	f2a2 52e4 	subw	r2, r2, #1508	; 0x5e4
 800d010:	1d19      	adds	r1, r3, #4
 800d012:	6011      	str	r1, [r2, #0]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        }

        int32_t rhs_cols_idx = 0;
 800d01a:	2300      	movs	r3, #0
 800d01c:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800d020:	f000 beb5 	b.w	800dd8e <arm_nn_vec_mat_mult_t_s8+0x28b6>
 800d024:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d028:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800d02c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800d030:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800d032:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d036:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	461a      	mov	r2, r3
 800d042:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d046:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 800d04a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800d04c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d050:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	1d1a      	adds	r2, r3, #4
 800d05a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d05e:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	601a      	str	r2, [r3, #0]
    return (val);
 800d066:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d06a:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 800d06e:	681b      	ldr	r3, [r3, #0]
        {
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800d070:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800d074:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800d078:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d07c:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800d080:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800d084:	6019      	str	r1, [r3, #0]
 800d086:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d08a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800d08e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d090:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d094:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d09e:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 800d0a2:	6812      	ldr	r2, [r2, #0]
 800d0a4:	fa23 f282 	sxtab16	r2, r3, r2
 800d0a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0ac:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800d0b0:	601a      	str	r2, [r3, #0]
  return(result);
 800d0b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0b6:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800d0c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0c4:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800d0c8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800d0cc:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800d0ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0d2:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	461a      	mov	r2, r3
 800d0de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0e2:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800d0e6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800d0e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0ec:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	1d1a      	adds	r2, r3, #4
 800d0f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0fa:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	601a      	str	r2, [r3, #0]
    return (val);
 800d102:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d106:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800d10a:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800d10c:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800d110:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800d114:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d118:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800d11c:	601a      	str	r2, [r3, #0]
 800d11e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d122:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800d126:	2208      	movs	r2, #8
 800d128:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800d12a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d12e:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800d132:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d136:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 800d13a:	6812      	ldr	r2, [r2, #0]
 800d13c:	f002 021f 	and.w	r2, r2, #31
 800d140:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800d142:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d146:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d105      	bne.n	800d15c <arm_nn_vec_mat_mult_t_s8+0x1c84>
    return op1;
 800d150:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d154:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	e00b      	b.n	800d174 <arm_nn_vec_mat_mult_t_s8+0x1c9c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d15c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d160:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 800d164:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d168:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800d16c:	6812      	ldr	r2, [r2, #0]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	fa62 f303 	ror.w	r3, r2, r3
 800d174:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d178:	f5a2 62a1 	sub.w	r2, r2, #1288	; 0x508
 800d17c:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800d180:	6011      	str	r1, [r2, #0]
 800d182:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d186:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 800d18a:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d18c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d190:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d19a:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 800d19e:	6812      	ldr	r2, [r2, #0]
 800d1a0:	fa23 f282 	sxtab16	r2, r3, r2
 800d1a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1a8:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 800d1ac:	601a      	str	r2, [r3, #0]
  return(result);
 800d1ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1b2:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800d1bc:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800d1c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1c4:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800d1c8:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800d1cc:	6019      	str	r1, [r3, #0]
 800d1ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1d2:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 800d1d6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d1d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1dc:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d1e6:	f5a2 62a0 	sub.w	r2, r2, #1280	; 0x500
 800d1ea:	6812      	ldr	r2, [r2, #0]
 800d1ec:	fa23 f282 	sxtab16	r2, r3, r2
 800d1f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1f4:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 800d1f8:	601a      	str	r2, [r3, #0]
  return(result);
 800d1fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1fe:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800d208:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800d20c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d210:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800d214:	601a      	str	r2, [r3, #0]
 800d216:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d21a:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800d21e:	2208      	movs	r2, #8
 800d220:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800d222:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d226:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800d22a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d22e:	f5a2 629f 	sub.w	r2, r2, #1272	; 0x4f8
 800d232:	6812      	ldr	r2, [r2, #0]
 800d234:	f002 021f 	and.w	r2, r2, #31
 800d238:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800d23a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d23e:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d105      	bne.n	800d254 <arm_nn_vec_mat_mult_t_s8+0x1d7c>
    return op1;
 800d248:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d24c:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	e00b      	b.n	800d26c <arm_nn_vec_mat_mult_t_s8+0x1d94>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d254:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d258:	f2a3 42f4 	subw	r2, r3, #1268	; 0x4f4
 800d25c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d260:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800d264:	6812      	ldr	r2, [r2, #0]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	fa62 f303 	ror.w	r3, r2, r3
 800d26c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d270:	f5a2 629d 	sub.w	r2, r2, #1256	; 0x4e8
 800d274:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800d278:	6011      	str	r1, [r2, #0]
 800d27a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d27e:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 800d282:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d284:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d288:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d292:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 800d296:	6812      	ldr	r2, [r2, #0]
 800d298:	fa23 f282 	sxtab16	r2, r3, r2
 800d29c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2a0:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800d2a4:	601a      	str	r2, [r3, #0]
  return(result);
 800d2a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2aa:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800d2b4:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800d2b8:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800d2bc:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800d2c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2c4:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800d2c8:	6018      	str	r0, [r3, #0]
 800d2ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2ce:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 800d2d2:	6019      	str	r1, [r3, #0]
 800d2d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2d8:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800d2dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d2de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2e2:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d2ec:	f2a2 42dc 	subw	r2, r2, #1244	; 0x4dc
 800d2f0:	6812      	ldr	r2, [r2, #0]
 800d2f2:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800d2f6:	f5a1 619c 	sub.w	r1, r1, #1248	; 0x4e0
 800d2fa:	6809      	ldr	r1, [r1, #0]
 800d2fc:	fb23 1202 	smlad	r2, r3, r2, r1
 800d300:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d304:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 800d308:	601a      	str	r2, [r3, #0]
  return(result);
 800d30a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d30e:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800d318:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800d31c:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800d320:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800d324:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d328:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800d32c:	6018      	str	r0, [r3, #0]
 800d32e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d332:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 800d336:	6019      	str	r1, [r3, #0]
 800d338:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d33c:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 800d340:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d342:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d346:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d350:	f2a2 42cc 	subw	r2, r2, #1228	; 0x4cc
 800d354:	6812      	ldr	r2, [r2, #0]
 800d356:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800d35a:	f5a1 619a 	sub.w	r1, r1, #1232	; 0x4d0
 800d35e:	6809      	ldr	r1, [r1, #0]
 800d360:	fb23 1202 	smlad	r2, r3, r2, r1
 800d364:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d368:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800d36c:	601a      	str	r2, [r3, #0]
  return(result);
 800d36e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d372:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800d37c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d380:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800d384:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800d388:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800d38a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d38e:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	461a      	mov	r2, r3
 800d39a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d39e:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 800d3a2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800d3a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3a8:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	1d1a      	adds	r2, r3, #4
 800d3b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3b6:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	601a      	str	r2, [r3, #0]
    return (val);
 800d3be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3c2:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 800d3c6:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800d3c8:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800d3cc:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800d3d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3d4:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800d3d8:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800d3dc:	6019      	str	r1, [r3, #0]
 800d3de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3e2:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 800d3e6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d3e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3ec:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d3f6:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 800d3fa:	6812      	ldr	r2, [r2, #0]
 800d3fc:	fa23 f282 	sxtab16	r2, r3, r2
 800d400:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d404:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800d408:	601a      	str	r2, [r3, #0]
  return(result);
 800d40a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d40e:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800d418:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d41c:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800d420:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800d424:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800d426:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d42a:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	461a      	mov	r2, r3
 800d436:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d43a:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800d43e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800d440:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d444:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	1d1a      	adds	r2, r3, #4
 800d44e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d452:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	601a      	str	r2, [r3, #0]
    return (val);
 800d45a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d45e:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800d462:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800d464:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800d468:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800d46c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d470:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800d474:	601a      	str	r2, [r3, #0]
 800d476:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d47a:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800d47e:	2208      	movs	r2, #8
 800d480:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800d482:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d486:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800d48a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d48e:	f5a2 6296 	sub.w	r2, r2, #1200	; 0x4b0
 800d492:	6812      	ldr	r2, [r2, #0]
 800d494:	f002 021f 	and.w	r2, r2, #31
 800d498:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800d49a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d49e:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d105      	bne.n	800d4b4 <arm_nn_vec_mat_mult_t_s8+0x1fdc>
    return op1;
 800d4a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4ac:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	e00b      	b.n	800d4cc <arm_nn_vec_mat_mult_t_s8+0x1ff4>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d4b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4b8:	f2a3 42ac 	subw	r2, r3, #1196	; 0x4ac
 800d4bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4c0:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800d4c4:	6812      	ldr	r2, [r2, #0]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	fa62 f303 	ror.w	r3, r2, r3
 800d4cc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d4d0:	f5a2 6294 	sub.w	r2, r2, #1184	; 0x4a0
 800d4d4:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800d4d8:	6011      	str	r1, [r2, #0]
 800d4da:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d4de:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 800d4e2:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d4e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4e8:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d4f2:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 800d4f6:	6812      	ldr	r2, [r2, #0]
 800d4f8:	fa23 f282 	sxtab16	r2, r3, r2
 800d4fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d500:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 800d504:	601a      	str	r2, [r3, #0]
  return(result);
 800d506:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d50a:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800d514:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800d518:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d51c:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800d520:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800d524:	6019      	str	r1, [r3, #0]
 800d526:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d52a:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 800d52e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d530:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d534:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d53e:	f5a2 6293 	sub.w	r2, r2, #1176	; 0x498
 800d542:	6812      	ldr	r2, [r2, #0]
 800d544:	fa23 f282 	sxtab16	r2, r3, r2
 800d548:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d54c:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800d550:	601a      	str	r2, [r3, #0]
  return(result);
 800d552:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d556:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800d560:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800d564:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d568:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800d56c:	601a      	str	r2, [r3, #0]
 800d56e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d572:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800d576:	2208      	movs	r2, #8
 800d578:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800d57a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d57e:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800d582:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d586:	f5a2 6292 	sub.w	r2, r2, #1168	; 0x490
 800d58a:	6812      	ldr	r2, [r2, #0]
 800d58c:	f002 021f 	and.w	r2, r2, #31
 800d590:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800d592:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d596:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d105      	bne.n	800d5ac <arm_nn_vec_mat_mult_t_s8+0x20d4>
    return op1;
 800d5a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5a4:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	e00b      	b.n	800d5c4 <arm_nn_vec_mat_mult_t_s8+0x20ec>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d5ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5b0:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 800d5b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5b8:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800d5bc:	6812      	ldr	r2, [r2, #0]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	fa62 f303 	ror.w	r3, r2, r3
 800d5c4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d5c8:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 800d5cc:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800d5d0:	6011      	str	r1, [r2, #0]
 800d5d2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d5d6:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 800d5da:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d5dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5e0:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d5ea:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 800d5ee:	6812      	ldr	r2, [r2, #0]
 800d5f0:	fa23 f282 	sxtab16	r2, r3, r2
 800d5f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5f8:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800d5fc:	601a      	str	r2, [r3, #0]
  return(result);
 800d5fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d602:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800d60c:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800d610:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800d614:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800d618:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d61c:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800d620:	6018      	str	r0, [r3, #0]
 800d622:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d626:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800d62a:	6019      	str	r1, [r3, #0]
 800d62c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d630:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800d634:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d636:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d63a:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d644:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 800d648:	6812      	ldr	r2, [r2, #0]
 800d64a:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800d64e:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 800d652:	6809      	ldr	r1, [r1, #0]
 800d654:	fb23 1202 	smlad	r2, r3, r2, r1
 800d658:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d65c:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800d660:	601a      	str	r2, [r3, #0]
  return(result);
 800d662:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d666:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800d670:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800d674:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800d678:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800d67c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d680:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 800d684:	6018      	str	r0, [r3, #0]
 800d686:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d68a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800d68e:	6019      	str	r1, [r3, #0]
 800d690:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d694:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 800d698:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d69a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d69e:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d6a8:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 800d6ac:	6812      	ldr	r2, [r2, #0]
 800d6ae:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800d6b2:	f5a1 618d 	sub.w	r1, r1, #1128	; 0x468
 800d6b6:	6809      	ldr	r1, [r1, #0]
 800d6b8:	fb23 1202 	smlad	r2, r3, r2, r1
 800d6bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6c0:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800d6c4:	601a      	str	r2, [r3, #0]
  return(result);
 800d6c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6ca:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800d6d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6d8:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800d6dc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800d6e0:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800d6e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6e6:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6f6:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 800d6fa:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800d6fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d700:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	1d1a      	adds	r2, r3, #4
 800d70a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d70e:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	601a      	str	r2, [r3, #0]
    return (val);
 800d716:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d71a:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 800d71e:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800d720:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800d724:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800d728:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d72c:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800d730:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800d734:	6019      	str	r1, [r3, #0]
 800d736:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d73a:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 800d73e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d740:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d744:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d74e:	f2a2 4254 	subw	r2, r2, #1108	; 0x454
 800d752:	6812      	ldr	r2, [r2, #0]
 800d754:	fa23 f282 	sxtab16	r2, r3, r2
 800d758:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d75c:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 800d760:	601a      	str	r2, [r3, #0]
  return(result);
 800d762:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d766:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800d770:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d774:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d778:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800d77c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800d77e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d782:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	461a      	mov	r2, r3
 800d78e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d792:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800d796:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800d798:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d79c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	1d1a      	adds	r2, r3, #4
 800d7a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7aa:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	601a      	str	r2, [r3, #0]
    return (val);
 800d7b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7b6:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800d7ba:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800d7bc:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800d7c0:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800d7c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7c8:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800d7cc:	601a      	str	r2, [r3, #0]
 800d7ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7d2:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800d7d6:	2208      	movs	r2, #8
 800d7d8:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800d7da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7de:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800d7e2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d7e6:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800d7ea:	6812      	ldr	r2, [r2, #0]
 800d7ec:	f002 021f 	and.w	r2, r2, #31
 800d7f0:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800d7f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7f6:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d105      	bne.n	800d80c <arm_nn_vec_mat_mult_t_s8+0x2334>
    return op1;
 800d800:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d804:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	e00b      	b.n	800d824 <arm_nn_vec_mat_mult_t_s8+0x234c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d80c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d810:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 800d814:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d818:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800d81c:	6812      	ldr	r2, [r2, #0]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	fa62 f303 	ror.w	r3, r2, r3
 800d824:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d828:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 800d82c:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800d830:	6011      	str	r1, [r2, #0]
 800d832:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d836:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 800d83a:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d83c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d840:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d84a:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 800d84e:	6812      	ldr	r2, [r2, #0]
 800d850:	fa23 f282 	sxtab16	r2, r3, r2
 800d854:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d858:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800d85c:	601a      	str	r2, [r3, #0]
  return(result);
 800d85e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d862:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800d86c:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800d870:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d874:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800d878:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800d87c:	6019      	str	r1, [r3, #0]
 800d87e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d882:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 800d886:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d888:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d88c:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d896:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 800d89a:	6812      	ldr	r2, [r2, #0]
 800d89c:	fa23 f282 	sxtab16	r2, r3, r2
 800d8a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8a4:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800d8a8:	601a      	str	r2, [r3, #0]
  return(result);
 800d8aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8ae:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800d8b8:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800d8bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8c0:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d8c4:	601a      	str	r2, [r3, #0]
 800d8c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8ca:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800d8ce:	2208      	movs	r2, #8
 800d8d0:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800d8d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8d6:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800d8da:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d8de:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
 800d8e2:	6812      	ldr	r2, [r2, #0]
 800d8e4:	f002 021f 	and.w	r2, r2, #31
 800d8e8:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800d8ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8ee:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d105      	bne.n	800d904 <arm_nn_vec_mat_mult_t_s8+0x242c>
    return op1;
 800d8f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8fc:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	e00b      	b.n	800d91c <arm_nn_vec_mat_mult_t_s8+0x2444>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d904:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d908:	f2a3 4224 	subw	r2, r3, #1060	; 0x424
 800d90c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d910:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800d914:	6812      	ldr	r2, [r2, #0]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	fa62 f303 	ror.w	r3, r2, r3
 800d91c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d920:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 800d924:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800d928:	6011      	str	r1, [r2, #0]
 800d92a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d92e:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 800d932:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d934:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d938:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d942:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 800d946:	6812      	ldr	r2, [r2, #0]
 800d948:	fa23 f282 	sxtab16	r2, r3, r2
 800d94c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d950:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800d954:	601a      	str	r2, [r3, #0]
  return(result);
 800d956:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d95a:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800d964:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800d968:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800d96c:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800d970:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d974:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800d978:	6018      	str	r0, [r3, #0]
 800d97a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d97e:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800d982:	6019      	str	r1, [r3, #0]
 800d984:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d988:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800d98c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d98e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d992:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d99c:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 800d9a0:	6812      	ldr	r2, [r2, #0]
 800d9a2:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800d9a6:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
 800d9aa:	6809      	ldr	r1, [r1, #0]
 800d9ac:	fb23 1202 	smlad	r2, r3, r2, r1
 800d9b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9b4:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800d9b8:	601a      	str	r2, [r3, #0]
  return(result);
 800d9ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9be:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800d9c8:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800d9cc:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800d9d0:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800d9d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9d8:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800d9dc:	6018      	str	r0, [r3, #0]
 800d9de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9e2:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800d9e6:	6019      	str	r1, [r3, #0]
 800d9e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9ec:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800d9f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d9f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9f6:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800da00:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 800da04:	6812      	ldr	r2, [r2, #0]
 800da06:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800da0a:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 800da0e:	6809      	ldr	r1, [r1, #0]
 800da10:	fb23 1202 	smlad	r2, r3, r2, r1
 800da14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da18:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800da1c:	601a      	str	r2, [r3, #0]
  return(result);
 800da1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da22:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800da2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da30:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800da34:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800da38:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800da3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da3e:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	461a      	mov	r2, r3
 800da4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da4e:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 800da52:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800da54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da58:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	1d1a      	adds	r2, r3, #4
 800da62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da66:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	601a      	str	r2, [r3, #0]
    return (val);
 800da6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da72:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 800da76:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800da78:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800da7c:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800da80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da84:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800da88:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800da8c:	6019      	str	r1, [r3, #0]
 800da8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da92:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800da96:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800da98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da9c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800daa6:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 800daaa:	6812      	ldr	r2, [r2, #0]
 800daac:	fa23 f282 	sxtab16	r2, r3, r2
 800dab0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dab4:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800dab8:	601a      	str	r2, [r3, #0]
  return(result);
 800daba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dabe:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800dac8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dacc:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800dad0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800dad4:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800dad6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dada:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	461a      	mov	r2, r3
 800dae6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800daea:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 800daee:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800daf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800daf4:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	1d1a      	adds	r2, r3, #4
 800dafe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db02:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	601a      	str	r2, [r3, #0]
    return (val);
 800db0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db0e:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 800db12:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800db14:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800db18:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800db1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db20:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800db24:	601a      	str	r2, [r3, #0]
 800db26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db2a:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800db2e:	2208      	movs	r2, #8
 800db30:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800db32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db36:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800db3a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800db3e:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
 800db42:	6812      	ldr	r2, [r2, #0]
 800db44:	f002 021f 	and.w	r2, r2, #31
 800db48:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800db4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db4e:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d105      	bne.n	800db64 <arm_nn_vec_mat_mult_t_s8+0x268c>
    return op1;
 800db58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db5c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	e00b      	b.n	800db7c <arm_nn_vec_mat_mult_t_s8+0x26a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 800db64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db68:	f5a3 7277 	sub.w	r2, r3, #988	; 0x3dc
 800db6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db70:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800db74:	6812      	ldr	r2, [r2, #0]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	fa62 f303 	ror.w	r3, r2, r3
 800db7c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800db80:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 800db84:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800db88:	6011      	str	r1, [r2, #0]
 800db8a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800db8e:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 800db92:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800db94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db98:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dba2:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 800dba6:	6812      	ldr	r2, [r2, #0]
 800dba8:	fa23 f282 	sxtab16	r2, r3, r2
 800dbac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbb0:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800dbb4:	601a      	str	r2, [r3, #0]
  return(result);
 800dbb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbba:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800dbc4:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800dbc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbcc:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800dbd0:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800dbd4:	6019      	str	r1, [r3, #0]
 800dbd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbda:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800dbde:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800dbe0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbe4:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dbee:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 800dbf2:	6812      	ldr	r2, [r2, #0]
 800dbf4:	fa23 f282 	sxtab16	r2, r3, r2
 800dbf8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbfc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800dc00:	601a      	str	r2, [r3, #0]
  return(result);
 800dc02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc06:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800dc10:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800dc14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc18:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800dc1c:	601a      	str	r2, [r3, #0]
 800dc1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc22:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800dc26:	2208      	movs	r2, #8
 800dc28:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800dc2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc2e:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800dc32:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dc36:	f5a2 7270 	sub.w	r2, r2, #960	; 0x3c0
 800dc3a:	6812      	ldr	r2, [r2, #0]
 800dc3c:	f002 021f 	and.w	r2, r2, #31
 800dc40:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800dc42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc46:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d105      	bne.n	800dc5c <arm_nn_vec_mat_mult_t_s8+0x2784>
    return op1;
 800dc50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc54:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	e00b      	b.n	800dc74 <arm_nn_vec_mat_mult_t_s8+0x279c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800dc5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc60:	f5a3 726f 	sub.w	r2, r3, #956	; 0x3bc
 800dc64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc68:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800dc6c:	6812      	ldr	r2, [r2, #0]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	fa62 f303 	ror.w	r3, r2, r3
 800dc74:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dc78:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 800dc7c:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800dc80:	6011      	str	r1, [r2, #0]
 800dc82:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dc86:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 800dc8a:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800dc8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc90:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dc9a:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 800dc9e:	6812      	ldr	r2, [r2, #0]
 800dca0:	fa23 f282 	sxtab16	r2, r3, r2
 800dca4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dca8:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800dcac:	601a      	str	r2, [r3, #0]
  return(result);
 800dcae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dcb2:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800dcbc:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800dcc0:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800dcc4:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800dcc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dccc:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800dcd0:	6018      	str	r0, [r3, #0]
 800dcd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dcd6:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800dcda:	6019      	str	r1, [r3, #0]
 800dcdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dce0:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800dce4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800dce6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dcea:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dcf4:	f5a2 7269 	sub.w	r2, r2, #932	; 0x3a4
 800dcf8:	6812      	ldr	r2, [r2, #0]
 800dcfa:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800dcfe:	f5a1 716a 	sub.w	r1, r1, #936	; 0x3a8
 800dd02:	6809      	ldr	r1, [r1, #0]
 800dd04:	fb23 1202 	smlad	r2, r3, r2, r1
 800dd08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd0c:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800dd10:	601a      	str	r2, [r3, #0]
  return(result);
 800dd12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd16:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800dd20:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800dd24:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800dd28:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800dd2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd30:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800dd34:	6018      	str	r0, [r3, #0]
 800dd36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd3a:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 800dd3e:	6019      	str	r1, [r3, #0]
 800dd40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd44:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 800dd48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800dd4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd4e:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dd58:	f5a2 7265 	sub.w	r2, r2, #916	; 0x394
 800dd5c:	6812      	ldr	r2, [r2, #0]
 800dd5e:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800dd62:	f5a1 7166 	sub.w	r1, r1, #920	; 0x398
 800dd66:	6809      	ldr	r1, [r1, #0]
 800dd68:	fb23 1202 	smlad	r2, r3, r2, r1
 800dd6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd70:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 800dd74:	601a      	str	r2, [r3, #0]
  return(result);
 800dd76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd7a:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800dd84:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 800dd88:	3310      	adds	r3, #16
 800dd8a:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 800dd8e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800dd92:	3b0f      	subs	r3, #15
 800dd94:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	f6ff a943 	blt.w	800d024 <arm_nn_vec_mat_mult_t_s8+0x1b4c>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800dd9e:	e03f      	b.n	800de20 <arm_nn_vec_mat_mult_t_s8+0x2948>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800dda0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dda4:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f993 3000 	ldrsb.w	r3, [r3]
 800ddae:	461a      	mov	r2, r3
 800ddb0:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800ddb4:	4413      	add	r3, r2
 800ddb6:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800ddba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ddbe:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f993 3000 	ldrsb.w	r3, [r3]
 800ddc8:	461a      	mov	r2, r3
 800ddca:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800ddce:	4413      	add	r3, r2
 800ddd0:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

            res00 += lhs_value * rhs_value0;
 800ddd4:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 800ddd8:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 800dddc:	fb02 f303 	mul.w	r3, r2, r3
 800dde0:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800dde4:	4413      	add	r3, r2
 800dde6:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

            ++rhs_ptr;
 800ddea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ddee:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	1c5a      	adds	r2, r3, #1
 800ddf6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ddfa:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800ddfe:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 800de00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de04:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	1c5a      	adds	r2, r3, #1
 800de0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de10:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800de14:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800de16:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 800de1a:	3301      	adds	r3, #1
 800de1c:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 800de20:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 800de24:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800de28:	429a      	cmp	r2, r3
 800de2a:	dbb9      	blt.n	800dda0 <arm_nn_vec_mat_mult_t_s8+0x28c8>
 800de2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de30:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 800de34:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800de38:	601a      	str	r2, [r3, #0]
 800de3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de3e:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 800de42:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 800de46:	601a      	str	r2, [r3, #0]
 800de48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de4c:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800de50:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 800de54:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800de56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de5a:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800de64:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800de68:	f5a2 62a6 	sub.w	r2, r2, #1328	; 0x530
 800de6c:	6812      	ldr	r2, [r2, #0]
 800de6e:	409a      	lsls	r2, r3
 800de70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de74:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 800de78:	601a      	str	r2, [r3, #0]
 800de7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de7e:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 800de82:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800de86:	f2a2 5234 	subw	r2, r2, #1332	; 0x534
 800de8a:	6812      	ldr	r2, [r2, #0]
 800de8c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800de8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de92:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 800de96:	2200      	movs	r2, #0
 800de98:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 800de9a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800de9e:	461a      	mov	r2, r3
 800dea0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dea4:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 800dea8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800deac:	461a      	mov	r2, r3
 800deae:	2300      	movs	r3, #0
 800deb0:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800deb4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800deb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800debc:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800dec0:	f2a1 513c 	subw	r1, r1, #1340	; 0x53c
 800dec4:	6809      	ldr	r1, [r1, #0]
 800dec6:	17c8      	asrs	r0, r1, #31
 800dec8:	6139      	str	r1, [r7, #16]
 800deca:	6178      	str	r0, [r7, #20]
 800decc:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800ded0:	f5a1 61a8 	sub.w	r1, r1, #1344	; 0x540
 800ded4:	6809      	ldr	r1, [r1, #0]
 800ded6:	17c8      	asrs	r0, r1, #31
 800ded8:	60b9      	str	r1, [r7, #8]
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800dee0:	4631      	mov	r1, r6
 800dee2:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800dee6:	4650      	mov	r0, sl
 800dee8:	fb00 f001 	mul.w	r0, r0, r1
 800deec:	4659      	mov	r1, fp
 800deee:	462c      	mov	r4, r5
 800def0:	fb04 f101 	mul.w	r1, r4, r1
 800def4:	4401      	add	r1, r0
 800def6:	4628      	mov	r0, r5
 800def8:	4654      	mov	r4, sl
 800defa:	fba0 8904 	umull	r8, r9, r0, r4
 800defe:	4449      	add	r1, r9
 800df00:	4689      	mov	r9, r1
 800df02:	eb12 0108 	adds.w	r1, r2, r8
 800df06:	6039      	str	r1, [r7, #0]
 800df08:	eb43 0309 	adc.w	r3, r3, r9
 800df0c:	607b      	str	r3, [r7, #4]
 800df0e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800df12:	e9d7 1200 	ldrd	r1, r2, [r7]
 800df16:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 800df1a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800df1e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800df22:	f04f 0200 	mov.w	r2, #0
 800df26:	f04f 0300 	mov.w	r3, #0
 800df2a:	0fc2      	lsrs	r2, r0, #31
 800df2c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800df30:	17cb      	asrs	r3, r1, #31
 800df32:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800df36:	f2a1 5144 	subw	r1, r1, #1348	; 0x544
 800df3a:	4613      	mov	r3, r2
 800df3c:	600b      	str	r3, [r1, #0]
    return result;
 800df3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df42:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 800df46:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800df48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df4c:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	dc06      	bgt.n	800df64 <arm_nn_vec_mat_mult_t_s8+0x2a8c>
 800df56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df5a:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	425b      	negs	r3, r3
 800df62:	e000      	b.n	800df66 <arm_nn_vec_mat_mult_t_s8+0x2a8e>
 800df64:	2300      	movs	r3, #0
 800df66:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800df6a:	f5a2 62a9 	sub.w	r2, r2, #1352	; 0x548
 800df6e:	6011      	str	r1, [r2, #0]
 800df70:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800df74:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 800df78:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800df7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df7e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800df82:	2200      	movs	r2, #0
 800df84:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800df86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df8a:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 800df8e:	2201      	movs	r2, #1
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	409a      	lsls	r2, r3
 800df94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df98:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 800df9c:	3a01      	subs	r2, #1
 800df9e:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 800dfa0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfa4:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800dfa8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dfac:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 800dfb0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dfb4:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 800dfb8:	6809      	ldr	r1, [r1, #0]
 800dfba:	6812      	ldr	r2, [r2, #0]
 800dfbc:	400a      	ands	r2, r1
 800dfbe:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 800dfc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfc4:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800dfc8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dfcc:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 800dfd0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dfd4:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 800dfd8:	6809      	ldr	r1, [r1, #0]
 800dfda:	6812      	ldr	r2, [r2, #0]
 800dfdc:	fa41 f202 	asr.w	r2, r1, r2
 800dfe0:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 800dfe2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfe6:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800dfea:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dfee:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 800dff2:	6812      	ldr	r2, [r2, #0]
 800dff4:	1052      	asrs	r2, r2, #1
 800dff6:	601a      	str	r2, [r3, #0]
    if (result < 0)
 800dff8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dffc:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2b00      	cmp	r3, #0
 800e004:	da0a      	bge.n	800e01c <arm_nn_vec_mat_mult_t_s8+0x2b44>
        threshold++;
 800e006:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e00a:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800e00e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e012:	f2a2 525c 	subw	r2, r2, #1372	; 0x55c
 800e016:	6812      	ldr	r2, [r2, #0]
 800e018:	3201      	adds	r2, #1
 800e01a:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 800e01c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e020:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 800e024:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e028:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800e02c:	6812      	ldr	r2, [r2, #0]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	429a      	cmp	r2, r3
 800e032:	dd0a      	ble.n	800e04a <arm_nn_vec_mat_mult_t_s8+0x2b72>
        result++;
 800e034:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e038:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800e03c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e040:	f5a2 62aa 	sub.w	r2, r2, #1360	; 0x550
 800e044:	6812      	ldr	r2, [r2, #0]
 800e046:	3201      	adds	r2, #1
 800e048:	601a      	str	r2, [r3, #0]
    return result;
 800e04a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e04e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800e052:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e054:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 800e056:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Add offset
        res00 += dst_offset;
 800e05a:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e05e:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800e062:	4413      	add	r3, r2
 800e064:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Clamp the result
        res00 = MAX(res00, activation_min);
 800e068:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e06c:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800e070:	4293      	cmp	r3, r2
 800e072:	bfb8      	it	lt
 800e074:	4613      	movlt	r3, r2
 800e076:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        res00 = MIN(res00, activation_max);
 800e07a:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e07e:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800e082:	4293      	cmp	r3, r2
 800e084:	bfa8      	it	ge
 800e086:	4613      	movge	r3, r2
 800e088:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        *dst = (q7_t)res00;
 800e08c:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 800e090:	b25a      	sxtb	r2, r3
 800e092:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e096:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	701a      	strb	r2, [r3, #0]

        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
 800e09e:	2300      	movs	r3, #0
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f507 67c6 	add.w	r7, r7, #1584	; 0x630
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e0ac:	4770      	bx	lr

0800e0ae <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b082      	sub	sp, #8
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	ed87 0a01 	vstr	s0, [r7, #4]
 800e0b8:	ed97 0a01 	vldr	s0, [r7, #4]
 800e0bc:	f005 fbe6 	bl	801388c <log10f>
 800e0c0:	eef0 7a40 	vmov.f32	s15, s0
 800e0c4:	eeb0 0a67 	vmov.f32	s0, s15
 800e0c8:	3708      	adds	r7, #8
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
	...

0800e0d0 <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 800e0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0d2:	b083      	sub	sp, #12
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	ed87 0b00 	vstr	d0, [r7]
 800e0da:	683c      	ldr	r4, [r7, #0]
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	461e      	mov	r6, r3
 800e0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ea:	4b10      	ldr	r3, [pc, #64]	; (800e12c <_ZSt5isinfd+0x5c>)
 800e0ec:	4620      	mov	r0, r4
 800e0ee:	4629      	mov	r1, r5
 800e0f0:	f7f2 fd26 	bl	8000b40 <__aeabi_dcmpun>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d10b      	bne.n	800e112 <_ZSt5isinfd+0x42>
 800e0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e0fe:	4b0b      	ldr	r3, [pc, #44]	; (800e12c <_ZSt5isinfd+0x5c>)
 800e100:	4620      	mov	r0, r4
 800e102:	4629      	mov	r1, r5
 800e104:	f7f2 fcfe 	bl	8000b04 <__aeabi_dcmple>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d101      	bne.n	800e112 <_ZSt5isinfd+0x42>
 800e10e:	2300      	movs	r3, #0
 800e110:	461e      	mov	r6, r3
 800e112:	b2f3      	uxtb	r3, r6
 800e114:	f083 0301 	eor.w	r3, r3, #1
 800e118:	b2db      	uxtb	r3, r3
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	bf14      	ite	ne
 800e11e:	2301      	movne	r3, #1
 800e120:	2300      	moveq	r3, #0
 800e122:	b2db      	uxtb	r3, r3
 800e124:	4618      	mov	r0, r3
 800e126:	370c      	adds	r7, #12
 800e128:	46bd      	mov	sp, r7
 800e12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e12c:	7fefffff 	.word	0x7fefffff

0800e130 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 800e130:	b480      	push	{r7}
 800e132:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 800e134:	2300      	movs	r3, #0
}
 800e136:	4618      	mov	r0, r3
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr

0800e140 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return HAL_GetTick();
}

uint64_t ei_read_timer_us() {
 800e140:	b5b0      	push	{r4, r5, r7, lr}
 800e142:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 800e144:	f7f6 fe1a 	bl	8004d7c <HAL_GetTick>
 800e148:	4603      	mov	r3, r0
 800e14a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e14e:	fb02 f303 	mul.w	r3, r2, r3
 800e152:	2200      	movs	r2, #0
 800e154:	461c      	mov	r4, r3
 800e156:	4615      	mov	r5, r2
 800e158:	4622      	mov	r2, r4
 800e15a:	462b      	mov	r3, r5
}
 800e15c:	4610      	mov	r0, r2
 800e15e:	4619      	mov	r1, r3
 800e160:	bdb0      	pop	{r4, r5, r7, pc}
 800e162:	0000      	movs	r0, r0
 800e164:	0000      	movs	r0, r0
	...

0800e168 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 800e168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e16c:	b08c      	sub	sp, #48	; 0x30
 800e16e:	af00      	add	r7, sp, #0
 800e170:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 800e174:	466b      	mov	r3, sp
 800e176:	4698      	mov	r8, r3
    float n = f;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	627b      	str	r3, [r7, #36]	; 0x24
    char s[MAX_NUMBER_STRING_SIZE];
 800e17c:	4b7e      	ldr	r3, [pc, #504]	; (800e378 <_Z15ei_printf_floatf+0x210>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	1e5e      	subs	r6, r3, #1
 800e182:	623e      	str	r6, [r7, #32]
 800e184:	4633      	mov	r3, r6
 800e186:	3301      	adds	r3, #1
 800e188:	2200      	movs	r2, #0
 800e18a:	461c      	mov	r4, r3
 800e18c:	4615      	mov	r5, r2
 800e18e:	f04f 0200 	mov.w	r2, #0
 800e192:	f04f 0300 	mov.w	r3, #0
 800e196:	00eb      	lsls	r3, r5, #3
 800e198:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e19c:	00e2      	lsls	r2, r4, #3
 800e19e:	4633      	mov	r3, r6
 800e1a0:	3301      	adds	r3, #1
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	4611      	mov	r1, r2
 800e1a8:	f04f 0200 	mov.w	r2, #0
 800e1ac:	f04f 0300 	mov.w	r3, #0
 800e1b0:	00cb      	lsls	r3, r1, #3
 800e1b2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800e1b6:	00c2      	lsls	r2, r0, #3
 800e1b8:	4633      	mov	r3, r6
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	3307      	adds	r3, #7
 800e1be:	08db      	lsrs	r3, r3, #3
 800e1c0:	00db      	lsls	r3, r3, #3
 800e1c2:	ebad 0d03 	sub.w	sp, sp, r3
 800e1c6:	466b      	mov	r3, sp
 800e1c8:	3300      	adds	r3, #0
 800e1ca:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 800e1cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e1d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e1d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d8:	d106      	bne.n	800e1e8 <_Z15ei_printf_floatf+0x80>
        strcpy(s, "0");
 800e1da:	69fb      	ldr	r3, [r7, #28]
 800e1dc:	4967      	ldr	r1, [pc, #412]	; (800e37c <_Z15ei_printf_floatf+0x214>)
 800e1de:	461a      	mov	r2, r3
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	881b      	ldrh	r3, [r3, #0]
 800e1e4:	8013      	strh	r3, [r2, #0]
 800e1e6:	e0b6      	b.n	800e356 <_Z15ei_printf_floatf+0x1ee>
        char *c = s;
 800e1e8:	69fb      	ldr	r3, [r7, #28]
 800e1ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        int neg = (n < 0);
 800e1ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e1f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e1f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1f8:	bf4c      	ite	mi
 800e1fa:	2301      	movmi	r3, #1
 800e1fc:	2300      	movpl	r3, #0
 800e1fe:	b2db      	uxtb	r3, r3
 800e200:	61bb      	str	r3, [r7, #24]
        if (neg) {
 800e202:	69bb      	ldr	r3, [r7, #24]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d005      	beq.n	800e214 <_Z15ei_printf_floatf+0xac>
            n = -n;
 800e208:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e20c:	eef1 7a67 	vneg.f32	s15, s15
 800e210:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        m = log10(n);
 800e214:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800e218:	f7ff ff49 	bl	800e0ae <_ZSt5log10f>
 800e21c:	eef0 7a40 	vmov.f32	s15, s0
 800e220:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e224:	ee17 3a90 	vmov	r3, s15
 800e228:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 800e22a:	69bb      	ldr	r3, [r7, #24]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d004      	beq.n	800e23a <_Z15ei_printf_floatf+0xd2>
            *(c++) = '-';
 800e230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e232:	1c5a      	adds	r2, r3, #1
 800e234:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e236:	222d      	movs	r2, #45	; 0x2d
 800e238:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 800e23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	dc01      	bgt.n	800e244 <_Z15ei_printf_floatf+0xdc>
            m = 0;
 800e240:	2300      	movs	r3, #0
 800e242:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 800e244:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e246:	f7f2 f989 	bl	800055c <__aeabi_f2d>
 800e24a:	4b4d      	ldr	r3, [pc, #308]	; (800e380 <_Z15ei_printf_floatf+0x218>)
 800e24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e250:	2401      	movs	r4, #1
 800e252:	f7f2 fc6b 	bl	8000b2c <__aeabi_dcmpgt>
 800e256:	4603      	mov	r3, r0
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d101      	bne.n	800e260 <_Z15ei_printf_floatf+0xf8>
 800e25c:	2300      	movs	r3, #0
 800e25e:	461c      	mov	r4, r3
 800e260:	b2e3      	uxtb	r3, r4
 800e262:	f083 0301 	eor.w	r3, r3, #1
 800e266:	b2db      	uxtb	r3, r3
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d002      	beq.n	800e272 <_Z15ei_printf_floatf+0x10a>
 800e26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26e:	2b00      	cmp	r3, #0
 800e270:	db6e      	blt.n	800e350 <_Z15ei_printf_floatf+0x1e8>
            double weight = pow(10.0, m);
 800e272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e274:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 800e370 <_Z15ei_printf_floatf+0x208>
 800e278:	f000 f89f 	bl	800e3ba <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800e27c:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 800e280:	f04f 0200 	mov.w	r2, #0
 800e284:	f04f 0300 	mov.w	r3, #0
 800e288:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e28c:	f7f2 fc4e 	bl	8000b2c <__aeabi_dcmpgt>
 800e290:	4603      	mov	r3, r0
 800e292:	2b00      	cmp	r3, #0
 800e294:	d00b      	beq.n	800e2ae <_Z15ei_printf_floatf+0x146>
 800e296:	ed97 0b04 	vldr	d0, [r7, #16]
 800e29a:	f7ff ff19 	bl	800e0d0 <_ZSt5isinfd>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	f083 0301 	eor.w	r3, r3, #1
 800e2a4:	b2db      	uxtb	r3, r3
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d001      	beq.n	800e2ae <_Z15ei_printf_floatf+0x146>
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	e000      	b.n	800e2b0 <_Z15ei_printf_floatf+0x148>
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d03a      	beq.n	800e32a <_Z15ei_printf_floatf+0x1c2>
                digit = floor(n / weight);
 800e2b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2b6:	f7f2 f951 	bl	800055c <__aeabi_f2d>
 800e2ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e2be:	f7f2 facf 	bl	8000860 <__aeabi_ddiv>
 800e2c2:	4602      	mov	r2, r0
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	ec43 2b17 	vmov	d7, r2, r3
 800e2ca:	eeb0 0a47 	vmov.f32	s0, s14
 800e2ce:	eef0 0a67 	vmov.f32	s1, s15
 800e2d2:	f005 f949 	bl	8013568 <floor>
 800e2d6:	ec53 2b10 	vmov	r2, r3, d0
 800e2da:	4610      	mov	r0, r2
 800e2dc:	4619      	mov	r1, r3
 800e2de:	f7f2 fc45 	bl	8000b6c <__aeabi_d2iz>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 800e2e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2e8:	f7f2 f938 	bl	800055c <__aeabi_f2d>
 800e2ec:	4604      	mov	r4, r0
 800e2ee:	460d      	mov	r5, r1
 800e2f0:	68f8      	ldr	r0, [r7, #12]
 800e2f2:	f7f2 f921 	bl	8000538 <__aeabi_i2d>
 800e2f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e2fa:	f7f2 f987 	bl	800060c <__aeabi_dmul>
 800e2fe:	4602      	mov	r2, r0
 800e300:	460b      	mov	r3, r1
 800e302:	4620      	mov	r0, r4
 800e304:	4629      	mov	r1, r5
 800e306:	f7f1 ffc9 	bl	800029c <__aeabi_dsub>
 800e30a:	4602      	mov	r2, r0
 800e30c:	460b      	mov	r3, r1
 800e30e:	4610      	mov	r0, r2
 800e310:	4619      	mov	r1, r3
 800e312:	f7f2 fc73 	bl	8000bfc <__aeabi_d2f>
 800e316:	4603      	mov	r3, r0
 800e318:	627b      	str	r3, [r7, #36]	; 0x24
                *(c++) = '0' + digit;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	b2da      	uxtb	r2, r3
 800e31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e320:	1c59      	adds	r1, r3, #1
 800e322:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e324:	3230      	adds	r2, #48	; 0x30
 800e326:	b2d2      	uxtb	r2, r2
 800e328:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 800e32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d10b      	bne.n	800e348 <_Z15ei_printf_floatf+0x1e0>
 800e330:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e334:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e33c:	dd04      	ble.n	800e348 <_Z15ei_printf_floatf+0x1e0>
                *(c++) = '.';
 800e33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e340:	1c5a      	adds	r2, r3, #1
 800e342:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e344:	222e      	movs	r2, #46	; 0x2e
 800e346:	701a      	strb	r2, [r3, #0]
            m--;
 800e348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e34a:	3b01      	subs	r3, #1
 800e34c:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 800e34e:	e779      	b.n	800e244 <_Z15ei_printf_floatf+0xdc>
        *(c) = '\0';
 800e350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e352:	2200      	movs	r2, #0
 800e354:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 800e356:	69f9      	ldr	r1, [r7, #28]
 800e358:	480a      	ldr	r0, [pc, #40]	; (800e384 <_Z15ei_printf_floatf+0x21c>)
 800e35a:	f7f5 f89a 	bl	8003492 <_Z9ei_printfPKcz>
 800e35e:	46c5      	mov	sp, r8
}
 800e360:	bf00      	nop
 800e362:	3730      	adds	r7, #48	; 0x30
 800e364:	46bd      	mov	sp, r7
 800e366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e36a:	bf00      	nop
 800e36c:	f3af 8000 	nop.w
 800e370:	00000000 	.word	0x00000000
 800e374:	40240000 	.word	0x40240000
 800e378:	200000d8 	.word	0x200000d8
 800e37c:	08019cac 	.word	0x08019cac
 800e380:	200000d0 	.word	0x200000d0
 800e384:	08019cb0 	.word	0x08019cb0

0800e388 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    return malloc(size);
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 800e392:	6839      	ldr	r1, [r7, #0]
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f006 faf1 	bl	801497c <calloc>
 800e39a:	4603      	mov	r3, r0
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3708      	adds	r7, #8
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
    free(ptr);
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f006 fb35 	bl	8014a1c <free>
}
 800e3b2:	bf00      	nop
 800e3b4:	3708      	adds	r7, #8
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}

0800e3ba <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 800e3ba:	b580      	push	{r7, lr}
 800e3bc:	b084      	sub	sp, #16
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	ed87 0b02 	vstr	d0, [r7, #8]
 800e3c4:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f7f2 f8b6 	bl	8000538 <__aeabi_i2d>
 800e3cc:	4602      	mov	r2, r0
 800e3ce:	460b      	mov	r3, r1
 800e3d0:	ec43 2b11 	vmov	d1, r2, r3
 800e3d4:	ed97 0b02 	vldr	d0, [r7, #8]
 800e3d8:	f005 f9e8 	bl	80137ac <pow>
 800e3dc:	eeb0 7a40 	vmov.f32	s14, s0
 800e3e0:	eef0 7a60 	vmov.f32	s15, s1
    }
 800e3e4:	eeb0 0a47 	vmov.f32	s0, s14
 800e3e8:	eef0 0a67 	vmov.f32	s1, s15
 800e3ec:	3710      	adds	r7, #16
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
	...

0800e3f4 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 800e3f4:	b480      	push	{r7}
 800e3f6:	b083      	sub	sp, #12
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 800e3fe:	79fb      	ldrb	r3, [r7, #7]
 800e400:	2b10      	cmp	r3, #16
 800e402:	d847      	bhi.n	800e494 <TfLiteTypeGetName+0xa0>
 800e404:	a201      	add	r2, pc, #4	; (adr r2, 800e40c <TfLiteTypeGetName+0x18>)
 800e406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e40a:	bf00      	nop
 800e40c:	0800e451 	.word	0x0800e451
 800e410:	0800e455 	.word	0x0800e455
 800e414:	0800e45d 	.word	0x0800e45d
 800e418:	0800e465 	.word	0x0800e465
 800e41c:	0800e46d 	.word	0x0800e46d
 800e420:	0800e481 	.word	0x0800e481
 800e424:	0800e475 	.word	0x0800e475
 800e428:	0800e459 	.word	0x0800e459
 800e42c:	0800e479 	.word	0x0800e479
 800e430:	0800e469 	.word	0x0800e469
 800e434:	0800e485 	.word	0x0800e485
 800e438:	0800e489 	.word	0x0800e489
 800e43c:	0800e47d 	.word	0x0800e47d
 800e440:	0800e471 	.word	0x0800e471
 800e444:	0800e48d 	.word	0x0800e48d
 800e448:	0800e491 	.word	0x0800e491
 800e44c:	0800e461 	.word	0x0800e461
    case kTfLiteNoType:
      return "NOTYPE";
 800e450:	4b14      	ldr	r3, [pc, #80]	; (800e4a4 <TfLiteTypeGetName+0xb0>)
 800e452:	e020      	b.n	800e496 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 800e454:	4b14      	ldr	r3, [pc, #80]	; (800e4a8 <TfLiteTypeGetName+0xb4>)
 800e456:	e01e      	b.n	800e496 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 800e458:	4b14      	ldr	r3, [pc, #80]	; (800e4ac <TfLiteTypeGetName+0xb8>)
 800e45a:	e01c      	b.n	800e496 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 800e45c:	4b14      	ldr	r3, [pc, #80]	; (800e4b0 <TfLiteTypeGetName+0xbc>)
 800e45e:	e01a      	b.n	800e496 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 800e460:	4b14      	ldr	r3, [pc, #80]	; (800e4b4 <TfLiteTypeGetName+0xc0>)
 800e462:	e018      	b.n	800e496 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 800e464:	4b14      	ldr	r3, [pc, #80]	; (800e4b8 <TfLiteTypeGetName+0xc4>)
 800e466:	e016      	b.n	800e496 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 800e468:	4b14      	ldr	r3, [pc, #80]	; (800e4bc <TfLiteTypeGetName+0xc8>)
 800e46a:	e014      	b.n	800e496 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 800e46c:	4b14      	ldr	r3, [pc, #80]	; (800e4c0 <TfLiteTypeGetName+0xcc>)
 800e46e:	e012      	b.n	800e496 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 800e470:	4b14      	ldr	r3, [pc, #80]	; (800e4c4 <TfLiteTypeGetName+0xd0>)
 800e472:	e010      	b.n	800e496 <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 800e474:	4b14      	ldr	r3, [pc, #80]	; (800e4c8 <TfLiteTypeGetName+0xd4>)
 800e476:	e00e      	b.n	800e496 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 800e478:	4b14      	ldr	r3, [pc, #80]	; (800e4cc <TfLiteTypeGetName+0xd8>)
 800e47a:	e00c      	b.n	800e496 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 800e47c:	4b14      	ldr	r3, [pc, #80]	; (800e4d0 <TfLiteTypeGetName+0xdc>)
 800e47e:	e00a      	b.n	800e496 <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 800e480:	4b14      	ldr	r3, [pc, #80]	; (800e4d4 <TfLiteTypeGetName+0xe0>)
 800e482:	e008      	b.n	800e496 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 800e484:	4b14      	ldr	r3, [pc, #80]	; (800e4d8 <TfLiteTypeGetName+0xe4>)
 800e486:	e006      	b.n	800e496 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 800e488:	4b14      	ldr	r3, [pc, #80]	; (800e4dc <TfLiteTypeGetName+0xe8>)
 800e48a:	e004      	b.n	800e496 <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 800e48c:	4b14      	ldr	r3, [pc, #80]	; (800e4e0 <TfLiteTypeGetName+0xec>)
 800e48e:	e002      	b.n	800e496 <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 800e490:	4b14      	ldr	r3, [pc, #80]	; (800e4e4 <TfLiteTypeGetName+0xf0>)
 800e492:	e000      	b.n	800e496 <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 800e494:	4b14      	ldr	r3, [pc, #80]	; (800e4e8 <TfLiteTypeGetName+0xf4>)
}
 800e496:	4618      	mov	r0, r3
 800e498:	370c      	adds	r7, #12
 800e49a:	46bd      	mov	sp, r7
 800e49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a0:	4770      	bx	lr
 800e4a2:	bf00      	nop
 800e4a4:	08019cb4 	.word	0x08019cb4
 800e4a8:	08019cbc 	.word	0x08019cbc
 800e4ac:	08019cc4 	.word	0x08019cc4
 800e4b0:	08019ccc 	.word	0x08019ccc
 800e4b4:	08019cd4 	.word	0x08019cd4
 800e4b8:	08019cdc 	.word	0x08019cdc
 800e4bc:	08019ce4 	.word	0x08019ce4
 800e4c0:	08019cec 	.word	0x08019cec
 800e4c4:	08019cf4 	.word	0x08019cf4
 800e4c8:	08019cfc 	.word	0x08019cfc
 800e4cc:	08019d04 	.word	0x08019d04
 800e4d0:	08019d10 	.word	0x08019d10
 800e4d4:	08019d1c 	.word	0x08019d1c
 800e4d8:	08019d24 	.word	0x08019d24
 800e4dc:	08019d2c 	.word	0x08019d2c
 800e4e0:	08019d34 	.word	0x08019d34
 800e4e4:	08019d40 	.word	0x08019d40
 800e4e8:	08019d48 	.word	0x08019d48

0800e4ec <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 800e4ec:	b480      	push	{r7}
 800e4ee:	af00      	add	r7, sp, #0
 800e4f0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fc:	4770      	bx	lr
	...

0800e500 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 800e500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e504:	b088      	sub	sp, #32
 800e506:	af00      	add	r7, sp, #0
 800e508:	ed87 0b02 	vstr	d0, [r7, #8]
 800e50c:	6078      	str	r0, [r7, #4]
 800e50e:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 800e510:	f04f 0200 	mov.w	r2, #0
 800e514:	f04f 0300 	mov.w	r3, #0
 800e518:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e51c:	f7f2 fade 	bl	8000adc <__aeabi_dcmpeq>
 800e520:	4603      	mov	r3, r0
 800e522:	2b00      	cmp	r3, #0
 800e524:	d006      	beq.n	800e534 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2200      	movs	r2, #0
 800e52a:	601a      	str	r2, [r3, #0]
    *shift = 0;
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	2200      	movs	r2, #0
 800e530:	601a      	str	r2, [r3, #0]
    return;
 800e532:	e068      	b.n	800e606 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 800e534:	6838      	ldr	r0, [r7, #0]
 800e536:	ed97 0b02 	vldr	d0, [r7, #8]
 800e53a:	f005 f895 	bl	8013668 <frexp>
 800e53e:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 800e542:	f04f 0200 	mov.w	r2, #0
 800e546:	4b32      	ldr	r3, [pc, #200]	; (800e610 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 800e548:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e54c:	f7f2 f85e 	bl	800060c <__aeabi_dmul>
 800e550:	4602      	mov	r2, r0
 800e552:	460b      	mov	r3, r1
 800e554:	ec43 2b17 	vmov	d7, r2, r3
 800e558:	eeb0 0a47 	vmov.f32	s0, s14
 800e55c:	eef0 0a67 	vmov.f32	s1, s15
 800e560:	f000 f88c 	bl	800e67c <_ZN6tflite11TfLiteRoundIdEET_S1_>
 800e564:	ec53 2b10 	vmov	r2, r3, d0
 800e568:	4610      	mov	r0, r2
 800e56a:	4619      	mov	r1, r3
 800e56c:	f7f2 fbfe 	bl	8000d6c <__aeabi_d2lz>
 800e570:	4602      	mov	r2, r0
 800e572:	460b      	mov	r3, r1
 800e574:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 800e578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e57c:	4925      	ldr	r1, [pc, #148]	; (800e614 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 800e57e:	428a      	cmp	r2, r1
 800e580:	f173 0300 	sbcs.w	r3, r3, #0
 800e584:	db01      	blt.n	800e58a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 800e586:	f006 f9d3 	bl	8014930 <abort>
  if (q_fixed == (1ll << 31)) {
 800e58a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e58e:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 800e592:	430b      	orrs	r3, r1
 800e594:	d118      	bne.n	800e5c8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 800e596:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e59a:	0fd9      	lsrs	r1, r3, #31
 800e59c:	2000      	movs	r0, #0
 800e59e:	468a      	mov	sl, r1
 800e5a0:	4683      	mov	fp, r0
 800e5a2:	eb1a 0402 	adds.w	r4, sl, r2
 800e5a6:	eb4b 0503 	adc.w	r5, fp, r3
 800e5aa:	f04f 0200 	mov.w	r2, #0
 800e5ae:	f04f 0300 	mov.w	r3, #0
 800e5b2:	0862      	lsrs	r2, r4, #1
 800e5b4:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800e5b8:	106b      	asrs	r3, r5, #1
 800e5ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	1c5a      	adds	r2, r3, #1
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 800e5c8:	f7ff ff90 	bl	800e4ec <_ZNSt14numeric_limitsIlE3maxEv>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	17da      	asrs	r2, r3, #31
 800e5d0:	4698      	mov	r8, r3
 800e5d2:	4691      	mov	r9, r2
 800e5d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e5d8:	4590      	cmp	r8, r2
 800e5da:	eb79 0303 	sbcs.w	r3, r9, r3
 800e5de:	da01      	bge.n	800e5e4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 800e5e0:	f006 f9a6 	bl	8014930 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	f113 0f1f 	cmn.w	r3, #31
 800e5ec:	da08      	bge.n	800e600 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 800e5f4:	f04f 0200 	mov.w	r2, #0
 800e5f8:	f04f 0300 	mov.w	r3, #0
 800e5fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 800e600:	69ba      	ldr	r2, [r7, #24]
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	601a      	str	r2, [r3, #0]
}
 800e606:	3720      	adds	r7, #32
 800e608:	46bd      	mov	sp, r7
 800e60a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e60e:	bf00      	nop
 800e610:	41e00000 	.word	0x41e00000
 800e614:	80000001 	.word	0x80000001

0800e618 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800e618:	b480      	push	{r7}
 800e61a:	b083      	sub	sp, #12
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	ed93 7a00 	vldr	s14, [r3]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	edd3 7a00 	vldr	s15, [r3]
 800e62e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e636:	d501      	bpl.n	800e63c <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	e000      	b.n	800e63e <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800e63c:	687b      	ldr	r3, [r7, #4]
    }
 800e63e:	4618      	mov	r0, r3
 800e640:	370c      	adds	r7, #12
 800e642:	46bd      	mov	sp, r7
 800e644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e648:	4770      	bx	lr

0800e64a <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800e64a:	b480      	push	{r7}
 800e64c:	b083      	sub	sp, #12
 800e64e:	af00      	add	r7, sp, #0
 800e650:	6078      	str	r0, [r7, #4]
 800e652:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	ed93 7a00 	vldr	s14, [r3]
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	edd3 7a00 	vldr	s15, [r3]
 800e660:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e668:	d501      	bpl.n	800e66e <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	e000      	b.n	800e670 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800e66e:	687b      	ldr	r3, [r7, #4]
    }
 800e670:	4618      	mov	r0, r3
 800e672:	370c      	adds	r7, #12
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr

0800e67c <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	ed87 0b00 	vstr	d0, [r7]
 800e686:	ed97 0b00 	vldr	d0, [r7]
 800e68a:	f005 f825 	bl	80136d8 <round>
 800e68e:	eeb0 7a40 	vmov.f32	s14, s0
 800e692:	eef0 7a60 	vmov.f32	s15, s1
 800e696:	eeb0 0a47 	vmov.f32	s0, s14
 800e69a:	eef0 0a67 	vmov.f32	s1, s15
 800e69e:	3708      	adds	r7, #8
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}

0800e6a4 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	ed87 0a01 	vstr	s0, [r7, #4]
 800e6ae:	ed97 0a01 	vldr	s0, [r7, #4]
 800e6b2:	f7f2 fe39 	bl	8001328 <_ZSt5roundf>
 800e6b6:	eef0 7a40 	vmov.f32	s15, s0
 800e6ba:	eeb0 0a67 	vmov.f32	s0, s15
 800e6be:	3708      	adds	r7, #8
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 800e6c4:	b480      	push	{r7}
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d4:	4770      	bx	lr

0800e6d6 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 800e6d6:	b480      	push	{r7}
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	237f      	movs	r3, #127	; 0x7f
 800e6dc:	4618      	mov	r0, r3
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e4:	4770      	bx	lr

0800e6e6 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 800e6e6:	b480      	push	{r7}
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f4:	4770      	bx	lr

0800e6f6 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 800e6f6:	b480      	push	{r7}
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	23ff      	movs	r3, #255	; 0xff
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	46bd      	mov	sp, r7
 800e700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e704:	4770      	bx	lr
	...

0800e708 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 800e708:	b480      	push	{r7}
 800e70a:	af00      	add	r7, sp, #0
 800e70c:	4b02      	ldr	r3, [pc, #8]	; (800e718 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 800e70e:	4618      	mov	r0, r3
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr
 800e718:	ffff8000 	.word	0xffff8000

0800e71c <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 800e71c:	b480      	push	{r7}
 800e71e:	af00      	add	r7, sp, #0
 800e720:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800e724:	4618      	mov	r0, r3
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr

0800e72e <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 800e72e:	b480      	push	{r7}
 800e730:	b083      	sub	sp, #12
 800e732:	af00      	add	r7, sp, #0
 800e734:	ed87 0b00 	vstr	d0, [r7]
 800e738:	683a      	ldr	r2, [r7, #0]
 800e73a:	6879      	ldr	r1, [r7, #4]
 800e73c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e740:	ec43 2b17 	vmov	d7, r2, r3
 800e744:	eeb0 0a47 	vmov.f32	s0, s14
 800e748:	eef0 0a67 	vmov.f32	s1, s15
 800e74c:	370c      	adds	r7, #12
 800e74e:	46bd      	mov	sp, r7
 800e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e754:	4770      	bx	lr

0800e756 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 800e756:	b580      	push	{r7, lr}
 800e758:	b082      	sub	sp, #8
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	6078      	str	r0, [r7, #4]
 800e75e:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	689b      	ldr	r3, [r3, #8]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d005      	beq.n	800e774 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	689a      	ldr	r2, [r3, #8]
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	019b      	lsls	r3, r3, #6
 800e770:	4413      	add	r3, r2
 800e772:	e006      	b.n	800e782 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e778:	6839      	ldr	r1, [r7, #0]
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	4798      	blx	r3
 800e77e:	4603      	mov	r3, r0
 800e780:	bf00      	nop
  }
}
 800e782:	4618      	mov	r0, r3
 800e784:	3708      	adds	r7, #8
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}

0800e78a <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 800e78a:	b480      	push	{r7}
 800e78c:	b087      	sub	sp, #28
 800e78e:	af00      	add	r7, sp, #0
 800e790:	60f8      	str	r0, [r7, #12]
 800e792:	60b9      	str	r1, [r7, #8]
 800e794:	607a      	str	r2, [r7, #4]
 800e796:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	db0f      	blt.n	800e7be <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 800e79e:	68ba      	ldr	r2, [r7, #8]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	da0b      	bge.n	800e7be <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	009b      	lsls	r3, r3, #2
 800e7aa:	683a      	ldr	r2, [r7, #0]
 800e7ac:	4413      	add	r3, r2
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7b8:	d001      	beq.n	800e7be <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	e001      	b.n	800e7c2 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 800e7be:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	371c      	adds	r7, #28
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7cc:	4770      	bx	lr

0800e7ce <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 800e7ce:	b580      	push	{r7, lr}
 800e7d0:	b086      	sub	sp, #24
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	60f8      	str	r0, [r7, #12]
 800e7d6:	60b9      	str	r1, [r7, #8]
 800e7d8:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 800e7de:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 800e7e6:	6879      	ldr	r1, [r7, #4]
 800e7e8:	68f8      	ldr	r0, [r7, #12]
 800e7ea:	f7ff ffce 	bl	800e78a <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 800e7ee:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	da01      	bge.n	800e7fa <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	e005      	b.n	800e806 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 800e7fa:	6979      	ldr	r1, [r7, #20]
 800e7fc:	68f8      	ldr	r0, [r7, #12]
 800e7fe:	f7ff ffaa 	bl	800e756 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 800e802:	4603      	mov	r3, r0
 800e804:	bf00      	nop
}
 800e806:	4618      	mov	r0, r3
 800e808:	3718      	adds	r7, #24
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}

0800e80e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 800e80e:	b580      	push	{r7, lr}
 800e810:	b084      	sub	sp, #16
 800e812:	af00      	add	r7, sp, #0
 800e814:	60f8      	str	r0, [r7, #12]
 800e816:	60b9      	str	r1, [r7, #8]
 800e818:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 800e81a:	687a      	ldr	r2, [r7, #4]
 800e81c:	68b9      	ldr	r1, [r7, #8]
 800e81e:	68f8      	ldr	r0, [r7, #12]
 800e820:	f7ff ffd5 	bl	800e7ce <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 800e824:	4603      	mov	r3, r0
}
 800e826:	4618      	mov	r0, r3
 800e828:	3710      	adds	r7, #16
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}

0800e82e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 800e82e:	b580      	push	{r7, lr}
 800e830:	b086      	sub	sp, #24
 800e832:	af00      	add	r7, sp, #0
 800e834:	60f8      	str	r0, [r7, #12]
 800e836:	60b9      	str	r1, [r7, #8]
 800e838:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 800e83e:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 800e846:	6879      	ldr	r1, [r7, #4]
 800e848:	68f8      	ldr	r0, [r7, #12]
 800e84a:	f7ff ff9e 	bl	800e78a <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 800e84e:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	2b00      	cmp	r3, #0
 800e854:	da01      	bge.n	800e85a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 800e856:	2300      	movs	r3, #0
 800e858:	e005      	b.n	800e866 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 800e85a:	6979      	ldr	r1, [r7, #20]
 800e85c:	68f8      	ldr	r0, [r7, #12]
 800e85e:	f7ff ff7a 	bl	800e756 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 800e862:	4603      	mov	r3, r0
 800e864:	bf00      	nop
}
 800e866:	4618      	mov	r0, r3
 800e868:	3718      	adds	r7, #24
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}

0800e86e <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 800e86e:	b580      	push	{r7, lr}
 800e870:	b084      	sub	sp, #16
 800e872:	af00      	add	r7, sp, #0
 800e874:	60f8      	str	r0, [r7, #12]
 800e876:	60b9      	str	r1, [r7, #8]
 800e878:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 800e87a:	687a      	ldr	r2, [r7, #4]
 800e87c:	68b9      	ldr	r1, [r7, #8]
 800e87e:	68f8      	ldr	r0, [r7, #12]
 800e880:	f7ff ffc5 	bl	800e80e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800e884:	4603      	mov	r3, r0
}
 800e886:	4618      	mov	r0, r3
 800e888:	3710      	adds	r7, #16
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
	...

0800e890 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800e890:	b5b0      	push	{r4, r5, r7, lr}
 800e892:	b08e      	sub	sp, #56	; 0x38
 800e894:	af02      	add	r7, sp, #8
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	60b9      	str	r1, [r7, #8]
 800e89a:	607a      	str	r2, [r7, #4]
 800e89c:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	68db      	ldr	r3, [r3, #12]
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f7f1 fe5a 	bl	800055c <__aeabi_f2d>
 800e8a8:	4604      	mov	r4, r0
 800e8aa:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	68db      	ldr	r3, [r3, #12]
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7f1 fe53 	bl	800055c <__aeabi_f2d>
 800e8b6:	4602      	mov	r2, r0
 800e8b8:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800e8ba:	4620      	mov	r0, r4
 800e8bc:	4629      	mov	r1, r5
 800e8be:	f7f1 fea5 	bl	800060c <__aeabi_dmul>
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d04b      	beq.n	800e968 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	68db      	ldr	r3, [r3, #12]
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f7f1 fe41 	bl	800055c <__aeabi_f2d>
 800e8da:	4602      	mov	r2, r0
 800e8dc:	460b      	mov	r3, r1
 800e8de:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 800e8e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e8e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800e8ea:	f7f1 fcd7 	bl	800029c <__aeabi_dsub>
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	460b      	mov	r3, r1
 800e8f2:	ec43 2b17 	vmov	d7, r2, r3
 800e8f6:	eeb0 0a47 	vmov.f32	s0, s14
 800e8fa:	eef0 0a67 	vmov.f32	s1, s15
 800e8fe:	f7ff ff16 	bl	800e72e <_ZSt3absd>
 800e902:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 800e906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e908:	68db      	ldr	r3, [r3, #12]
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7f1 fe26 	bl	800055c <__aeabi_f2d>
 800e910:	4602      	mov	r2, r0
 800e912:	460b      	mov	r3, r1
 800e914:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 800e918:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e91c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e920:	f7f1 ff9e 	bl	8000860 <__aeabi_ddiv>
 800e924:	4602      	mov	r2, r0
 800e926:	460b      	mov	r3, r1
 800e928:	4610      	mov	r0, r2
 800e92a:	4619      	mov	r1, r3
 800e92c:	2301      	movs	r3, #1
 800e92e:	461c      	mov	r4, r3
 800e930:	a318      	add	r3, pc, #96	; (adr r3, 800e994 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 800e932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e936:	f7f2 f8e5 	bl	8000b04 <__aeabi_dcmple>
 800e93a:	4603      	mov	r3, r0
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d101      	bne.n	800e944 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 800e940:	2300      	movs	r3, #0
 800e942:	461c      	mov	r4, r3
 800e944:	b2e3      	uxtb	r3, r4
 800e946:	f083 0301 	eor.w	r3, r3, #1
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d00b      	beq.n	800e968 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	695c      	ldr	r4, [r3, #20]
 800e954:	4b0c      	ldr	r3, [pc, #48]	; (800e988 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 800e956:	9300      	str	r3, [sp, #0]
 800e958:	f44f 73a2 	mov.w	r3, #324	; 0x144
 800e95c:	4a0b      	ldr	r2, [pc, #44]	; (800e98c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 800e95e:	490c      	ldr	r1, [pc, #48]	; (800e990 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 800e960:	68f8      	ldr	r0, [r7, #12]
 800e962:	47a0      	blx	r4
 800e964:	2301      	movs	r3, #1
 800e966:	e009      	b.n	800e97c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 800e968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e96a:	9300      	str	r3, [sp, #0]
 800e96c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e96e:	687a      	ldr	r2, [r7, #4]
 800e970:	68b9      	ldr	r1, [r7, #8]
 800e972:	68f8      	ldr	r0, [r7, #12]
 800e974:	f000 f812 	bl	800e99c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 800e978:	4603      	mov	r3, r0
                                          multiplier);
 800e97a:	bf00      	nop
}
 800e97c:	4618      	mov	r0, r3
 800e97e:	3730      	adds	r7, #48	; 0x30
 800e980:	46bd      	mov	sp, r7
 800e982:	bdb0      	pop	{r4, r5, r7, pc}
 800e984:	f3af 8000 	nop.w
 800e988:	08019fcc 	.word	0x08019fcc
 800e98c:	08019db8 	.word	0x08019db8
 800e990:	08019eb8 	.word	0x08019eb8
 800e994:	47ae147b 	.word	0x47ae147b
 800e998:	3f947ae1 	.word	0x3f947ae1

0800e99c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800e99c:	b590      	push	{r4, r7, lr}
 800e99e:	b089      	sub	sp, #36	; 0x24
 800e9a0:	af02      	add	r7, sp, #8
 800e9a2:	60f8      	str	r0, [r7, #12]
 800e9a4:	60b9      	str	r1, [r7, #8]
 800e9a6:	607a      	str	r2, [r7, #4]
 800e9a8:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	ed93 7a03 	vldr	s14, [r3, #12]
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	edd3 7a03 	vldr	s15, [r3, #12]
 800e9b6:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 800e9ba:	ee17 0a90 	vmov	r0, s15
 800e9be:	f7f1 fdcd 	bl	800055c <__aeabi_f2d>
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	461c      	mov	r4, r3
 800e9ce:	f04f 0200 	mov.w	r2, #0
 800e9d2:	f04f 0300 	mov.w	r3, #0
 800e9d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e9da:	f7f2 f89d 	bl	8000b18 <__aeabi_dcmpge>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d101      	bne.n	800e9e8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	461c      	mov	r4, r3
 800e9e8:	b2e3      	uxtb	r3, r4
 800e9ea:	f083 0301 	eor.w	r3, r3, #1
 800e9ee:	b2db      	uxtb	r3, r3
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d00b      	beq.n	800ea0c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	695c      	ldr	r4, [r3, #20]
 800e9f8:	4b0f      	ldr	r3, [pc, #60]	; (800ea38 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 800e9fa:	9300      	str	r3, [sp, #0]
 800e9fc:	f240 1351 	movw	r3, #337	; 0x151
 800ea00:	4a0e      	ldr	r2, [pc, #56]	; (800ea3c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 800ea02:	490f      	ldr	r1, [pc, #60]	; (800ea40 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 800ea04:	68f8      	ldr	r0, [r7, #12]
 800ea06:	47a0      	blx	r4
 800ea08:	2301      	movs	r3, #1
 800ea0a:	e010      	b.n	800ea2e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7f1 fda3 	bl	800055c <__aeabi_f2d>
 800ea16:	4602      	mov	r2, r0
 800ea18:	460b      	mov	r3, r1
 800ea1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ea1e:	f7f1 ff1f 	bl	8000860 <__aeabi_ddiv>
 800ea22:	4602      	mov	r2, r0
 800ea24:	460b      	mov	r3, r1
 800ea26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea28:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 800ea2c:	2300      	movs	r3, #0
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	371c      	adds	r7, #28
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd90      	pop	{r4, r7, pc}
 800ea36:	bf00      	nop
 800ea38:	08019ff0 	.word	0x08019ff0
 800ea3c:	08019db8 	.word	0x08019db8
 800ea40:	08019eb8 	.word	0x08019eb8

0800ea44 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
 800ea4c:	ed87 0a00 	vstr	s0, [r7]
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 800ea56:	ed97 7a00 	vldr	s14, [r7]
 800ea5a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ea5e:	eeb0 0a66 	vmov.f32	s0, s13
 800ea62:	f7ff fe1f 	bl	800e6a4 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800ea66:	eef0 7a40 	vmov.f32	s15, s0
 800ea6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ea6e:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 800ea76:	4413      	add	r3, r2
  };
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3708      	adds	r7, #8
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}

0800ea80 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b08e      	sub	sp, #56	; 0x38
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	60b9      	str	r1, [r7, #8]
 800ea88:	607a      	str	r2, [r7, #4]
 800ea8a:	603b      	str	r3, [r7, #0]
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	691b      	ldr	r3, [r3, #16]
 800ea9a:	633b      	str	r3, [r7, #48]	; 0x30
  };
 800ea9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea9e:	617b      	str	r3, [r7, #20]
 800eaa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa2:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 800eaa4:	7bfb      	ldrb	r3, [r7, #15]
 800eaa6:	2b01      	cmp	r3, #1
 800eaa8:	d118      	bne.n	800eadc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 800eaaa:	f107 0314 	add.w	r3, r7, #20
 800eaae:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800eba4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7ff ffc6 	bl	800ea44 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800eab8:	4603      	mov	r3, r0
 800eaba:	61fb      	str	r3, [r7, #28]
 800eabc:	f107 021c 	add.w	r2, r7, #28
 800eac0:	f107 0308 	add.w	r3, r7, #8
 800eac4:	4611      	mov	r1, r2
 800eac6:	4618      	mov	r0, r3
 800eac8:	f000 f8d6 	bl	800ec78 <_ZSt3maxIlERKT_S2_S2_>
 800eacc:	4603      	mov	r3, r0
 800eace:	681a      	ldr	r2, [r3, #0]
 800ead0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ead2:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800ead4:	687a      	ldr	r2, [r7, #4]
 800ead6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ead8:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 800eada:	e05f      	b.n	800eb9c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 800eadc:	7bfb      	ldrb	r3, [r7, #15]
 800eade:	2b03      	cmp	r3, #3
 800eae0:	d129      	bne.n	800eb36 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 800eae2:	f107 0314 	add.w	r3, r7, #20
 800eae6:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800eba4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7ff ffaa 	bl	800ea44 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	623b      	str	r3, [r7, #32]
 800eaf4:	f107 0220 	add.w	r2, r7, #32
 800eaf8:	f107 0308 	add.w	r3, r7, #8
 800eafc:	4611      	mov	r1, r2
 800eafe:	4618      	mov	r0, r3
 800eb00:	f000 f8ba 	bl	800ec78 <_ZSt3maxIlERKT_S2_S2_>
 800eb04:	4603      	mov	r3, r0
 800eb06:	681a      	ldr	r2, [r3, #0]
 800eb08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb0a:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 800eb0c:	f107 0314 	add.w	r3, r7, #20
 800eb10:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7ff ff95 	bl	800ea44 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	627b      	str	r3, [r7, #36]	; 0x24
 800eb1e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800eb22:	1d3b      	adds	r3, r7, #4
 800eb24:	4611      	mov	r1, r2
 800eb26:	4618      	mov	r0, r3
 800eb28:	f000 f892 	bl	800ec50 <_ZSt3minIlERKT_S2_S2_>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	681a      	ldr	r2, [r3, #0]
 800eb30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb32:	601a      	str	r2, [r3, #0]
}
 800eb34:	e032      	b.n	800eb9c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 800eb36:	7bfb      	ldrb	r3, [r7, #15]
 800eb38:	2b02      	cmp	r3, #2
 800eb3a:	d129      	bne.n	800eb90 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 800eb3c:	f107 0314 	add.w	r3, r7, #20
 800eb40:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7ff ff7d 	bl	800ea44 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800eb52:	f107 0308 	add.w	r3, r7, #8
 800eb56:	4611      	mov	r1, r2
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f000 f88d 	bl	800ec78 <_ZSt3maxIlERKT_S2_S2_>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	681a      	ldr	r2, [r3, #0]
 800eb62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb64:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 800eb66:	f107 0314 	add.w	r3, r7, #20
 800eb6a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7ff ff68 	bl	800ea44 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800eb74:	4603      	mov	r3, r0
 800eb76:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb78:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800eb7c:	1d3b      	adds	r3, r7, #4
 800eb7e:	4611      	mov	r1, r2
 800eb80:	4618      	mov	r0, r3
 800eb82:	f000 f865 	bl	800ec50 <_ZSt3minIlERKT_S2_S2_>
 800eb86:	4603      	mov	r3, r0
 800eb88:	681a      	ldr	r2, [r3, #0]
 800eb8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb8c:	601a      	str	r2, [r3, #0]
}
 800eb8e:	e005      	b.n	800eb9c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 800eb90:	68ba      	ldr	r2, [r7, #8]
 800eb92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb94:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800eb96:	687a      	ldr	r2, [r7, #4]
 800eb98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb9a:	601a      	str	r2, [r3, #0]
}
 800eb9c:	bf00      	nop
 800eb9e:	3738      	adds	r7, #56	; 0x38
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}
 800eba4:	00000000 	.word	0x00000000

0800eba8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 800eba8:	b590      	push	{r4, r7, lr}
 800ebaa:	b089      	sub	sp, #36	; 0x24
 800ebac:	af02      	add	r7, sp, #8
 800ebae:	60f8      	str	r0, [r7, #12]
 800ebb0:	607a      	str	r2, [r7, #4]
 800ebb2:	603b      	str	r3, [r7, #0]
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	2b03      	cmp	r3, #3
 800ebc6:	d108      	bne.n	800ebda <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 800ebc8:	f7ff fd8d 	bl	800e6e6 <_ZNSt14numeric_limitsIhE3minEv>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 800ebd0:	f7ff fd91 	bl	800e6f6 <_ZNSt14numeric_limitsIhE3maxEv>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	613b      	str	r3, [r7, #16]
 800ebd8:	e025      	b.n	800ec26 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	2b09      	cmp	r3, #9
 800ebe0:	d108      	bne.n	800ebf4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 800ebe2:	f7ff fd6f 	bl	800e6c4 <_ZNSt14numeric_limitsIaE3minEv>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 800ebea:	f7ff fd74 	bl	800e6d6 <_ZNSt14numeric_limitsIaE3maxEv>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	613b      	str	r3, [r7, #16]
 800ebf2:	e018      	b.n	800ec26 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	2b07      	cmp	r3, #7
 800ebfa:	d108      	bne.n	800ec0e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 800ebfc:	f7ff fd84 	bl	800e708 <_ZNSt14numeric_limitsIsE3minEv>
 800ec00:	4603      	mov	r3, r0
 800ec02:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 800ec04:	f7ff fd8a 	bl	800e71c <_ZNSt14numeric_limitsIsE3maxEv>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	613b      	str	r3, [r7, #16]
 800ec0c:	e00b      	b.n	800ec26 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	695c      	ldr	r4, [r3, #20]
 800ec12:	4b0c      	ldr	r3, [pc, #48]	; (800ec44 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 800ec14:	9300      	str	r3, [sp, #0]
 800ec16:	f44f 73c2 	mov.w	r3, #388	; 0x184
 800ec1a:	4a0b      	ldr	r2, [pc, #44]	; (800ec48 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 800ec1c:	490b      	ldr	r1, [pc, #44]	; (800ec4c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 800ec1e:	68f8      	ldr	r0, [r7, #12]
 800ec20:	47a0      	blx	r4
 800ec22:	2301      	movs	r3, #1
 800ec24:	e00a      	b.n	800ec3c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 800ec26:	7af8      	ldrb	r0, [r7, #11]
 800ec28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2a:	9301      	str	r3, [sp, #4]
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	9300      	str	r3, [sp, #0]
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	693a      	ldr	r2, [r7, #16]
 800ec34:	6979      	ldr	r1, [r7, #20]
 800ec36:	f7ff ff23 	bl	800ea80 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 800ec3a:	2300      	movs	r3, #0
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	371c      	adds	r7, #28
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd90      	pop	{r4, r7, pc}
 800ec44:	0801a00c 	.word	0x0801a00c
 800ec48:	08019db8 	.word	0x08019db8
 800ec4c:	08019eb8 	.word	0x08019eb8

0800ec50 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800ec50:	b480      	push	{r7}
 800ec52:	b083      	sub	sp, #12
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	da01      	bge.n	800ec6a <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	e000      	b.n	800ec6c <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800ec6a:	687b      	ldr	r3, [r7, #4]
    }
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	370c      	adds	r7, #12
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr

0800ec78 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800ec78:	b480      	push	{r7}
 800ec7a:	b083      	sub	sp, #12
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
 800ec80:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681a      	ldr	r2, [r3, #0]
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	da01      	bge.n	800ec92 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	e000      	b.n	800ec94 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 800ec92:	687b      	ldr	r3, [r7, #4]
    }
 800ec94:	4618      	mov	r0, r3
 800ec96:	370c      	adds	r7, #12
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr

0800eca0 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 800eca0:	b480      	push	{r7}
 800eca2:	b083      	sub	sp, #12
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	601a      	str	r2, [r3, #0]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	370c      	adds	r7, #12
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr

0800ecbc <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	60f8      	str	r0, [r7, #12]
 800ecc4:	60b9      	str	r1, [r7, #8]
 800ecc6:	607a      	str	r2, [r7, #4]
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	2200      	movs	r2, #0
 800eccc:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 800ecce:	687a      	ldr	r2, [r7, #4]
 800ecd0:	68b9      	ldr	r1, [r7, #8]
 800ecd2:	68f8      	ldr	r0, [r7, #12]
 800ecd4:	f000 f866 	bl	800eda4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3710      	adds	r7, #16
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}

0800ece2 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 800ece2:	b580      	push	{r7, lr}
 800ece4:	b082      	sub	sp, #8
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	2b05      	cmp	r3, #5
 800ecf0:	dd08      	ble.n	800ed04 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d004      	beq.n	800ed04 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f004 fc0a 	bl	8013518 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	4618      	mov	r0, r3
 800ed08:	3708      	adds	r7, #8
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}

0800ed0e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 800ed0e:	b480      	push	{r7}
 800ed10:	b083      	sub	sp, #12
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	6078      	str	r0, [r7, #4]
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	370c      	adds	r7, #12
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed24:	4770      	bx	lr

0800ed26 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 800ed26:	b480      	push	{r7}
 800ed28:	b083      	sub	sp, #12
 800ed2a:	af00      	add	r7, sp, #0
 800ed2c:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	2b05      	cmp	r3, #5
 800ed34:	dd02      	ble.n	800ed3c <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	685b      	ldr	r3, [r3, #4]
 800ed3a:	e001      	b.n	800ed40 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	3304      	adds	r3, #4
  }
 800ed40:	4618      	mov	r0, r3
 800ed42:	370c      	adds	r7, #12
 800ed44:	46bd      	mov	sp, r7
 800ed46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4a:	4770      	bx	lr

0800ed4c <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	2b05      	cmp	r3, #5
 800ed5c:	dd08      	ble.n	800ed70 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	685b      	ldr	r3, [r3, #4]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d004      	beq.n	800ed70 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	685b      	ldr	r3, [r3, #4]
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f004 fbd4 	bl	8013518 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	683a      	ldr	r2, [r7, #0]
 800ed74:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	2b05      	cmp	r3, #5
 800ed7a:	dd0f      	ble.n	800ed9c <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800ed82:	4293      	cmp	r3, r2
 800ed84:	d201      	bcs.n	800ed8a <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 800ed86:	009b      	lsls	r3, r3, #2
 800ed88:	e001      	b.n	800ed8e <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 800ed8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f004 fbd5 	bl	801353e <_Znaj>
 800ed94:	4603      	mov	r3, r0
 800ed96:	461a      	mov	r2, r3
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 800ed9c:	bf00      	nop
 800ed9e:	3708      	adds	r7, #8
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b086      	sub	sp, #24
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 800edb0:	68b9      	ldr	r1, [r7, #8]
 800edb2:	68f8      	ldr	r0, [r7, #12]
 800edb4:	f7ff ffca 	bl	800ed4c <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 800edb8:	68f8      	ldr	r0, [r7, #12]
 800edba:	f7ff ffb4 	bl	800ed26 <_ZN6tflite12RuntimeShape8DimsDataEv>
 800edbe:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	009b      	lsls	r3, r3, #2
 800edc4:	461a      	mov	r2, r3
 800edc6:	6879      	ldr	r1, [r7, #4]
 800edc8:	6978      	ldr	r0, [r7, #20]
 800edca:	f005 fe2f 	bl	8014a2c <memcpy>
  }
 800edce:	bf00      	nop
 800edd0:	3718      	adds	r7, #24
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}

0800edd6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 800edd6:	b580      	push	{r7, lr}
 800edd8:	b086      	sub	sp, #24
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
 800edde:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d103      	bne.n	800edee <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f7ff ff5a 	bl	800eca0 <_ZN6tflite12RuntimeShapeC1Ev>
 800edec:	e00d      	b.n	800ee0a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	689b      	ldr	r3, [r3, #8]
 800edf2:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	3304      	adds	r3, #4
 800edfe:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800ee00:	68fa      	ldr	r2, [r7, #12]
 800ee02:	6939      	ldr	r1, [r7, #16]
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f7ff ff59 	bl	800ecbc <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	3718      	adds	r7, #24
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}

0800ee12 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 800ee12:	b480      	push	{r7}
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr

0800ee24 <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 800ee24:	b480      	push	{r7}
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800ee2c:	ee07 3a90 	vmov	s15, r3
 800ee30:	eeb0 0a67 	vmov.f32	s0, s15
 800ee34:	46bd      	mov	sp, r7
 800ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3a:	4770      	bx	lr

0800ee3c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 800ee3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ee40:	b092      	sub	sp, #72	; 0x48
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	61f8      	str	r0, [r7, #28]
 800ee46:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800ee48:	69fa      	ldr	r2, [r7, #28]
 800ee4a:	69bb      	ldr	r3, [r7, #24]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d107      	bne.n	800ee60 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 800ee50:	f7ff ffdf 	bl	800ee12 <_ZNSt14numeric_limitsIlE3minEv>
 800ee54:	4602      	mov	r2, r0
 800ee56:	69fb      	ldr	r3, [r7, #28]
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d101      	bne.n	800ee60 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	e000      	b.n	800ee62 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 800ee60:	2300      	movs	r3, #0
 800ee62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  std::int64_t a_64(a);
 800ee66:	69fb      	ldr	r3, [r7, #28]
 800ee68:	17da      	asrs	r2, r3, #31
 800ee6a:	60bb      	str	r3, [r7, #8]
 800ee6c:	60fa      	str	r2, [r7, #12]
 800ee6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ee72:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b_64(b);
 800ee76:	69bb      	ldr	r3, [r7, #24]
 800ee78:	17da      	asrs	r2, r3, #31
 800ee7a:	603b      	str	r3, [r7, #0]
 800ee7c:	607a      	str	r2, [r7, #4]
 800ee7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee82:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t ab_64 = a_64 * b_64;
 800ee86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee8a:	fb03 f202 	mul.w	r2, r3, r2
 800ee8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ee92:	fb01 f303 	mul.w	r3, r1, r3
 800ee96:	4413      	add	r3, r2
 800ee98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ee9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee9c:	fba1 4502 	umull	r4, r5, r1, r2
 800eea0:	442b      	add	r3, r5
 800eea2:	461d      	mov	r5, r3
 800eea4:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 800eea8:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800eeac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	db02      	blt.n	800eeba <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 800eeb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eeb8:	e000      	b.n	800eebc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 800eeba:	4b1a      	ldr	r3, [pc, #104]	; (800ef24 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 800eebc:	627b      	str	r3, [r7, #36]	; 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800eebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec0:	17da      	asrs	r2, r3, #31
 800eec2:	4698      	mov	r8, r3
 800eec4:	4691      	mov	r9, r2
 800eec6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800eeca:	eb18 0102 	adds.w	r1, r8, r2
 800eece:	6139      	str	r1, [r7, #16]
 800eed0:	eb49 0303 	adc.w	r3, r9, r3
 800eed4:	617b      	str	r3, [r7, #20]
 800eed6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	da07      	bge.n	800eeee <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 800eede:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eee2:	eb12 0a01 	adds.w	sl, r2, r1
 800eee6:	f143 0b00 	adc.w	fp, r3, #0
 800eeea:	4652      	mov	r2, sl
 800eeec:	465b      	mov	r3, fp
 800eeee:	f04f 0000 	mov.w	r0, #0
 800eef2:	f04f 0100 	mov.w	r1, #0
 800eef6:	0fd0      	lsrs	r0, r2, #31
 800eef8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800eefc:	17d9      	asrs	r1, r3, #31
 800eefe:	4602      	mov	r2, r0
 800ef00:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 800ef02:	4613      	mov	r3, r2
 800ef04:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800ef06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d003      	beq.n	800ef16 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 800ef0e:	f7ff faed 	bl	800e4ec <_ZNSt14numeric_limitsIlE3maxEv>
 800ef12:	4603      	mov	r3, r0
 800ef14:	e000      	b.n	800ef18 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 800ef16:	6a3b      	ldr	r3, [r7, #32]
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3748      	adds	r7, #72	; 0x48
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ef22:	bf00      	nop
 800ef24:	c0000001 	.word	0xc0000001

0800ef28 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	da01      	bge.n	800ef3c <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 800ef38:	f005 fcfa 	bl	8014930 <abort>
    TFLITE_DCHECK_LT(i, size_);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	683a      	ldr	r2, [r7, #0]
 800ef42:	429a      	cmp	r2, r3
 800ef44:	db01      	blt.n	800ef4a <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 800ef46:	f005 fcf3 	bl	8014930 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	2b05      	cmp	r3, #5
 800ef50:	dd06      	ble.n	800ef60 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	685a      	ldr	r2, [r3, #4]
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	009b      	lsls	r3, r3, #2
 800ef5a:	4413      	add	r3, r2
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	e004      	b.n	800ef6a <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 800ef60:	687a      	ldr	r2, [r7, #4]
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	009b      	lsls	r3, r3, #2
 800ef66:	4413      	add	r3, r2
 800ef68:	685b      	ldr	r3, [r3, #4]
  }
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3708      	adds	r7, #8
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}

0800ef72 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 800ef72:	b480      	push	{r7}
 800ef74:	b083      	sub	sp, #12
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	2b05      	cmp	r3, #5
 800ef80:	dd02      	ble.n	800ef88 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	e001      	b.n	800ef8c <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	3304      	adds	r3, #4
  }
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	370c      	adds	r7, #12
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr

0800ef98 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b086      	sub	sp, #24
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 800efa0:	2301      	movs	r3, #1
 800efa2:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f7ff ffe4 	bl	800ef72 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800efaa:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 800efac:	2300      	movs	r3, #0
 800efae:	613b      	str	r3, [r7, #16]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	693a      	ldr	r2, [r7, #16]
 800efb6:	429a      	cmp	r2, r3
 800efb8:	da0c      	bge.n	800efd4 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	009b      	lsls	r3, r3, #2
 800efbe:	68fa      	ldr	r2, [r7, #12]
 800efc0:	4413      	add	r3, r2
 800efc2:	681a      	ldr	r2, [r3, #0]
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	fb02 f303 	mul.w	r3, r2, r3
 800efca:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 800efcc:	693b      	ldr	r3, [r7, #16]
 800efce:	3301      	adds	r3, #1
 800efd0:	613b      	str	r3, [r7, #16]
 800efd2:	e7ed      	b.n	800efb0 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 800efd4:	697b      	ldr	r3, [r7, #20]
  }
 800efd6:	4618      	mov	r0, r3
 800efd8:	3718      	adds	r7, #24
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}

0800efde <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 800efde:	b590      	push	{r4, r7, lr}
 800efe0:	b085      	sub	sp, #20
 800efe2:	af00      	add	r7, sp, #0
 800efe4:	6078      	str	r0, [r7, #4]
 800efe6:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f7ff fe90 	bl	800ed0e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800efee:	4604      	mov	r4, r0
 800eff0:	6838      	ldr	r0, [r7, #0]
 800eff2:	f7ff fe8c 	bl	800ed0e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800eff6:	4603      	mov	r3, r0
 800eff8:	429c      	cmp	r4, r3
 800effa:	d001      	beq.n	800f000 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 800effc:	f005 fc98 	bl	8014930 <abort>
  const int dims_count = shape.DimensionsCount();
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f7ff fe84 	bl	800ed0e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f006:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 800f008:	2300      	movs	r3, #0
 800f00a:	60fb      	str	r3, [r7, #12]
 800f00c:	68fa      	ldr	r2, [r7, #12]
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	429a      	cmp	r2, r3
 800f012:	da11      	bge.n	800f038 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800f014:	68f9      	ldr	r1, [r7, #12]
 800f016:	6878      	ldr	r0, [r7, #4]
 800f018:	f7ff ff86 	bl	800ef28 <_ZNK6tflite12RuntimeShape4DimsEi>
 800f01c:	4604      	mov	r4, r0
 800f01e:	68f9      	ldr	r1, [r7, #12]
 800f020:	6838      	ldr	r0, [r7, #0]
 800f022:	f7ff ff81 	bl	800ef28 <_ZNK6tflite12RuntimeShape4DimsEi>
 800f026:	4603      	mov	r3, r0
 800f028:	429c      	cmp	r4, r3
 800f02a:	d001      	beq.n	800f030 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 800f02c:	f005 fc80 	bl	8014930 <abort>
  for (int i = 0; i < dims_count; ++i) {
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	3301      	adds	r3, #1
 800f034:	60fb      	str	r3, [r7, #12]
 800f036:	e7e9      	b.n	800f00c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f7ff ffad 	bl	800ef98 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800f03e:	4603      	mov	r3, r0
}
 800f040:	4618      	mov	r0, r3
 800f042:	3714      	adds	r7, #20
 800f044:	46bd      	mov	sp, r7
 800f046:	bd90      	pop	{r4, r7, pc}

0800f048 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 800f048:	b580      	push	{r7, lr}
 800f04a:	b086      	sub	sp, #24
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	60f8      	str	r0, [r7, #12]
 800f050:	60b9      	str	r1, [r7, #8]
 800f052:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f05a:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	dc02      	bgt.n	800f068 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	425b      	negs	r3, r3
 800f066:	e000      	b.n	800f06a <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 800f068:	2300      	movs	r3, #0
 800f06a:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 800f06c:	68fa      	ldr	r2, [r7, #12]
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	fa02 f303 	lsl.w	r3, r2, r3
 800f074:	68b9      	ldr	r1, [r7, #8]
 800f076:	4618      	mov	r0, r3
 800f078:	f7ff fee0 	bl	800ee3c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800f07c:	4603      	mov	r3, r0
 800f07e:	6939      	ldr	r1, [r7, #16]
 800f080:	4618      	mov	r0, r3
 800f082:	f000 fb4b 	bl	800f71c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800f086:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3718      	adds	r7, #24
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	60f8      	str	r0, [r7, #12]
 800f098:	60b9      	str	r1, [r7, #8]
 800f09a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d101      	bne.n	800f0a6 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 800f0a2:	f005 fc45 	bl	8014930 <abort>
  TFLITE_DCHECK(node != nullptr);
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d101      	bne.n	800f0b0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 800f0ac:	f005 fc40 	bl	8014930 <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	6819      	ldr	r1, [r3, #0]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	009b      	lsls	r3, r3, #2
 800f0bc:	440b      	add	r3, r1
 800f0be:	685b      	ldr	r3, [r3, #4]
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	68f8      	ldr	r0, [r7, #12]
 800f0c4:	4790      	blx	r2
 800f0c6:	4603      	mov	r3, r0
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3710      	adds	r7, #16
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}

0800f0d0 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	60f8      	str	r0, [r7, #12]
 800f0d8:	60b9      	str	r1, [r7, #8]
 800f0da:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 800f0dc:	687a      	ldr	r2, [r7, #4]
 800f0de:	68b9      	ldr	r1, [r7, #8]
 800f0e0:	68f8      	ldr	r0, [r7, #12]
 800f0e2:	f7ff ffd5 	bl	800f090 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800f0e6:	4603      	mov	r3, r0
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3710      	adds	r7, #16
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}

0800f0f0 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b084      	sub	sp, #16
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	60f8      	str	r0, [r7, #12]
 800f0f8:	60b9      	str	r1, [r7, #8]
 800f0fa:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d101      	bne.n	800f106 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 800f102:	f005 fc15 	bl	8014930 <abort>
  TFLITE_DCHECK(node != nullptr);
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d101      	bne.n	800f110 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 800f10c:	f005 fc10 	bl	8014930 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	6859      	ldr	r1, [r3, #4]
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	009b      	lsls	r3, r3, #2
 800f11c:	440b      	add	r3, r1
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	4619      	mov	r1, r3
 800f122:	68f8      	ldr	r0, [r7, #12]
 800f124:	4790      	blx	r2
 800f126:	4603      	mov	r3, r0
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3710      	adds	r7, #16
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}

0800f130 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 800f130:	b580      	push	{r7, lr}
 800f132:	b08a      	sub	sp, #40	; 0x28
 800f134:	af00      	add	r7, sp, #0
 800f136:	60f8      	str	r0, [r7, #12]
 800f138:	60b9      	str	r1, [r7, #8]
 800f13a:	607a      	str	r2, [r7, #4]
 800f13c:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800f13e:	6879      	ldr	r1, [r7, #4]
 800f140:	68f8      	ldr	r0, [r7, #12]
 800f142:	f7ff ff4c 	bl	800efde <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800f146:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 800f148:	2300      	movs	r3, #0
 800f14a:	627b      	str	r3, [r7, #36]	; 0x24
 800f14c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f14e:	6a3b      	ldr	r3, [r7, #32]
 800f150:	429a      	cmp	r2, r3
 800f152:	da1d      	bge.n	800f190 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 800f154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f156:	009b      	lsls	r3, r3, #2
 800f158:	68ba      	ldr	r2, [r7, #8]
 800f15a:	4413      	add	r3, r2
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 800f160:	f04f 0300 	mov.w	r3, #0
 800f164:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 800f166:	edd7 7a07 	vldr	s15, [r7, #28]
 800f16a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f16e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f172:	d501      	bpl.n	800f178 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 800f174:	69bb      	ldr	r3, [r7, #24]
 800f176:	e000      	b.n	800f17a <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 800f178:	69fb      	ldr	r3, [r7, #28]
 800f17a:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 800f17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17e:	009b      	lsls	r3, r3, #2
 800f180:	683a      	ldr	r2, [r7, #0]
 800f182:	4413      	add	r3, r2
 800f184:	697a      	ldr	r2, [r7, #20]
 800f186:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 800f188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f18a:	3301      	adds	r3, #1
 800f18c:	627b      	str	r3, [r7, #36]	; 0x24
 800f18e:	e7dd      	b.n	800f14c <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 800f190:	bf00      	nop
 800f192:	3728      	adds	r7, #40	; 0x28
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}

0800f198 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 800f198:	b580      	push	{r7, lr}
 800f19a:	b08a      	sub	sp, #40	; 0x28
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	60f8      	str	r0, [r7, #12]
 800f1a0:	60b9      	str	r1, [r7, #8]
 800f1a2:	607a      	str	r2, [r7, #4]
 800f1a4:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800f1a6:	6879      	ldr	r1, [r7, #4]
 800f1a8:	68f8      	ldr	r0, [r7, #12]
 800f1aa:	f7ff ff18 	bl	800efde <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800f1ae:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	627b      	str	r3, [r7, #36]	; 0x24
 800f1b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1b6:	6a3b      	ldr	r3, [r7, #32]
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	da2a      	bge.n	800f212 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 800f1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1be:	009b      	lsls	r3, r3, #2
 800f1c0:	68ba      	ldr	r2, [r7, #8]
 800f1c2:	4413      	add	r3, r2
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 800f1c8:	4b14      	ldr	r3, [pc, #80]	; (800f21c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 800f1ca:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 800f1cc:	f04f 0300 	mov.w	r3, #0
 800f1d0:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 800f1d2:	edd7 7a07 	vldr	s15, [r7, #28]
 800f1d6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800f1da:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1e2:	dd01      	ble.n	800f1e8 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 800f1e4:	69bb      	ldr	r3, [r7, #24]
 800f1e6:	e009      	b.n	800f1fc <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 800f1e8:	edd7 7a07 	vldr	s15, [r7, #28]
 800f1ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1f4:	d501      	bpl.n	800f1fa <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	e000      	b.n	800f1fc <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 800f1fa:	69fb      	ldr	r3, [r7, #28]
 800f1fc:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 800f1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f200:	009b      	lsls	r3, r3, #2
 800f202:	683a      	ldr	r2, [r7, #0]
 800f204:	4413      	add	r3, r2
 800f206:	693a      	ldr	r2, [r7, #16]
 800f208:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 800f20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f20c:	3301      	adds	r3, #1
 800f20e:	627b      	str	r3, [r7, #36]	; 0x24
 800f210:	e7d0      	b.n	800f1b4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 800f212:	bf00      	nop
 800f214:	3728      	adds	r7, #40	; 0x28
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}
 800f21a:	bf00      	nop
 800f21c:	40c00000 	.word	0x40c00000

0800f220 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 800f220:	b580      	push	{r7, lr}
 800f222:	b084      	sub	sp, #16
 800f224:	af00      	add	r7, sp, #0
 800f226:	60f8      	str	r0, [r7, #12]
 800f228:	60b9      	str	r1, [r7, #8]
 800f22a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f230:	2b00      	cmp	r3, #0
 800f232:	d101      	bne.n	800f238 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 800f234:	f005 fb7c 	bl	8014930 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f23c:	211c      	movs	r1, #28
 800f23e:	68f8      	ldr	r0, [r7, #12]
 800f240:	4798      	blx	r3
 800f242:	4603      	mov	r3, r0
}
 800f244:	4618      	mov	r0, r3
 800f246:	3710      	adds	r7, #16
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 800f24c:	b590      	push	{r4, r7, lr}
 800f24e:	b089      	sub	sp, #36	; 0x24
 800f250:	af02      	add	r7, sp, #8
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	691b      	ldr	r3, [r3, #16]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d101      	bne.n	800f262 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800f25e:	f005 fb67 	bl	8014930 <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	691b      	ldr	r3, [r3, #16]
 800f266:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800f268:	2200      	movs	r2, #0
 800f26a:	6839      	ldr	r1, [r7, #0]
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f7ff face 	bl	800e80e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800f272:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d10a      	bne.n	800f290 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	695c      	ldr	r4, [r3, #20]
 800f27e:	4b1a      	ldr	r3, [pc, #104]	; (800f2e8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 800f280:	9300      	str	r3, [sp, #0]
 800f282:	238e      	movs	r3, #142	; 0x8e
 800f284:	4a19      	ldr	r2, [pc, #100]	; (800f2ec <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 800f286:	491a      	ldr	r1, [pc, #104]	; (800f2f0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	47a0      	blx	r4
 800f28c:	2301      	movs	r3, #1
 800f28e:	e027      	b.n	800f2e0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800f290:	2200      	movs	r2, #0
 800f292:	6839      	ldr	r1, [r7, #0]
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f7ff faca 	bl	800e82e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800f29a:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d10a      	bne.n	800f2b8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	695c      	ldr	r4, [r3, #20]
 800f2a6:	4b13      	ldr	r3, [pc, #76]	; (800f2f4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 800f2a8:	9300      	str	r3, [sp, #0]
 800f2aa:	2390      	movs	r3, #144	; 0x90
 800f2ac:	4a0f      	ldr	r2, [pc, #60]	; (800f2ec <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 800f2ae:	4910      	ldr	r1, [pc, #64]	; (800f2f0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	47a0      	blx	r4
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	e013      	b.n	800f2e0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 800f2b8:	693b      	ldr	r3, [r7, #16]
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	2b09      	cmp	r3, #9
 800f2be:	d105      	bne.n	800f2cc <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 800f2c0:	697a      	ldr	r2, [r7, #20]
 800f2c2:	68f9      	ldr	r1, [r7, #12]
 800f2c4:	6938      	ldr	r0, [r7, #16]
 800f2c6:	f000 fa9d 	bl	800f804 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 800f2ca:	e008      	b.n	800f2de <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 800f2cc:	693b      	ldr	r3, [r7, #16]
 800f2ce:	781b      	ldrb	r3, [r3, #0]
 800f2d0:	2b03      	cmp	r3, #3
 800f2d2:	d104      	bne.n	800f2de <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 800f2d4:	697a      	ldr	r2, [r7, #20]
 800f2d6:	68f9      	ldr	r1, [r7, #12]
 800f2d8:	6938      	ldr	r0, [r7, #16]
 800f2da:	f000 fb35 	bl	800f948 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 800f2de:	2300      	movs	r3, #0
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	371c      	adds	r7, #28
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd90      	pop	{r4, r7, pc}
 800f2e8:	0801a138 	.word	0x0801a138
 800f2ec:	0801a08c 	.word	0x0801a08c
 800f2f0:	0801a120 	.word	0x0801a120
 800f2f4:	0801a14c 	.word	0x0801a14c

0800f2f8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 800f2f8:	b590      	push	{r4, r7, lr}
 800f2fa:	b0ad      	sub	sp, #180	; 0xb4
 800f2fc:	af02      	add	r7, sp, #8
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	691b      	ldr	r3, [r3, #16]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d101      	bne.n	800f30e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 800f30a:	f005 fb11 	bl	8014930 <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	691b      	ldr	r3, [r3, #16]
 800f312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 800f316:	2200      	movs	r2, #0
 800f318:	6839      	ldr	r1, [r7, #0]
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f7ff fed8 	bl	800f0d0 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800f320:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 800f324:	2200      	movs	r2, #0
 800f326:	6839      	ldr	r1, [r7, #0]
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f7ff fee1 	bl	800f0f0 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800f32e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 800f332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f336:	7a1b      	ldrb	r3, [r3, #8]
 800f338:	2b09      	cmp	r3, #9
 800f33a:	d032      	beq.n	800f3a2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 800f33c:	2b09      	cmp	r3, #9
 800f33e:	f300 808c 	bgt.w	800f45a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 800f342:	2b01      	cmp	r3, #1
 800f344:	d002      	beq.n	800f34c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 800f346:	2b03      	cmp	r3, #3
 800f348:	d059      	beq.n	800f3fe <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 800f34a:	e086      	b.n	800f45a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 800f34c:	f107 030c 	add.w	r3, r7, #12
 800f350:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800f354:	4618      	mov	r0, r3
 800f356:	f001 fd36 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800f35a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800f35e:	f000 fb95 	bl	800fa8c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800f362:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 800f364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f368:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800f36c:	4618      	mov	r0, r3
 800f36e:	f001 fd2a 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 800f372:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800f376:	f000 fb98 	bl	800faaa <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800f37a:	4603      	mov	r3, r0
 800f37c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f380:	f107 000c 	add.w	r0, r7, #12
 800f384:	4621      	mov	r1, r4
 800f386:	f7ff fed3 	bl	800f130 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 800f38a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f38e:	4618      	mov	r0, r3
 800f390:	f7ff fca7 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 800f394:	f107 030c 	add.w	r3, r7, #12
 800f398:	4618      	mov	r0, r3
 800f39a:	f7ff fca2 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	e069      	b.n	800f476 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 800f3a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f3a6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f001 fd0b 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 800f3b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f3b4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f001 fd04 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 800f3be:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800f3c2:	f000 fb83 	bl	800facc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800f3c6:	4604      	mov	r4, r0
 800f3c8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800f3cc:	f000 fb8d 	bl	800faea <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800f3d6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800f3da:	9300      	str	r3, [sp, #0]
 800f3dc:	4623      	mov	r3, r4
 800f3de:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800f3e2:	f000 fb93 	bl	800fb0c <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 800f3e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7ff fc79 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 800f3f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7ff fc74 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	e03b      	b.n	800f476 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 800f3fe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f402:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800f406:	4618      	mov	r0, r3
 800f408:	f001 fcdd 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 800f40c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f410:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800f414:	4618      	mov	r0, r3
 800f416:	f001 fcd6 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 800f41a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800f41e:	f000 fbc1 	bl	800fba4 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800f422:	4604      	mov	r4, r0
 800f424:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800f428:	f000 fbcb 	bl	800fbc2 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 800f42c:	4603      	mov	r3, r0
 800f42e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800f432:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800f436:	9300      	str	r3, [sp, #0]
 800f438:	4623      	mov	r3, r4
 800f43a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800f43e:	f000 fbd1 	bl	800fbe4 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 800f442:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f446:	4618      	mov	r0, r3
 800f448:	f7ff fc4b 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 800f44c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f450:	4618      	mov	r0, r3
 800f452:	f7ff fc46 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 800f456:	2300      	movs	r3, #0
 800f458:	e00d      	b.n	800f476 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	695c      	ldr	r4, [r3, #20]
 800f45e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f462:	7a1b      	ldrb	r3, [r3, #8]
 800f464:	4618      	mov	r0, r3
 800f466:	f7fe ffc5 	bl	800e3f4 <TfLiteTypeGetName>
 800f46a:	4603      	mov	r3, r0
 800f46c:	461a      	mov	r2, r3
 800f46e:	4904      	ldr	r1, [pc, #16]	; (800f480 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 800f474:	2301      	movs	r3, #1
    }
  }
}
 800f476:	4618      	mov	r0, r3
 800f478:	37ac      	adds	r7, #172	; 0xac
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd90      	pop	{r4, r7, pc}
 800f47e:	bf00      	nop
 800f480:	0801a160 	.word	0x0801a160

0800f484 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 800f484:	b580      	push	{r7, lr}
 800f486:	b084      	sub	sp, #16
 800f488:	af00      	add	r7, sp, #0
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f494:	2b00      	cmp	r3, #0
 800f496:	d101      	bne.n	800f49c <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 800f498:	f005 fa4a 	bl	8014930 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4a0:	2104      	movs	r1, #4
 800f4a2:	68f8      	ldr	r0, [r7, #12]
 800f4a4:	4798      	blx	r3
 800f4a6:	4603      	mov	r3, r0
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3710      	adds	r7, #16
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}

0800f4b0 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 800f4b0:	b590      	push	{r4, r7, lr}
 800f4b2:	b087      	sub	sp, #28
 800f4b4:	af02      	add	r7, sp, #8
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	691b      	ldr	r3, [r3, #16]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d101      	bne.n	800f4c6 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800f4c2:	f005 fa35 	bl	8014930 <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	691b      	ldr	r3, [r3, #16]
 800f4ca:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	6839      	ldr	r1, [r7, #0]
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f7ff f99c 	bl	800e80e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800f4d6:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d10a      	bne.n	800f4f4 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	695c      	ldr	r4, [r3, #20]
 800f4e2:	4b20      	ldr	r3, [pc, #128]	; (800f564 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 800f4e4:	9300      	str	r3, [sp, #0]
 800f4e6:	23cd      	movs	r3, #205	; 0xcd
 800f4e8:	4a1f      	ldr	r2, [pc, #124]	; (800f568 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 800f4ea:	4920      	ldr	r1, [pc, #128]	; (800f56c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	47a0      	blx	r4
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	e033      	b.n	800f55c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	781b      	ldrb	r3, [r3, #0]
 800f4f8:	2b09      	cmp	r3, #9
 800f4fa:	d115      	bne.n	800f528 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 800f506:	4618      	mov	r0, r3
 800f508:	eef0 0a67 	vmov.f32	s1, s15
 800f50c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800f510:	f000 fbb3 	bl	800fc7a <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 800f514:	4603      	mov	r3, r0
 800f516:	461a      	mov	r2, r3
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	691b      	ldr	r3, [r3, #16]
 800f520:	b25a      	sxtb	r2, r3
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	705a      	strb	r2, [r3, #1]
 800f526:	e018      	b.n	800f55a <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	781b      	ldrb	r3, [r3, #0]
 800f52c:	2b03      	cmp	r3, #3
 800f52e:	d114      	bne.n	800f55a <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 800f53a:	4618      	mov	r0, r3
 800f53c:	eef0 0a67 	vmov.f32	s1, s15
 800f540:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800f544:	f000 fbe8 	bl	800fd18 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 800f548:	4603      	mov	r3, r0
 800f54a:	461a      	mov	r2, r3
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	691b      	ldr	r3, [r3, #16]
 800f554:	b2da      	uxtb	r2, r3
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 800f55a:	2300      	movs	r3, #0
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	3714      	adds	r7, #20
 800f560:	46bd      	mov	sp, r7
 800f562:	bd90      	pop	{r4, r7, pc}
 800f564:	0801a138 	.word	0x0801a138
 800f568:	0801a08c 	.word	0x0801a08c
 800f56c:	0801a120 	.word	0x0801a120

0800f570 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 800f570:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f572:	b0ad      	sub	sp, #180	; 0xb4
 800f574:	af02      	add	r7, sp, #8
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	691b      	ldr	r3, [r3, #16]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d101      	bne.n	800f586 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 800f582:	f005 f9d5 	bl	8014930 <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	691b      	ldr	r3, [r3, #16]
 800f58a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 800f58e:	2200      	movs	r2, #0
 800f590:	6839      	ldr	r1, [r7, #0]
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f7ff fd9c 	bl	800f0d0 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800f598:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 800f59c:	2200      	movs	r2, #0
 800f59e:	6839      	ldr	r1, [r7, #0]
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f7ff fda5 	bl	800f0f0 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800f5a6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 800f5aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f5ae:	7a1b      	ldrb	r3, [r3, #8]
 800f5b0:	2b09      	cmp	r3, #9
 800f5b2:	d032      	beq.n	800f61a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 800f5b4:	2b09      	cmp	r3, #9
 800f5b6:	f300 809c 	bgt.w	800f6f2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 800f5ba:	2b01      	cmp	r3, #1
 800f5bc:	d002      	beq.n	800f5c4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 800f5be:	2b03      	cmp	r3, #3
 800f5c0:	d062      	beq.n	800f688 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 800f5c2:	e096      	b.n	800f6f2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 800f5c4:	f107 030c 	add.w	r3, r7, #12
 800f5c8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f001 fbfa 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800f5d2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800f5d6:	f000 fa59 	bl	800fa8c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800f5da:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 800f5dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5e0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f001 fbee 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 800f5ea:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800f5ee:	f000 fa5c 	bl	800faaa <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f5f8:	f107 000c 	add.w	r0, r7, #12
 800f5fc:	4621      	mov	r1, r4
 800f5fe:	f7ff fdcb 	bl	800f198 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 800f602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f606:	4618      	mov	r0, r3
 800f608:	f7ff fb6b 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 800f60c:	f107 030c 	add.w	r3, r7, #12
 800f610:	4618      	mov	r0, r3
 800f612:	f7ff fb66 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 800f616:	2300      	movs	r3, #0
 800f618:	e079      	b.n	800f70e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 800f61a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f61e:	f993 4001 	ldrsb.w	r4, [r3, #1]
 800f622:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f626:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 800f62a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f62e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800f632:	4618      	mov	r0, r3
 800f634:	f001 fbc7 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 800f638:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800f63c:	f000 fa46 	bl	800facc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800f640:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 800f642:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f646:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800f64a:	4618      	mov	r0, r3
 800f64c:	f001 fbbb 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 800f650:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800f654:	f000 fa49 	bl	800faea <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800f658:	4603      	mov	r3, r0
 800f65a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800f65e:	9301      	str	r3, [sp, #4]
 800f660:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f664:	9300      	str	r3, [sp, #0]
 800f666:	4633      	mov	r3, r6
 800f668:	4629      	mov	r1, r5
 800f66a:	4620      	mov	r0, r4
 800f66c:	f000 fba3 	bl	800fdb6 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 800f670:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f674:	4618      	mov	r0, r3
 800f676:	f7ff fb34 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 800f67a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f67e:	4618      	mov	r0, r3
 800f680:	f7ff fb2f 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 800f684:	2300      	movs	r3, #0
 800f686:	e042      	b.n	800f70e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 800f688:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f68c:	78dc      	ldrb	r4, [r3, #3]
 800f68e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f692:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 800f694:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f698:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800f69c:	4618      	mov	r0, r3
 800f69e:	f001 fb92 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 800f6a2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800f6a6:	f000 fa7d 	bl	800fba4 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800f6aa:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 800f6ac:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f6b0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f001 fb86 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 800f6ba:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800f6be:	f000 fa80 	bl	800fbc2 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800f6c8:	9301      	str	r3, [sp, #4]
 800f6ca:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f6ce:	9300      	str	r3, [sp, #0]
 800f6d0:	4633      	mov	r3, r6
 800f6d2:	4629      	mov	r1, r5
 800f6d4:	4620      	mov	r0, r4
 800f6d6:	f000 fbad 	bl	800fe34 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 800f6da:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7ff faff 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 800f6e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7ff fafa 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	e00d      	b.n	800f70e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	695c      	ldr	r4, [r3, #20]
 800f6f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f6fa:	7a1b      	ldrb	r3, [r3, #8]
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7fe fe79 	bl	800e3f4 <TfLiteTypeGetName>
 800f702:	4603      	mov	r3, r0
 800f704:	461a      	mov	r2, r3
 800f706:	4904      	ldr	r1, [pc, #16]	; (800f718 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 800f70c:	2301      	movs	r3, #1
    }
  }
}
 800f70e:	4618      	mov	r0, r3
 800f710:	37ac      	adds	r7, #172	; 0xac
 800f712:	46bd      	mov	sp, r7
 800f714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f716:	bf00      	nop
 800f718:	0801a160 	.word	0x0801a160

0800f71c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 800f71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f71e:	b089      	sub	sp, #36	; 0x24
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
 800f724:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 800f726:	6839      	ldr	r1, [r7, #0]
 800f728:	2900      	cmp	r1, #0
 800f72a:	da06      	bge.n	800f73a <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 800f72c:	4b31      	ldr	r3, [pc, #196]	; (800f7f4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 800f72e:	4a32      	ldr	r2, [pc, #200]	; (800f7f8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800f730:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800f734:	4831      	ldr	r0, [pc, #196]	; (800f7fc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800f736:	f005 f903 	bl	8014940 <__assert_func>
  assert(exponent <= 31);
 800f73a:	6839      	ldr	r1, [r7, #0]
 800f73c:	291f      	cmp	r1, #31
 800f73e:	dd06      	ble.n	800f74e <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 800f740:	4b2f      	ldr	r3, [pc, #188]	; (800f800 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 800f742:	4a2d      	ldr	r2, [pc, #180]	; (800f7f8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800f744:	f240 1167 	movw	r1, #359	; 0x167
 800f748:	482c      	ldr	r0, [pc, #176]	; (800f7fc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800f74a:	f005 f8f9 	bl	8014940 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800f74e:	f04f 0001 	mov.w	r0, #1
 800f752:	f04f 0100 	mov.w	r1, #0
 800f756:	683c      	ldr	r4, [r7, #0]
 800f758:	f1a4 0620 	sub.w	r6, r4, #32
 800f75c:	f1c4 0520 	rsb	r5, r4, #32
 800f760:	fa01 f304 	lsl.w	r3, r1, r4
 800f764:	fa00 f606 	lsl.w	r6, r0, r6
 800f768:	4333      	orrs	r3, r6
 800f76a:	fa20 f505 	lsr.w	r5, r0, r5
 800f76e:	432b      	orrs	r3, r5
 800f770:	fa00 f204 	lsl.w	r2, r0, r4
 800f774:	4613      	mov	r3, r2
 800f776:	3b01      	subs	r3, #1
 800f778:	4618      	mov	r0, r3
 800f77a:	f000 fb93 	bl	800fea4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f77e:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 800f780:	2000      	movs	r0, #0
 800f782:	f000 fb8f 	bl	800fea4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f786:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 800f788:	2001      	movs	r0, #1
 800f78a:	f000 fb8b 	bl	800fea4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f78e:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 800f790:	69f9      	ldr	r1, [r7, #28]
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f000 fb91 	bl	800feba <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f798:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 800f79a:	2101      	movs	r1, #1
 800f79c:	69f8      	ldr	r0, [r7, #28]
 800f79e:	f000 fb9a 	bl	800fed6 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800f7a2:	4604      	mov	r4, r0
 800f7a4:	69b9      	ldr	r1, [r7, #24]
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f000 fba4 	bl	800fef4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	6979      	ldr	r1, [r7, #20]
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f000 fb82 	bl	800feba <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	4619      	mov	r1, r3
 800f7ba:	4620      	mov	r0, r4
 800f7bc:	f000 fbae 	bl	800ff1c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800f7c0:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 800f7c2:	6839      	ldr	r1, [r7, #0]
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f000 fb86 	bl	800fed6 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800f7ca:	4604      	mov	r4, r0
 800f7cc:	68f9      	ldr	r1, [r7, #12]
 800f7ce:	6938      	ldr	r0, [r7, #16]
 800f7d0:	f000 fbb2 	bl	800ff38 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	6979      	ldr	r1, [r7, #20]
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f000 fb6e 	bl	800feba <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	4620      	mov	r0, r4
 800f7e4:	f000 fb9a 	bl	800ff1c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800f7e8:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	3724      	adds	r7, #36	; 0x24
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7f2:	bf00      	nop
 800f7f4:	0801a1cc 	.word	0x0801a1cc
 800f7f8:	0801a1dc 	.word	0x0801a1dc
 800f7fc:	0801a238 	.word	0x0801a238
 800f800:	0801a2c8 	.word	0x0801a2c8

0800f804 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 800f804:	b590      	push	{r4, r7, lr}
 800f806:	b099      	sub	sp, #100	; 0x64
 800f808:	af00      	add	r7, sp, #0
 800f80a:	60f8      	str	r0, [r7, #12]
 800f80c:	60b9      	str	r1, [r7, #8]
 800f80e:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 800f810:	f04f 0300 	mov.w	r3, #0
 800f814:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 800f816:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800f81a:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	ed93 7a03 	vldr	s14, [r3, #12]
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	edd3 7a03 	vldr	s15, [r3, #12]
 800f828:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 800f82c:	ee16 0a90 	vmov	r0, s13
 800f830:	f7f0 fe94 	bl	800055c <__aeabi_f2d>
 800f834:	4602      	mov	r2, r0
 800f836:	460b      	mov	r3, r1
 800f838:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 800f83c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f840:	68f9      	ldr	r1, [r7, #12]
 800f842:	4618      	mov	r0, r3
 800f844:	f7ff fac7 	bl	800edd6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 800f848:	f107 0310 	add.w	r3, r7, #16
 800f84c:	68b9      	ldr	r1, [r7, #8]
 800f84e:	4618      	mov	r0, r3
 800f850:	f7ff fac1 	bl	800edd6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f103 0214 	add.w	r2, r3, #20
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	3318      	adds	r3, #24
 800f85e:	4619      	mov	r1, r3
 800f860:	4610      	mov	r0, r2
 800f862:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800f866:	f7fe fe4b 	bl	800e500 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 800f86a:	f7fe ff2b 	bl	800e6c4 <_ZNSt14numeric_limitsIaE3minEv>
 800f86e:	4603      	mov	r3, r0
 800f870:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	edd3 7a03 	vldr	s15, [r3, #12]
 800f87c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f880:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f884:	eeb0 0a66 	vmov.f32	s0, s13
 800f888:	f003 ff6c 	bl	8013764 <roundf>
 800f88c:	eef0 7a40 	vmov.f32	s15, s0
 800f890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f894:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 800f898:	4423      	add	r3, r4
 800f89a:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 800f89c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f8a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f8a4:	4611      	mov	r1, r2
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f7ff f9e6 	bl	800ec78 <_ZSt3maxIlERKT_S2_S2_>
 800f8ac:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 800f8b4:	f7ff fab6 	bl	800ee24 <_ZNSt14numeric_limitsIfE8infinityEv>
 800f8b8:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 800f8bc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800f8c0:	eef4 7a47 	vcmp.f32	s15, s14
 800f8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8c8:	d103      	bne.n	800f8d2 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 800f8ca:	f7fe ff04 	bl	800e6d6 <_ZNSt14numeric_limitsIaE3maxEv>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	e022      	b.n	800f918 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 800f8d2:	f7fe ff00 	bl	800e6d6 <_ZNSt14numeric_limitsIaE3maxEv>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	edd3 7a03 	vldr	s15, [r3, #12]
 800f8e4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f8e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f8ec:	eeb0 0a66 	vmov.f32	s0, s13
 800f8f0:	f003 ff38 	bl	8013764 <roundf>
 800f8f4:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 800f8f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f8fc:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 800f900:	4423      	add	r3, r4
 800f902:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 800f904:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f908:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f90c:	4611      	mov	r1, r2
 800f90e:	4618      	mov	r0, r3
 800f910:	f7ff f99e 	bl	800ec50 <_ZSt3minIlERKT_S2_S2_>
 800f914:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 800f916:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 800f918:	687a      	ldr	r2, [r7, #4]
 800f91a:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	691a      	ldr	r2, [r3, #16]
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	691a      	ldr	r2, [r3, #16]
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 800f92c:	f107 0310 	add.w	r3, r7, #16
 800f930:	4618      	mov	r0, r3
 800f932:	f7ff f9d6 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 800f936:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7ff f9d1 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800f940:	bf00      	nop
 800f942:	3764      	adds	r7, #100	; 0x64
 800f944:	46bd      	mov	sp, r7
 800f946:	bd90      	pop	{r4, r7, pc}

0800f948 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 800f948:	b590      	push	{r4, r7, lr}
 800f94a:	b099      	sub	sp, #100	; 0x64
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	60f8      	str	r0, [r7, #12]
 800f950:	60b9      	str	r1, [r7, #8]
 800f952:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 800f954:	f04f 0300 	mov.w	r3, #0
 800f958:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 800f95a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800f95e:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	ed93 7a03 	vldr	s14, [r3, #12]
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	edd3 7a03 	vldr	s15, [r3, #12]
 800f96c:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 800f970:	ee16 0a90 	vmov	r0, s13
 800f974:	f7f0 fdf2 	bl	800055c <__aeabi_f2d>
 800f978:	4602      	mov	r2, r0
 800f97a:	460b      	mov	r3, r1
 800f97c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 800f980:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f984:	68f9      	ldr	r1, [r7, #12]
 800f986:	4618      	mov	r0, r3
 800f988:	f7ff fa25 	bl	800edd6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 800f98c:	f107 0310 	add.w	r3, r7, #16
 800f990:	68b9      	ldr	r1, [r7, #8]
 800f992:	4618      	mov	r0, r3
 800f994:	f7ff fa1f 	bl	800edd6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f103 0214 	add.w	r2, r3, #20
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	3318      	adds	r3, #24
 800f9a2:	4619      	mov	r1, r3
 800f9a4:	4610      	mov	r0, r2
 800f9a6:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800f9aa:	f7fe fda9 	bl	800e500 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 800f9ae:	f7fe fe9a 	bl	800e6e6 <_ZNSt14numeric_limitsIhE3minEv>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	edd3 7a03 	vldr	s15, [r3, #12]
 800f9c0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f9c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f9c8:	eeb0 0a66 	vmov.f32	s0, s13
 800f9cc:	f003 feca 	bl	8013764 <roundf>
 800f9d0:	eef0 7a40 	vmov.f32	s15, s0
 800f9d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f9d8:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 800f9dc:	4423      	add	r3, r4
 800f9de:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 800f9e0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f9e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f9e8:	4611      	mov	r1, r2
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7ff f944 	bl	800ec78 <_ZSt3maxIlERKT_S2_S2_>
 800f9f0:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 800f9f2:	681a      	ldr	r2, [r3, #0]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 800f9f8:	f7ff fa14 	bl	800ee24 <_ZNSt14numeric_limitsIfE8infinityEv>
 800f9fc:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 800fa00:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800fa04:	eef4 7a47 	vcmp.f32	s15, s14
 800fa08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa0c:	d103      	bne.n	800fa16 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 800fa0e:	f7fe fe72 	bl	800e6f6 <_ZNSt14numeric_limitsIhE3maxEv>
 800fa12:	4603      	mov	r3, r0
 800fa14:	e022      	b.n	800fa5c <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 800fa16:	f7fe fe6e 	bl	800e6f6 <_ZNSt14numeric_limitsIhE3maxEv>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	edd3 7a03 	vldr	s15, [r3, #12]
 800fa28:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800fa2c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800fa30:	eeb0 0a66 	vmov.f32	s0, s13
 800fa34:	f003 fe96 	bl	8013764 <roundf>
 800fa38:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 800fa3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa40:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 800fa44:	4423      	add	r3, r4
 800fa46:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 800fa48:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800fa4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fa50:	4611      	mov	r1, r2
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7ff f8fc 	bl	800ec50 <_ZSt3minIlERKT_S2_S2_>
 800fa58:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 800fa5a:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 800fa5c:	687a      	ldr	r2, [r7, #4]
 800fa5e:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	691a      	ldr	r2, [r3, #16]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	691a      	ldr	r2, [r3, #16]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 800fa70:	f107 0310 	add.w	r3, r7, #16
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7ff f934 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 800fa7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7ff f92f 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800fa84:	bf00      	nop
 800fa86:	3764      	adds	r7, #100	; 0x64
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd90      	pop	{r4, r7, pc}

0800fa8c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b082      	sub	sp, #8
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d101      	bne.n	800fa9e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 800fa9a:	f004 ff49 	bl	8014930 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	3708      	adds	r7, #8
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}

0800faaa <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800faaa:	b480      	push	{r7}
 800faac:	b083      	sub	sp, #12
 800faae:	af00      	add	r7, sp, #0
 800fab0:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d002      	beq.n	800fabe <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	e000      	b.n	800fac0 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 800fabe:	2300      	movs	r3, #0
}
 800fac0:	4618      	mov	r0, r3
 800fac2:	370c      	adds	r7, #12
 800fac4:	46bd      	mov	sp, r7
 800fac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faca:	4770      	bx	lr

0800facc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d101      	bne.n	800fade <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 800fada:	f004 ff29 	bl	8014930 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3708      	adds	r7, #8
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}

0800faea <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800faea:	b480      	push	{r7}
 800faec:	b083      	sub	sp, #12
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d002      	beq.n	800fafe <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	e000      	b.n	800fb00 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 800fafe:	2300      	movs	r3, #0
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	370c      	adds	r7, #12
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr

0800fb0c <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 800fb0c:	b590      	push	{r4, r7, lr}
 800fb0e:	b089      	sub	sp, #36	; 0x24
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	607a      	str	r2, [r7, #4]
 800fb18:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800fb1a:	6879      	ldr	r1, [r7, #4]
 800fb1c:	68b8      	ldr	r0, [r7, #8]
 800fb1e:	f7ff fa5e 	bl	800efde <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800fb22:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 800fb24:	2300      	movs	r3, #0
 800fb26:	61fb      	str	r3, [r7, #28]
 800fb28:	69fa      	ldr	r2, [r7, #28]
 800fb2a:	69bb      	ldr	r3, [r7, #24]
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	da35      	bge.n	800fb9c <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 800fb30:	69fb      	ldr	r3, [r7, #28]
 800fb32:	683a      	ldr	r2, [r7, #0]
 800fb34:	4413      	add	r3, r2
 800fb36:	f993 3000 	ldrsb.w	r3, [r3]
 800fb3a:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	68db      	ldr	r3, [r3, #12]
 800fb44:	697a      	ldr	r2, [r7, #20]
 800fb46:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 800fb50:	461a      	mov	r2, r3
 800fb52:	f7ff fa79 	bl	800f048 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800fb56:	4603      	mov	r3, r0
        data.params.output_offset +
 800fb58:	4423      	add	r3, r4
    int32_t clamped =
 800fb5a:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	3304      	adds	r3, #4
 800fb60:	f107 0210 	add.w	r2, r7, #16
 800fb64:	4611      	mov	r1, r2
 800fb66:	4618      	mov	r0, r3
 800fb68:	f7ff f886 	bl	800ec78 <_ZSt3maxIlERKT_S2_S2_>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	3308      	adds	r3, #8
 800fb76:	f107 0210 	add.w	r2, r7, #16
 800fb7a:	4611      	mov	r1, r2
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7ff f867 	bl	800ec50 <_ZSt3minIlERKT_S2_S2_>
 800fb82:	4603      	mov	r3, r0
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 800fb88:	6939      	ldr	r1, [r7, #16]
 800fb8a:	69fb      	ldr	r3, [r7, #28]
 800fb8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb8e:	4413      	add	r3, r2
 800fb90:	b24a      	sxtb	r2, r1
 800fb92:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 800fb94:	69fb      	ldr	r3, [r7, #28]
 800fb96:	3301      	adds	r3, #1
 800fb98:	61fb      	str	r3, [r7, #28]
 800fb9a:	e7c5      	b.n	800fb28 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 800fb9c:	bf00      	nop
 800fb9e:	3724      	adds	r7, #36	; 0x24
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd90      	pop	{r4, r7, pc}

0800fba4 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d101      	bne.n	800fbb6 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 800fbb2:	f004 febd 	bl	8014930 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3708      	adds	r7, #8
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}

0800fbc2 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800fbc2:	b480      	push	{r7}
 800fbc4:	b083      	sub	sp, #12
 800fbc6:	af00      	add	r7, sp, #0
 800fbc8:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d002      	beq.n	800fbd6 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	e000      	b.n	800fbd8 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 800fbd6:	2300      	movs	r3, #0
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	370c      	adds	r7, #12
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe2:	4770      	bx	lr

0800fbe4 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 800fbe4:	b590      	push	{r4, r7, lr}
 800fbe6:	b089      	sub	sp, #36	; 0x24
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	60f8      	str	r0, [r7, #12]
 800fbec:	60b9      	str	r1, [r7, #8]
 800fbee:	607a      	str	r2, [r7, #4]
 800fbf0:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800fbf2:	6879      	ldr	r1, [r7, #4]
 800fbf4:	68b8      	ldr	r0, [r7, #8]
 800fbf6:	f7ff f9f2 	bl	800efde <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800fbfa:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	61fb      	str	r3, [r7, #28]
 800fc00:	69fa      	ldr	r2, [r7, #28]
 800fc02:	69bb      	ldr	r3, [r7, #24]
 800fc04:	429a      	cmp	r2, r3
 800fc06:	da34      	bge.n	800fc72 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 800fc08:	69fb      	ldr	r3, [r7, #28]
 800fc0a:	683a      	ldr	r2, [r7, #0]
 800fc0c:	4413      	add	r3, r2
 800fc0e:	781b      	ldrb	r3, [r3, #0]
 800fc10:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	68db      	ldr	r3, [r3, #12]
 800fc1a:	697a      	ldr	r2, [r7, #20]
 800fc1c:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 800fc26:	461a      	mov	r2, r3
 800fc28:	f7ff fa0e 	bl	800f048 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800fc2c:	4603      	mov	r3, r0
        data.params.output_offset +
 800fc2e:	4423      	add	r3, r4
    int32_t clamped =
 800fc30:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	3304      	adds	r3, #4
 800fc36:	f107 0210 	add.w	r2, r7, #16
 800fc3a:	4611      	mov	r1, r2
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f7ff f81b 	bl	800ec78 <_ZSt3maxIlERKT_S2_S2_>
 800fc42:	4603      	mov	r3, r0
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	3308      	adds	r3, #8
 800fc4c:	f107 0210 	add.w	r2, r7, #16
 800fc50:	4611      	mov	r1, r2
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7fe fffc 	bl	800ec50 <_ZSt3minIlERKT_S2_S2_>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 800fc5e:	6939      	ldr	r1, [r7, #16]
 800fc60:	69fb      	ldr	r3, [r7, #28]
 800fc62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc64:	4413      	add	r3, r2
 800fc66:	b2ca      	uxtb	r2, r1
 800fc68:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 800fc6a:	69fb      	ldr	r3, [r7, #28]
 800fc6c:	3301      	adds	r3, #1
 800fc6e:	61fb      	str	r3, [r7, #28]
 800fc70:	e7c6      	b.n	800fc00 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 800fc72:	bf00      	nop
 800fc74:	3724      	adds	r7, #36	; 0x24
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd90      	pop	{r4, r7, pc}

0800fc7a <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 800fc7a:	b5b0      	push	{r4, r5, r7, lr}
 800fc7c:	b088      	sub	sp, #32
 800fc7e:	af00      	add	r7, sp, #0
 800fc80:	ed87 0a03 	vstr	s0, [r7, #12]
 800fc84:	edc7 0a02 	vstr	s1, [r7, #8]
 800fc88:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 800fc8a:	ed97 7a03 	vldr	s14, [r7, #12]
 800fc8e:	edd7 7a02 	vldr	s15, [r7, #8]
 800fc92:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800fc96:	ee16 0a90 	vmov	r0, s13
 800fc9a:	f7f0 fc5f 	bl	800055c <__aeabi_f2d>
 800fc9e:	4602      	mov	r2, r0
 800fca0:	460b      	mov	r3, r1
 800fca2:	ec43 2b10 	vmov	d0, r2, r3
 800fca6:	f003 fd17 	bl	80136d8 <round>
 800fcaa:	ec55 4b10 	vmov	r4, r5, d0
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f7f0 fc42 	bl	8000538 <__aeabi_i2d>
 800fcb4:	4602      	mov	r2, r0
 800fcb6:	460b      	mov	r3, r1
 800fcb8:	4620      	mov	r0, r4
 800fcba:	4629      	mov	r1, r5
 800fcbc:	f7f0 faf0 	bl	80002a0 <__adddf3>
 800fcc0:	4602      	mov	r2, r0
 800fcc2:	460b      	mov	r3, r1
 800fcc4:	4610      	mov	r0, r2
 800fcc6:	4619      	mov	r1, r3
 800fcc8:	f7f0 ff50 	bl	8000b6c <__aeabi_d2iz>
 800fccc:	4603      	mov	r3, r0
 800fcce:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 800fcd0:	f7fe fcf8 	bl	800e6c4 <_ZNSt14numeric_limitsIaE3minEv>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	61bb      	str	r3, [r7, #24]
 800fcd8:	f107 0214 	add.w	r2, r7, #20
 800fcdc:	f107 0318 	add.w	r3, r7, #24
 800fce0:	4611      	mov	r1, r2
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7fe ffc8 	bl	800ec78 <_ZSt3maxIlERKT_S2_S2_>
 800fce8:	4603      	mov	r3, r0
  result =
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 800fcee:	f7fe fcf2 	bl	800e6d6 <_ZNSt14numeric_limitsIaE3maxEv>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	61fb      	str	r3, [r7, #28]
 800fcf6:	f107 0214 	add.w	r2, r7, #20
 800fcfa:	f107 031c 	add.w	r3, r7, #28
 800fcfe:	4611      	mov	r1, r2
 800fd00:	4618      	mov	r0, r3
 800fd02:	f7fe ffa5 	bl	800ec50 <_ZSt3minIlERKT_S2_S2_>
 800fd06:	4603      	mov	r3, r0
  result =
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	617b      	str	r3, [r7, #20]
  return result;
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	b25b      	sxtb	r3, r3
}
 800fd10:	4618      	mov	r0, r3
 800fd12:	3720      	adds	r7, #32
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bdb0      	pop	{r4, r5, r7, pc}

0800fd18 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 800fd18:	b5b0      	push	{r4, r5, r7, lr}
 800fd1a:	b088      	sub	sp, #32
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	ed87 0a03 	vstr	s0, [r7, #12]
 800fd22:	edc7 0a02 	vstr	s1, [r7, #8]
 800fd26:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 800fd28:	ed97 7a03 	vldr	s14, [r7, #12]
 800fd2c:	edd7 7a02 	vldr	s15, [r7, #8]
 800fd30:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800fd34:	ee16 0a90 	vmov	r0, s13
 800fd38:	f7f0 fc10 	bl	800055c <__aeabi_f2d>
 800fd3c:	4602      	mov	r2, r0
 800fd3e:	460b      	mov	r3, r1
 800fd40:	ec43 2b10 	vmov	d0, r2, r3
 800fd44:	f003 fcc8 	bl	80136d8 <round>
 800fd48:	ec55 4b10 	vmov	r4, r5, d0
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f7f0 fbf3 	bl	8000538 <__aeabi_i2d>
 800fd52:	4602      	mov	r2, r0
 800fd54:	460b      	mov	r3, r1
 800fd56:	4620      	mov	r0, r4
 800fd58:	4629      	mov	r1, r5
 800fd5a:	f7f0 faa1 	bl	80002a0 <__adddf3>
 800fd5e:	4602      	mov	r2, r0
 800fd60:	460b      	mov	r3, r1
 800fd62:	4610      	mov	r0, r2
 800fd64:	4619      	mov	r1, r3
 800fd66:	f7f0 ff01 	bl	8000b6c <__aeabi_d2iz>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 800fd6e:	f7fe fcba 	bl	800e6e6 <_ZNSt14numeric_limitsIhE3minEv>
 800fd72:	4603      	mov	r3, r0
 800fd74:	61bb      	str	r3, [r7, #24]
 800fd76:	f107 0214 	add.w	r2, r7, #20
 800fd7a:	f107 0318 	add.w	r3, r7, #24
 800fd7e:	4611      	mov	r1, r2
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7fe ff79 	bl	800ec78 <_ZSt3maxIlERKT_S2_S2_>
 800fd86:	4603      	mov	r3, r0
  result =
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 800fd8c:	f7fe fcb3 	bl	800e6f6 <_ZNSt14numeric_limitsIhE3maxEv>
 800fd90:	4603      	mov	r3, r0
 800fd92:	61fb      	str	r3, [r7, #28]
 800fd94:	f107 0214 	add.w	r2, r7, #20
 800fd98:	f107 031c 	add.w	r3, r7, #28
 800fd9c:	4611      	mov	r1, r2
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7fe ff56 	bl	800ec50 <_ZSt3minIlERKT_S2_S2_>
 800fda4:	4603      	mov	r3, r0
  result =
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	617b      	str	r3, [r7, #20]
  return result;
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	b2db      	uxtb	r3, r3
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3720      	adds	r7, #32
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bdb0      	pop	{r4, r5, r7, pc}

0800fdb6 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 800fdb6:	b580      	push	{r7, lr}
 800fdb8:	b088      	sub	sp, #32
 800fdba:	af00      	add	r7, sp, #0
 800fdbc:	60ba      	str	r2, [r7, #8]
 800fdbe:	607b      	str	r3, [r7, #4]
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	73fb      	strb	r3, [r7, #15]
 800fdc4:	460b      	mov	r3, r1
 800fdc6:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800fdc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fdca:	68b8      	ldr	r0, [r7, #8]
 800fdcc:	f7ff f907 	bl	800efde <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800fdd0:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	61fb      	str	r3, [r7, #28]
 800fdd6:	69fa      	ldr	r2, [r7, #28]
 800fdd8:	69bb      	ldr	r3, [r7, #24]
 800fdda:	429a      	cmp	r2, r3
 800fddc:	da26      	bge.n	800fe2c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 800fdde:	69fb      	ldr	r3, [r7, #28]
 800fde0:	687a      	ldr	r2, [r7, #4]
 800fde2:	4413      	add	r3, r2
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 800fde8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fdec:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	dd04      	ble.n	800fdfe <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 800fdf4:	f107 030e 	add.w	r3, r7, #14
 800fdf8:	f993 3000 	ldrsb.w	r3, [r3]
 800fdfc:	e00c      	b.n	800fe18 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 800fdfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe02:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fe06:	429a      	cmp	r2, r3
 800fe08:	da04      	bge.n	800fe14 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 800fe0a:	f107 030f 	add.w	r3, r7, #15
 800fe0e:	f993 3000 	ldrsb.w	r3, [r3]
 800fe12:	e001      	b.n	800fe18 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 800fe14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fe18:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 800fe1a:	69fb      	ldr	r3, [r7, #28]
 800fe1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe1e:	4413      	add	r3, r2
 800fe20:	7dba      	ldrb	r2, [r7, #22]
 800fe22:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 800fe24:	69fb      	ldr	r3, [r7, #28]
 800fe26:	3301      	adds	r3, #1
 800fe28:	61fb      	str	r3, [r7, #28]
 800fe2a:	e7d4      	b.n	800fdd6 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 800fe2c:	bf00      	nop
 800fe2e:	3720      	adds	r7, #32
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b088      	sub	sp, #32
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	60ba      	str	r2, [r7, #8]
 800fe3c:	607b      	str	r3, [r7, #4]
 800fe3e:	4603      	mov	r3, r0
 800fe40:	73fb      	strb	r3, [r7, #15]
 800fe42:	460b      	mov	r3, r1
 800fe44:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800fe46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe48:	68b8      	ldr	r0, [r7, #8]
 800fe4a:	f7ff f8c8 	bl	800efde <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800fe4e:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 800fe50:	2300      	movs	r3, #0
 800fe52:	61fb      	str	r3, [r7, #28]
 800fe54:	69fa      	ldr	r2, [r7, #28]
 800fe56:	69bb      	ldr	r3, [r7, #24]
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	da1f      	bge.n	800fe9c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 800fe5c:	69fb      	ldr	r3, [r7, #28]
 800fe5e:	687a      	ldr	r2, [r7, #4]
 800fe60:	4413      	add	r3, r2
 800fe62:	781b      	ldrb	r3, [r3, #0]
 800fe64:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 800fe66:	7bbb      	ldrb	r3, [r7, #14]
 800fe68:	7dfa      	ldrb	r2, [r7, #23]
 800fe6a:	429a      	cmp	r2, r3
 800fe6c:	d903      	bls.n	800fe76 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 800fe6e:	f107 030e 	add.w	r3, r7, #14
 800fe72:	781b      	ldrb	r3, [r3, #0]
 800fe74:	e008      	b.n	800fe88 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 800fe76:	7bfb      	ldrb	r3, [r7, #15]
 800fe78:	7dfa      	ldrb	r2, [r7, #23]
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d203      	bcs.n	800fe86 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 800fe7e:	f107 030f 	add.w	r3, r7, #15
 800fe82:	781b      	ldrb	r3, [r3, #0]
 800fe84:	e000      	b.n	800fe88 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 800fe86:	7dfb      	ldrb	r3, [r7, #23]
 800fe88:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 800fe8a:	69fb      	ldr	r3, [r7, #28]
 800fe8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe8e:	4413      	add	r3, r2
 800fe90:	7dba      	ldrb	r2, [r7, #22]
 800fe92:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 800fe94:	69fb      	ldr	r3, [r7, #28]
 800fe96:	3301      	adds	r3, #1
 800fe98:	61fb      	str	r3, [r7, #28]
 800fe9a:	e7db      	b.n	800fe54 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 800fe9c:	bf00      	nop
 800fe9e:	3720      	adds	r7, #32
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}

0800fea4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 800fea4:	b480      	push	{r7}
 800fea6:	b083      	sub	sp, #12
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
  return x;
 800feac:	687b      	ldr	r3, [r7, #4]
}
 800feae:	4618      	mov	r0, r3
 800feb0:	370c      	adds	r7, #12
 800feb2:	46bd      	mov	sp, r7
 800feb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb8:	4770      	bx	lr

0800feba <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 800feba:	b480      	push	{r7}
 800febc:	b083      	sub	sp, #12
 800febe:	af00      	add	r7, sp, #0
 800fec0:	6078      	str	r0, [r7, #4]
 800fec2:	6039      	str	r1, [r7, #0]
  return a & b;
 800fec4:	687a      	ldr	r2, [r7, #4]
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	4013      	ands	r3, r2
}
 800feca:	4618      	mov	r0, r3
 800fecc:	370c      	adds	r7, #12
 800fece:	46bd      	mov	sp, r7
 800fed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed4:	4770      	bx	lr

0800fed6 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 800fed6:	b480      	push	{r7}
 800fed8:	b083      	sub	sp, #12
 800feda:	af00      	add	r7, sp, #0
 800fedc:	6078      	str	r0, [r7, #4]
 800fede:	6039      	str	r1, [r7, #0]
  return a >> offset;
 800fee0:	687a      	ldr	r2, [r7, #4]
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	fa42 f303 	asr.w	r3, r2, r3
}
 800fee8:	4618      	mov	r0, r3
 800feea:	370c      	adds	r7, #12
 800feec:	46bd      	mov	sp, r7
 800feee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef2:	4770      	bx	lr

0800fef4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b082      	sub	sp, #8
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 800fefe:	687a      	ldr	r2, [r7, #4]
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	bfb4      	ite	lt
 800ff06:	2301      	movlt	r3, #1
 800ff08:	2300      	movge	r3, #0
 800ff0a:	b2db      	uxtb	r3, r3
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f000 f827 	bl	800ff60 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800ff12:	4603      	mov	r3, r0
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	3708      	adds	r7, #8
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}

0800ff1c <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
 800ff24:	6039      	str	r1, [r7, #0]
  return a + b;
 800ff26:	687a      	ldr	r2, [r7, #4]
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	4413      	add	r3, r2
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	370c      	adds	r7, #12
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr

0800ff38 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b082      	sub	sp, #8
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
 800ff40:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 800ff42:	687a      	ldr	r2, [r7, #4]
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	429a      	cmp	r2, r3
 800ff48:	bfcc      	ite	gt
 800ff4a:	2301      	movgt	r3, #1
 800ff4c:	2300      	movle	r3, #0
 800ff4e:	b2db      	uxtb	r3, r3
 800ff50:	4618      	mov	r0, r3
 800ff52:	f000 f805 	bl	800ff60 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800ff56:	4603      	mov	r3, r0
}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3708      	adds	r7, #8
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b082      	sub	sp, #8
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d004      	beq.n	800ff78 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 800ff6e:	2000      	movs	r0, #0
 800ff70:	f000 f807 	bl	800ff82 <_ZN8gemmlowp6BitNotIlEET_S1_>
 800ff74:	4603      	mov	r3, r0
 800ff76:	e000      	b.n	800ff7a <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 800ff78:	2300      	movs	r3, #0
}
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	3708      	adds	r7, #8
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}

0800ff82 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 800ff82:	b480      	push	{r7}
 800ff84:	b083      	sub	sp, #12
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	6078      	str	r0, [r7, #4]
  return ~a;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	43db      	mvns	r3, r3
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	370c      	adds	r7, #12
 800ff92:	46bd      	mov	sp, r7
 800ff94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff98:	4770      	bx	lr
	...

0800ff9c <_ZNSt14numeric_limitsIfE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 800ff9c:	b480      	push	{r7}
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	4b04      	ldr	r3, [pc, #16]	; (800ffb4 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 800ffa2:	ee07 3a90 	vmov	s15, r3
 800ffa6:	eeb0 0a67 	vmov.f32	s0, s15
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb0:	4770      	bx	lr
 800ffb2:	bf00      	nop
 800ffb4:	7f7fffff 	.word	0x7f7fffff

0800ffb8 <_ZNSt14numeric_limitsIfE6lowestEv>:
      lowest() noexcept { return -__FLT_MAX__; }
 800ffb8:	b480      	push	{r7}
 800ffba:	af00      	add	r7, sp, #0
 800ffbc:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800ffc0:	ee07 3a90 	vmov	s15, r3
 800ffc4:	eeb0 0a67 	vmov.f32	s0, s15
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffce:	4770      	bx	lr

0800ffd0 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b084      	sub	sp, #16
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	ed87 0a03 	vstr	s0, [r7, #12]
 800ffda:	edc7 0a02 	vstr	s1, [r7, #8]
 800ffde:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 800ffe2:	f107 0208 	add.w	r2, r7, #8
 800ffe6:	f107 030c 	add.w	r3, r7, #12
 800ffea:	4611      	mov	r1, r2
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7fe fb2c 	bl	800e64a <_ZSt3maxIfERKT_S2_S2_>
 800fff2:	4602      	mov	r2, r0
 800fff4:	1d3b      	adds	r3, r7, #4
 800fff6:	4619      	mov	r1, r3
 800fff8:	4610      	mov	r0, r2
 800fffa:	f7fe fb0d 	bl	800e618 <_ZSt3minIfERKT_S2_S2_>
 800fffe:	4603      	mov	r3, r0
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	ee07 3a90 	vmov	s15, r3
}
 8010006:	eeb0 0a67 	vmov.f32	s0, s15
 801000a:	3710      	adds	r7, #16
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}

08010010 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8010010:	b580      	push	{r7, lr}
 8010012:	b084      	sub	sp, #16
 8010014:	af00      	add	r7, sp, #0
 8010016:	4603      	mov	r3, r0
 8010018:	60b9      	str	r1, [r7, #8]
 801001a:	607a      	str	r2, [r7, #4]
 801001c:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 801001e:	7bfb      	ldrb	r3, [r7, #15]
 8010020:	2b01      	cmp	r3, #1
 8010022:	d10b      	bne.n	801003c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	f04f 0200 	mov.w	r2, #0
 801002a:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 801002c:	f7ff ffb6 	bl	800ff9c <_ZNSt14numeric_limitsIfE3maxEv>
 8010030:	eef0 7a40 	vmov.f32	s15, s0
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 801003a:	e023      	b.n	8010084 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 801003c:	7bfb      	ldrb	r3, [r7, #15]
 801003e:	2b03      	cmp	r3, #3
 8010040:	d107      	bne.n	8010052 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	f04f 0200 	mov.w	r2, #0
 8010048:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	4a0f      	ldr	r2, [pc, #60]	; (801008c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 801004e:	601a      	str	r2, [r3, #0]
}
 8010050:	e018      	b.n	8010084 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8010052:	7bfb      	ldrb	r3, [r7, #15]
 8010054:	2b02      	cmp	r3, #2
 8010056:	d107      	bne.n	8010068 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	4a0d      	ldr	r2, [pc, #52]	; (8010090 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 801005c:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010064:	601a      	str	r2, [r3, #0]
}
 8010066:	e00d      	b.n	8010084 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8010068:	f7ff ffa6 	bl	800ffb8 <_ZNSt14numeric_limitsIfE6lowestEv>
 801006c:	eef0 7a40 	vmov.f32	s15, s0
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8010076:	f7ff ff91 	bl	800ff9c <_ZNSt14numeric_limitsIfE3maxEv>
 801007a:	eef0 7a40 	vmov.f32	s15, s0
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	edc3 7a00 	vstr	s15, [r3]
}
 8010084:	bf00      	nop
 8010086:	3710      	adds	r7, #16
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}
 801008c:	40c00000 	.word	0x40c00000
 8010090:	bf800000 	.word	0xbf800000

08010094 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8010094:	b580      	push	{r7, lr}
 8010096:	b082      	sub	sp, #8
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d101      	bne.n	80100a6 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 80100a2:	f004 fc45 	bl	8014930 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3708      	adds	r7, #8
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}

080100b2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 80100b2:	b590      	push	{r4, r7, lr}
 80100b4:	b087      	sub	sp, #28
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	60f8      	str	r0, [r7, #12]
 80100ba:	60b9      	str	r1, [r7, #8]
 80100bc:	607a      	str	r2, [r7, #4]
 80100be:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 80100c0:	68b9      	ldr	r1, [r7, #8]
 80100c2:	68f8      	ldr	r0, [r7, #12]
 80100c4:	f7fe ff30 	bl	800ef28 <_ZNK6tflite12RuntimeShape4DimsEi>
 80100c8:	4604      	mov	r4, r0
 80100ca:	6839      	ldr	r1, [r7, #0]
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f7fe ff2b 	bl	800ef28 <_ZNK6tflite12RuntimeShape4DimsEi>
 80100d2:	4603      	mov	r3, r0
 80100d4:	429c      	cmp	r4, r3
 80100d6:	d001      	beq.n	80100dc <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 80100d8:	f004 fc2a 	bl	8014930 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 80100dc:	68b9      	ldr	r1, [r7, #8]
 80100de:	68f8      	ldr	r0, [r7, #12]
 80100e0:	f7fe ff22 	bl	800ef28 <_ZNK6tflite12RuntimeShape4DimsEi>
 80100e4:	4603      	mov	r3, r0
 80100e6:	613b      	str	r3, [r7, #16]
 80100e8:	6839      	ldr	r1, [r7, #0]
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f7fe ff1c 	bl	800ef28 <_ZNK6tflite12RuntimeShape4DimsEi>
 80100f0:	4603      	mov	r3, r0
 80100f2:	617b      	str	r3, [r7, #20]
 80100f4:	f107 0214 	add.w	r2, r7, #20
 80100f8:	f107 0310 	add.w	r3, r7, #16
 80100fc:	4611      	mov	r1, r2
 80100fe:	4618      	mov	r0, r3
 8010100:	f7fe fda6 	bl	800ec50 <_ZSt3minIlERKT_S2_S2_>
 8010104:	4603      	mov	r3, r0
 8010106:	681b      	ldr	r3, [r3, #0]
}
 8010108:	4618      	mov	r0, r3
 801010a:	371c      	adds	r7, #28
 801010c:	46bd      	mov	sp, r7
 801010e:	bd90      	pop	{r4, r7, pc}

08010110 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8010110:	b580      	push	{r7, lr}
 8010112:	b086      	sub	sp, #24
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
 8010118:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f7fe fdf7 	bl	800ed0e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010120:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	2b00      	cmp	r3, #0
 8010126:	db03      	blt.n	8010130 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8010128:	683a      	ldr	r2, [r7, #0]
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	429a      	cmp	r2, r3
 801012e:	db01      	blt.n	8010134 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8010130:	f004 fbfe 	bl	8014930 <abort>
  const auto* dims_data = shape.DimsData();
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f7fe ff1c 	bl	800ef72 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 801013a:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 801013c:	2301      	movs	r3, #1
 801013e:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8010140:	2300      	movs	r3, #0
 8010142:	613b      	str	r3, [r7, #16]
 8010144:	693a      	ldr	r2, [r7, #16]
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	429a      	cmp	r2, r3
 801014a:	da12      	bge.n	8010172 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 801014c:	693a      	ldr	r2, [r7, #16]
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	429a      	cmp	r2, r3
 8010152:	d005      	beq.n	8010160 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	009b      	lsls	r3, r3, #2
 8010158:	68ba      	ldr	r2, [r7, #8]
 801015a:	4413      	add	r3, r2
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	e000      	b.n	8010162 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 8010160:	2301      	movs	r3, #1
 8010162:	697a      	ldr	r2, [r7, #20]
 8010164:	fb02 f303 	mul.w	r3, r2, r3
 8010168:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 801016a:	693b      	ldr	r3, [r7, #16]
 801016c:	3301      	adds	r3, #1
 801016e:	613b      	str	r3, [r7, #16]
 8010170:	e7e8      	b.n	8010144 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 8010172:	697b      	ldr	r3, [r7, #20]
}
 8010174:	4618      	mov	r0, r3
 8010176:	3718      	adds	r7, #24
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}

0801017c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 801017c:	b590      	push	{r4, r7, lr}
 801017e:	b091      	sub	sp, #68	; 0x44
 8010180:	af00      	add	r7, sp, #0
 8010182:	60f8      	str	r0, [r7, #12]
 8010184:	60b9      	str	r1, [r7, #8]
 8010186:	607a      	str	r2, [r7, #4]
 8010188:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	69db      	ldr	r3, [r3, #28]
 801018e:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	6a1b      	ldr	r3, [r3, #32]
 8010194:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 8010196:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8010198:	f7fe fdb9 	bl	800ed0e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801019c:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 801019e:	6838      	ldr	r0, [r7, #0]
 80101a0:	f7fe fdb5 	bl	800ed0e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80101a4:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 80101a6:	6a3b      	ldr	r3, [r7, #32]
 80101a8:	3b01      	subs	r3, #1
 80101aa:	4619      	mov	r1, r3
 80101ac:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80101ae:	f7ff ffaf 	bl	8010110 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 80101b2:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 80101b4:	69fb      	ldr	r3, [r7, #28]
 80101b6:	1e99      	subs	r1, r3, #2
 80101b8:	6a3b      	ldr	r3, [r7, #32]
 80101ba:	3b01      	subs	r3, #1
 80101bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80101be:	6838      	ldr	r0, [r7, #0]
 80101c0:	f7ff ff77 	bl	80100b2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80101c4:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 80101c6:	69fb      	ldr	r3, [r7, #28]
 80101c8:	3b01      	subs	r3, #1
 80101ca:	4619      	mov	r1, r3
 80101cc:	6838      	ldr	r0, [r7, #0]
 80101ce:	f7fe feab 	bl	800ef28 <_ZNK6tflite12RuntimeShape4DimsEi>
 80101d2:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 80101d4:	2300      	movs	r3, #0
 80101d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80101d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80101da:	69bb      	ldr	r3, [r7, #24]
 80101dc:	429a      	cmp	r2, r3
 80101de:	da5f      	bge.n	80102a0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80101e0:	2300      	movs	r3, #0
 80101e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80101e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	da55      	bge.n	8010298 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 80101ec:	f04f 0300 	mov.w	r3, #0
 80101f0:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 80101f2:	2300      	movs	r3, #0
 80101f4:	633b      	str	r3, [r7, #48]	; 0x30
 80101f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101f8:	693b      	ldr	r3, [r7, #16]
 80101fa:	429a      	cmp	r2, r3
 80101fc:	da21      	bge.n	8010242 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 80101fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010200:	693a      	ldr	r2, [r7, #16]
 8010202:	fb03 f202 	mul.w	r2, r3, r2
 8010206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010208:	4413      	add	r3, r2
 801020a:	009b      	lsls	r3, r3, #2
 801020c:	687a      	ldr	r2, [r7, #4]
 801020e:	4413      	add	r3, r2
 8010210:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 8010214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010216:	693a      	ldr	r2, [r7, #16]
 8010218:	fb03 f202 	mul.w	r2, r3, r2
 801021c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801021e:	4413      	add	r3, r2
 8010220:	009b      	lsls	r3, r3, #2
 8010222:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010224:	4413      	add	r3, r2
 8010226:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 801022a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801022e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8010232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010236:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 801023a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801023c:	3301      	adds	r3, #1
 801023e:	633b      	str	r3, [r7, #48]	; 0x30
 8010240:	e7d9      	b.n	80101f6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 8010242:	f04f 0300 	mov.w	r3, #0
 8010246:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 8010248:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801024a:	2b00      	cmp	r3, #0
 801024c:	d005      	beq.n	801025a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 801024e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010250:	009b      	lsls	r3, r3, #2
 8010252:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010254:	4413      	add	r3, r2
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 801025a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801025e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801026a:	fb03 f202 	mul.w	r2, r3, r2
 801026e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010270:	4413      	add	r3, r2
 8010272:	009b      	lsls	r3, r3, #2
 8010274:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010276:	18d4      	adds	r4, r2, r3
 8010278:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 801027c:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8010280:	eeb0 0a67 	vmov.f32	s0, s15
 8010284:	f7ff fea4 	bl	800ffd0 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8010288:	eef0 7a40 	vmov.f32	s15, s0
 801028c:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8010290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010292:	3301      	adds	r3, #1
 8010294:	63bb      	str	r3, [r7, #56]	; 0x38
 8010296:	e7a5      	b.n	80101e4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 8010298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801029a:	3301      	adds	r3, #1
 801029c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801029e:	e79b      	b.n	80101d8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 80102a0:	bf00      	nop
 80102a2:	3744      	adds	r7, #68	; 0x44
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd90      	pop	{r4, r7, pc}

080102a8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    uint8_t* output_data) {
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b096      	sub	sp, #88	; 0x58
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	607a      	str	r2, [r7, #4]
 80102b4:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	685b      	ldr	r3, [r3, #4]
 80102c0:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	689b      	ldr	r3, [r3, #8]
 80102c6:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	68db      	ldr	r3, [r3, #12]
 80102cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	691b      	ldr	r3, [r3, #16]
 80102d2:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	695b      	ldr	r3, [r3, #20]
 80102d8:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	699b      	ldr	r3, [r3, #24]
 80102de:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 80102e0:	6838      	ldr	r0, [r7, #0]
 80102e2:	f7fe fd14 	bl	800ed0e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80102e6:	4603      	mov	r3, r0
 80102e8:	2b01      	cmp	r3, #1
 80102ea:	dc01      	bgt.n	80102f0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 80102ec:	f004 fb20 	bl	8014930 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 80102f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80102f2:	f7fe fd0c 	bl	800ed0e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80102f6:	4603      	mov	r3, r0
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	dc01      	bgt.n	8010300 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 80102fc:	f004 fb18 	bl	8014930 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8010300:	69ba      	ldr	r2, [r7, #24]
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	429a      	cmp	r2, r3
 8010306:	dd01      	ble.n	801030c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 8010308:	f004 fb12 	bl	8014930 <abort>
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 801030c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801030e:	f7fe fcfe 	bl	800ed0e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010312:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 8010314:	6838      	ldr	r0, [r7, #0]
 8010316:	f7fe fcfa 	bl	800ed0e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801031a:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 801031c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801031e:	3b01      	subs	r3, #1
 8010320:	4619      	mov	r1, r3
 8010322:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010324:	f7ff fef4 	bl	8010110 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8010328:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 801032a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801032c:	1e99      	subs	r1, r3, #2
 801032e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010330:	3b01      	subs	r3, #1
 8010332:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010334:	6838      	ldr	r0, [r7, #0]
 8010336:	f7ff febc 	bl	80100b2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801033a:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 801033c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801033e:	3b01      	subs	r3, #1
 8010340:	4619      	mov	r1, r3
 8010342:	6838      	ldr	r0, [r7, #0]
 8010344:	f7fe fdf0 	bl	800ef28 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010348:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 801034a:	2300      	movs	r3, #0
 801034c:	657b      	str	r3, [r7, #84]	; 0x54
 801034e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010352:	429a      	cmp	r2, r3
 8010354:	da73      	bge.n	801043e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x196>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8010356:	2300      	movs	r3, #0
 8010358:	653b      	str	r3, [r7, #80]	; 0x50
 801035a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801035c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801035e:	429a      	cmp	r2, r3
 8010360:	da69      	bge.n	8010436 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
      int32_t acc = 0;
 8010362:	2300      	movs	r3, #0
 8010364:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 8010366:	2300      	movs	r3, #0
 8010368:	64fb      	str	r3, [r7, #76]	; 0x4c
 801036a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801036c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036e:	429a      	cmp	r2, r3
 8010370:	da24      	bge.n	80103bc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x114>
        int32_t input_val = input_data[b * accum_depth + d];
 8010372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010376:	fb03 f202 	mul.w	r2, r3, r2
 801037a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801037c:	4413      	add	r3, r2
 801037e:	461a      	mov	r2, r3
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	4413      	add	r3, r2
 8010384:	781b      	ldrb	r3, [r3, #0]
 8010386:	623b      	str	r3, [r7, #32]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 8010388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801038a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801038c:	fb03 f202 	mul.w	r2, r3, r2
 8010390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010392:	4413      	add	r3, r2
 8010394:	461a      	mov	r2, r3
 8010396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010398:	4413      	add	r3, r2
 801039a:	781b      	ldrb	r3, [r3, #0]
 801039c:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 801039e:	69fa      	ldr	r2, [r7, #28]
 80103a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103a2:	4413      	add	r3, r2
 80103a4:	6a39      	ldr	r1, [r7, #32]
 80103a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80103a8:	440a      	add	r2, r1
 80103aa:	fb03 f202 	mul.w	r2, r3, r2
 80103ae:	693b      	ldr	r3, [r7, #16]
 80103b0:	4413      	add	r3, r2
 80103b2:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 80103b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103b6:	3301      	adds	r3, #1
 80103b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80103ba:	e7d6      	b.n	801036a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xc2>
      }
      if (bias_data) {
 80103bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d007      	beq.n	80103d2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x12a>
        acc += bias_data[out_c];
 80103c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103c4:	009b      	lsls	r3, r3, #2
 80103c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80103c8:	4413      	add	r3, r2
 80103ca:	681a      	ldr	r2, [r3, #0]
 80103cc:	693b      	ldr	r3, [r7, #16]
 80103ce:	4413      	add	r3, r2
 80103d0:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 80103d2:	693b      	ldr	r3, [r7, #16]
 80103d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80103d8:	4618      	mov	r0, r3
 80103da:	f7fe fe35 	bl	800f048 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80103de:	4603      	mov	r3, r0
 80103e0:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 80103e2:	693a      	ldr	r2, [r7, #16]
 80103e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103e6:	4413      	add	r3, r2
 80103e8:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 80103ea:	f107 0218 	add.w	r2, r7, #24
 80103ee:	f107 0310 	add.w	r3, r7, #16
 80103f2:	4611      	mov	r1, r2
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7fe fc3f 	bl	800ec78 <_ZSt3maxIlERKT_S2_S2_>
 80103fa:	4603      	mov	r3, r0
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 8010400:	f107 0214 	add.w	r2, r7, #20
 8010404:	f107 0310 	add.w	r3, r7, #16
 8010408:	4611      	mov	r1, r2
 801040a:	4618      	mov	r0, r3
 801040c:	f7fe fc20 	bl	800ec50 <_ZSt3minIlERKT_S2_S2_>
 8010410:	4603      	mov	r3, r0
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8_t>(acc);
 8010416:	6939      	ldr	r1, [r7, #16]
 8010418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801041a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801041c:	fb03 f202 	mul.w	r2, r3, r2
 8010420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010422:	4413      	add	r3, r2
 8010424:	461a      	mov	r2, r3
 8010426:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010428:	4413      	add	r3, r2
 801042a:	b2ca      	uxtb	r2, r1
 801042c:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801042e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010430:	3301      	adds	r3, #1
 8010432:	653b      	str	r3, [r7, #80]	; 0x50
 8010434:	e791      	b.n	801035a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb2>
  for (int b = 0; b < batches; ++b) {
 8010436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010438:	3301      	adds	r3, #1
 801043a:	657b      	str	r3, [r7, #84]	; 0x54
 801043c:	e787      	b.n	801034e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa6>
    }
  }
}
 801043e:	bf00      	nop
 8010440:	3758      	adds	r7, #88	; 0x58
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}

08010446 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// TODO(b/169801227): This global struct is needed for the linker to drop unused
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8010446:	b580      	push	{r7, lr}
 8010448:	b084      	sub	sp, #16
 801044a:	af00      	add	r7, sp, #0
 801044c:	60f8      	str	r0, [r7, #12]
 801044e:	60b9      	str	r1, [r7, #8]
 8010450:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010456:	2b00      	cmp	r3, #0
 8010458:	d101      	bne.n	801045e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 801045a:	f004 fa69 	bl	8014930 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010462:	2124      	movs	r1, #36	; 0x24
 8010464:	68f8      	ldr	r0, [r7, #12]
 8010466:	4798      	blx	r3
 8010468:	4603      	mov	r3, r0
}
 801046a:	4618      	mov	r0, r3
 801046c:	3710      	adds	r7, #16
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}
	...

08010474 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8010474:	b5b0      	push	{r4, r5, r7, lr}
 8010476:	b0a0      	sub	sp, #128	; 0x80
 8010478:	af04      	add	r7, sp, #16
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6039      	str	r1, [r7, #0]
 801047e:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	691b      	ldr	r3, [r3, #16]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d101      	bne.n	801048c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 8010488:	f004 fa52 	bl	8014930 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	695b      	ldr	r3, [r3, #20]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d101      	bne.n	8010498 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 8010494:	f004 fa4c 	bl	8014930 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	691b      	ldr	r3, [r3, #16]
 801049c:	66fb      	str	r3, [r7, #108]	; 0x6c
  const auto params =
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	695b      	ldr	r3, [r3, #20]
 80104a2:	66bb      	str	r3, [r7, #104]	; 0x68
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 80104a4:	4b81      	ldr	r3, [pc, #516]	; (80106ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	461a      	mov	r2, r3
 80104aa:	6839      	ldr	r1, [r7, #0]
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f7fe f9ae 	bl	800e80e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80104b2:	6678      	str	r0, [r7, #100]	; 0x64
  TF_LITE_ENSURE(context, input != nullptr);
 80104b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d10a      	bne.n	80104d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	695c      	ldr	r4, [r3, #20]
 80104be:	4b7c      	ldr	r3, [pc, #496]	; (80106b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80104c0:	9300      	str	r3, [sp, #0]
 80104c2:	2340      	movs	r3, #64	; 0x40
 80104c4:	4a7b      	ldr	r2, [pc, #492]	; (80106b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 80104c6:	497c      	ldr	r1, [pc, #496]	; (80106b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	47a0      	blx	r4
 80104cc:	2401      	movs	r4, #1
 80104ce:	e0e7      	b.n	80106a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 80104d0:	4b7a      	ldr	r3, [pc, #488]	; (80106bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	461a      	mov	r2, r3
 80104d6:	6839      	ldr	r1, [r7, #0]
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f7fe f998 	bl	800e80e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80104de:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(context, filter != nullptr);
 80104e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d10a      	bne.n	80104fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x88>
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	695c      	ldr	r4, [r3, #20]
 80104ea:	4b75      	ldr	r3, [pc, #468]	; (80106c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 80104ec:	9300      	str	r3, [sp, #0]
 80104ee:	2343      	movs	r3, #67	; 0x43
 80104f0:	4a70      	ldr	r2, [pc, #448]	; (80106b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 80104f2:	4971      	ldr	r1, [pc, #452]	; (80106b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	47a0      	blx	r4
 80104f8:	2401      	movs	r4, #1
 80104fa:	e0d1      	b.n	80106a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 80104fc:	4b71      	ldr	r3, [pc, #452]	; (80106c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	461a      	mov	r2, r3
 8010502:	6839      	ldr	r1, [r7, #0]
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f7fe f9b2 	bl	800e86e <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 801050a:	65f8      	str	r0, [r7, #92]	; 0x5c
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 801050c:	4b6e      	ldr	r3, [pc, #440]	; (80106c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	461a      	mov	r2, r3
 8010512:	6839      	ldr	r1, [r7, #0]
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f7fe f98a 	bl	800e82e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801051a:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, output != nullptr);
 801051c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801051e:	2b00      	cmp	r3, #0
 8010520:	d10a      	bne.n	8010538 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	695c      	ldr	r4, [r3, #20]
 8010526:	4b69      	ldr	r3, [pc, #420]	; (80106cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 8010528:	9300      	str	r3, [sp, #0]
 801052a:	2347      	movs	r3, #71	; 0x47
 801052c:	4a61      	ldr	r2, [pc, #388]	; (80106b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801052e:	4962      	ldr	r1, [pc, #392]	; (80106b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	47a0      	blx	r4
 8010534:	2401      	movs	r4, #1
 8010536:	e0b3      	b.n	80106a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8010538:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801053a:	781a      	ldrb	r2, [r3, #0]
 801053c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801053e:	781b      	ldrb	r3, [r3, #0]
 8010540:	429a      	cmp	r2, r3
 8010542:	d01a      	beq.n	801057a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	695c      	ldr	r4, [r3, #20]
 8010548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801054a:	781b      	ldrb	r3, [r3, #0]
 801054c:	4618      	mov	r0, r3
 801054e:	f7fd ff51 	bl	800e3f4 <TfLiteTypeGetName>
 8010552:	4605      	mov	r5, r0
 8010554:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010556:	781b      	ldrb	r3, [r3, #0]
 8010558:	4618      	mov	r0, r3
 801055a:	f7fd ff4b 	bl	800e3f4 <TfLiteTypeGetName>
 801055e:	4603      	mov	r3, r0
 8010560:	9303      	str	r3, [sp, #12]
 8010562:	9502      	str	r5, [sp, #8]
 8010564:	4b5a      	ldr	r3, [pc, #360]	; (80106d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 8010566:	9301      	str	r3, [sp, #4]
 8010568:	4b5a      	ldr	r3, [pc, #360]	; (80106d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 801056a:	9300      	str	r3, [sp, #0]
 801056c:	2349      	movs	r3, #73	; 0x49
 801056e:	4a51      	ldr	r2, [pc, #324]	; (80106b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8010570:	4959      	ldr	r1, [pc, #356]	; (80106d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	47a0      	blx	r4
 8010576:	2401      	movs	r4, #1
 8010578:	e092      	b.n	80106a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 801057a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801057c:	781a      	ldrb	r2, [r3, #0]
 801057e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	429a      	cmp	r2, r3
 8010584:	d006      	beq.n	8010594 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	695b      	ldr	r3, [r3, #20]
 801058a:	4954      	ldr	r1, [pc, #336]	; (80106dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	4798      	blx	r3
 8010590:	2401      	movs	r4, #1
 8010592:	e085      	b.n	80106a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
                     "Hybrid models are not supported on TFLite Micro.");

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 8010594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010596:	f04f 32ff 	mov.w	r2, #4294967295
 801059a:	621a      	str	r2, [r3, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 801059c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801059e:	7819      	ldrb	r1, [r3, #0]
 80105a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105a2:	781a      	ldrb	r2, [r3, #0]
 80105a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105a6:	9303      	str	r3, [sp, #12]
 80105a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80105aa:	9302      	str	r3, [sp, #8]
 80105ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105ae:	9301      	str	r3, [sp, #4]
 80105b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105b2:	9300      	str	r3, [sp, #0]
 80105b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f000 fbb5 	bl	8010d26 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 80105bc:	4603      	mov	r3, r0
 80105be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80105c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d002      	beq.n	80105d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
 80105ca:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 80105ce:	e067      	b.n	80106a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  if (input->type == kTfLiteInt8) {
 80105d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	2b09      	cmp	r3, #9
 80105d6:	d162      	bne.n	801069e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22a>
    RuntimeShape filter_shape = GetTensorShape(filter);
 80105d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80105dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80105de:	4618      	mov	r0, r3
 80105e0:	f7fe fbf9 	bl	800edd6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 80105e4:	f107 0318 	add.w	r3, r7, #24
 80105e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80105ea:	4618      	mov	r0, r3
 80105ec:	f7fe fbf3 	bl	800edd6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 80105f0:	f107 0318 	add.w	r3, r7, #24
 80105f4:	4618      	mov	r0, r3
 80105f6:	f7fe fb8a 	bl	800ed0e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80105fa:	4603      	mov	r3, r0
 80105fc:	2b02      	cmp	r3, #2
 80105fe:	d001      	beq.n	8010604 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>
 8010600:	f004 f996 	bl	8014930 <abort>
    const int filter_dim_count = filter_shape.DimensionsCount();
 8010604:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010608:	4618      	mov	r0, r3
 801060a:	f7fe fb80 	bl	800ed0e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801060e:	6538      	str	r0, [r7, #80]	; 0x50
    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 8010610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010612:	1e5a      	subs	r2, r3, #1
 8010614:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010618:	4611      	mov	r1, r2
 801061a:	4618      	mov	r0, r3
 801061c:	f7fe fc84 	bl	800ef28 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010620:	4603      	mov	r3, r0
 8010622:	60bb      	str	r3, [r7, #8]
    filter_dims.h = 1;
 8010624:	2301      	movs	r3, #1
 8010626:	60fb      	str	r3, [r7, #12]
    filter_dims.w = 1;
 8010628:	2301      	movs	r3, #1
 801062a:	613b      	str	r3, [r7, #16]
    filter_dims.c = output_shape.Dims(1);
 801062c:	f107 0318 	add.w	r3, r7, #24
 8010630:	2101      	movs	r1, #1
 8010632:	4618      	mov	r0, r3
 8010634:	f7fe fc78 	bl	800ef28 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010638:	4603      	mov	r3, r0
 801063a:	617b      	str	r3, [r7, #20]

    const int32_t buf_size =
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 801063c:	f107 0308 	add.w	r3, r7, #8
 8010640:	4618      	mov	r0, r3
 8010642:	f7fa ff3e 	bl	800b4c2 <arm_fully_connected_s8_get_buffer_size>
 8010646:	64f8      	str	r0, [r7, #76]	; 0x4c

    if (buf_size > 0) {
 8010648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801064a:	2b00      	cmp	r3, #0
 801064c:	dd11      	ble.n	8010672 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010652:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010654:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010656:	3220      	adds	r2, #32
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	4798      	blx	r3
 801065c:	4603      	mov	r3, r0
 801065e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8010662:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010666:	2b00      	cmp	r3, #0
 8010668:	d007      	beq.n	801067a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x206>
 801066a:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 801066e:	2500      	movs	r5, #0
 8010670:	e004      	b.n	801067c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 8010672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010674:	f04f 32ff 	mov.w	r2, #4294967295
 8010678:	621a      	str	r2, [r3, #32]
 801067a:	2501      	movs	r5, #1
 801067c:	f107 0318 	add.w	r3, r7, #24
 8010680:	4618      	mov	r0, r3
 8010682:	f7fe fb2e 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
 8010686:	2d01      	cmp	r5, #1
 8010688:	d001      	beq.n	801068e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
 801068a:	2500      	movs	r5, #0
 801068c:	e000      	b.n	8010690 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>
 801068e:	2501      	movs	r5, #1
 8010690:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010694:	4618      	mov	r0, r3
 8010696:	f7fe fb24 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
 801069a:	2d01      	cmp	r5, #1
 801069c:	d100      	bne.n	80106a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
    }
  }
  return kTfLiteOk;
 801069e:	2400      	movs	r4, #0
}
 80106a0:	4623      	mov	r3, r4
 80106a2:	4618      	mov	r0, r3
 80106a4:	3770      	adds	r7, #112	; 0x70
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bdb0      	pop	{r4, r5, r7, pc}
 80106aa:	bf00      	nop
 80106ac:	0801a87c 	.word	0x0801a87c
 80106b0:	0801a388 	.word	0x0801a388
 80106b4:	0801a2d8 	.word	0x0801a2d8
 80106b8:	0801a370 	.word	0x0801a370
 80106bc:	0801a880 	.word	0x0801a880
 80106c0:	0801a39c 	.word	0x0801a39c
 80106c4:	0801a884 	.word	0x0801a884
 80106c8:	0801a888 	.word	0x0801a888
 80106cc:	0801a3b0 	.word	0x0801a3b0
 80106d0:	0801a3e0 	.word	0x0801a3e0
 80106d4:	0801a3f0 	.word	0x0801a3f0
 80106d8:	0801a3c4 	.word	0x0801a3c4
 80106dc:	0801a3fc 	.word	0x0801a3fc

080106e0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 80106e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106e2:	b0bf      	sub	sp, #252	; 0xfc
 80106e4:	af08      	add	r7, sp, #32
 80106e6:	6178      	str	r0, [r7, #20]
 80106e8:	6139      	str	r1, [r7, #16]
 80106ea:	60fa      	str	r2, [r7, #12]
 80106ec:	60bb      	str	r3, [r7, #8]
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80106ee:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80106f2:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80106f6:	4618      	mov	r0, r3
 80106f8:	f000 fb65 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 80106fc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010700:	4618      	mov	r0, r3
 8010702:	f7fe fb04 	bl	800ed0e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010706:	4603      	mov	r3, r0
 8010708:	2b02      	cmp	r3, #2
 801070a:	d001      	beq.n	8010710 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x30>
 801070c:	f004 f910 	bl	8014930 <abort>
  const int batches = output_shape.Dims(0);
 8010710:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010714:	2100      	movs	r1, #0
 8010716:	4618      	mov	r0, r3
 8010718:	f7fe fc06 	bl	800ef28 <_ZNK6tflite12RuntimeShape4DimsEi>
 801071c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  const int output_depth = output_shape.Dims(1);
 8010720:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010724:	2101      	movs	r1, #1
 8010726:	4618      	mov	r0, r3
 8010728:	f7fe fbfe 	bl	800ef28 <_ZNK6tflite12RuntimeShape4DimsEi>
 801072c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8010730:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010734:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8010738:	4618      	mov	r0, r3
 801073a:	f000 fb44 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 801073e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010742:	4618      	mov	r0, r3
 8010744:	f7fe fae3 	bl	800ed0e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010748:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 801074c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010750:	1e5a      	subs	r2, r3, #1
 8010752:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010756:	4611      	mov	r1, r2
 8010758:	4618      	mov	r0, r3
 801075a:	f7fe fbe5 	bl	800ef28 <_ZNK6tflite12RuntimeShape4DimsEi>
 801075e:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8010762:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010766:	68b9      	ldr	r1, [r7, #8]
 8010768:	4618      	mov	r0, r3
 801076a:	f000 fb2c 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	695b      	ldr	r3, [r3, #20]
 8010772:	425b      	negs	r3, r3
 8010774:	66fb      	str	r3, [r7, #108]	; 0x6c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	69db      	ldr	r3, [r3, #28]
 801077a:	677b      	str	r3, [r7, #116]	; 0x74
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	699b      	ldr	r3, [r3, #24]
 8010780:	425b      	negs	r3, r3
 8010782:	673b      	str	r3, [r7, #112]	; 0x70
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	689b      	ldr	r3, [r3, #8]
 8010788:	67bb      	str	r3, [r7, #120]	; 0x78
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	68db      	ldr	r3, [r3, #12]
 801078e:	67fb      	str	r3, [r7, #124]	; 0x7c

  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	667b      	str	r3, [r7, #100]	; 0x64
  quant_params.shift = data.reference_op_data.output_shift;
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	685b      	ldr	r3, [r3, #4]
 801079a:	66bb      	str	r3, [r7, #104]	; 0x68

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
 801079c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80107a0:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = 1;
 80107a2:	2301      	movs	r3, #1
 80107a4:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = 1;
 80107a6:	2301      	movs	r3, #1
 80107a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = accum_depth;
 80107aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80107ae:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims filter_dims;
  filter_dims.n = accum_depth;
 80107b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80107b4:	647b      	str	r3, [r7, #68]	; 0x44
  filter_dims.h = 1;
 80107b6:	2301      	movs	r3, #1
 80107b8:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.w = 1;
 80107ba:	2301      	movs	r3, #1
 80107bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.c = output_depth;
 80107be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80107c2:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 80107c4:	2301      	movs	r3, #1
 80107c6:	637b      	str	r3, [r7, #52]	; 0x34
  bias_dims.h = 1;
 80107c8:	2301      	movs	r3, #1
 80107ca:	63bb      	str	r3, [r7, #56]	; 0x38
  bias_dims.w = 1;
 80107cc:	2301      	movs	r3, #1
 80107ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  bias_dims.c = output_depth;
 80107d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80107d4:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
 80107d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80107da:	627b      	str	r3, [r7, #36]	; 0x24
  output_dims.h = 1;
 80107dc:	2301      	movs	r3, #1
 80107de:	62bb      	str	r3, [r7, #40]	; 0x28
  output_dims.w = 1;
 80107e0:	2301      	movs	r3, #1
 80107e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  output_dims.c = output_depth;
 80107e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80107e8:	633b      	str	r3, [r7, #48]	; 0x30

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 80107ea:	2300      	movs	r3, #0
 80107ec:	61fb      	str	r3, [r7, #28]
  ctx.size = 0;
 80107ee:	2300      	movs	r3, #0
 80107f0:	623b      	str	r3, [r7, #32]

  if (data.buffer_idx > -1) {
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	6a1b      	ldr	r3, [r3, #32]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	db08      	blt.n	801080c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107fe:	68fa      	ldr	r2, [r7, #12]
 8010800:	6a12      	ldr	r2, [r2, #32]
 8010802:	4611      	mov	r1, r2
 8010804:	6978      	ldr	r0, [r7, #20]
 8010806:	4798      	blx	r3
 8010808:	4603      	mov	r3, r0
 801080a:	61fb      	str	r3, [r7, #28]
  }

  TF_LITE_ENSURE_EQ(
 801080c:	68b8      	ldr	r0, [r7, #8]
 801080e:	f7ff f95d 	bl	800facc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8010812:	4605      	mov	r5, r0
 8010814:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8010818:	f7ff f958 	bl	800facc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801081c:	4606      	mov	r6, r0
 801081e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8010822:	f7ff fc37 	bl	8010094 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8010826:	6078      	str	r0, [r7, #4]
 8010828:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801082c:	f7ff f95d 	bl	800faea <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8010830:	4603      	mov	r3, r0
 8010832:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8010836:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801083a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801083e:	f107 001c 	add.w	r0, r7, #28
 8010842:	9306      	str	r3, [sp, #24]
 8010844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010848:	9305      	str	r3, [sp, #20]
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	9304      	str	r3, [sp, #16]
 801084e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010852:	9303      	str	r3, [sp, #12]
 8010854:	9602      	str	r6, [sp, #8]
 8010856:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801085a:	9301      	str	r3, [sp, #4]
 801085c:	9500      	str	r5, [sp, #0]
 801085e:	4623      	mov	r3, r4
 8010860:	f7fa fde8 	bl	800b434 <arm_fully_connected_s8>
 8010864:	4603      	mov	r3, r0
 8010866:	2b00      	cmp	r3, #0
 8010868:	bf14      	ite	ne
 801086a:	2301      	movne	r3, #1
 801086c:	2300      	moveq	r3, #0
 801086e:	b2db      	uxtb	r3, r3
 8010870:	2b00      	cmp	r3, #0
 8010872:	d03e      	beq.n	80108f2 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x212>
 8010874:	697b      	ldr	r3, [r7, #20]
 8010876:	695c      	ldr	r4, [r3, #20]
 8010878:	68b8      	ldr	r0, [r7, #8]
 801087a:	f7ff f927 	bl	800facc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801087e:	4606      	mov	r6, r0
 8010880:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8010884:	f7ff f922 	bl	800facc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8010888:	6078      	str	r0, [r7, #4]
 801088a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801088e:	f7ff fc01 	bl	8010094 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8010892:	6038      	str	r0, [r7, #0]
 8010894:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8010898:	f7ff f927 	bl	800faea <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801089c:	4603      	mov	r3, r0
 801089e:	f107 0554 	add.w	r5, r7, #84	; 0x54
 80108a2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80108a6:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80108aa:	f107 001c 	add.w	r0, r7, #28
 80108ae:	9306      	str	r3, [sp, #24]
 80108b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80108b4:	9305      	str	r3, [sp, #20]
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	9304      	str	r3, [sp, #16]
 80108ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80108be:	9303      	str	r3, [sp, #12]
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	9302      	str	r3, [sp, #8]
 80108c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80108c8:	9301      	str	r3, [sp, #4]
 80108ca:	9600      	str	r6, [sp, #0]
 80108cc:	462b      	mov	r3, r5
 80108ce:	f7fa fdb1 	bl	800b434 <arm_fully_connected_s8>
 80108d2:	4603      	mov	r3, r0
 80108d4:	461a      	mov	r2, r3
 80108d6:	2300      	movs	r3, #0
 80108d8:	9303      	str	r3, [sp, #12]
 80108da:	9202      	str	r2, [sp, #8]
 80108dc:	4b0f      	ldr	r3, [pc, #60]	; (801091c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x23c>)
 80108de:	9301      	str	r3, [sp, #4]
 80108e0:	4b0f      	ldr	r3, [pc, #60]	; (8010920 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x240>)
 80108e2:	9300      	str	r3, [sp, #0]
 80108e4:	23a6      	movs	r3, #166	; 0xa6
 80108e6:	4a0f      	ldr	r2, [pc, #60]	; (8010924 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x244>)
 80108e8:	490f      	ldr	r1, [pc, #60]	; (8010928 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x248>)
 80108ea:	6978      	ldr	r0, [r7, #20]
 80108ec:	47a0      	blx	r4
 80108ee:	2401      	movs	r4, #1
 80108f0:	e000      	b.n	80108f4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x214>
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 80108f2:	2400      	movs	r4, #0
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80108f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7fe f9f2 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 80108fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010902:	4618      	mov	r0, r3
 8010904:	f7fe f9ed 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8010908:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801090c:	4618      	mov	r0, r3
 801090e:	f7fe f9e8 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8010912:	4623      	mov	r3, r4
 8010914:	4618      	mov	r0, r3
 8010916:	37dc      	adds	r7, #220	; 0xdc
 8010918:	46bd      	mov	sp, r7
 801091a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801091c:	0801a4e0 	.word	0x0801a4e0
 8010920:	0801a4f4 	.word	0x0801a4f4
 8010924:	0801a2d8 	.word	0x0801a2d8
 8010928:	0801a4c4 	.word	0x0801a4c4

0801092c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 801092c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801092e:	b0d3      	sub	sp, #332	; 0x14c
 8010930:	af06      	add	r7, sp, #24
 8010932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010936:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801093a:	6018      	str	r0, [r3, #0]
 801093c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010940:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010944:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8010946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801094a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	695b      	ldr	r3, [r3, #20]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d101      	bne.n	801095a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e>
 8010956:	f003 ffeb 	bl	8014930 <abort>
  const auto* params =
 801095a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801095e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	695b      	ldr	r3, [r3, #20]
 8010966:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 801096a:	4bb0      	ldr	r3, [pc, #704]	; (8010c2c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x300>)
 801096c:	681a      	ldr	r2, [r3, #0]
 801096e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010972:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8010976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801097a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801097e:	6809      	ldr	r1, [r1, #0]
 8010980:	6818      	ldr	r0, [r3, #0]
 8010982:	f7fe fba5 	bl	800f0d0 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8010986:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 801098a:	4ba9      	ldr	r3, [pc, #676]	; (8010c30 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x304>)
 801098c:	681a      	ldr	r2, [r3, #0]
 801098e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010992:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8010996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801099a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801099e:	6809      	ldr	r1, [r1, #0]
 80109a0:	6818      	ldr	r0, [r3, #0]
 80109a2:	f7fe fb95 	bl	800f0d0 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80109a6:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 80109aa:	4ba2      	ldr	r3, [pc, #648]	; (8010c34 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x308>)
 80109ac:	681a      	ldr	r2, [r3, #0]
 80109ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80109b2:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 80109b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80109ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80109be:	6809      	ldr	r1, [r1, #0]
 80109c0:	6818      	ldr	r0, [r3, #0]
 80109c2:	f7fe fb85 	bl	800f0d0 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80109c6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 80109ca:	4b9b      	ldr	r3, [pc, #620]	; (8010c38 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x30c>)
 80109cc:	681a      	ldr	r2, [r3, #0]
 80109ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80109d2:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 80109d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80109da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80109de:	6809      	ldr	r1, [r1, #0]
 80109e0:	6818      	ldr	r0, [r3, #0]
 80109e2:	f7fe fb85 	bl	800f0f0 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80109e6:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 80109ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80109ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	691b      	ldr	r3, [r3, #16]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d101      	bne.n	80109fe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
 80109fa:	f003 ff99 	bl	8014930 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 80109fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	691b      	ldr	r3, [r3, #16]
 8010a0a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 8010a0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010a12:	7a1b      	ldrb	r3, [r3, #8]
 8010a14:	2b09      	cmp	r3, #9
 8010a16:	d06d      	beq.n	8010af4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c8>
 8010a18:	2b09      	cmp	r3, #9
 8010a1a:	f300 80e6 	bgt.w	8010bea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2be>
 8010a1e:	2b01      	cmp	r3, #1
 8010a20:	d003      	beq.n	8010a2a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfe>
 8010a22:	2b03      	cmp	r3, #3
 8010a24:	f000 8081 	beq.w	8010b2a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
 8010a28:	e0df      	b.n	8010bea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2be>
    case kTfLiteFloat32: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
 8010a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010a2e:	781a      	ldrb	r2, [r3, #0]
 8010a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010a34:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010a38:	4611      	mov	r1, r2
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f000 f95e 	bl	8010cfc <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 8010a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010a44:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8010a48:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f000 f9ba 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8010a52:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8010a56:	f7ff f819 	bl	800fa8c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8010a5a:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 8010a5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010a60:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8010a64:	4618      	mov	r0, r3
 8010a66:	f000 f9ae 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8010a6a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8010a6e:	f7ff f80d 	bl	800fa8c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8010a72:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 8010a74:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010a78:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f000 f9a2 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8010a82:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8010a86:	f7ff f801 	bl	800fa8c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8010a8a:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 8010a8c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010a90:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8010a94:	4618      	mov	r0, r3
 8010a96:	f000 f996 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8010a9a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8010a9e:	f7ff f804 	bl	800faaa <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010aa8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8010aac:	f107 0008 	add.w	r0, r7, #8
 8010ab0:	9304      	str	r3, [sp, #16]
 8010ab2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010ab6:	9303      	str	r3, [sp, #12]
 8010ab8:	9502      	str	r5, [sp, #8]
 8010aba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010abe:	9301      	str	r3, [sp, #4]
 8010ac0:	9400      	str	r4, [sp, #0]
 8010ac2:	4613      	mov	r3, r2
 8010ac4:	4632      	mov	r2, r6
 8010ac6:	f7ff fb59 	bl	801017c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 8010aca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f7fe f907 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 8010ad4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7fe f902 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 8010ade:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7fe f8fd 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 8010ae8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7fe f8f8 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 8010af2:	e095      	b.n	8010c20 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f4>
    }
    case kTfLiteInt8: {
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 8010af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010af8:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8010afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010b00:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8010b04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010b08:	9302      	str	r3, [sp, #8]
 8010b0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010b0e:	9301      	str	r3, [sp, #4]
 8010b10:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8010b14:	9300      	str	r3, [sp, #0]
 8010b16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010b1a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8010b1e:	6809      	ldr	r1, [r1, #0]
 8010b20:	6800      	ldr	r0, [r0, #0]
 8010b22:	f7ff fddd 	bl	80106e0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 8010b26:	4603      	mov	r3, r0
                               output);
 8010b28:	e07b      	b.n	8010c22 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f6>
    }
    case kTfLiteUInt8: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsQuantized(data.reference_op_data),
 8010b2a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8010b2e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010b32:	4611      	mov	r1, r2
 8010b34:	4618      	mov	r0, r3
 8010b36:	f000 f8b7 	bl	8010ca8 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
 8010b3a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8010b3e:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8010b42:	4618      	mov	r0, r3
 8010b44:	f000 f93f 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8010b48:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8010b4c:	f7ff f82a 	bl	800fba4 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8010b50:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<uint8_t>(input),
          tflite::micro::GetTensorShape(filter),
 8010b52:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010b56:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f000 f933 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8010b60:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8010b64:	f7ff f81e 	bl	800fba4 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8010b68:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<uint8_t>(filter),
          tflite::micro::GetTensorShape(bias),
 8010b6a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8010b6e:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8010b72:	4618      	mov	r0, r3
 8010b74:	f000 f927 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8010b78:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8010b7c:	f7ff fa8a 	bl	8010094 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8010b80:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<int32_t>(bias),
          tflite::micro::GetTensorShape(output),
 8010b82:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8010b86:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f000 f91b 	bl	8010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8010b90:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8010b94:	f7ff f815 	bl	800fbc2 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8010b9e:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8010ba2:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8010ba6:	9304      	str	r3, [sp, #16]
 8010ba8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8010bac:	9303      	str	r3, [sp, #12]
 8010bae:	9502      	str	r5, [sp, #8]
 8010bb0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8010bb4:	9301      	str	r3, [sp, #4]
 8010bb6:	9400      	str	r4, [sp, #0]
 8010bb8:	4613      	mov	r3, r2
 8010bba:	4632      	mov	r2, r6
 8010bbc:	f7ff fb74 	bl	80102a8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
          tflite::micro::GetTensorShape(output),
 8010bc0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f7fe f88c 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 8010bca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7fe f887 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 8010bd4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f7fe f882 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 8010bde:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7fe f87d 	bl	800ece2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<uint8_t>(output));
      break;
 8010be8:	e01a      	b.n	8010c20 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f4>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8010bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010bee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	695c      	ldr	r4, [r3, #20]
 8010bf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010bfa:	7a1b      	ldrb	r3, [r3, #8]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7fd fbf9 	bl	800e3f4 <TfLiteTypeGetName>
 8010c02:	4602      	mov	r2, r0
 8010c04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010c08:	7a1b      	ldrb	r3, [r3, #8]
 8010c0a:	4619      	mov	r1, r3
 8010c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010c10:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8010c14:	460b      	mov	r3, r1
 8010c16:	4909      	ldr	r1, [pc, #36]	; (8010c3c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x310>)
 8010c18:	6800      	ldr	r0, [r0, #0]
 8010c1a:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8010c1c:	2301      	movs	r3, #1
 8010c1e:	e000      	b.n	8010c22 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f6>
    }
  }
  return kTfLiteOk;
 8010c20:	2300      	movs	r3, #0
}
 8010c22:	4618      	mov	r0, r3
 8010c24:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c2c:	0801a87c 	.word	0x0801a87c
 8010c30:	0801a880 	.word	0x0801a880
 8010c34:	0801a884 	.word	0x0801a884
 8010c38:	0801a888 	.word	0x0801a888
 8010c3c:	0801a618 	.word	0x0801a618

08010c40 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 8010c40:	b4b0      	push	{r4, r5, r7}
 8010c42:	b083      	sub	sp, #12
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
  fully_connected_registration.init = Init;
 8010c48:	4b13      	ldr	r3, [pc, #76]	; (8010c98 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8010c4a:	4a14      	ldr	r2, [pc, #80]	; (8010c9c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x5c>)
 8010c4c:	601a      	str	r2, [r3, #0]
  fully_connected_registration.free = nullptr;
 8010c4e:	4b12      	ldr	r3, [pc, #72]	; (8010c98 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8010c50:	2200      	movs	r2, #0
 8010c52:	605a      	str	r2, [r3, #4]
  fully_connected_registration.prepare = Prepare;
 8010c54:	4b10      	ldr	r3, [pc, #64]	; (8010c98 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8010c56:	4a12      	ldr	r2, [pc, #72]	; (8010ca0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x60>)
 8010c58:	609a      	str	r2, [r3, #8]
  fully_connected_registration.invoke = Eval;
 8010c5a:	4b0f      	ldr	r3, [pc, #60]	; (8010c98 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8010c5c:	4a11      	ldr	r2, [pc, #68]	; (8010ca4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x64>)
 8010c5e:	60da      	str	r2, [r3, #12]
  fully_connected_registration.profiling_string = nullptr;
 8010c60:	4b0d      	ldr	r3, [pc, #52]	; (8010c98 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8010c62:	2200      	movs	r2, #0
 8010c64:	611a      	str	r2, [r3, #16]
  fully_connected_registration.builtin_code = 0;
 8010c66:	4b0c      	ldr	r3, [pc, #48]	; (8010c98 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8010c68:	2200      	movs	r2, #0
 8010c6a:	615a      	str	r2, [r3, #20]
  fully_connected_registration.custom_name = nullptr;
 8010c6c:	4b0a      	ldr	r3, [pc, #40]	; (8010c98 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8010c6e:	2200      	movs	r2, #0
 8010c70:	619a      	str	r2, [r3, #24]
  fully_connected_registration.version = 0;
 8010c72:	4b09      	ldr	r3, [pc, #36]	; (8010c98 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8010c74:	2200      	movs	r2, #0
 8010c76:	61da      	str	r2, [r3, #28]
  return fully_connected_registration;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	4a07      	ldr	r2, [pc, #28]	; (8010c98 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8010c7c:	461c      	mov	r4, r3
 8010c7e:	4615      	mov	r5, r2
 8010c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010c88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	370c      	adds	r7, #12
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bcb0      	pop	{r4, r5, r7}
 8010c94:	4770      	bx	lr
 8010c96:	bf00      	nop
 8010c98:	2000096c 	.word	0x2000096c
 8010c9c:	08010447 	.word	0x08010447
 8010ca0:	08010475 	.word	0x08010475
 8010ca4:	0801092d 	.word	0x0801092d

08010ca8 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedWeightsTensor = 1;
const int kFullyConnectedBiasTensor = 2;
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
 8010ca8:	b480      	push	{r7}
 8010caa:	b083      	sub	sp, #12
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	6039      	str	r1, [r7, #0]
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	695b      	ldr	r3, [r3, #20]
 8010cb6:	425a      	negs	r2, r3
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	601a      	str	r2, [r3, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	699b      	ldr	r3, [r3, #24]
 8010cc0:	425a      	negs	r2, r3
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	605a      	str	r2, [r3, #4]
  op_params.output_offset = op_data.output_zero_point;
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	69da      	ldr	r2, [r3, #28]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	609a      	str	r2, [r3, #8]
  op_params.output_multiplier = op_data.output_multiplier;
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	681a      	ldr	r2, [r3, #0]
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	60da      	str	r2, [r3, #12]
  op_params.output_shift = op_data.output_shift;
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	685a      	ldr	r2, [r3, #4]
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	611a      	str	r2, [r3, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	689a      	ldr	r2, [r3, #8]
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	615a      	str	r2, [r3, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	68da      	ldr	r2, [r3, #12]
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	619a      	str	r2, [r3, #24]
  return op_params;
 8010cee:	bf00      	nop
}
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	370c      	adds	r7, #12
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfa:	4770      	bx	lr

08010cfc <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b082      	sub	sp, #8
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
 8010d04:	460b      	mov	r3, r1
 8010d06:	70fb      	strb	r3, [r7, #3]
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f103 0220 	add.w	r2, r3, #32
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f103 011c 	add.w	r1, r3, #28
 8010d14:	78fb      	ldrb	r3, [r7, #3]
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7ff f97a 	bl	8010010 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  return op_params;
 8010d1c:	bf00      	nop
}
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	3708      	adds	r7, #8
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}

08010d26 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 8010d26:	b580      	push	{r7, lr}
 8010d28:	b08a      	sub	sp, #40	; 0x28
 8010d2a:	af02      	add	r7, sp, #8
 8010d2c:	60f8      	str	r0, [r7, #12]
 8010d2e:	607b      	str	r3, [r7, #4]
 8010d30:	460b      	mov	r3, r1
 8010d32:	72fb      	strb	r3, [r7, #11]
 8010d34:	4613      	mov	r3, r2
 8010d36:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 8010d38:	7abb      	ldrb	r3, [r7, #10]
 8010d3a:	2b01      	cmp	r3, #1
 8010d3c:	d03e      	beq.n	8010dbc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x96>
    double real_multiplier = 0.0;
 8010d3e:	f04f 0200 	mov.w	r2, #0
 8010d42:	f04f 0300 	mov.w	r3, #0
 8010d46:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8010d4a:	f107 0310 	add.w	r3, r7, #16
 8010d4e:	9301      	str	r3, [sp, #4]
 8010d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d52:	9300      	str	r3, [sp, #0]
 8010d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d58:	6879      	ldr	r1, [r7, #4]
 8010d5a:	68f8      	ldr	r0, [r7, #12]
 8010d5c:	f7fd fd98 	bl	800e890 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8010d60:	4603      	mov	r3, r0
 8010d62:	77fb      	strb	r3, [r7, #31]
 8010d64:	7ffb      	ldrb	r3, [r7, #31]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d001      	beq.n	8010d6e <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 8010d6a:	7ffb      	ldrb	r3, [r7, #31]
 8010d6c:	e027      	b.n	8010dbe <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 8010d6e:	ed97 7b04 	vldr	d7, [r7, #16]
 8010d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d76:	3304      	adds	r3, #4
 8010d78:	4619      	mov	r1, r3
 8010d7a:	4610      	mov	r0, r2
 8010d7c:	eeb0 0a47 	vmov.f32	s0, s14
 8010d80:	eef0 0a67 	vmov.f32	s1, s15
 8010d84:	f7fd fbbc 	bl	800e500 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	691a      	ldr	r2, [r3, #16]
 8010d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d8e:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 8010d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d92:	691a      	ldr	r2, [r3, #16]
 8010d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d96:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 8010d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d9a:	691a      	ldr	r2, [r3, #16]
 8010d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d9e:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 8010da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010da2:	f103 0208 	add.w	r2, r3, #8
 8010da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010da8:	330c      	adds	r3, #12
 8010daa:	7af9      	ldrb	r1, [r7, #11]
 8010dac:	9300      	str	r3, [sp, #0]
 8010dae:	4613      	mov	r3, r2
 8010db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010db2:	68f8      	ldr	r0, [r7, #12]
 8010db4:	f7fd fef8 	bl	800eba8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8010db8:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 8010dba:	e000      	b.n	8010dbe <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
  }
  return kTfLiteOk;
 8010dbc:	2300      	movs	r3, #0
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	3720      	adds	r7, #32
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}

08010dc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 8010dc6:	b580      	push	{r7, lr}
 8010dc8:	b086      	sub	sp, #24
 8010dca:	af00      	add	r7, sp, #0
 8010dcc:	6078      	str	r0, [r7, #4]
 8010dce:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d003      	beq.n	8010dde <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	685b      	ldr	r3, [r3, #4]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d103      	bne.n	8010de6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 8010dde:	6878      	ldr	r0, [r7, #4]
 8010de0:	f7fd ff5e 	bl	800eca0 <_ZN6tflite12RuntimeShapeC1Ev>
 8010de4:	e00d      	b.n	8010e02 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	685b      	ldr	r3, [r3, #4]
 8010dea:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8010dec:	697b      	ldr	r3, [r7, #20]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8010df2:	697b      	ldr	r3, [r7, #20]
 8010df4:	3304      	adds	r3, #4
 8010df6:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8010df8:	68fa      	ldr	r2, [r7, #12]
 8010dfa:	6939      	ldr	r1, [r7, #16]
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f7fd ff5d 	bl	800ecbc <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8010e02:	6878      	ldr	r0, [r7, #4]
 8010e04:	3718      	adds	r7, #24
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}

08010e0a <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8010e0a:	b580      	push	{r7, lr}
 8010e0c:	b082      	sub	sp, #8
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	f000 fbce 	bl	80115b4 <_ZNSaIPvED1Ev>
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3708      	adds	r7, #8
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}

08010e22 <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8010e22:	b580      	push	{r7, lr}
 8010e24:	b082      	sub	sp, #8
 8010e26:	af00      	add	r7, sp, #0
 8010e28:	6078      	str	r0, [r7, #4]
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f000 fbb1 	bl	8011594 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	4618      	mov	r0, r3
 8010e36:	3708      	adds	r7, #8
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}

08010e3c <_ZNSt6vectorIPvSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b082      	sub	sp, #8
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7ff ffeb 	bl	8010e22 <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3708      	adds	r7, #8
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}
	...

08010e58 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b084      	sub	sp, #16
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	6039      	str	r1, [r7, #0]
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
 8010e62:	4b1b      	ldr	r3, [pc, #108]	; (8010ed0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 8010e64:	681a      	ldr	r2, [r3, #0]
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	425b      	negs	r3, r3
 8010e6a:	441a      	add	r2, r3
 8010e6c:	4b19      	ldr	r3, [pc, #100]	; (8010ed4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x7c>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	429a      	cmp	r2, r3
 8010e72:	d217      	bcs.n	8010ea4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x4c>
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 8010e74:	2101      	movs	r1, #1
 8010e76:	6838      	ldr	r0, [r7, #0]
 8010e78:	f7fd fa86 	bl	800e388 <_Z9ei_callocjj>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	60fb      	str	r3, [r7, #12]
    if (ptr == NULL) {
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d106      	bne.n	8010e94 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x3c>
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	4619      	mov	r1, r3
 8010e8a:	4813      	ldr	r0, [pc, #76]	; (8010ed8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x80>)
 8010e8c:	f004 fec8 	bl	8015c20 <iprintf>
      return NULL;
 8010e90:	2300      	movs	r3, #0
 8010e92:	e018      	b.n	8010ec6 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x6e>
    }
    overflow_buffers.push_back(ptr);
 8010e94:	f107 030c 	add.w	r3, r7, #12
 8010e98:	4619      	mov	r1, r3
 8010e9a:	4810      	ldr	r0, [pc, #64]	; (8010edc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x84>)
 8010e9c:	f000 fbaf 	bl	80115fe <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>
    return ptr;
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	e010      	b.n	8010ec6 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x6e>
  }

  current_location -= bytes;
 8010ea4:	4b0a      	ldr	r3, [pc, #40]	; (8010ed0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 8010ea6:	681a      	ldr	r2, [r3, #0]
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	425b      	negs	r3, r3
 8010eac:	4413      	add	r3, r2
 8010eae:	4a08      	ldr	r2, [pc, #32]	; (8010ed0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 8010eb0:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 8010eb2:	4b07      	ldr	r3, [pc, #28]	; (8010ed0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	60fb      	str	r3, [r7, #12]
  memset(ptr, 0, bytes);
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	683a      	ldr	r2, [r7, #0]
 8010ebc:	2100      	movs	r1, #0
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f003 fddc 	bl	8014a7c <memset>

  return ptr;
 8010ec4:	68fb      	ldr	r3, [r7, #12]
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	3710      	adds	r7, #16
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bd80      	pop	{r7, pc}
 8010ece:	bf00      	nop
 8010ed0:	20000994 	.word	0x20000994
 8010ed4:	20000990 	.word	0x20000990
 8010ed8:	0801a754 	.word	0x0801a754
 8010edc:	20000d74 	.word	0x20000d74

08010ee0 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b082      	sub	sp, #8
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f000 fbbd 	bl	8011668 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3708      	adds	r7, #8
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>:
      _Vector_base() = default;
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	4618      	mov	r0, r3
 8010f04:	f000 fba0 	bl	8011648 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	3708      	adds	r7, #8
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}

08010f12 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>:
      vector() = default;
 8010f12:	b580      	push	{r7, lr}
 8010f14:	b082      	sub	sp, #8
 8010f16:	af00      	add	r7, sp, #0
 8010f18:	6078      	str	r0, [r7, #4]
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f7ff ffeb 	bl	8010ef8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	4618      	mov	r0, r3
 8010f26:	3708      	adds	r7, #8
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}

08010f2c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b086      	sub	sp, #24
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	60f8      	str	r0, [r7, #12]
 8010f34:	60b9      	str	r1, [r7, #8]
 8010f36:	607a      	str	r2, [r7, #4]
  scratch_buffer_t b;
  b.bytes = bytes;
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
 8010f3c:	693b      	ldr	r3, [r7, #16]
 8010f3e:	4619      	mov	r1, r3
 8010f40:	68f8      	ldr	r0, [r7, #12]
 8010f42:	f7ff ff89 	bl	8010e58 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
 8010f46:	4603      	mov	r3, r0
 8010f48:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d101      	bne.n	8010f54 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x28>
    return kTfLiteError;
 8010f50:	2301      	movs	r3, #1
 8010f52:	e00e      	b.n	8010f72 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x46>
  }

  scratch_buffers.push_back(b);
 8010f54:	f107 0310 	add.w	r3, r7, #16
 8010f58:	4619      	mov	r1, r3
 8010f5a:	4808      	ldr	r0, [pc, #32]	; (8010f7c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x50>)
 8010f5c:	f000 fba9 	bl	80116b2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>

  *buffer_idx = scratch_buffers.size() - 1;
 8010f60:	4806      	ldr	r0, [pc, #24]	; (8010f7c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x50>)
 8010f62:	f000 fbcc 	bl	80116fe <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8010f66:	4603      	mov	r3, r0
 8010f68:	3b01      	subs	r3, #1
 8010f6a:	461a      	mov	r2, r3
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 8010f70:	2300      	movs	r3, #0
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3718      	adds	r7, #24
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd80      	pop	{r7, pc}
 8010f7a:	bf00      	nop
 8010f7c:	20000d80 	.word	0x20000d80

08010f80 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b082      	sub	sp, #8
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	6039      	str	r1, [r7, #0]
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
 8010f8a:	480d      	ldr	r0, [pc, #52]	; (8010fc0 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 8010f8c:	f000 fbb7 	bl	80116fe <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8010f90:	4603      	mov	r3, r0
 8010f92:	461a      	mov	r2, r3
 8010f94:	683b      	ldr	r3, [r7, #0]
 8010f96:	4293      	cmp	r3, r2
 8010f98:	bfac      	ite	ge
 8010f9a:	2301      	movge	r3, #1
 8010f9c:	2300      	movlt	r3, #0
 8010f9e:	b2db      	uxtb	r3, r3
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d001      	beq.n	8010fa8 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x28>
    return NULL;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	e006      	b.n	8010fb6 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x36>
  }
  return scratch_buffers[buffer_idx].ptr;
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	4619      	mov	r1, r3
 8010fac:	4804      	ldr	r0, [pc, #16]	; (8010fc0 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 8010fae:	f000 fbb6 	bl	801171e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	685b      	ldr	r3, [r3, #4]
}
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	3708      	adds	r7, #8
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	bd80      	pop	{r7, pc}
 8010fbe:	bf00      	nop
 8010fc0:	20000d80 	.word	0x20000d80

08010fc4 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
 8010fc4:	b480      	push	{r7}
 8010fc6:	b083      	sub	sp, #12
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
 8010fcc:	6039      	str	r1, [r7, #0]
  return &tflTensors[tensor_idx];
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	019b      	lsls	r3, r3, #6
 8010fd2:	4a04      	ldr	r2, [pc, #16]	; (8010fe4 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x20>)
 8010fd4:	4413      	add	r3, r2
}
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	370c      	adds	r7, #12
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe0:	4770      	bx	lr
 8010fe2:	bf00      	nop
 8010fe4:	200009f0 	.word	0x200009f0

08010fe8 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 8010fe8:	b480      	push	{r7}
 8010fea:	b083      	sub	sp, #12
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	6039      	str	r1, [r7, #0]
  return &tflEvalTensors[tensor_idx];
 8010ff2:	683a      	ldr	r2, [r7, #0]
 8010ff4:	4613      	mov	r3, r2
 8010ff6:	005b      	lsls	r3, r3, #1
 8010ff8:	4413      	add	r3, r2
 8010ffa:	009b      	lsls	r3, r3, #2
 8010ffc:	4a03      	ldr	r2, [pc, #12]	; (801100c <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x24>)
 8010ffe:	4413      	add	r3, r2
}
 8011000:	4618      	mov	r0, r3
 8011002:	370c      	adds	r7, #12
 8011004:	46bd      	mov	sp, r7
 8011006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100a:	4770      	bx	lr
 801100c:	20000c70 	.word	0x20000c70

08011010 <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 8011010:	b5b0      	push	{r4, r5, r7, lr}
 8011012:	b092      	sub	sp, #72	; 0x48
 8011014:	af00      	add	r7, sp, #0
 8011016:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 8011018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801101a:	f44f 618e 	mov.w	r1, #1136	; 0x470
 801101e:	2010      	movs	r0, #16
 8011020:	4798      	blx	r3
 8011022:	4603      	mov	r3, r0
 8011024:	4aa3      	ldr	r2, [pc, #652]	; (80112b4 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8011026:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 8011028:	4ba2      	ldr	r3, [pc, #648]	; (80112b4 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d104      	bne.n	801103a <_Z18trained_model_initPFPvjjE+0x2a>
    printf("ERR: failed to allocate tensor arena\n");
 8011030:	48a1      	ldr	r0, [pc, #644]	; (80112b8 <_Z18trained_model_initPFPvjjE+0x2a8>)
 8011032:	f004 fe7b 	bl	8015d2c <puts>
    return kTfLiteError;
 8011036:	2301      	movs	r3, #1
 8011038:	e210      	b.n	801145c <_Z18trained_model_initPFPvjjE+0x44c>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 801103a:	4b9e      	ldr	r3, [pc, #632]	; (80112b4 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	4a9f      	ldr	r2, [pc, #636]	; (80112bc <_Z18trained_model_initPFPvjjE+0x2ac>)
 8011040:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 8011042:	4b9c      	ldr	r3, [pc, #624]	; (80112b4 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 801104a:	4a9d      	ldr	r2, [pc, #628]	; (80112c0 <_Z18trained_model_initPFPvjjE+0x2b0>)
 801104c:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 801104e:	4b9d      	ldr	r3, [pc, #628]	; (80112c4 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8011050:	4a9d      	ldr	r2, [pc, #628]	; (80112c8 <_Z18trained_model_initPFPvjjE+0x2b8>)
 8011052:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 8011054:	4b9b      	ldr	r3, [pc, #620]	; (80112c4 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8011056:	4a9d      	ldr	r2, [pc, #628]	; (80112cc <_Z18trained_model_initPFPvjjE+0x2bc>)
 8011058:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 801105a:	4b9a      	ldr	r3, [pc, #616]	; (80112c4 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801105c:	4a9c      	ldr	r2, [pc, #624]	; (80112d0 <_Z18trained_model_initPFPvjjE+0x2c0>)
 801105e:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
 8011060:	4b98      	ldr	r3, [pc, #608]	; (80112c4 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8011062:	4a9c      	ldr	r2, [pc, #624]	; (80112d4 <_Z18trained_model_initPFPvjjE+0x2c4>)
 8011064:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
 8011066:	4b97      	ldr	r3, [pc, #604]	; (80112c4 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8011068:	4a9b      	ldr	r2, [pc, #620]	; (80112d8 <_Z18trained_model_initPFPvjjE+0x2c8>)
 801106a:	655a      	str	r2, [r3, #84]	; 0x54
  ctx.tensors = tflTensors;
 801106c:	4b95      	ldr	r3, [pc, #596]	; (80112c4 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801106e:	4a9b      	ldr	r2, [pc, #620]	; (80112dc <_Z18trained_model_initPFPvjjE+0x2cc>)
 8011070:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 10;
 8011072:	4b94      	ldr	r3, [pc, #592]	; (80112c4 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8011074:	220a      	movs	r2, #10
 8011076:	601a      	str	r2, [r3, #0]
  for(size_t i = 0; i < 10; ++i) {
 8011078:	2300      	movs	r3, #0
 801107a:	647b      	str	r3, [r7, #68]	; 0x44
 801107c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801107e:	2b09      	cmp	r3, #9
 8011080:	f200 810c 	bhi.w	801129c <_Z18trained_model_initPFPvjjE+0x28c>
    tflTensors[i].type = tensorData[i].type;
 8011084:	4996      	ldr	r1, [pc, #600]	; (80112e0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8011086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011088:	4613      	mov	r3, r2
 801108a:	005b      	lsls	r3, r3, #1
 801108c:	4413      	add	r3, r2
 801108e:	00db      	lsls	r3, r3, #3
 8011090:	440b      	add	r3, r1
 8011092:	3301      	adds	r3, #1
 8011094:	7819      	ldrb	r1, [r3, #0]
 8011096:	4a91      	ldr	r2, [pc, #580]	; (80112dc <_Z18trained_model_initPFPvjjE+0x2cc>)
 8011098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801109a:	019b      	lsls	r3, r3, #6
 801109c:	4413      	add	r3, r2
 801109e:	460a      	mov	r2, r1
 80110a0:	701a      	strb	r2, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
 80110a2:	498f      	ldr	r1, [pc, #572]	; (80112e0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80110a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80110a6:	4613      	mov	r3, r2
 80110a8:	005b      	lsls	r3, r3, #1
 80110aa:	4413      	add	r3, r2
 80110ac:	00db      	lsls	r3, r3, #3
 80110ae:	440b      	add	r3, r1
 80110b0:	3301      	adds	r3, #1
 80110b2:	7818      	ldrb	r0, [r3, #0]
 80110b4:	498b      	ldr	r1, [pc, #556]	; (80112e4 <_Z18trained_model_initPFPvjjE+0x2d4>)
 80110b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80110b8:	4613      	mov	r3, r2
 80110ba:	005b      	lsls	r3, r3, #1
 80110bc:	4413      	add	r3, r2
 80110be:	009b      	lsls	r3, r3, #2
 80110c0:	440b      	add	r3, r1
 80110c2:	3308      	adds	r3, #8
 80110c4:	4602      	mov	r2, r0
 80110c6:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 80110c8:	4a84      	ldr	r2, [pc, #528]	; (80112dc <_Z18trained_model_initPFPvjjE+0x2cc>)
 80110ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110cc:	019b      	lsls	r3, r3, #6
 80110ce:	4413      	add	r3, r2
 80110d0:	332d      	adds	r3, #45	; 0x2d
 80110d2:	2200      	movs	r2, #0
 80110d4:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 80110d6:	4982      	ldr	r1, [pc, #520]	; (80112e0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80110d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80110da:	4613      	mov	r3, r2
 80110dc:	005b      	lsls	r3, r3, #1
 80110de:	4413      	add	r3, r2
 80110e0:	00db      	lsls	r3, r3, #3
 80110e2:	440b      	add	r3, r1
 80110e4:	7819      	ldrb	r1, [r3, #0]
 80110e6:	4a7d      	ldr	r2, [pc, #500]	; (80112dc <_Z18trained_model_initPFPvjjE+0x2cc>)
 80110e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110ea:	019b      	lsls	r3, r3, #6
 80110ec:	4413      	add	r3, r2
 80110ee:	3314      	adds	r3, #20
 80110f0:	460a      	mov	r2, r1
 80110f2:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 80110f4:	497a      	ldr	r1, [pc, #488]	; (80112e0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80110f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80110f8:	4613      	mov	r3, r2
 80110fa:	005b      	lsls	r3, r3, #1
 80110fc:	4413      	add	r3, r2
 80110fe:	00db      	lsls	r3, r3, #3
 8011100:	440b      	add	r3, r1
 8011102:	330c      	adds	r3, #12
 8011104:	681a      	ldr	r2, [r3, #0]
 8011106:	4975      	ldr	r1, [pc, #468]	; (80112dc <_Z18trained_model_initPFPvjjE+0x2cc>)
 8011108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801110a:	019b      	lsls	r3, r3, #6
 801110c:	440b      	add	r3, r1
 801110e:	3318      	adds	r3, #24
 8011110:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 8011112:	4973      	ldr	r1, [pc, #460]	; (80112e0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8011114:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011116:	4613      	mov	r3, r2
 8011118:	005b      	lsls	r3, r3, #1
 801111a:	4413      	add	r3, r2
 801111c:	00db      	lsls	r3, r3, #3
 801111e:	440b      	add	r3, r1
 8011120:	3308      	adds	r3, #8
 8011122:	681a      	ldr	r2, [r3, #0]
 8011124:	496d      	ldr	r1, [pc, #436]	; (80112dc <_Z18trained_model_initPFPvjjE+0x2cc>)
 8011126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011128:	019b      	lsls	r3, r3, #6
 801112a:	440b      	add	r3, r1
 801112c:	3308      	adds	r3, #8
 801112e:	601a      	str	r2, [r3, #0]
    tflEvalTensors[i].dims = tensorData[i].dims;
 8011130:	496b      	ldr	r1, [pc, #428]	; (80112e0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8011132:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011134:	4613      	mov	r3, r2
 8011136:	005b      	lsls	r3, r3, #1
 8011138:	4413      	add	r3, r2
 801113a:	00db      	lsls	r3, r3, #3
 801113c:	440b      	add	r3, r1
 801113e:	3308      	adds	r3, #8
 8011140:	6819      	ldr	r1, [r3, #0]
 8011142:	4868      	ldr	r0, [pc, #416]	; (80112e4 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8011144:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011146:	4613      	mov	r3, r2
 8011148:	005b      	lsls	r3, r3, #1
 801114a:	4413      	add	r3, r2
 801114c:	009b      	lsls	r3, r3, #2
 801114e:	4403      	add	r3, r0
 8011150:	3304      	adds	r3, #4
 8011152:	6019      	str	r1, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 8011154:	4a61      	ldr	r2, [pc, #388]	; (80112dc <_Z18trained_model_initPFPvjjE+0x2cc>)
 8011156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011158:	019b      	lsls	r3, r3, #6
 801115a:	4413      	add	r3, r2
 801115c:	3314      	adds	r3, #20
 801115e:	781b      	ldrb	r3, [r3, #0]
 8011160:	2b02      	cmp	r3, #2
 8011162:	d11e      	bne.n	80111a2 <_Z18trained_model_initPFPvjjE+0x192>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 8011164:	495e      	ldr	r1, [pc, #376]	; (80112e0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8011166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011168:	4613      	mov	r3, r2
 801116a:	005b      	lsls	r3, r3, #1
 801116c:	4413      	add	r3, r2
 801116e:	00db      	lsls	r3, r3, #3
 8011170:	440b      	add	r3, r1
 8011172:	3304      	adds	r3, #4
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	461a      	mov	r2, r3
 8011178:	4b4e      	ldr	r3, [pc, #312]	; (80112b4 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	4413      	add	r3, r2
 801117e:	63bb      	str	r3, [r7, #56]	; 0x38

     tflTensors[i].data.data =  start;
 8011180:	4a56      	ldr	r2, [pc, #344]	; (80112dc <_Z18trained_model_initPFPvjjE+0x2cc>)
 8011182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011184:	019b      	lsls	r3, r3, #6
 8011186:	4413      	add	r3, r2
 8011188:	3304      	adds	r3, #4
 801118a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801118c:	601a      	str	r2, [r3, #0]
     tflEvalTensors[i].data.data =  start;
 801118e:	4955      	ldr	r1, [pc, #340]	; (80112e4 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8011190:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011192:	4613      	mov	r3, r2
 8011194:	005b      	lsls	r3, r3, #1
 8011196:	4413      	add	r3, r2
 8011198:	009b      	lsls	r3, r3, #2
 801119a:	440b      	add	r3, r1
 801119c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801119e:	601a      	str	r2, [r3, #0]
 80111a0:	e01f      	b.n	80111e2 <_Z18trained_model_initPFPvjjE+0x1d2>
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
 80111a2:	494f      	ldr	r1, [pc, #316]	; (80112e0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80111a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80111a6:	4613      	mov	r3, r2
 80111a8:	005b      	lsls	r3, r3, #1
 80111aa:	4413      	add	r3, r2
 80111ac:	00db      	lsls	r3, r3, #3
 80111ae:	440b      	add	r3, r1
 80111b0:	3304      	adds	r3, #4
 80111b2:	681a      	ldr	r2, [r3, #0]
 80111b4:	4949      	ldr	r1, [pc, #292]	; (80112dc <_Z18trained_model_initPFPvjjE+0x2cc>)
 80111b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111b8:	019b      	lsls	r3, r3, #6
 80111ba:	440b      	add	r3, r1
 80111bc:	3304      	adds	r3, #4
 80111be:	601a      	str	r2, [r3, #0]
       tflEvalTensors[i].data.data = tensorData[i].data;
 80111c0:	4947      	ldr	r1, [pc, #284]	; (80112e0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80111c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80111c4:	4613      	mov	r3, r2
 80111c6:	005b      	lsls	r3, r3, #1
 80111c8:	4413      	add	r3, r2
 80111ca:	00db      	lsls	r3, r3, #3
 80111cc:	440b      	add	r3, r1
 80111ce:	3304      	adds	r3, #4
 80111d0:	6819      	ldr	r1, [r3, #0]
 80111d2:	4844      	ldr	r0, [pc, #272]	; (80112e4 <_Z18trained_model_initPFPvjjE+0x2d4>)
 80111d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80111d6:	4613      	mov	r3, r2
 80111d8:	005b      	lsls	r3, r3, #1
 80111da:	4413      	add	r3, r2
 80111dc:	009b      	lsls	r3, r3, #2
 80111de:	4403      	add	r3, r0
 80111e0:	6019      	str	r1, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 80111e2:	4a3e      	ldr	r2, [pc, #248]	; (80112dc <_Z18trained_model_initPFPvjjE+0x2cc>)
 80111e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111e6:	019b      	lsls	r3, r3, #6
 80111e8:	4413      	add	r3, r2
 80111ea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80111ee:	493c      	ldr	r1, [pc, #240]	; (80112e0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80111f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80111f2:	4613      	mov	r3, r2
 80111f4:	005b      	lsls	r3, r3, #1
 80111f6:	4413      	add	r3, r2
 80111f8:	00db      	lsls	r3, r3, #3
 80111fa:	440b      	add	r3, r1
 80111fc:	f103 0210 	add.w	r2, r3, #16
 8011200:	4603      	mov	r3, r0
 8011202:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011206:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 801120a:	4a34      	ldr	r2, [pc, #208]	; (80112dc <_Z18trained_model_initPFPvjjE+0x2cc>)
 801120c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801120e:	019b      	lsls	r3, r3, #6
 8011210:	4413      	add	r3, r2
 8011212:	3330      	adds	r3, #48	; 0x30
 8011214:	781b      	ldrb	r3, [r3, #0]
 8011216:	2b01      	cmp	r3, #1
 8011218:	d11b      	bne.n	8011252 <_Z18trained_model_initPFPvjjE+0x242>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 801121a:	4931      	ldr	r1, [pc, #196]	; (80112e0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801121c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801121e:	4613      	mov	r3, r2
 8011220:	005b      	lsls	r3, r3, #1
 8011222:	4413      	add	r3, r2
 8011224:	00db      	lsls	r3, r3, #3
 8011226:	440b      	add	r3, r1
 8011228:	3314      	adds	r3, #20
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	637b      	str	r3, [r7, #52]	; 0x34
      tflTensors[i].params.scale = quant->scale->data[0];
 801122e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	685a      	ldr	r2, [r3, #4]
 8011234:	4929      	ldr	r1, [pc, #164]	; (80112dc <_Z18trained_model_initPFPvjjE+0x2cc>)
 8011236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011238:	019b      	lsls	r3, r3, #6
 801123a:	440b      	add	r3, r1
 801123c:	330c      	adds	r3, #12
 801123e:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 8011240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011242:	685b      	ldr	r3, [r3, #4]
 8011244:	685a      	ldr	r2, [r3, #4]
 8011246:	4925      	ldr	r1, [pc, #148]	; (80112dc <_Z18trained_model_initPFPvjjE+0x2cc>)
 8011248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801124a:	019b      	lsls	r3, r3, #6
 801124c:	440b      	add	r3, r1
 801124e:	3310      	adds	r3, #16
 8011250:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 8011252:	4a22      	ldr	r2, [pc, #136]	; (80112dc <_Z18trained_model_initPFPvjjE+0x2cc>)
 8011254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011256:	019b      	lsls	r3, r3, #6
 8011258:	4413      	add	r3, r2
 801125a:	3314      	adds	r3, #20
 801125c:	781b      	ldrb	r3, [r3, #0]
 801125e:	2b02      	cmp	r3, #2
 8011260:	d118      	bne.n	8011294 <_Z18trained_model_initPFPvjjE+0x284>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 8011262:	4a1e      	ldr	r2, [pc, #120]	; (80112dc <_Z18trained_model_initPFPvjjE+0x2cc>)
 8011264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011266:	019b      	lsls	r3, r3, #6
 8011268:	4413      	add	r3, r2
 801126a:	3304      	adds	r3, #4
 801126c:	6819      	ldr	r1, [r3, #0]
 801126e:	481c      	ldr	r0, [pc, #112]	; (80112e0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8011270:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011272:	4613      	mov	r3, r2
 8011274:	005b      	lsls	r3, r3, #1
 8011276:	4413      	add	r3, r2
 8011278:	00db      	lsls	r3, r3, #3
 801127a:	4403      	add	r3, r0
 801127c:	330c      	adds	r3, #12
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	440b      	add	r3, r1
 8011282:	633b      	str	r3, [r7, #48]	; 0x30
      if (data_end_ptr > tensor_boundary) {
 8011284:	4b0d      	ldr	r3, [pc, #52]	; (80112bc <_Z18trained_model_initPFPvjjE+0x2ac>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801128a:	429a      	cmp	r2, r3
 801128c:	d902      	bls.n	8011294 <_Z18trained_model_initPFPvjjE+0x284>
        tensor_boundary = data_end_ptr;
 801128e:	4a0b      	ldr	r2, [pc, #44]	; (80112bc <_Z18trained_model_initPFPvjjE+0x2ac>)
 8011290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011292:	6013      	str	r3, [r2, #0]
  for(size_t i = 0; i < 10; ++i) {
 8011294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011296:	3301      	adds	r3, #1
 8011298:	647b      	str	r3, [r7, #68]	; 0x44
 801129a:	e6ef      	b.n	801107c <_Z18trained_model_initPFPvjjE+0x6c>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 801129c:	4b07      	ldr	r3, [pc, #28]	; (80112bc <_Z18trained_model_initPFPvjjE+0x2ac>)
 801129e:	681a      	ldr	r2, [r3, #0]
 80112a0:	4b07      	ldr	r3, [pc, #28]	; (80112c0 <_Z18trained_model_initPFPvjjE+0x2b0>)
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	429a      	cmp	r2, r3
 80112a6:	d921      	bls.n	80112ec <_Z18trained_model_initPFPvjjE+0x2dc>
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 80112a8:	480f      	ldr	r0, [pc, #60]	; (80112e8 <_Z18trained_model_initPFPvjjE+0x2d8>)
 80112aa:	f004 fd3f 	bl	8015d2c <puts>
    return kTfLiteError;
 80112ae:	2301      	movs	r3, #1
 80112b0:	e0d4      	b.n	801145c <_Z18trained_model_initPFPvjjE+0x44c>
 80112b2:	bf00      	nop
 80112b4:	2000098c 	.word	0x2000098c
 80112b8:	0801a78c 	.word	0x0801a78c
 80112bc:	20000990 	.word	0x20000990
 80112c0:	20000994 	.word	0x20000994
 80112c4:	20000998 	.word	0x20000998
 80112c8:	08010e59 	.word	0x08010e59
 80112cc:	08010f2d 	.word	0x08010f2d
 80112d0:	08010f81 	.word	0x08010f81
 80112d4:	08010fc5 	.word	0x08010fc5
 80112d8:	08010fe9 	.word	0x08010fe9
 80112dc:	200009f0 	.word	0x200009f0
 80112e0:	200000dc 	.word	0x200000dc
 80112e4:	20000c70 	.word	0x20000c70
 80112e8:	0801a7b4 	.word	0x0801a7b4
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 80112ec:	4c5d      	ldr	r4, [pc, #372]	; (8011464 <_Z18trained_model_initPFPvjjE+0x454>)
 80112ee:	463b      	mov	r3, r7
 80112f0:	4618      	mov	r0, r3
 80112f2:	f7ff fca5 	bl	8010c40 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 80112f6:	4625      	mov	r5, r4
 80112f8:	463c      	mov	r4, r7
 80112fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80112fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80112fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011302:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

  for(size_t i = 0; i < 3; ++i) {
 8011306:	2300      	movs	r3, #0
 8011308:	643b      	str	r3, [r7, #64]	; 0x40
 801130a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801130c:	2b02      	cmp	r3, #2
 801130e:	d86f      	bhi.n	80113f0 <_Z18trained_model_initPFPvjjE+0x3e0>
    tflNodes[i].inputs = nodeData[i].inputs;
 8011310:	4a55      	ldr	r2, [pc, #340]	; (8011468 <_Z18trained_model_initPFPvjjE+0x458>)
 8011312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011314:	011b      	lsls	r3, r3, #4
 8011316:	4413      	add	r3, r2
 8011318:	6819      	ldr	r1, [r3, #0]
 801131a:	4854      	ldr	r0, [pc, #336]	; (801146c <_Z18trained_model_initPFPvjjE+0x45c>)
 801131c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801131e:	4613      	mov	r3, r2
 8011320:	00db      	lsls	r3, r3, #3
 8011322:	4413      	add	r3, r2
 8011324:	009b      	lsls	r3, r3, #2
 8011326:	4403      	add	r3, r0
 8011328:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 801132a:	4a4f      	ldr	r2, [pc, #316]	; (8011468 <_Z18trained_model_initPFPvjjE+0x458>)
 801132c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801132e:	011b      	lsls	r3, r3, #4
 8011330:	4413      	add	r3, r2
 8011332:	3304      	adds	r3, #4
 8011334:	6819      	ldr	r1, [r3, #0]
 8011336:	484d      	ldr	r0, [pc, #308]	; (801146c <_Z18trained_model_initPFPvjjE+0x45c>)
 8011338:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801133a:	4613      	mov	r3, r2
 801133c:	00db      	lsls	r3, r3, #3
 801133e:	4413      	add	r3, r2
 8011340:	009b      	lsls	r3, r3, #2
 8011342:	4403      	add	r3, r0
 8011344:	3304      	adds	r3, #4
 8011346:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 8011348:	4a47      	ldr	r2, [pc, #284]	; (8011468 <_Z18trained_model_initPFPvjjE+0x458>)
 801134a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801134c:	011b      	lsls	r3, r3, #4
 801134e:	4413      	add	r3, r2
 8011350:	3308      	adds	r3, #8
 8011352:	6819      	ldr	r1, [r3, #0]
 8011354:	4845      	ldr	r0, [pc, #276]	; (801146c <_Z18trained_model_initPFPvjjE+0x45c>)
 8011356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011358:	4613      	mov	r3, r2
 801135a:	00db      	lsls	r3, r3, #3
 801135c:	4413      	add	r3, r2
 801135e:	009b      	lsls	r3, r3, #2
 8011360:	4403      	add	r3, r0
 8011362:	3314      	adds	r3, #20
 8011364:	6019      	str	r1, [r3, #0]
tflNodes[i].custom_initial_data = nullptr;
 8011366:	4941      	ldr	r1, [pc, #260]	; (801146c <_Z18trained_model_initPFPvjjE+0x45c>)
 8011368:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801136a:	4613      	mov	r3, r2
 801136c:	00db      	lsls	r3, r3, #3
 801136e:	4413      	add	r3, r2
 8011370:	009b      	lsls	r3, r3, #2
 8011372:	440b      	add	r3, r1
 8011374:	3318      	adds	r3, #24
 8011376:	2200      	movs	r2, #0
 8011378:	601a      	str	r2, [r3, #0]
      tflNodes[i].custom_initial_data_size = 0;
 801137a:	493c      	ldr	r1, [pc, #240]	; (801146c <_Z18trained_model_initPFPvjjE+0x45c>)
 801137c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801137e:	4613      	mov	r3, r2
 8011380:	00db      	lsls	r3, r3, #3
 8011382:	4413      	add	r3, r2
 8011384:	009b      	lsls	r3, r3, #2
 8011386:	440b      	add	r3, r1
 8011388:	331c      	adds	r3, #28
 801138a:	2200      	movs	r2, #0
 801138c:	601a      	str	r2, [r3, #0]
if (registrations[nodeData[i].used_op_index].init) {
 801138e:	4a36      	ldr	r2, [pc, #216]	; (8011468 <_Z18trained_model_initPFPvjjE+0x458>)
 8011390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011392:	011b      	lsls	r3, r3, #4
 8011394:	4413      	add	r3, r2
 8011396:	330c      	adds	r3, #12
 8011398:	781b      	ldrb	r3, [r3, #0]
 801139a:	4a32      	ldr	r2, [pc, #200]	; (8011464 <_Z18trained_model_initPFPvjjE+0x454>)
 801139c:	015b      	lsls	r3, r3, #5
 801139e:	4413      	add	r3, r2
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d020      	beq.n	80113e8 <_Z18trained_model_initPFPvjjE+0x3d8>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 80113a6:	4a30      	ldr	r2, [pc, #192]	; (8011468 <_Z18trained_model_initPFPvjjE+0x458>)
 80113a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113aa:	011b      	lsls	r3, r3, #4
 80113ac:	4413      	add	r3, r2
 80113ae:	330c      	adds	r3, #12
 80113b0:	781b      	ldrb	r3, [r3, #0]
 80113b2:	4a2c      	ldr	r2, [pc, #176]	; (8011464 <_Z18trained_model_initPFPvjjE+0x454>)
 80113b4:	015b      	lsls	r3, r3, #5
 80113b6:	4413      	add	r3, r2
 80113b8:	681c      	ldr	r4, [r3, #0]
 80113ba:	492c      	ldr	r1, [pc, #176]	; (801146c <_Z18trained_model_initPFPvjjE+0x45c>)
 80113bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80113be:	4613      	mov	r3, r2
 80113c0:	00db      	lsls	r3, r3, #3
 80113c2:	4413      	add	r3, r2
 80113c4:	009b      	lsls	r3, r3, #2
 80113c6:	440b      	add	r3, r1
 80113c8:	3314      	adds	r3, #20
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	2200      	movs	r2, #0
 80113ce:	4619      	mov	r1, r3
 80113d0:	4827      	ldr	r0, [pc, #156]	; (8011470 <_Z18trained_model_initPFPvjjE+0x460>)
 80113d2:	47a0      	blx	r4
 80113d4:	4601      	mov	r1, r0
 80113d6:	4825      	ldr	r0, [pc, #148]	; (801146c <_Z18trained_model_initPFPvjjE+0x45c>)
 80113d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80113da:	4613      	mov	r3, r2
 80113dc:	00db      	lsls	r3, r3, #3
 80113de:	4413      	add	r3, r2
 80113e0:	009b      	lsls	r3, r3, #2
 80113e2:	4403      	add	r3, r0
 80113e4:	3310      	adds	r3, #16
 80113e6:	6019      	str	r1, [r3, #0]
  for(size_t i = 0; i < 3; ++i) {
 80113e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113ea:	3301      	adds	r3, #1
 80113ec:	643b      	str	r3, [r7, #64]	; 0x40
 80113ee:	e78c      	b.n	801130a <_Z18trained_model_initPFPvjjE+0x2fa>
    }
  }
  for(size_t i = 0; i < 3; ++i) {
 80113f0:	2300      	movs	r3, #0
 80113f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80113f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113f6:	2b02      	cmp	r3, #2
 80113f8:	d82f      	bhi.n	801145a <_Z18trained_model_initPFPvjjE+0x44a>
    if (registrations[nodeData[i].used_op_index].prepare) {
 80113fa:	4a1b      	ldr	r2, [pc, #108]	; (8011468 <_Z18trained_model_initPFPvjjE+0x458>)
 80113fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113fe:	011b      	lsls	r3, r3, #4
 8011400:	4413      	add	r3, r2
 8011402:	330c      	adds	r3, #12
 8011404:	781b      	ldrb	r3, [r3, #0]
 8011406:	4a17      	ldr	r2, [pc, #92]	; (8011464 <_Z18trained_model_initPFPvjjE+0x454>)
 8011408:	015b      	lsls	r3, r3, #5
 801140a:	4413      	add	r3, r2
 801140c:	3308      	adds	r3, #8
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d01e      	beq.n	8011452 <_Z18trained_model_initPFPvjjE+0x442>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 8011414:	4a14      	ldr	r2, [pc, #80]	; (8011468 <_Z18trained_model_initPFPvjjE+0x458>)
 8011416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011418:	011b      	lsls	r3, r3, #4
 801141a:	4413      	add	r3, r2
 801141c:	330c      	adds	r3, #12
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	4a10      	ldr	r2, [pc, #64]	; (8011464 <_Z18trained_model_initPFPvjjE+0x454>)
 8011422:	015b      	lsls	r3, r3, #5
 8011424:	4413      	add	r3, r2
 8011426:	3308      	adds	r3, #8
 8011428:	681c      	ldr	r4, [r3, #0]
 801142a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801142c:	4613      	mov	r3, r2
 801142e:	00db      	lsls	r3, r3, #3
 8011430:	4413      	add	r3, r2
 8011432:	009b      	lsls	r3, r3, #2
 8011434:	4a0d      	ldr	r2, [pc, #52]	; (801146c <_Z18trained_model_initPFPvjjE+0x45c>)
 8011436:	4413      	add	r3, r2
 8011438:	4619      	mov	r1, r3
 801143a:	480d      	ldr	r0, [pc, #52]	; (8011470 <_Z18trained_model_initPFPvjjE+0x460>)
 801143c:	47a0      	blx	r4
 801143e:	4603      	mov	r3, r0
 8011440:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (status != kTfLiteOk) {
 8011444:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011448:	2b00      	cmp	r3, #0
 801144a:	d002      	beq.n	8011452 <_Z18trained_model_initPFPvjjE+0x442>
        return status;
 801144c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011450:	e004      	b.n	801145c <_Z18trained_model_initPFPvjjE+0x44c>
  for(size_t i = 0; i < 3; ++i) {
 8011452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011454:	3301      	adds	r3, #1
 8011456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011458:	e7cc      	b.n	80113f4 <_Z18trained_model_initPFPvjjE+0x3e4>
      }
    }
  }
  return kTfLiteOk;
 801145a:	2300      	movs	r3, #0
}
 801145c:	4618      	mov	r0, r3
 801145e:	3748      	adds	r7, #72	; 0x48
 8011460:	46bd      	mov	sp, r7
 8011462:	bdb0      	pop	{r4, r5, r7, pc}
 8011464:	20000ce8 	.word	0x20000ce8
 8011468:	08059a70 	.word	0x08059a70
 801146c:	20000d08 	.word	0x20000d08
 8011470:	20000998 	.word	0x20000998

08011474 <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 8011474:	b480      	push	{r7}
 8011476:	b083      	sub	sp, #12
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 801147c:	4b05      	ldr	r3, [pc, #20]	; (8011494 <_Z19trained_model_inputi+0x20>)
 801147e:	689a      	ldr	r2, [r3, #8]
 8011480:	2300      	movs	r3, #0
 8011482:	019b      	lsls	r3, r3, #6
 8011484:	4413      	add	r3, r2
}
 8011486:	4618      	mov	r0, r3
 8011488:	370c      	adds	r7, #12
 801148a:	46bd      	mov	sp, r7
 801148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011490:	4770      	bx	lr
 8011492:	bf00      	nop
 8011494:	20000998 	.word	0x20000998

08011498 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  9, 
};
TfLiteTensor* trained_model_output(int index) {
 8011498:	b480      	push	{r7}
 801149a:	b083      	sub	sp, #12
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 80114a0:	4b05      	ldr	r3, [pc, #20]	; (80114b8 <_Z20trained_model_outputi+0x20>)
 80114a2:	689a      	ldr	r2, [r3, #8]
 80114a4:	2309      	movs	r3, #9
 80114a6:	019b      	lsls	r3, r3, #6
 80114a8:	4413      	add	r3, r2
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	370c      	adds	r7, #12
 80114ae:	46bd      	mov	sp, r7
 80114b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b4:	4770      	bx	lr
 80114b6:	bf00      	nop
 80114b8:	20000998 	.word	0x20000998

080114bc <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 80114bc:	b590      	push	{r4, r7, lr}
 80114be:	b083      	sub	sp, #12
 80114c0:	af00      	add	r7, sp, #0
  for(size_t i = 0; i < 3; ++i) {
 80114c2:	2300      	movs	r3, #0
 80114c4:	607b      	str	r3, [r7, #4]
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	2b02      	cmp	r3, #2
 80114ca:	d81f      	bhi.n	801150c <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 80114cc:	4a12      	ldr	r2, [pc, #72]	; (8011518 <_Z20trained_model_invokev+0x5c>)
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	011b      	lsls	r3, r3, #4
 80114d2:	4413      	add	r3, r2
 80114d4:	330c      	adds	r3, #12
 80114d6:	781b      	ldrb	r3, [r3, #0]
 80114d8:	4a10      	ldr	r2, [pc, #64]	; (801151c <_Z20trained_model_invokev+0x60>)
 80114da:	015b      	lsls	r3, r3, #5
 80114dc:	4413      	add	r3, r2
 80114de:	330c      	adds	r3, #12
 80114e0:	681c      	ldr	r4, [r3, #0]
 80114e2:	687a      	ldr	r2, [r7, #4]
 80114e4:	4613      	mov	r3, r2
 80114e6:	00db      	lsls	r3, r3, #3
 80114e8:	4413      	add	r3, r2
 80114ea:	009b      	lsls	r3, r3, #2
 80114ec:	4a0c      	ldr	r2, [pc, #48]	; (8011520 <_Z20trained_model_invokev+0x64>)
 80114ee:	4413      	add	r3, r2
 80114f0:	4619      	mov	r1, r3
 80114f2:	480c      	ldr	r0, [pc, #48]	; (8011524 <_Z20trained_model_invokev+0x68>)
 80114f4:	47a0      	blx	r4
 80114f6:	4603      	mov	r3, r0
 80114f8:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 80114fa:	78fb      	ldrb	r3, [r7, #3]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d001      	beq.n	8011504 <_Z20trained_model_invokev+0x48>
      return status;
 8011500:	78fb      	ldrb	r3, [r7, #3]
 8011502:	e004      	b.n	801150e <_Z20trained_model_invokev+0x52>
  for(size_t i = 0; i < 3; ++i) {
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	3301      	adds	r3, #1
 8011508:	607b      	str	r3, [r7, #4]
 801150a:	e7dc      	b.n	80114c6 <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 801150c:	2300      	movs	r3, #0
}
 801150e:	4618      	mov	r0, r3
 8011510:	370c      	adds	r7, #12
 8011512:	46bd      	mov	sp, r7
 8011514:	bd90      	pop	{r4, r7, pc}
 8011516:	bf00      	nop
 8011518:	08059a70 	.word	0x08059a70
 801151c:	20000ce8 	.word	0x20000ce8
 8011520:	20000d08 	.word	0x20000d08
 8011524:	20000998 	.word	0x20000998

08011528 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 8011528:	b580      	push	{r7, lr}
 801152a:	b084      	sub	sp, #16
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 8011530:	4b15      	ldr	r3, [pc, #84]	; (8011588 <_Z19trained_model_resetPFvPvE+0x60>)
 8011532:	681a      	ldr	r2, [r3, #0]
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	4610      	mov	r0, r2
 8011538:	4798      	blx	r3
#endif
  scratch_buffers.clear();
 801153a:	4814      	ldr	r0, [pc, #80]	; (801158c <_Z19trained_model_resetPFvPvE+0x64>)
 801153c:	f000 f8ff 	bl	801173e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 8011540:	2300      	movs	r3, #0
 8011542:	60fb      	str	r3, [r7, #12]
 8011544:	4812      	ldr	r0, [pc, #72]	; (8011590 <_Z19trained_model_resetPFvPvE+0x68>)
 8011546:	f000 f908 	bl	801175a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 801154a:	4602      	mov	r2, r0
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	4293      	cmp	r3, r2
 8011550:	bf34      	ite	cc
 8011552:	2301      	movcc	r3, #1
 8011554:	2300      	movcs	r3, #0
 8011556:	b2db      	uxtb	r3, r3
 8011558:	2b00      	cmp	r3, #0
 801155a:	d00c      	beq.n	8011576 <_Z19trained_model_resetPFvPvE+0x4e>
    free(overflow_buffers[ix]);
 801155c:	68f9      	ldr	r1, [r7, #12]
 801155e:	480c      	ldr	r0, [pc, #48]	; (8011590 <_Z19trained_model_resetPFvPvE+0x68>)
 8011560:	f000 f90b 	bl	801177a <_ZNSt6vectorIPvSaIS0_EEixEj>
 8011564:	4603      	mov	r3, r0
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	4618      	mov	r0, r3
 801156a:	f003 fa57 	bl	8014a1c <free>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	3301      	adds	r3, #1
 8011572:	60fb      	str	r3, [r7, #12]
 8011574:	e7e6      	b.n	8011544 <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers.clear();
 8011576:	4806      	ldr	r0, [pc, #24]	; (8011590 <_Z19trained_model_resetPFvPvE+0x68>)
 8011578:	f000 f90f 	bl	801179a <_ZNSt6vectorIPvSaIS0_EE5clearEv>
  return kTfLiteOk;
 801157c:	2300      	movs	r3, #0
}
 801157e:	4618      	mov	r0, r3
 8011580:	3710      	adds	r7, #16
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}
 8011586:	bf00      	nop
 8011588:	2000098c 	.word	0x2000098c
 801158c:	20000d80 	.word	0x20000d80
 8011590:	20000d74 	.word	0x20000d74

08011594 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8011594:	b580      	push	{r7, lr}
 8011596:	b082      	sub	sp, #8
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 801159c:	6878      	ldr	r0, [r7, #4]
 801159e:	f000 f90a 	bl	80117b6 <_ZNSaIPvEC1Ev>
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	4618      	mov	r0, r3
 80115a6:	f000 f912 	bl	80117ce <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	4618      	mov	r0, r3
 80115ae:	3708      	adds	r7, #8
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}

080115b4 <_ZNSaIPvED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b082      	sub	sp, #8
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	f000 f91a 	bl	80117f6 <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	4618      	mov	r0, r3
 80115c6:	3708      	adds	r7, #8
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}

080115cc <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b082      	sub	sp, #8
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	689a      	ldr	r2, [r3, #8]
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	1ad3      	subs	r3, r2, r3
 80115e2:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80115e4:	461a      	mov	r2, r3
 80115e6:	6878      	ldr	r0, [r7, #4]
 80115e8:	f000 f910 	bl	801180c <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      }
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	4618      	mov	r0, r3
 80115f0:	f7ff fc0b 	bl	8010e0a <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	4618      	mov	r0, r3
 80115f8:	3708      	adds	r7, #8
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}

080115fe <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 80115fe:	b580      	push	{r7, lr}
 8011600:	b082      	sub	sp, #8
 8011602:	af00      	add	r7, sp, #0
 8011604:	6078      	str	r0, [r7, #4]
 8011606:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	685a      	ldr	r2, [r3, #4]
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	689b      	ldr	r3, [r3, #8]
 8011610:	429a      	cmp	r2, r3
 8011612:	d00c      	beq.n	801162e <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	685b      	ldr	r3, [r3, #4]
 801161a:	683a      	ldr	r2, [r7, #0]
 801161c:	4619      	mov	r1, r3
 801161e:	f000 f908 	bl	8011832 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	1d1a      	adds	r2, r3, #4
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 801162c:	e008      	b.n	8011640 <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x42>
	  _M_realloc_insert(end(), __x);
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f000 f912 	bl	8011858 <_ZNSt6vectorIPvSaIS0_EE3endEv>
 8011634:	4603      	mov	r3, r0
 8011636:	683a      	ldr	r2, [r7, #0]
 8011638:	4619      	mov	r1, r3
 801163a:	6878      	ldr	r0, [r7, #4]
 801163c:	f000 f934 	bl	80118a8 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8011640:	bf00      	nop
 8011642:	3708      	adds	r7, #8
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}

08011648 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8011648:	b580      	push	{r7, lr}
 801164a:	b082      	sub	sp, #8
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	f000 f9e5 	bl	8011a20 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	4618      	mov	r0, r3
 801165a:	f000 f9ed 	bl	8011a38 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>
	{ }
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	4618      	mov	r0, r3
 8011662:	3708      	adds	r7, #8
 8011664:	46bd      	mov	sp, r7
 8011666:	bd80      	pop	{r7, pc}

08011668 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 8011668:	b580      	push	{r7, lr}
 801166a:	b082      	sub	sp, #8
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f000 f9f5 	bl	8011a60 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	4618      	mov	r0, r3
 801167a:	3708      	adds	r7, #8
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}

08011680 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8011680:	b580      	push	{r7, lr}
 8011682:	b082      	sub	sp, #8
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	689a      	ldr	r2, [r3, #8]
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	1ad3      	subs	r3, r2, r3
 8011696:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8011698:	461a      	mov	r2, r3
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f000 f9eb 	bl	8011a76 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      }
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	4618      	mov	r0, r3
 80116a4:	f7ff fc1c 	bl	8010ee0 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	4618      	mov	r0, r3
 80116ac:	3708      	adds	r7, #8
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}

080116b2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 80116b2:	b580      	push	{r7, lr}
 80116b4:	b082      	sub	sp, #8
 80116b6:	af00      	add	r7, sp, #0
 80116b8:	6078      	str	r0, [r7, #4]
 80116ba:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	685a      	ldr	r2, [r3, #4]
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	689b      	ldr	r3, [r3, #8]
 80116c4:	429a      	cmp	r2, r3
 80116c6:	d00d      	beq.n	80116e4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	685b      	ldr	r3, [r3, #4]
 80116ce:	683a      	ldr	r2, [r7, #0]
 80116d0:	4619      	mov	r1, r3
 80116d2:	f000 f9e3 	bl	8011a9c <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	685b      	ldr	r3, [r3, #4]
 80116da:	f103 0208 	add.w	r2, r3, #8
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	605a      	str	r2, [r3, #4]
      }
 80116e2:	e008      	b.n	80116f6 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x44>
	  _M_realloc_insert(end(), __x);
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	f000 f9ec 	bl	8011ac2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>
 80116ea:	4603      	mov	r3, r0
 80116ec:	683a      	ldr	r2, [r7, #0]
 80116ee:	4619      	mov	r1, r3
 80116f0:	6878      	ldr	r0, [r7, #4]
 80116f2:	f000 fa0d 	bl	8011b10 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80116f6:	bf00      	nop
 80116f8:	3708      	adds	r7, #8
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}

080116fe <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80116fe:	b480      	push	{r7}
 8011700:	b083      	sub	sp, #12
 8011702:	af00      	add	r7, sp, #0
 8011704:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	685a      	ldr	r2, [r3, #4]
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	1ad3      	subs	r3, r2, r3
 8011710:	10db      	asrs	r3, r3, #3
 8011712:	4618      	mov	r0, r3
 8011714:	370c      	adds	r7, #12
 8011716:	46bd      	mov	sp, r7
 8011718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171c:	4770      	bx	lr

0801171e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 801171e:	b480      	push	{r7}
 8011720:	b083      	sub	sp, #12
 8011722:	af00      	add	r7, sp, #0
 8011724:	6078      	str	r0, [r7, #4]
 8011726:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	681a      	ldr	r2, [r3, #0]
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	00db      	lsls	r3, r3, #3
 8011730:	4413      	add	r3, r2
      }
 8011732:	4618      	mov	r0, r3
 8011734:	370c      	adds	r7, #12
 8011736:	46bd      	mov	sp, r7
 8011738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173c:	4770      	bx	lr

0801173e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 801173e:	b580      	push	{r7, lr}
 8011740:	b082      	sub	sp, #8
 8011742:	af00      	add	r7, sp, #0
 8011744:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	4619      	mov	r1, r3
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f000 fa9b 	bl	8011c88 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>
 8011752:	bf00      	nop
 8011754:	3708      	adds	r7, #8
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}

0801175a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801175a:	b480      	push	{r7}
 801175c:	b083      	sub	sp, #12
 801175e:	af00      	add	r7, sp, #0
 8011760:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	685a      	ldr	r2, [r3, #4]
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	1ad3      	subs	r3, r2, r3
 801176c:	109b      	asrs	r3, r3, #2
 801176e:	4618      	mov	r0, r3
 8011770:	370c      	adds	r7, #12
 8011772:	46bd      	mov	sp, r7
 8011774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011778:	4770      	bx	lr

0801177a <_ZNSt6vectorIPvSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 801177a:	b480      	push	{r7}
 801177c:	b083      	sub	sp, #12
 801177e:	af00      	add	r7, sp, #0
 8011780:	6078      	str	r0, [r7, #4]
 8011782:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	681a      	ldr	r2, [r3, #0]
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	009b      	lsls	r3, r3, #2
 801178c:	4413      	add	r3, r2
      }
 801178e:	4618      	mov	r0, r3
 8011790:	370c      	adds	r7, #12
 8011792:	46bd      	mov	sp, r7
 8011794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011798:	4770      	bx	lr

0801179a <_ZNSt6vectorIPvSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 801179a:	b580      	push	{r7, lr}
 801179c:	b082      	sub	sp, #8
 801179e:	af00      	add	r7, sp, #0
 80117a0:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	4619      	mov	r1, r3
 80117a8:	6878      	ldr	r0, [r7, #4]
 80117aa:	f000 fa8e 	bl	8011cca <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>
 80117ae:	bf00      	nop
 80117b0:	3708      	adds	r7, #8
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}

080117b6 <_ZNSaIPvEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80117b6:	b580      	push	{r7, lr}
 80117b8:	b082      	sub	sp, #8
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	6078      	str	r0, [r7, #4]
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f000 faa4 	bl	8011d0c <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	4618      	mov	r0, r3
 80117c8:	3708      	adds	r7, #8
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd80      	pop	{r7, pc}

080117ce <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80117ce:	b480      	push	{r7}
 80117d0:	b083      	sub	sp, #12
 80117d2:	af00      	add	r7, sp, #0
 80117d4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2200      	movs	r2, #0
 80117da:	601a      	str	r2, [r3, #0]
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2200      	movs	r2, #0
 80117e0:	605a      	str	r2, [r3, #4]
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	2200      	movs	r2, #0
 80117e6:	609a      	str	r2, [r3, #8]
	{ }
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	4618      	mov	r0, r3
 80117ec:	370c      	adds	r7, #12
 80117ee:	46bd      	mov	sp, r7
 80117f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f4:	4770      	bx	lr

080117f6 <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80117f6:	b480      	push	{r7}
 80117f8:	b083      	sub	sp, #12
 80117fa:	af00      	add	r7, sp, #0
 80117fc:	6078      	str	r0, [r7, #4]
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	4618      	mov	r0, r3
 8011802:	370c      	adds	r7, #12
 8011804:	46bd      	mov	sp, r7
 8011806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180a:	4770      	bx	lr

0801180c <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 801180c:	b580      	push	{r7, lr}
 801180e:	b084      	sub	sp, #16
 8011810:	af00      	add	r7, sp, #0
 8011812:	60f8      	str	r0, [r7, #12]
 8011814:	60b9      	str	r1, [r7, #8]
 8011816:	607a      	str	r2, [r7, #4]
	if (__p)
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d005      	beq.n	801182a <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	687a      	ldr	r2, [r7, #4]
 8011822:	68b9      	ldr	r1, [r7, #8]
 8011824:	4618      	mov	r0, r3
 8011826:	f000 fa7c 	bl	8011d22 <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>
      }
 801182a:	bf00      	nop
 801182c:	3710      	adds	r7, #16
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}

08011832 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8011832:	b580      	push	{r7, lr}
 8011834:	b084      	sub	sp, #16
 8011836:	af00      	add	r7, sp, #0
 8011838:	60f8      	str	r0, [r7, #12]
 801183a:	60b9      	str	r1, [r7, #8]
 801183c:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 801183e:	6878      	ldr	r0, [r7, #4]
 8011840:	f000 fa7e 	bl	8011d40 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8011844:	4603      	mov	r3, r0
 8011846:	461a      	mov	r2, r3
 8011848:	68b9      	ldr	r1, [r7, #8]
 801184a:	68f8      	ldr	r0, [r7, #12]
 801184c:	f000 fa83 	bl	8011d56 <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 8011850:	bf00      	nop
 8011852:	3710      	adds	r7, #16
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}

08011858 <_ZNSt6vectorIPvSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8011858:	b580      	push	{r7, lr}
 801185a:	b084      	sub	sp, #16
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	1d1a      	adds	r2, r3, #4
 8011864:	f107 030c 	add.w	r3, r7, #12
 8011868:	4611      	mov	r1, r2
 801186a:	4618      	mov	r0, r3
 801186c:	f000 fa89 	bl	8011d82 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	4618      	mov	r0, r3
 8011874:	3710      	adds	r7, #16
 8011876:	46bd      	mov	sp, r7
 8011878:	bd80      	pop	{r7, pc}

0801187a <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 801187a:	b580      	push	{r7, lr}
 801187c:	b082      	sub	sp, #8
 801187e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8011880:	4618      	mov	r0, r3
 8011882:	f000 f805 	bl	8011890 <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8011886:	4603      	mov	r3, r0
      }
 8011888:	4618      	mov	r0, r3
 801188a:	3708      	adds	r7, #8
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}

08011890 <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8011890:	b480      	push	{r7}
 8011892:	b083      	sub	sp, #12
 8011894:	af00      	add	r7, sp, #0
 8011896:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8011898:	2301      	movs	r3, #1
      }
 801189a:	4618      	mov	r0, r3
 801189c:	370c      	adds	r7, #12
 801189e:	46bd      	mov	sp, r7
 80118a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a4:	4770      	bx	lr
	...

080118a8 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80118a8:	b5b0      	push	{r4, r5, r7, lr}
 80118aa:	b08c      	sub	sp, #48	; 0x30
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	60f8      	str	r0, [r7, #12]
 80118b0:	60b9      	str	r1, [r7, #8]
 80118b2:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80118b4:	4a59      	ldr	r2, [pc, #356]	; (8011a1c <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 80118b6:	2101      	movs	r1, #1
 80118b8:	68f8      	ldr	r0, [r7, #12]
 80118ba:	f000 fa72 	bl	8011da2 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>
 80118be:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	685b      	ldr	r3, [r3, #4]
 80118ca:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80118cc:	68f8      	ldr	r0, [r7, #12]
 80118ce:	f000 faaf 	bl	8011e30 <_ZNSt6vectorIPvSaIS0_EE5beginEv>
 80118d2:	4603      	mov	r3, r0
 80118d4:	617b      	str	r3, [r7, #20]
 80118d6:	f107 0214 	add.w	r2, r7, #20
 80118da:	f107 0308 	add.w	r3, r7, #8
 80118de:	4611      	mov	r1, r2
 80118e0:	4618      	mov	r0, r3
 80118e2:	f000 fab5 	bl	8011e50 <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80118e6:	4603      	mov	r3, r0
 80118e8:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80118ee:	4618      	mov	r0, r3
 80118f0:	f000 fac3 	bl	8011e7a <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>
 80118f4:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 80118f6:	69bb      	ldr	r3, [r7, #24]
 80118f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80118fa:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80118fc:	69fb      	ldr	r3, [r7, #28]
 80118fe:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8011900:	69ba      	ldr	r2, [r7, #24]
 8011902:	18d5      	adds	r5, r2, r3
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f000 fa1b 	bl	8011d40 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 801190a:	4603      	mov	r3, r0
 801190c:	461a      	mov	r2, r3
 801190e:	4629      	mov	r1, r5
 8011910:	4620      	mov	r0, r4
 8011912:	f7ff ff8e 	bl	8011832 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8011916:	2300      	movs	r3, #0
 8011918:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 801191a:	f7ff ffae 	bl	801187a <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 801191e:	4603      	mov	r3, r0
 8011920:	2b00      	cmp	r3, #0
 8011922:	d027      	beq.n	8011974 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011924:	f107 0308 	add.w	r3, r7, #8
 8011928:	4618      	mov	r0, r3
 801192a:	f000 face 	bl	8011eca <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 801192e:	4603      	mov	r3, r0
 8011930:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	4618      	mov	r0, r3
 8011936:	f000 fad3 	bl	8011ee0 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 801193a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801193c:	69ba      	ldr	r2, [r7, #24]
 801193e:	4621      	mov	r1, r4
 8011940:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011942:	f000 faae 	bl	8011ea2 <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8011946:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8011948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801194a:	3304      	adds	r3, #4
 801194c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801194e:	f107 0308 	add.w	r3, r7, #8
 8011952:	4618      	mov	r0, r3
 8011954:	f000 fab9 	bl	8011eca <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8011958:	4603      	mov	r3, r0
 801195a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	4618      	mov	r0, r3
 8011960:	f000 fabe 	bl	8011ee0 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8011964:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011968:	6a39      	ldr	r1, [r7, #32]
 801196a:	4620      	mov	r0, r4
 801196c:	f000 fa99 	bl	8011ea2 <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8011970:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011972:	e026      	b.n	80119c2 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8011974:	f107 0308 	add.w	r3, r7, #8
 8011978:	4618      	mov	r0, r3
 801197a:	f000 faa6 	bl	8011eca <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 801197e:	4603      	mov	r3, r0
 8011980:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	4618      	mov	r0, r3
 8011986:	f000 faab 	bl	8011ee0 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 801198a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 801198c:	69ba      	ldr	r2, [r7, #24]
 801198e:	4621      	mov	r1, r4
 8011990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011992:	f000 fab0 	bl	8011ef6 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 8011996:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8011998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801199a:	3304      	adds	r3, #4
 801199c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 801199e:	f107 0308 	add.w	r3, r7, #8
 80119a2:	4618      	mov	r0, r3
 80119a4:	f000 fa91 	bl	8011eca <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 80119a8:	4603      	mov	r3, r0
 80119aa:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	4618      	mov	r0, r3
 80119b0:	f000 fa96 	bl	8011ee0 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 80119b4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80119b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119b8:	6a39      	ldr	r1, [r7, #32]
 80119ba:	4620      	mov	r0, r4
 80119bc:	f000 fa9b 	bl	8011ef6 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 80119c0:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80119c2:	f7ff ff5a 	bl	801187a <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 80119c6:	4603      	mov	r3, r0
 80119c8:	f083 0301 	eor.w	r3, r3, #1
 80119cc:	b2db      	uxtb	r3, r3
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d009      	beq.n	80119e6 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	4618      	mov	r0, r3
 80119d6:	f000 fa83 	bl	8011ee0 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 80119da:	4603      	mov	r3, r0
 80119dc:	461a      	mov	r2, r3
 80119de:	6a39      	ldr	r1, [r7, #32]
 80119e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80119e2:	f000 faa1 	bl	8011f28 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80119e6:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	689a      	ldr	r2, [r3, #8]
 80119ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ee:	1ad3      	subs	r3, r2, r3
 80119f0:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80119f2:	461a      	mov	r2, r3
 80119f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80119f6:	f7ff ff09 	bl	801180c <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	69ba      	ldr	r2, [r7, #24]
 80119fe:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a04:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a08:	009b      	lsls	r3, r3, #2
 8011a0a:	69ba      	ldr	r2, [r7, #24]
 8011a0c:	441a      	add	r2, r3
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	609a      	str	r2, [r3, #8]
    }
 8011a12:	bf00      	nop
 8011a14:	3730      	adds	r7, #48	; 0x30
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bdb0      	pop	{r4, r5, r7, pc}
 8011a1a:	bf00      	nop
 8011a1c:	0801a808 	.word	0x0801a808

08011a20 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b082      	sub	sp, #8
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
 8011a28:	6878      	ldr	r0, [r7, #4]
 8011a2a:	f000 fa8b 	bl	8011f44 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	4618      	mov	r0, r3
 8011a32:	3708      	adds	r7, #8
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}

08011a38 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8011a38:	b480      	push	{r7}
 8011a3a:	b083      	sub	sp, #12
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	2200      	movs	r2, #0
 8011a44:	601a      	str	r2, [r3, #0]
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2200      	movs	r2, #0
 8011a4a:	605a      	str	r2, [r3, #4]
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2200      	movs	r2, #0
 8011a50:	609a      	str	r2, [r3, #8]
	{ }
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	4618      	mov	r0, r3
 8011a56:	370c      	adds	r7, #12
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5e:	4770      	bx	lr

08011a60 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 8011a60:	b480      	push	{r7}
 8011a62:	b083      	sub	sp, #12
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	370c      	adds	r7, #12
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a74:	4770      	bx	lr

08011a76 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8011a76:	b580      	push	{r7, lr}
 8011a78:	b084      	sub	sp, #16
 8011a7a:	af00      	add	r7, sp, #0
 8011a7c:	60f8      	str	r0, [r7, #12]
 8011a7e:	60b9      	str	r1, [r7, #8]
 8011a80:	607a      	str	r2, [r7, #4]
	if (__p)
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d005      	beq.n	8011a94 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	687a      	ldr	r2, [r7, #4]
 8011a8c:	68b9      	ldr	r1, [r7, #8]
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f000 fa63 	bl	8011f5a <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>
      }
 8011a94:	bf00      	nop
 8011a96:	3710      	adds	r7, #16
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd80      	pop	{r7, pc}

08011a9c <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b084      	sub	sp, #16
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	60f8      	str	r0, [r7, #12]
 8011aa4:	60b9      	str	r1, [r7, #8]
 8011aa6:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8011aa8:	6878      	ldr	r0, [r7, #4]
 8011aaa:	f000 fa65 	bl	8011f78 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	461a      	mov	r2, r3
 8011ab2:	68b9      	ldr	r1, [r7, #8]
 8011ab4:	68f8      	ldr	r0, [r7, #12]
 8011ab6:	f000 fa6a 	bl	8011f8e <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 8011aba:	bf00      	nop
 8011abc:	3710      	adds	r7, #16
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}

08011ac2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8011ac2:	b580      	push	{r7, lr}
 8011ac4:	b084      	sub	sp, #16
 8011ac6:	af00      	add	r7, sp, #0
 8011ac8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	1d1a      	adds	r2, r3, #4
 8011ace:	f107 030c 	add.w	r3, r7, #12
 8011ad2:	4611      	mov	r1, r2
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f000 fa73 	bl	8011fc0 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	4618      	mov	r0, r3
 8011ade:	3710      	adds	r7, #16
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}

08011ae4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b082      	sub	sp, #8
 8011ae8:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8011aea:	4618      	mov	r0, r3
 8011aec:	f000 f805 	bl	8011afa <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8011af0:	4603      	mov	r3, r0
      }
 8011af2:	4618      	mov	r0, r3
 8011af4:	3708      	adds	r7, #8
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}

08011afa <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8011afa:	b480      	push	{r7}
 8011afc:	b083      	sub	sp, #12
 8011afe:	af00      	add	r7, sp, #0
 8011b00:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8011b02:	2301      	movs	r3, #1
      }
 8011b04:	4618      	mov	r0, r3
 8011b06:	370c      	adds	r7, #12
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0e:	4770      	bx	lr

08011b10 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011b10:	b5b0      	push	{r4, r5, r7, lr}
 8011b12:	b08c      	sub	sp, #48	; 0x30
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	60f8      	str	r0, [r7, #12]
 8011b18:	60b9      	str	r1, [r7, #8]
 8011b1a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8011b1c:	4a59      	ldr	r2, [pc, #356]	; (8011c84 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8011b1e:	2101      	movs	r1, #1
 8011b20:	68f8      	ldr	r0, [r7, #12]
 8011b22:	f000 fa5d 	bl	8011fe0 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>
 8011b26:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	685b      	ldr	r3, [r3, #4]
 8011b32:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8011b34:	68f8      	ldr	r0, [r7, #12]
 8011b36:	f000 fa9a 	bl	801206e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	617b      	str	r3, [r7, #20]
 8011b3e:	f107 0214 	add.w	r2, r7, #20
 8011b42:	f107 0308 	add.w	r3, r7, #8
 8011b46:	4611      	mov	r1, r2
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f000 faa0 	bl	801208e <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011b56:	4618      	mov	r0, r3
 8011b58:	f000 faae 	bl	80120b8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>
 8011b5c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8011b5e:	69bb      	ldr	r3, [r7, #24]
 8011b60:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8011b62:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8011b64:	69fb      	ldr	r3, [r7, #28]
 8011b66:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8011b68:	69ba      	ldr	r2, [r7, #24]
 8011b6a:	18d5      	adds	r5, r2, r3
 8011b6c:	6878      	ldr	r0, [r7, #4]
 8011b6e:	f000 fa03 	bl	8011f78 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011b72:	4603      	mov	r3, r0
 8011b74:	461a      	mov	r2, r3
 8011b76:	4629      	mov	r1, r5
 8011b78:	4620      	mov	r0, r4
 8011b7a:	f7ff ff8f 	bl	8011a9c <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8011b7e:	2300      	movs	r3, #0
 8011b80:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8011b82:	f7ff ffaf 	bl	8011ae4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 8011b86:	4603      	mov	r3, r0
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d027      	beq.n	8011bdc <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011b8c:	f107 0308 	add.w	r3, r7, #8
 8011b90:	4618      	mov	r0, r3
 8011b92:	f000 fab9 	bl	8012108 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8011b96:	4603      	mov	r3, r0
 8011b98:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f000 fabe 	bl	801211e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8011ba2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011ba4:	69ba      	ldr	r2, [r7, #24]
 8011ba6:	4621      	mov	r1, r4
 8011ba8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011baa:	f000 fa99 	bl	80120e0 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011bae:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8011bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb2:	3308      	adds	r3, #8
 8011bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011bb6:	f107 0308 	add.w	r3, r7, #8
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f000 faa4 	bl	8012108 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f000 faa9 	bl	801211e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8011bcc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bd0:	6a39      	ldr	r1, [r7, #32]
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	f000 fa84 	bl	80120e0 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011bd8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011bda:	e026      	b.n	8011c2a <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8011bdc:	f107 0308 	add.w	r3, r7, #8
 8011be0:	4618      	mov	r0, r3
 8011be2:	f000 fa91 	bl	8012108 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8011be6:	4603      	mov	r3, r0
 8011be8:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	4618      	mov	r0, r3
 8011bee:	f000 fa96 	bl	801211e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8011bf2:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8011bf4:	69ba      	ldr	r2, [r7, #24]
 8011bf6:	4621      	mov	r1, r4
 8011bf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011bfa:	f000 fa9b 	bl	8012134 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 8011bfe:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8011c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c02:	3308      	adds	r3, #8
 8011c04:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8011c06:	f107 0308 	add.w	r3, r7, #8
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f000 fa7c 	bl	8012108 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8011c10:	4603      	mov	r3, r0
 8011c12:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	4618      	mov	r0, r3
 8011c18:	f000 fa81 	bl	801211e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8011c1c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8011c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c20:	6a39      	ldr	r1, [r7, #32]
 8011c22:	4620      	mov	r0, r4
 8011c24:	f000 fa86 	bl	8012134 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 8011c28:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8011c2a:	f7ff ff5b 	bl	8011ae4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	f083 0301 	eor.w	r3, r3, #1
 8011c34:	b2db      	uxtb	r3, r3
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d009      	beq.n	8011c4e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f000 fa6e 	bl	801211e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8011c42:	4603      	mov	r3, r0
 8011c44:	461a      	mov	r2, r3
 8011c46:	6a39      	ldr	r1, [r7, #32]
 8011c48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c4a:	f000 fa8c 	bl	8012166 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 8011c4e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	689a      	ldr	r2, [r3, #8]
 8011c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c56:	1ad3      	subs	r3, r2, r3
 8011c58:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 8011c5a:	461a      	mov	r2, r3
 8011c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011c5e:	f7ff ff0a 	bl	8011a76 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	69ba      	ldr	r2, [r7, #24]
 8011c66:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c6c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c70:	00db      	lsls	r3, r3, #3
 8011c72:	69ba      	ldr	r2, [r7, #24]
 8011c74:	441a      	add	r2, r3
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	609a      	str	r2, [r3, #8]
    }
 8011c7a:	bf00      	nop
 8011c7c:	3730      	adds	r7, #48	; 0x30
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bdb0      	pop	{r4, r5, r7, pc}
 8011c82:	bf00      	nop
 8011c84:	0801a808 	.word	0x0801a808

08011c88 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8011c88:	b590      	push	{r4, r7, lr}
 8011c8a:	b085      	sub	sp, #20
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	685a      	ldr	r2, [r3, #4]
 8011c96:	683b      	ldr	r3, [r7, #0]
 8011c98:	1ad3      	subs	r3, r2, r3
 8011c9a:	10db      	asrs	r3, r3, #3
 8011c9c:	60fb      	str	r3, [r7, #12]
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d00e      	beq.n	8011cc2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	4618      	mov	r0, r3
 8011cac:	f000 fa37 	bl	801211e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8011cb0:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8011cb2:	461a      	mov	r2, r3
 8011cb4:	4621      	mov	r1, r4
 8011cb6:	6838      	ldr	r0, [r7, #0]
 8011cb8:	f000 fa55 	bl	8012166 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	683a      	ldr	r2, [r7, #0]
 8011cc0:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8011cc2:	bf00      	nop
 8011cc4:	3714      	adds	r7, #20
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd90      	pop	{r4, r7, pc}

08011cca <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8011cca:	b590      	push	{r4, r7, lr}
 8011ccc:	b085      	sub	sp, #20
 8011cce:	af00      	add	r7, sp, #0
 8011cd0:	6078      	str	r0, [r7, #4]
 8011cd2:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	685a      	ldr	r2, [r3, #4]
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	1ad3      	subs	r3, r2, r3
 8011cdc:	109b      	asrs	r3, r3, #2
 8011cde:	60fb      	str	r3, [r7, #12]
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d00e      	beq.n	8011d04 <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	4618      	mov	r0, r3
 8011cee:	f000 f8f7 	bl	8011ee0 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8011cf2:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8011cf4:	461a      	mov	r2, r3
 8011cf6:	4621      	mov	r1, r4
 8011cf8:	6838      	ldr	r0, [r7, #0]
 8011cfa:	f000 f915 	bl	8011f28 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	683a      	ldr	r2, [r7, #0]
 8011d02:	605a      	str	r2, [r3, #4]
      }
 8011d04:	bf00      	nop
 8011d06:	3714      	adds	r7, #20
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd90      	pop	{r4, r7, pc}

08011d0c <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8011d0c:	b480      	push	{r7}
 8011d0e:	b083      	sub	sp, #12
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	4618      	mov	r0, r3
 8011d18:	370c      	adds	r7, #12
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d20:	4770      	bx	lr

08011d22 <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8011d22:	b580      	push	{r7, lr}
 8011d24:	b084      	sub	sp, #16
 8011d26:	af00      	add	r7, sp, #0
 8011d28:	60f8      	str	r0, [r7, #12]
 8011d2a:	60b9      	str	r1, [r7, #8]
 8011d2c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8011d2e:	687a      	ldr	r2, [r7, #4]
 8011d30:	68b9      	ldr	r1, [r7, #8]
 8011d32:	68f8      	ldr	r0, [r7, #12]
 8011d34:	f000 fa25 	bl	8012182 <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>
 8011d38:	bf00      	nop
 8011d3a:	3710      	adds	r7, #16
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}

08011d40 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011d40:	b480      	push	{r7}
 8011d42:	b083      	sub	sp, #12
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	370c      	adds	r7, #12
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d54:	4770      	bx	lr

08011d56 <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8011d56:	b590      	push	{r4, r7, lr}
 8011d58:	b085      	sub	sp, #20
 8011d5a:	af00      	add	r7, sp, #0
 8011d5c:	60f8      	str	r0, [r7, #12]
 8011d5e:	60b9      	str	r1, [r7, #8]
 8011d60:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f7ff ffec 	bl	8011d40 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	681c      	ldr	r4, [r3, #0]
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	4619      	mov	r1, r3
 8011d70:	2004      	movs	r0, #4
 8011d72:	f7ef f99b 	bl	80010ac <_ZnwjPv>
 8011d76:	4603      	mov	r3, r0
 8011d78:	601c      	str	r4, [r3, #0]
 8011d7a:	bf00      	nop
 8011d7c:	3714      	adds	r7, #20
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd90      	pop	{r4, r7, pc}

08011d82 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8011d82:	b480      	push	{r7}
 8011d84:	b083      	sub	sp, #12
 8011d86:	af00      	add	r7, sp, #0
 8011d88:	6078      	str	r0, [r7, #4]
 8011d8a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8011d8c:	683b      	ldr	r3, [r7, #0]
 8011d8e:	681a      	ldr	r2, [r3, #0]
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	601a      	str	r2, [r3, #0]
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	4618      	mov	r0, r3
 8011d98:	370c      	adds	r7, #12
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da0:	4770      	bx	lr

08011da2 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8011da2:	b590      	push	{r4, r7, lr}
 8011da4:	b087      	sub	sp, #28
 8011da6:	af00      	add	r7, sp, #0
 8011da8:	60f8      	str	r0, [r7, #12]
 8011daa:	60b9      	str	r1, [r7, #8]
 8011dac:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8011dae:	68f8      	ldr	r0, [r7, #12]
 8011db0:	f000 f9f7 	bl	80121a2 <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 8011db4:	4604      	mov	r4, r0
 8011db6:	68f8      	ldr	r0, [r7, #12]
 8011db8:	f7ff fccf 	bl	801175a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	1ae2      	subs	r2, r4, r3
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	bf34      	ite	cc
 8011dc6:	2301      	movcc	r3, #1
 8011dc8:	2300      	movcs	r3, #0
 8011dca:	b2db      	uxtb	r3, r3
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d002      	beq.n	8011dd6 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	f001 fbb9 	bl	8013548 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8011dd6:	68f8      	ldr	r0, [r7, #12]
 8011dd8:	f7ff fcbf 	bl	801175a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8011ddc:	4604      	mov	r4, r0
 8011dde:	68f8      	ldr	r0, [r7, #12]
 8011de0:	f7ff fcbb 	bl	801175a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8011de4:	4603      	mov	r3, r0
 8011de6:	613b      	str	r3, [r7, #16]
 8011de8:	f107 0208 	add.w	r2, r7, #8
 8011dec:	f107 0310 	add.w	r3, r7, #16
 8011df0:	4611      	mov	r1, r2
 8011df2:	4618      	mov	r0, r3
 8011df4:	f7f2 f9f4 	bl	80041e0 <_ZSt3maxIjERKT_S2_S2_>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	4423      	add	r3, r4
 8011dfe:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011e00:	68f8      	ldr	r0, [r7, #12]
 8011e02:	f7ff fcaa 	bl	801175a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8011e06:	4602      	mov	r2, r0
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	4293      	cmp	r3, r2
 8011e0c:	d306      	bcc.n	8011e1c <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8011e0e:	68f8      	ldr	r0, [r7, #12]
 8011e10:	f000 f9c7 	bl	80121a2 <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 8011e14:	4602      	mov	r2, r0
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	4293      	cmp	r3, r2
 8011e1a:	d904      	bls.n	8011e26 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x84>
 8011e1c:	68f8      	ldr	r0, [r7, #12]
 8011e1e:	f000 f9c0 	bl	80121a2 <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 8011e22:	4603      	mov	r3, r0
 8011e24:	e000      	b.n	8011e28 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x86>
 8011e26:	697b      	ldr	r3, [r7, #20]
      }
 8011e28:	4618      	mov	r0, r3
 8011e2a:	371c      	adds	r7, #28
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd90      	pop	{r4, r7, pc}

08011e30 <_ZNSt6vectorIPvSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b084      	sub	sp, #16
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8011e38:	687a      	ldr	r2, [r7, #4]
 8011e3a:	f107 030c 	add.w	r3, r7, #12
 8011e3e:	4611      	mov	r1, r2
 8011e40:	4618      	mov	r0, r3
 8011e42:	f7ff ff9e 	bl	8011d82 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	4618      	mov	r0, r3
 8011e4a:	3710      	adds	r7, #16
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}

08011e50 <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011e50:	b590      	push	{r4, r7, lr}
 8011e52:	b083      	sub	sp, #12
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
 8011e58:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8011e5a:	6878      	ldr	r0, [r7, #4]
 8011e5c:	f000 f835 	bl	8011eca <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8011e60:	4603      	mov	r3, r0
 8011e62:	681c      	ldr	r4, [r3, #0]
 8011e64:	6838      	ldr	r0, [r7, #0]
 8011e66:	f000 f830 	bl	8011eca <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	1ae3      	subs	r3, r4, r3
 8011e70:	109b      	asrs	r3, r3, #2
 8011e72:	4618      	mov	r0, r3
 8011e74:	370c      	adds	r7, #12
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd90      	pop	{r4, r7, pc}

08011e7a <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8011e7a:	b580      	push	{r7, lr}
 8011e7c:	b082      	sub	sp, #8
 8011e7e:	af00      	add	r7, sp, #0
 8011e80:	6078      	str	r0, [r7, #4]
 8011e82:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d006      	beq.n	8011e98 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x1e>
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6839      	ldr	r1, [r7, #0]
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f000 f998 	bl	80121c4 <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>
 8011e94:	4603      	mov	r3, r0
 8011e96:	e000      	b.n	8011e9a <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x20>
 8011e98:	2300      	movs	r3, #0
      }
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	3708      	adds	r7, #8
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd80      	pop	{r7, pc}

08011ea2 <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8011ea2:	b590      	push	{r4, r7, lr}
 8011ea4:	b087      	sub	sp, #28
 8011ea6:	af02      	add	r7, sp, #8
 8011ea8:	60f8      	str	r0, [r7, #12]
 8011eaa:	60b9      	str	r1, [r7, #8]
 8011eac:	607a      	str	r2, [r7, #4]
 8011eae:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8011eb0:	f88d 4000 	strb.w	r4, [sp]
 8011eb4:	683b      	ldr	r3, [r7, #0]
 8011eb6:	687a      	ldr	r2, [r7, #4]
 8011eb8:	68b9      	ldr	r1, [r7, #8]
 8011eba:	68f8      	ldr	r0, [r7, #12]
 8011ebc:	f000 f991 	bl	80121e2 <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8011ec0:	4603      	mov	r3, r0
      }
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	3714      	adds	r7, #20
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bd90      	pop	{r4, r7, pc}

08011eca <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8011eca:	b480      	push	{r7}
 8011ecc:	b083      	sub	sp, #12
 8011ece:	af00      	add	r7, sp, #0
 8011ed0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	370c      	adds	r7, #12
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ede:	4770      	bx	lr

08011ee0 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8011ee0:	b480      	push	{r7}
 8011ee2:	b083      	sub	sp, #12
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	4618      	mov	r0, r3
 8011eec:	370c      	adds	r7, #12
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef4:	4770      	bx	lr

08011ef6 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8011ef6:	b590      	push	{r4, r7, lr}
 8011ef8:	b085      	sub	sp, #20
 8011efa:	af00      	add	r7, sp, #0
 8011efc:	60f8      	str	r0, [r7, #12]
 8011efe:	60b9      	str	r1, [r7, #8]
 8011f00:	607a      	str	r2, [r7, #4]
 8011f02:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8011f04:	68f8      	ldr	r0, [r7, #12]
 8011f06:	f000 f97e 	bl	8012206 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 8011f0a:	4604      	mov	r4, r0
 8011f0c:	68b8      	ldr	r0, [r7, #8]
 8011f0e:	f000 f97a 	bl	8012206 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 8011f12:	4601      	mov	r1, r0
 8011f14:	683b      	ldr	r3, [r7, #0]
 8011f16:	687a      	ldr	r2, [r7, #4]
 8011f18:	4620      	mov	r0, r4
 8011f1a:	f000 f983 	bl	8012224 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8011f1e:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8011f20:	4618      	mov	r0, r3
 8011f22:	3714      	adds	r7, #20
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bd90      	pop	{r4, r7, pc}

08011f28 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b084      	sub	sp, #16
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	60f8      	str	r0, [r7, #12]
 8011f30:	60b9      	str	r1, [r7, #8]
 8011f32:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8011f34:	68b9      	ldr	r1, [r7, #8]
 8011f36:	68f8      	ldr	r0, [r7, #12]
 8011f38:	f000 f985 	bl	8012246 <_ZSt8_DestroyIPPvEvT_S2_>
    }
 8011f3c:	bf00      	nop
 8011f3e:	3710      	adds	r7, #16
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd80      	pop	{r7, pc}

08011f44 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8011f44:	b480      	push	{r7}
 8011f46:	b083      	sub	sp, #12
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	4618      	mov	r0, r3
 8011f50:	370c      	adds	r7, #12
 8011f52:	46bd      	mov	sp, r7
 8011f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f58:	4770      	bx	lr

08011f5a <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8011f5a:	b580      	push	{r7, lr}
 8011f5c:	b084      	sub	sp, #16
 8011f5e:	af00      	add	r7, sp, #0
 8011f60:	60f8      	str	r0, [r7, #12]
 8011f62:	60b9      	str	r1, [r7, #8]
 8011f64:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8011f66:	687a      	ldr	r2, [r7, #4]
 8011f68:	68b9      	ldr	r1, [r7, #8]
 8011f6a:	68f8      	ldr	r0, [r7, #12]
 8011f6c:	f000 f978 	bl	8012260 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>
 8011f70:	bf00      	nop
 8011f72:	3710      	adds	r7, #16
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}

08011f78 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011f78:	b480      	push	{r7}
 8011f7a:	b083      	sub	sp, #12
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	4618      	mov	r0, r3
 8011f84:	370c      	adds	r7, #12
 8011f86:	46bd      	mov	sp, r7
 8011f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8c:	4770      	bx	lr

08011f8e <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8011f8e:	b590      	push	{r4, r7, lr}
 8011f90:	b085      	sub	sp, #20
 8011f92:	af00      	add	r7, sp, #0
 8011f94:	60f8      	str	r0, [r7, #12]
 8011f96:	60b9      	str	r1, [r7, #8]
 8011f98:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011f9a:	6878      	ldr	r0, [r7, #4]
 8011f9c:	f7ff ffec 	bl	8011f78 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011fa0:	4604      	mov	r4, r0
 8011fa2:	68bb      	ldr	r3, [r7, #8]
 8011fa4:	4619      	mov	r1, r3
 8011fa6:	2008      	movs	r0, #8
 8011fa8:	f7ef f880 	bl	80010ac <_ZnwjPv>
 8011fac:	4603      	mov	r3, r0
 8011fae:	4622      	mov	r2, r4
 8011fb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011fb4:	e883 0003 	stmia.w	r3, {r0, r1}
 8011fb8:	bf00      	nop
 8011fba:	3714      	adds	r7, #20
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd90      	pop	{r4, r7, pc}

08011fc0 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8011fc0:	b480      	push	{r7}
 8011fc2:	b083      	sub	sp, #12
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
 8011fc8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8011fca:	683b      	ldr	r3, [r7, #0]
 8011fcc:	681a      	ldr	r2, [r3, #0]
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	601a      	str	r2, [r3, #0]
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	370c      	adds	r7, #12
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fde:	4770      	bx	lr

08011fe0 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8011fe0:	b590      	push	{r4, r7, lr}
 8011fe2:	b087      	sub	sp, #28
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	60f8      	str	r0, [r7, #12]
 8011fe8:	60b9      	str	r1, [r7, #8]
 8011fea:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8011fec:	68f8      	ldr	r0, [r7, #12]
 8011fee:	f000 f947 	bl	8012280 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 8011ff2:	4604      	mov	r4, r0
 8011ff4:	68f8      	ldr	r0, [r7, #12]
 8011ff6:	f7ff fb82 	bl	80116fe <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	1ae2      	subs	r2, r4, r3
 8011ffe:	68bb      	ldr	r3, [r7, #8]
 8012000:	429a      	cmp	r2, r3
 8012002:	bf34      	ite	cc
 8012004:	2301      	movcc	r3, #1
 8012006:	2300      	movcs	r3, #0
 8012008:	b2db      	uxtb	r3, r3
 801200a:	2b00      	cmp	r3, #0
 801200c:	d002      	beq.n	8012014 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801200e:	6878      	ldr	r0, [r7, #4]
 8012010:	f001 fa9a 	bl	8013548 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8012014:	68f8      	ldr	r0, [r7, #12]
 8012016:	f7ff fb72 	bl	80116fe <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801201a:	4604      	mov	r4, r0
 801201c:	68f8      	ldr	r0, [r7, #12]
 801201e:	f7ff fb6e 	bl	80116fe <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8012022:	4603      	mov	r3, r0
 8012024:	613b      	str	r3, [r7, #16]
 8012026:	f107 0208 	add.w	r2, r7, #8
 801202a:	f107 0310 	add.w	r3, r7, #16
 801202e:	4611      	mov	r1, r2
 8012030:	4618      	mov	r0, r3
 8012032:	f7f2 f8d5 	bl	80041e0 <_ZSt3maxIjERKT_S2_S2_>
 8012036:	4603      	mov	r3, r0
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	4423      	add	r3, r4
 801203c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801203e:	68f8      	ldr	r0, [r7, #12]
 8012040:	f7ff fb5d 	bl	80116fe <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8012044:	4602      	mov	r2, r0
 8012046:	697b      	ldr	r3, [r7, #20]
 8012048:	4293      	cmp	r3, r2
 801204a:	d306      	bcc.n	801205a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x7a>
 801204c:	68f8      	ldr	r0, [r7, #12]
 801204e:	f000 f917 	bl	8012280 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 8012052:	4602      	mov	r2, r0
 8012054:	697b      	ldr	r3, [r7, #20]
 8012056:	4293      	cmp	r3, r2
 8012058:	d904      	bls.n	8012064 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x84>
 801205a:	68f8      	ldr	r0, [r7, #12]
 801205c:	f000 f910 	bl	8012280 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 8012060:	4603      	mov	r3, r0
 8012062:	e000      	b.n	8012066 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x86>
 8012064:	697b      	ldr	r3, [r7, #20]
      }
 8012066:	4618      	mov	r0, r3
 8012068:	371c      	adds	r7, #28
 801206a:	46bd      	mov	sp, r7
 801206c:	bd90      	pop	{r4, r7, pc}

0801206e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801206e:	b580      	push	{r7, lr}
 8012070:	b084      	sub	sp, #16
 8012072:	af00      	add	r7, sp, #0
 8012074:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8012076:	687a      	ldr	r2, [r7, #4]
 8012078:	f107 030c 	add.w	r3, r7, #12
 801207c:	4611      	mov	r1, r2
 801207e:	4618      	mov	r0, r3
 8012080:	f7ff ff9e 	bl	8011fc0 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	4618      	mov	r0, r3
 8012088:	3710      	adds	r7, #16
 801208a:	46bd      	mov	sp, r7
 801208c:	bd80      	pop	{r7, pc}

0801208e <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 801208e:	b590      	push	{r4, r7, lr}
 8012090:	b083      	sub	sp, #12
 8012092:	af00      	add	r7, sp, #0
 8012094:	6078      	str	r0, [r7, #4]
 8012096:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8012098:	6878      	ldr	r0, [r7, #4]
 801209a:	f000 f835 	bl	8012108 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 801209e:	4603      	mov	r3, r0
 80120a0:	681c      	ldr	r4, [r3, #0]
 80120a2:	6838      	ldr	r0, [r7, #0]
 80120a4:	f000 f830 	bl	8012108 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 80120a8:	4603      	mov	r3, r0
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	1ae3      	subs	r3, r4, r3
 80120ae:	10db      	asrs	r3, r3, #3
 80120b0:	4618      	mov	r0, r3
 80120b2:	370c      	adds	r7, #12
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd90      	pop	{r4, r7, pc}

080120b8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b082      	sub	sp, #8
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
 80120c0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d006      	beq.n	80120d6 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x1e>
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	6839      	ldr	r1, [r7, #0]
 80120cc:	4618      	mov	r0, r3
 80120ce:	f000 f8e8 	bl	80122a2 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>
 80120d2:	4603      	mov	r3, r0
 80120d4:	e000      	b.n	80120d8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x20>
 80120d6:	2300      	movs	r3, #0
      }
 80120d8:	4618      	mov	r0, r3
 80120da:	3708      	adds	r7, #8
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd80      	pop	{r7, pc}

080120e0 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80120e0:	b590      	push	{r4, r7, lr}
 80120e2:	b087      	sub	sp, #28
 80120e4:	af02      	add	r7, sp, #8
 80120e6:	60f8      	str	r0, [r7, #12]
 80120e8:	60b9      	str	r1, [r7, #8]
 80120ea:	607a      	str	r2, [r7, #4]
 80120ec:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80120ee:	f88d 4000 	strb.w	r4, [sp]
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	687a      	ldr	r2, [r7, #4]
 80120f6:	68b9      	ldr	r1, [r7, #8]
 80120f8:	68f8      	ldr	r0, [r7, #12]
 80120fa:	f000 f8e1 	bl	80122c0 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80120fe:	4603      	mov	r3, r0
      }
 8012100:	4618      	mov	r0, r3
 8012102:	3714      	adds	r7, #20
 8012104:	46bd      	mov	sp, r7
 8012106:	bd90      	pop	{r4, r7, pc}

08012108 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8012108:	b480      	push	{r7}
 801210a:	b083      	sub	sp, #12
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	4618      	mov	r0, r3
 8012114:	370c      	adds	r7, #12
 8012116:	46bd      	mov	sp, r7
 8012118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211c:	4770      	bx	lr

0801211e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 801211e:	b480      	push	{r7}
 8012120:	b083      	sub	sp, #12
 8012122:	af00      	add	r7, sp, #0
 8012124:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	4618      	mov	r0, r3
 801212a:	370c      	adds	r7, #12
 801212c:	46bd      	mov	sp, r7
 801212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012132:	4770      	bx	lr

08012134 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8012134:	b590      	push	{r4, r7, lr}
 8012136:	b085      	sub	sp, #20
 8012138:	af00      	add	r7, sp, #0
 801213a:	60f8      	str	r0, [r7, #12]
 801213c:	60b9      	str	r1, [r7, #8]
 801213e:	607a      	str	r2, [r7, #4]
 8012140:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8012142:	68f8      	ldr	r0, [r7, #12]
 8012144:	f000 f8ce 	bl	80122e4 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 8012148:	4604      	mov	r4, r0
 801214a:	68b8      	ldr	r0, [r7, #8]
 801214c:	f000 f8ca 	bl	80122e4 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 8012150:	4601      	mov	r1, r0
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	687a      	ldr	r2, [r7, #4]
 8012156:	4620      	mov	r0, r4
 8012158:	f000 f8d3 	bl	8012302 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>
 801215c:	4603      	mov	r3, r0
    }
 801215e:	4618      	mov	r0, r3
 8012160:	3714      	adds	r7, #20
 8012162:	46bd      	mov	sp, r7
 8012164:	bd90      	pop	{r4, r7, pc}

08012166 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8012166:	b580      	push	{r7, lr}
 8012168:	b084      	sub	sp, #16
 801216a:	af00      	add	r7, sp, #0
 801216c:	60f8      	str	r0, [r7, #12]
 801216e:	60b9      	str	r1, [r7, #8]
 8012170:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8012172:	68b9      	ldr	r1, [r7, #8]
 8012174:	68f8      	ldr	r0, [r7, #12]
 8012176:	f000 f8d5 	bl	8012324 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>
    }
 801217a:	bf00      	nop
 801217c:	3710      	adds	r7, #16
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}

08012182 <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8012182:	b580      	push	{r7, lr}
 8012184:	b084      	sub	sp, #16
 8012186:	af00      	add	r7, sp, #0
 8012188:	60f8      	str	r0, [r7, #12]
 801218a:	60b9      	str	r1, [r7, #8]
 801218c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	009b      	lsls	r3, r3, #2
 8012192:	4619      	mov	r1, r3
 8012194:	68b8      	ldr	r0, [r7, #8]
 8012196:	f001 f9bd 	bl	8013514 <_ZdlPvj>
      }
 801219a:	bf00      	nop
 801219c:	3710      	adds	r7, #16
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}

080121a2 <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80121a2:	b580      	push	{r7, lr}
 80121a4:	b082      	sub	sp, #8
 80121a6:	af00      	add	r7, sp, #0
 80121a8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	4618      	mov	r0, r3
 80121ae:	f000 f8e0 	bl	8012372 <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 80121b2:	4603      	mov	r3, r0
 80121b4:	4618      	mov	r0, r3
 80121b6:	f000 f8c2 	bl	801233e <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>
 80121ba:	4603      	mov	r3, r0
 80121bc:	4618      	mov	r0, r3
 80121be:	3708      	adds	r7, #8
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}

080121c4 <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b082      	sub	sp, #8
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
 80121cc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80121ce:	2200      	movs	r2, #0
 80121d0:	6839      	ldr	r1, [r7, #0]
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	f000 f8d8 	bl	8012388 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>
 80121d8:	4603      	mov	r3, r0
 80121da:	4618      	mov	r0, r3
 80121dc:	3708      	adds	r7, #8
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd80      	pop	{r7, pc}

080121e2 <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80121e2:	b580      	push	{r7, lr}
 80121e4:	b084      	sub	sp, #16
 80121e6:	af00      	add	r7, sp, #0
 80121e8:	60f8      	str	r0, [r7, #12]
 80121ea:	60b9      	str	r1, [r7, #8]
 80121ec:	607a      	str	r2, [r7, #4]
 80121ee:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	687a      	ldr	r2, [r7, #4]
 80121f4:	68b9      	ldr	r1, [r7, #8]
 80121f6:	68f8      	ldr	r0, [r7, #12]
 80121f8:	f000 f8e4 	bl	80123c4 <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 80121fc:	4603      	mov	r3, r0
      }
 80121fe:	4618      	mov	r0, r3
 8012200:	3710      	adds	r7, #16
 8012202:	46bd      	mov	sp, r7
 8012204:	bd80      	pop	{r7, pc}

08012206 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8012206:	b580      	push	{r7, lr}
 8012208:	b084      	sub	sp, #16
 801220a:	af00      	add	r7, sp, #0
 801220c:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 801220e:	f107 030c 	add.w	r3, r7, #12
 8012212:	6879      	ldr	r1, [r7, #4]
 8012214:	4618      	mov	r0, r3
 8012216:	f000 f8f2 	bl	80123fe <_ZNSt13move_iteratorIPPvEC1ES1_>
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	4618      	mov	r0, r3
 801221e:	3710      	adds	r7, #16
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}

08012224 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8012224:	b580      	push	{r7, lr}
 8012226:	b084      	sub	sp, #16
 8012228:	af00      	add	r7, sp, #0
 801222a:	60f8      	str	r0, [r7, #12]
 801222c:	60b9      	str	r1, [r7, #8]
 801222e:	607a      	str	r2, [r7, #4]
 8012230:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8012232:	687a      	ldr	r2, [r7, #4]
 8012234:	68b9      	ldr	r1, [r7, #8]
 8012236:	68f8      	ldr	r0, [r7, #12]
 8012238:	f000 f8f3 	bl	8012422 <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 801223c:	4603      	mov	r3, r0
 801223e:	4618      	mov	r0, r3
 8012240:	3710      	adds	r7, #16
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}

08012246 <_ZSt8_DestroyIPPvEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8012246:	b580      	push	{r7, lr}
 8012248:	b082      	sub	sp, #8
 801224a:	af00      	add	r7, sp, #0
 801224c:	6078      	str	r0, [r7, #4]
 801224e:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8012250:	6839      	ldr	r1, [r7, #0]
 8012252:	6878      	ldr	r0, [r7, #4]
 8012254:	f000 f8f7 	bl	8012446 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>
    }
 8012258:	bf00      	nop
 801225a:	3708      	adds	r7, #8
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}

08012260 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8012260:	b580      	push	{r7, lr}
 8012262:	b084      	sub	sp, #16
 8012264:	af00      	add	r7, sp, #0
 8012266:	60f8      	str	r0, [r7, #12]
 8012268:	60b9      	str	r1, [r7, #8]
 801226a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	00db      	lsls	r3, r3, #3
 8012270:	4619      	mov	r1, r3
 8012272:	68b8      	ldr	r0, [r7, #8]
 8012274:	f001 f94e 	bl	8013514 <_ZdlPvj>
      }
 8012278:	bf00      	nop
 801227a:	3710      	adds	r7, #16
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}

08012280 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012280:	b580      	push	{r7, lr}
 8012282:	b082      	sub	sp, #8
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	4618      	mov	r0, r3
 801228c:	f000 f900 	bl	8012490 <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8012290:	4603      	mov	r3, r0
 8012292:	4618      	mov	r0, r3
 8012294:	f000 f8e2 	bl	801245c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>
 8012298:	4603      	mov	r3, r0
 801229a:	4618      	mov	r0, r3
 801229c:	3708      	adds	r7, #8
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}

080122a2 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80122a2:	b580      	push	{r7, lr}
 80122a4:	b082      	sub	sp, #8
 80122a6:	af00      	add	r7, sp, #0
 80122a8:	6078      	str	r0, [r7, #4]
 80122aa:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80122ac:	2200      	movs	r2, #0
 80122ae:	6839      	ldr	r1, [r7, #0]
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	f000 f8f8 	bl	80124a6 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>
 80122b6:	4603      	mov	r3, r0
 80122b8:	4618      	mov	r0, r3
 80122ba:	3708      	adds	r7, #8
 80122bc:	46bd      	mov	sp, r7
 80122be:	bd80      	pop	{r7, pc}

080122c0 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b084      	sub	sp, #16
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	60f8      	str	r0, [r7, #12]
 80122c8:	60b9      	str	r1, [r7, #8]
 80122ca:	607a      	str	r2, [r7, #4]
 80122cc:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80122ce:	683b      	ldr	r3, [r7, #0]
 80122d0:	687a      	ldr	r2, [r7, #4]
 80122d2:	68b9      	ldr	r1, [r7, #8]
 80122d4:	68f8      	ldr	r0, [r7, #12]
 80122d6:	f000 f904 	bl	80124e2 <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 80122da:	4603      	mov	r3, r0
      }
 80122dc:	4618      	mov	r0, r3
 80122de:	3710      	adds	r7, #16
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}

080122e4 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b084      	sub	sp, #16
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80122ec:	f107 030c 	add.w	r3, r7, #12
 80122f0:	6879      	ldr	r1, [r7, #4]
 80122f2:	4618      	mov	r0, r3
 80122f4:	f000 f912 	bl	801251c <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	4618      	mov	r0, r3
 80122fc:	3710      	adds	r7, #16
 80122fe:	46bd      	mov	sp, r7
 8012300:	bd80      	pop	{r7, pc}

08012302 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8012302:	b580      	push	{r7, lr}
 8012304:	b084      	sub	sp, #16
 8012306:	af00      	add	r7, sp, #0
 8012308:	60f8      	str	r0, [r7, #12]
 801230a:	60b9      	str	r1, [r7, #8]
 801230c:	607a      	str	r2, [r7, #4]
 801230e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8012310:	687a      	ldr	r2, [r7, #4]
 8012312:	68b9      	ldr	r1, [r7, #8]
 8012314:	68f8      	ldr	r0, [r7, #12]
 8012316:	f000 f913 	bl	8012540 <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 801231a:	4603      	mov	r3, r0
 801231c:	4618      	mov	r0, r3
 801231e:	3710      	adds	r7, #16
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}

08012324 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8012324:	b580      	push	{r7, lr}
 8012326:	b082      	sub	sp, #8
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
 801232c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 801232e:	6839      	ldr	r1, [r7, #0]
 8012330:	6878      	ldr	r0, [r7, #4]
 8012332:	f000 f917 	bl	8012564 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>
    }
 8012336:	bf00      	nop
 8012338:	3708      	adds	r7, #8
 801233a:	46bd      	mov	sp, r7
 801233c:	bd80      	pop	{r7, pc}

0801233e <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801233e:	b580      	push	{r7, lr}
 8012340:	b084      	sub	sp, #16
 8012342:	af00      	add	r7, sp, #0
 8012344:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8012346:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801234a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801234c:	6878      	ldr	r0, [r7, #4]
 801234e:	f000 f914 	bl	801257a <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>
 8012352:	4603      	mov	r3, r0
 8012354:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8012356:	f107 0208 	add.w	r2, r7, #8
 801235a:	f107 030c 	add.w	r3, r7, #12
 801235e:	4611      	mov	r1, r2
 8012360:	4618      	mov	r0, r3
 8012362:	f7f2 fa44 	bl	80047ee <_ZSt3minIjERKT_S2_S2_>
 8012366:	4603      	mov	r3, r0
 8012368:	681b      	ldr	r3, [r3, #0]
      }
 801236a:	4618      	mov	r0, r3
 801236c:	3710      	adds	r7, #16
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}

08012372 <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8012372:	b480      	push	{r7}
 8012374:	b083      	sub	sp, #12
 8012376:	af00      	add	r7, sp, #0
 8012378:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	4618      	mov	r0, r3
 801237e:	370c      	adds	r7, #12
 8012380:	46bd      	mov	sp, r7
 8012382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012386:	4770      	bx	lr

08012388 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8012388:	b580      	push	{r7, lr}
 801238a:	b084      	sub	sp, #16
 801238c:	af00      	add	r7, sp, #0
 801238e:	60f8      	str	r0, [r7, #12]
 8012390:	60b9      	str	r1, [r7, #8]
 8012392:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8012394:	68f8      	ldr	r0, [r7, #12]
 8012396:	f000 f8fc 	bl	8012592 <_ZNK9__gnu_cxx13new_allocatorIPvE11_M_max_sizeEv>
 801239a:	4602      	mov	r2, r0
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	4293      	cmp	r3, r2
 80123a0:	bf8c      	ite	hi
 80123a2:	2301      	movhi	r3, #1
 80123a4:	2300      	movls	r3, #0
 80123a6:	b2db      	uxtb	r3, r3
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d001      	beq.n	80123b0 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80123ac:	f001 f8c9 	bl	8013542 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	009b      	lsls	r3, r3, #2
 80123b4:	4618      	mov	r0, r3
 80123b6:	f001 f8b1 	bl	801351c <_Znwj>
 80123ba:	4603      	mov	r3, r0
      }
 80123bc:	4618      	mov	r0, r3
 80123be:	3710      	adds	r7, #16
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bd80      	pop	{r7, pc}

080123c4 <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80123c4:	b5b0      	push	{r4, r5, r7, lr}
 80123c6:	b084      	sub	sp, #16
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	60f8      	str	r0, [r7, #12]
 80123cc:	60b9      	str	r1, [r7, #8]
 80123ce:	607a      	str	r2, [r7, #4]
 80123d0:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 80123d2:	68f8      	ldr	r0, [r7, #12]
 80123d4:	f000 f8e9 	bl	80125aa <_ZSt12__niter_baseIPPvET_S2_>
 80123d8:	4604      	mov	r4, r0
 80123da:	68b8      	ldr	r0, [r7, #8]
 80123dc:	f000 f8e5 	bl	80125aa <_ZSt12__niter_baseIPPvET_S2_>
 80123e0:	4605      	mov	r5, r0
 80123e2:	6878      	ldr	r0, [r7, #4]
 80123e4:	f000 f8e1 	bl	80125aa <_ZSt12__niter_baseIPPvET_S2_>
 80123e8:	4602      	mov	r2, r0
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	4629      	mov	r1, r5
 80123ee:	4620      	mov	r0, r4
 80123f0:	f000 f8e6 	bl	80125c0 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 80123f4:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80123f6:	4618      	mov	r0, r3
 80123f8:	3710      	adds	r7, #16
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bdb0      	pop	{r4, r5, r7, pc}

080123fe <_ZNSt13move_iteratorIPPvEC1ES1_>:
      move_iterator(iterator_type __i)
 80123fe:	b580      	push	{r7, lr}
 8012400:	b082      	sub	sp, #8
 8012402:	af00      	add	r7, sp, #0
 8012404:	6078      	str	r0, [r7, #4]
 8012406:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8012408:	463b      	mov	r3, r7
 801240a:	4618      	mov	r0, r3
 801240c:	f000 f8f6 	bl	80125fc <_ZSt4moveIRPPvEONSt16remove_referenceIT_E4typeEOS4_>
 8012410:	4603      	mov	r3, r0
 8012412:	681a      	ldr	r2, [r3, #0]
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	601a      	str	r2, [r3, #0]
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	4618      	mov	r0, r3
 801241c:	3708      	adds	r7, #8
 801241e:	46bd      	mov	sp, r7
 8012420:	bd80      	pop	{r7, pc}

08012422 <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8012422:	b580      	push	{r7, lr}
 8012424:	b086      	sub	sp, #24
 8012426:	af00      	add	r7, sp, #0
 8012428:	60f8      	str	r0, [r7, #12]
 801242a:	60b9      	str	r1, [r7, #8]
 801242c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 801242e:	2301      	movs	r3, #1
 8012430:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8012432:	687a      	ldr	r2, [r7, #4]
 8012434:	68b9      	ldr	r1, [r7, #8]
 8012436:	68f8      	ldr	r0, [r7, #12]
 8012438:	f000 f8eb 	bl	8012612 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>
 801243c:	4603      	mov	r3, r0
    }
 801243e:	4618      	mov	r0, r3
 8012440:	3718      	adds	r7, #24
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}

08012446 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8012446:	b480      	push	{r7}
 8012448:	b083      	sub	sp, #12
 801244a:	af00      	add	r7, sp, #0
 801244c:	6078      	str	r0, [r7, #4]
 801244e:	6039      	str	r1, [r7, #0]
 8012450:	bf00      	nop
 8012452:	370c      	adds	r7, #12
 8012454:	46bd      	mov	sp, r7
 8012456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245a:	4770      	bx	lr

0801245c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801245c:	b580      	push	{r7, lr}
 801245e:	b084      	sub	sp, #16
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8012464:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8012468:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801246a:	6878      	ldr	r0, [r7, #4]
 801246c:	f000 f8e1 	bl	8012632 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>
 8012470:	4603      	mov	r3, r0
 8012472:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8012474:	f107 0208 	add.w	r2, r7, #8
 8012478:	f107 030c 	add.w	r3, r7, #12
 801247c:	4611      	mov	r1, r2
 801247e:	4618      	mov	r0, r3
 8012480:	f7f2 f9b5 	bl	80047ee <_ZSt3minIjERKT_S2_S2_>
 8012484:	4603      	mov	r3, r0
 8012486:	681b      	ldr	r3, [r3, #0]
      }
 8012488:	4618      	mov	r0, r3
 801248a:	3710      	adds	r7, #16
 801248c:	46bd      	mov	sp, r7
 801248e:	bd80      	pop	{r7, pc}

08012490 <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8012490:	b480      	push	{r7}
 8012492:	b083      	sub	sp, #12
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	4618      	mov	r0, r3
 801249c:	370c      	adds	r7, #12
 801249e:	46bd      	mov	sp, r7
 80124a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a4:	4770      	bx	lr

080124a6 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80124a6:	b580      	push	{r7, lr}
 80124a8:	b084      	sub	sp, #16
 80124aa:	af00      	add	r7, sp, #0
 80124ac:	60f8      	str	r0, [r7, #12]
 80124ae:	60b9      	str	r1, [r7, #8]
 80124b0:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80124b2:	68f8      	ldr	r0, [r7, #12]
 80124b4:	f000 f8c9 	bl	801264a <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE11_M_max_sizeEv>
 80124b8:	4602      	mov	r2, r0
 80124ba:	68bb      	ldr	r3, [r7, #8]
 80124bc:	4293      	cmp	r3, r2
 80124be:	bf8c      	ite	hi
 80124c0:	2301      	movhi	r3, #1
 80124c2:	2300      	movls	r3, #0
 80124c4:	b2db      	uxtb	r3, r3
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d001      	beq.n	80124ce <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80124ca:	f001 f83a 	bl	8013542 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80124ce:	68bb      	ldr	r3, [r7, #8]
 80124d0:	00db      	lsls	r3, r3, #3
 80124d2:	4618      	mov	r0, r3
 80124d4:	f001 f822 	bl	801351c <_Znwj>
 80124d8:	4603      	mov	r3, r0
      }
 80124da:	4618      	mov	r0, r3
 80124dc:	3710      	adds	r7, #16
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}

080124e2 <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80124e2:	b5b0      	push	{r4, r5, r7, lr}
 80124e4:	b084      	sub	sp, #16
 80124e6:	af00      	add	r7, sp, #0
 80124e8:	60f8      	str	r0, [r7, #12]
 80124ea:	60b9      	str	r1, [r7, #8]
 80124ec:	607a      	str	r2, [r7, #4]
 80124ee:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80124f0:	68f8      	ldr	r0, [r7, #12]
 80124f2:	f000 f8b6 	bl	8012662 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 80124f6:	4604      	mov	r4, r0
 80124f8:	68b8      	ldr	r0, [r7, #8]
 80124fa:	f000 f8b2 	bl	8012662 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 80124fe:	4605      	mov	r5, r0
 8012500:	6878      	ldr	r0, [r7, #4]
 8012502:	f000 f8ae 	bl	8012662 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8012506:	4602      	mov	r2, r0
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	4629      	mov	r1, r5
 801250c:	4620      	mov	r0, r4
 801250e:	f000 f8b3 	bl	8012678 <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8012512:	4603      	mov	r3, r0
    }
 8012514:	4618      	mov	r0, r3
 8012516:	3710      	adds	r7, #16
 8012518:	46bd      	mov	sp, r7
 801251a:	bdb0      	pop	{r4, r5, r7, pc}

0801251c <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>:
      move_iterator(iterator_type __i)
 801251c:	b580      	push	{r7, lr}
 801251e:	b082      	sub	sp, #8
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
 8012524:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8012526:	463b      	mov	r3, r7
 8012528:	4618      	mov	r0, r3
 801252a:	f000 f8c3 	bl	80126b4 <_ZSt4moveIRPN12_GLOBAL__N_116scratch_buffer_tEEONSt16remove_referenceIT_E4typeEOS5_>
 801252e:	4603      	mov	r3, r0
 8012530:	681a      	ldr	r2, [r3, #0]
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	601a      	str	r2, [r3, #0]
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	4618      	mov	r0, r3
 801253a:	3708      	adds	r7, #8
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}

08012540 <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8012540:	b580      	push	{r7, lr}
 8012542:	b086      	sub	sp, #24
 8012544:	af00      	add	r7, sp, #0
 8012546:	60f8      	str	r0, [r7, #12]
 8012548:	60b9      	str	r1, [r7, #8]
 801254a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 801254c:	2301      	movs	r3, #1
 801254e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8012550:	687a      	ldr	r2, [r7, #4]
 8012552:	68b9      	ldr	r1, [r7, #8]
 8012554:	68f8      	ldr	r0, [r7, #12]
 8012556:	f000 f8b8 	bl	80126ca <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>
 801255a:	4603      	mov	r3, r0
    }
 801255c:	4618      	mov	r0, r3
 801255e:	3718      	adds	r7, #24
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}

08012564 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>:
 8012564:	b480      	push	{r7}
 8012566:	b083      	sub	sp, #12
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
 801256c:	6039      	str	r1, [r7, #0]
 801256e:	bf00      	nop
 8012570:	370c      	adds	r7, #12
 8012572:	46bd      	mov	sp, r7
 8012574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012578:	4770      	bx	lr

0801257a <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 801257a:	b580      	push	{r7, lr}
 801257c:	b082      	sub	sp, #8
 801257e:	af00      	add	r7, sp, #0
 8012580:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f000 f8b1 	bl	80126ea <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>
 8012588:	4603      	mov	r3, r0
      }
 801258a:	4618      	mov	r0, r3
 801258c:	3708      	adds	r7, #8
 801258e:	46bd      	mov	sp, r7
 8012590:	bd80      	pop	{r7, pc}

08012592 <_ZNK9__gnu_cxx13new_allocatorIPvE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8012592:	b480      	push	{r7}
 8012594:	b083      	sub	sp, #12
 8012596:	af00      	add	r7, sp, #0
 8012598:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801259a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 801259e:	4618      	mov	r0, r3
 80125a0:	370c      	adds	r7, #12
 80125a2:	46bd      	mov	sp, r7
 80125a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a8:	4770      	bx	lr

080125aa <_ZSt12__niter_baseIPPvET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 80125aa:	b480      	push	{r7}
 80125ac:	b083      	sub	sp, #12
 80125ae:	af00      	add	r7, sp, #0
 80125b0:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	4618      	mov	r0, r3
 80125b6:	370c      	adds	r7, #12
 80125b8:	46bd      	mov	sp, r7
 80125ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125be:	4770      	bx	lr

080125c0 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b086      	sub	sp, #24
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	60f8      	str	r0, [r7, #12]
 80125c8:	60b9      	str	r1, [r7, #8]
 80125ca:	607a      	str	r2, [r7, #4]
 80125cc:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80125ce:	68ba      	ldr	r2, [r7, #8]
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	1ad3      	subs	r3, r2, r3
 80125d4:	109b      	asrs	r3, r3, #2
 80125d6:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	dd06      	ble.n	80125ec <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80125de:	697b      	ldr	r3, [r7, #20]
 80125e0:	009b      	lsls	r3, r3, #2
 80125e2:	461a      	mov	r2, r3
 80125e4:	68f9      	ldr	r1, [r7, #12]
 80125e6:	6878      	ldr	r0, [r7, #4]
 80125e8:	f002 fa2e 	bl	8014a48 <memmove>
      return __result + __count;
 80125ec:	697b      	ldr	r3, [r7, #20]
 80125ee:	009b      	lsls	r3, r3, #2
 80125f0:	687a      	ldr	r2, [r7, #4]
 80125f2:	4413      	add	r3, r2
    }
 80125f4:	4618      	mov	r0, r3
 80125f6:	3718      	adds	r7, #24
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}

080125fc <_ZSt4moveIRPPvEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80125fc:	b480      	push	{r7}
 80125fe:	b083      	sub	sp, #12
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	4618      	mov	r0, r3
 8012608:	370c      	adds	r7, #12
 801260a:	46bd      	mov	sp, r7
 801260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012610:	4770      	bx	lr

08012612 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8012612:	b580      	push	{r7, lr}
 8012614:	b084      	sub	sp, #16
 8012616:	af00      	add	r7, sp, #0
 8012618:	60f8      	str	r0, [r7, #12]
 801261a:	60b9      	str	r1, [r7, #8]
 801261c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 801261e:	687a      	ldr	r2, [r7, #4]
 8012620:	68b9      	ldr	r1, [r7, #8]
 8012622:	68f8      	ldr	r0, [r7, #12]
 8012624:	f000 f86d 	bl	8012702 <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 8012628:	4603      	mov	r3, r0
 801262a:	4618      	mov	r0, r3
 801262c:	3710      	adds	r7, #16
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}

08012632 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8012632:	b580      	push	{r7, lr}
 8012634:	b082      	sub	sp, #8
 8012636:	af00      	add	r7, sp, #0
 8012638:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f000 f879 	bl	8012732 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>
 8012640:	4603      	mov	r3, r0
      }
 8012642:	4618      	mov	r0, r3
 8012644:	3708      	adds	r7, #8
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}

0801264a <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801264a:	b480      	push	{r7}
 801264c:	b083      	sub	sp, #12
 801264e:	af00      	add	r7, sp, #0
 8012650:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8012652:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8012656:	4618      	mov	r0, r3
 8012658:	370c      	adds	r7, #12
 801265a:	46bd      	mov	sp, r7
 801265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012660:	4770      	bx	lr

08012662 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __niter_base(_Iterator __it)
 8012662:	b480      	push	{r7}
 8012664:	b083      	sub	sp, #12
 8012666:	af00      	add	r7, sp, #0
 8012668:	6078      	str	r0, [r7, #4]
    { return __it; }
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	4618      	mov	r0, r3
 801266e:	370c      	adds	r7, #12
 8012670:	46bd      	mov	sp, r7
 8012672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012676:	4770      	bx	lr

08012678 <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8012678:	b580      	push	{r7, lr}
 801267a:	b086      	sub	sp, #24
 801267c:	af00      	add	r7, sp, #0
 801267e:	60f8      	str	r0, [r7, #12]
 8012680:	60b9      	str	r1, [r7, #8]
 8012682:	607a      	str	r2, [r7, #4]
 8012684:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8012686:	68ba      	ldr	r2, [r7, #8]
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	1ad3      	subs	r3, r2, r3
 801268c:	10db      	asrs	r3, r3, #3
 801268e:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8012690:	697b      	ldr	r3, [r7, #20]
 8012692:	2b00      	cmp	r3, #0
 8012694:	dd06      	ble.n	80126a4 <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	00db      	lsls	r3, r3, #3
 801269a:	461a      	mov	r2, r3
 801269c:	68f9      	ldr	r1, [r7, #12]
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f002 f9d2 	bl	8014a48 <memmove>
      return __result + __count;
 80126a4:	697b      	ldr	r3, [r7, #20]
 80126a6:	00db      	lsls	r3, r3, #3
 80126a8:	687a      	ldr	r2, [r7, #4]
 80126aa:	4413      	add	r3, r2
    }
 80126ac:	4618      	mov	r0, r3
 80126ae:	3718      	adds	r7, #24
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}

080126b4 <_ZSt4moveIRPN12_GLOBAL__N_116scratch_buffer_tEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80126b4:	b480      	push	{r7}
 80126b6:	b083      	sub	sp, #12
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	4618      	mov	r0, r3
 80126c0:	370c      	adds	r7, #12
 80126c2:	46bd      	mov	sp, r7
 80126c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c8:	4770      	bx	lr

080126ca <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80126ca:	b580      	push	{r7, lr}
 80126cc:	b084      	sub	sp, #16
 80126ce:	af00      	add	r7, sp, #0
 80126d0:	60f8      	str	r0, [r7, #12]
 80126d2:	60b9      	str	r1, [r7, #8]
 80126d4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80126d6:	687a      	ldr	r2, [r7, #4]
 80126d8:	68b9      	ldr	r1, [r7, #8]
 80126da:	68f8      	ldr	r0, [r7, #12]
 80126dc:	f000 f835 	bl	801274a <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 80126e0:	4603      	mov	r3, r0
 80126e2:	4618      	mov	r0, r3
 80126e4:	3710      	adds	r7, #16
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}

080126ea <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80126ea:	b580      	push	{r7, lr}
 80126ec:	b082      	sub	sp, #8
 80126ee:	af00      	add	r7, sp, #0
 80126f0:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f7ff ff4d 	bl	8012592 <_ZNK9__gnu_cxx13new_allocatorIPvE11_M_max_sizeEv>
 80126f8:	4603      	mov	r3, r0
 80126fa:	4618      	mov	r0, r3
 80126fc:	3708      	adds	r7, #8
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}

08012702 <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8012702:	b590      	push	{r4, r7, lr}
 8012704:	b085      	sub	sp, #20
 8012706:	af00      	add	r7, sp, #0
 8012708:	60f8      	str	r0, [r7, #12]
 801270a:	60b9      	str	r1, [r7, #8]
 801270c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801270e:	68f8      	ldr	r0, [r7, #12]
 8012710:	f000 f833 	bl	801277a <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8012714:	4604      	mov	r4, r0
 8012716:	68b8      	ldr	r0, [r7, #8]
 8012718:	f000 f82f 	bl	801277a <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 801271c:	4603      	mov	r3, r0
 801271e:	687a      	ldr	r2, [r7, #4]
 8012720:	4619      	mov	r1, r3
 8012722:	4620      	mov	r0, r4
 8012724:	f000 f83a 	bl	801279c <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>
 8012728:	4603      	mov	r3, r0
    }
 801272a:	4618      	mov	r0, r3
 801272c:	3714      	adds	r7, #20
 801272e:	46bd      	mov	sp, r7
 8012730:	bd90      	pop	{r4, r7, pc}

08012732 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8012732:	b580      	push	{r7, lr}
 8012734:	b082      	sub	sp, #8
 8012736:	af00      	add	r7, sp, #0
 8012738:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f7ff ff85 	bl	801264a <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE11_M_max_sizeEv>
 8012740:	4603      	mov	r3, r0
 8012742:	4618      	mov	r0, r3
 8012744:	3708      	adds	r7, #8
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}

0801274a <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 801274a:	b590      	push	{r4, r7, lr}
 801274c:	b085      	sub	sp, #20
 801274e:	af00      	add	r7, sp, #0
 8012750:	60f8      	str	r0, [r7, #12]
 8012752:	60b9      	str	r1, [r7, #8]
 8012754:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8012756:	68f8      	ldr	r0, [r7, #12]
 8012758:	f000 f843 	bl	80127e2 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 801275c:	4604      	mov	r4, r0
 801275e:	68b8      	ldr	r0, [r7, #8]
 8012760:	f000 f83f 	bl	80127e2 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8012764:	4603      	mov	r3, r0
 8012766:	687a      	ldr	r2, [r7, #4]
 8012768:	4619      	mov	r1, r3
 801276a:	4620      	mov	r0, r4
 801276c:	f000 f84a 	bl	8012804 <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 8012770:	4603      	mov	r3, r0
    }
 8012772:	4618      	mov	r0, r3
 8012774:	3714      	adds	r7, #20
 8012776:	46bd      	mov	sp, r7
 8012778:	bd90      	pop	{r4, r7, pc}

0801277a <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 801277a:	b580      	push	{r7, lr}
 801277c:	b082      	sub	sp, #8
 801277e:	af00      	add	r7, sp, #0
 8012780:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8012782:	1d3b      	adds	r3, r7, #4
 8012784:	4618      	mov	r0, r3
 8012786:	f000 f860 	bl	801284a <_ZNKSt13move_iteratorIPPvE4baseEv>
 801278a:	4603      	mov	r3, r0
 801278c:	4618      	mov	r0, r3
 801278e:	f000 f868 	bl	8012862 <_ZSt12__miter_baseIPPvET_S2_>
 8012792:	4603      	mov	r3, r0
 8012794:	4618      	mov	r0, r3
 8012796:	3708      	adds	r7, #8
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}

0801279c <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 801279c:	b5b0      	push	{r4, r5, r7, lr}
 801279e:	b084      	sub	sp, #16
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	60f8      	str	r0, [r7, #12]
 80127a4:	60b9      	str	r1, [r7, #8]
 80127a6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80127a8:	68f8      	ldr	r0, [r7, #12]
 80127aa:	f7ff fefe 	bl	80125aa <_ZSt12__niter_baseIPPvET_S2_>
 80127ae:	4604      	mov	r4, r0
 80127b0:	68b8      	ldr	r0, [r7, #8]
 80127b2:	f7ff fefa 	bl	80125aa <_ZSt12__niter_baseIPPvET_S2_>
 80127b6:	4605      	mov	r5, r0
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	4618      	mov	r0, r3
 80127bc:	f7ff fef5 	bl	80125aa <_ZSt12__niter_baseIPPvET_S2_>
 80127c0:	4603      	mov	r3, r0
 80127c2:	461a      	mov	r2, r3
 80127c4:	4629      	mov	r1, r5
 80127c6:	4620      	mov	r0, r4
 80127c8:	f000 f856 	bl	8012878 <_ZSt14__copy_move_a1ILb1EPPvS1_ET1_T0_S3_S2_>
 80127cc:	4602      	mov	r2, r0
 80127ce:	1d3b      	adds	r3, r7, #4
 80127d0:	4611      	mov	r1, r2
 80127d2:	4618      	mov	r0, r3
 80127d4:	f000 f860 	bl	8012898 <_ZSt12__niter_wrapIPPvET_RKS2_S2_>
 80127d8:	4603      	mov	r3, r0
    }
 80127da:	4618      	mov	r0, r3
 80127dc:	3710      	adds	r7, #16
 80127de:	46bd      	mov	sp, r7
 80127e0:	bdb0      	pop	{r4, r5, r7, pc}

080127e2 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 80127e2:	b580      	push	{r7, lr}
 80127e4:	b082      	sub	sp, #8
 80127e6:	af00      	add	r7, sp, #0
 80127e8:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 80127ea:	1d3b      	adds	r3, r7, #4
 80127ec:	4618      	mov	r0, r3
 80127ee:	f000 f85f 	bl	80128b0 <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>
 80127f2:	4603      	mov	r3, r0
 80127f4:	4618      	mov	r0, r3
 80127f6:	f000 f867 	bl	80128c8 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 80127fa:	4603      	mov	r3, r0
 80127fc:	4618      	mov	r0, r3
 80127fe:	3708      	adds	r7, #8
 8012800:	46bd      	mov	sp, r7
 8012802:	bd80      	pop	{r7, pc}

08012804 <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8012804:	b5b0      	push	{r4, r5, r7, lr}
 8012806:	b084      	sub	sp, #16
 8012808:	af00      	add	r7, sp, #0
 801280a:	60f8      	str	r0, [r7, #12]
 801280c:	60b9      	str	r1, [r7, #8]
 801280e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8012810:	68f8      	ldr	r0, [r7, #12]
 8012812:	f7ff ff26 	bl	8012662 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8012816:	4604      	mov	r4, r0
 8012818:	68b8      	ldr	r0, [r7, #8]
 801281a:	f7ff ff22 	bl	8012662 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 801281e:	4605      	mov	r5, r0
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	4618      	mov	r0, r3
 8012824:	f7ff ff1d 	bl	8012662 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8012828:	4603      	mov	r3, r0
 801282a:	461a      	mov	r2, r3
 801282c:	4629      	mov	r1, r5
 801282e:	4620      	mov	r0, r4
 8012830:	f000 f855 	bl	80128de <_ZSt14__copy_move_a1ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 8012834:	4602      	mov	r2, r0
 8012836:	1d3b      	adds	r3, r7, #4
 8012838:	4611      	mov	r1, r2
 801283a:	4618      	mov	r0, r3
 801283c:	f000 f85f 	bl	80128fe <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>
 8012840:	4603      	mov	r3, r0
    }
 8012842:	4618      	mov	r0, r3
 8012844:	3710      	adds	r7, #16
 8012846:	46bd      	mov	sp, r7
 8012848:	bdb0      	pop	{r4, r5, r7, pc}

0801284a <_ZNKSt13move_iteratorIPPvE4baseEv>:
      base() const
 801284a:	b480      	push	{r7}
 801284c:	b083      	sub	sp, #12
 801284e:	af00      	add	r7, sp, #0
 8012850:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	4618      	mov	r0, r3
 8012858:	370c      	adds	r7, #12
 801285a:	46bd      	mov	sp, r7
 801285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012860:	4770      	bx	lr

08012862 <_ZSt12__miter_baseIPPvET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8012862:	b480      	push	{r7}
 8012864:	b083      	sub	sp, #12
 8012866:	af00      	add	r7, sp, #0
 8012868:	6078      	str	r0, [r7, #4]
    { return __it; }
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	4618      	mov	r0, r3
 801286e:	370c      	adds	r7, #12
 8012870:	46bd      	mov	sp, r7
 8012872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012876:	4770      	bx	lr

08012878 <_ZSt14__copy_move_a1ILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8012878:	b580      	push	{r7, lr}
 801287a:	b084      	sub	sp, #16
 801287c:	af00      	add	r7, sp, #0
 801287e:	60f8      	str	r0, [r7, #12]
 8012880:	60b9      	str	r1, [r7, #8]
 8012882:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8012884:	687a      	ldr	r2, [r7, #4]
 8012886:	68b9      	ldr	r1, [r7, #8]
 8012888:	68f8      	ldr	r0, [r7, #12]
 801288a:	f000 f844 	bl	8012916 <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>
 801288e:	4603      	mov	r3, r0
 8012890:	4618      	mov	r0, r3
 8012892:	3710      	adds	r7, #16
 8012894:	46bd      	mov	sp, r7
 8012896:	bd80      	pop	{r7, pc}

08012898 <_ZSt12__niter_wrapIPPvET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8012898:	b480      	push	{r7}
 801289a:	b083      	sub	sp, #12
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
 80128a0:	6039      	str	r1, [r7, #0]
    { return __res; }
 80128a2:	683b      	ldr	r3, [r7, #0]
 80128a4:	4618      	mov	r0, r3
 80128a6:	370c      	adds	r7, #12
 80128a8:	46bd      	mov	sp, r7
 80128aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ae:	4770      	bx	lr

080128b0 <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>:
      base() const
 80128b0:	b480      	push	{r7}
 80128b2:	b083      	sub	sp, #12
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	4618      	mov	r0, r3
 80128be:	370c      	adds	r7, #12
 80128c0:	46bd      	mov	sp, r7
 80128c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c6:	4770      	bx	lr

080128c8 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __miter_base(_Iterator __it)
 80128c8:	b480      	push	{r7}
 80128ca:	b083      	sub	sp, #12
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
    { return __it; }
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	4618      	mov	r0, r3
 80128d4:	370c      	adds	r7, #12
 80128d6:	46bd      	mov	sp, r7
 80128d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128dc:	4770      	bx	lr

080128de <_ZSt14__copy_move_a1ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80128de:	b580      	push	{r7, lr}
 80128e0:	b084      	sub	sp, #16
 80128e2:	af00      	add	r7, sp, #0
 80128e4:	60f8      	str	r0, [r7, #12]
 80128e6:	60b9      	str	r1, [r7, #8]
 80128e8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80128ea:	687a      	ldr	r2, [r7, #4]
 80128ec:	68b9      	ldr	r1, [r7, #8]
 80128ee:	68f8      	ldr	r0, [r7, #12]
 80128f0:	f000 f821 	bl	8012936 <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 80128f4:	4603      	mov	r3, r0
 80128f6:	4618      	mov	r0, r3
 80128f8:	3710      	adds	r7, #16
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bd80      	pop	{r7, pc}

080128fe <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80128fe:	b480      	push	{r7}
 8012900:	b083      	sub	sp, #12
 8012902:	af00      	add	r7, sp, #0
 8012904:	6078      	str	r0, [r7, #4]
 8012906:	6039      	str	r1, [r7, #0]
    { return __res; }
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	4618      	mov	r0, r3
 801290c:	370c      	adds	r7, #12
 801290e:	46bd      	mov	sp, r7
 8012910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012914:	4770      	bx	lr

08012916 <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8012916:	b580      	push	{r7, lr}
 8012918:	b084      	sub	sp, #16
 801291a:	af00      	add	r7, sp, #0
 801291c:	60f8      	str	r0, [r7, #12]
 801291e:	60b9      	str	r1, [r7, #8]
 8012920:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8012922:	687a      	ldr	r2, [r7, #4]
 8012924:	68b9      	ldr	r1, [r7, #8]
 8012926:	68f8      	ldr	r0, [r7, #12]
 8012928:	f000 f815 	bl	8012956 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>
 801292c:	4603      	mov	r3, r0
    }
 801292e:	4618      	mov	r0, r3
 8012930:	3710      	adds	r7, #16
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}

08012936 <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8012936:	b580      	push	{r7, lr}
 8012938:	b084      	sub	sp, #16
 801293a:	af00      	add	r7, sp, #0
 801293c:	60f8      	str	r0, [r7, #12]
 801293e:	60b9      	str	r1, [r7, #8]
 8012940:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8012942:	687a      	ldr	r2, [r7, #4]
 8012944:	68b9      	ldr	r1, [r7, #8]
 8012946:	68f8      	ldr	r0, [r7, #12]
 8012948:	f000 f822 	bl	8012990 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>
 801294c:	4603      	mov	r3, r0
    }
 801294e:	4618      	mov	r0, r3
 8012950:	3710      	adds	r7, #16
 8012952:	46bd      	mov	sp, r7
 8012954:	bd80      	pop	{r7, pc}

08012956 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8012956:	b580      	push	{r7, lr}
 8012958:	b086      	sub	sp, #24
 801295a:	af00      	add	r7, sp, #0
 801295c:	60f8      	str	r0, [r7, #12]
 801295e:	60b9      	str	r1, [r7, #8]
 8012960:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8012962:	68ba      	ldr	r2, [r7, #8]
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	1ad3      	subs	r3, r2, r3
 8012968:	109b      	asrs	r3, r3, #2
 801296a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 801296c:	697b      	ldr	r3, [r7, #20]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d006      	beq.n	8012980 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	009b      	lsls	r3, r3, #2
 8012976:	461a      	mov	r2, r3
 8012978:	68f9      	ldr	r1, [r7, #12]
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f002 f864 	bl	8014a48 <memmove>
	  return __result + _Num;
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	009b      	lsls	r3, r3, #2
 8012984:	687a      	ldr	r2, [r7, #4]
 8012986:	4413      	add	r3, r2
	}
 8012988:	4618      	mov	r0, r3
 801298a:	3718      	adds	r7, #24
 801298c:	46bd      	mov	sp, r7
 801298e:	bd80      	pop	{r7, pc}

08012990 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8012990:	b580      	push	{r7, lr}
 8012992:	b086      	sub	sp, #24
 8012994:	af00      	add	r7, sp, #0
 8012996:	60f8      	str	r0, [r7, #12]
 8012998:	60b9      	str	r1, [r7, #8]
 801299a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 801299c:	68ba      	ldr	r2, [r7, #8]
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	1ad3      	subs	r3, r2, r3
 80129a2:	10db      	asrs	r3, r3, #3
 80129a4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80129a6:	697b      	ldr	r3, [r7, #20]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d006      	beq.n	80129ba <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80129ac:	697b      	ldr	r3, [r7, #20]
 80129ae:	00db      	lsls	r3, r3, #3
 80129b0:	461a      	mov	r2, r3
 80129b2:	68f9      	ldr	r1, [r7, #12]
 80129b4:	6878      	ldr	r0, [r7, #4]
 80129b6:	f002 f847 	bl	8014a48 <memmove>
	  return __result + _Num;
 80129ba:	697b      	ldr	r3, [r7, #20]
 80129bc:	00db      	lsls	r3, r3, #3
 80129be:	687a      	ldr	r2, [r7, #4]
 80129c0:	4413      	add	r3, r2
	}
 80129c2:	4618      	mov	r0, r3
 80129c4:	3718      	adds	r7, #24
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}
	...

080129cc <_Z41__static_initialization_and_destruction_0ii>:
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b082      	sub	sp, #8
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
 80129d4:	6039      	str	r1, [r7, #0]
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	2b01      	cmp	r3, #1
 80129da:	d121      	bne.n	8012a20 <_Z41__static_initialization_and_destruction_0ii+0x54>
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80129e2:	4293      	cmp	r3, r2
 80129e4:	d11c      	bne.n	8012a20 <_Z41__static_initialization_and_destruction_0ii+0x54>
};const NodeInfo_t nodeData[] = {
 80129e6:	4b17      	ldr	r3, [pc, #92]	; (8012a44 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	4a17      	ldr	r2, [pc, #92]	; (8012a48 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80129ec:	6053      	str	r3, [r2, #4]
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 512, (TfLiteIntArray*)&tensor_dimension7, 500, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
 80129ee:	4b15      	ldr	r3, [pc, #84]	; (8012a44 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
};const NodeInfo_t nodeData[] = {
 80129f6:	4a14      	ldr	r2, [pc, #80]	; (8012a48 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80129f8:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 80129fc:	4b11      	ldr	r3, [pc, #68]	; (8012a44 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	4a11      	ldr	r2, [pc, #68]	; (8012a48 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8012a02:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 512, (TfLiteIntArray*)&tensor_dimension9, 1, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
 8012a06:	4b0f      	ldr	r3, [pc, #60]	; (8012a44 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	f503 7300 	add.w	r3, r3, #512	; 0x200
};const NodeInfo_t nodeData[] = {
 8012a0e:	4a0e      	ldr	r2, [pc, #56]	; (8012a48 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8012a10:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
static std::vector<void*> overflow_buffers;
 8012a14:	480d      	ldr	r0, [pc, #52]	; (8012a4c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8012a16:	f7fe fa11 	bl	8010e3c <_ZNSt6vectorIPvSaIS0_EEC1Ev>
static std::vector<scratch_buffer_t> scratch_buffers;
 8012a1a:	480d      	ldr	r0, [pc, #52]	; (8012a50 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8012a1c:	f7fe fa79 	bl	8010f12 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d10a      	bne.n	8012a3c <_Z41__static_initialization_and_destruction_0ii+0x70>
 8012a26:	683b      	ldr	r3, [r7, #0]
 8012a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a2c:	4293      	cmp	r3, r2
 8012a2e:	d105      	bne.n	8012a3c <_Z41__static_initialization_and_destruction_0ii+0x70>
 8012a30:	4807      	ldr	r0, [pc, #28]	; (8012a50 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8012a32:	f000 f80f 	bl	8012a54 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>
static std::vector<void*> overflow_buffers;
 8012a36:	4805      	ldr	r0, [pc, #20]	; (8012a4c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8012a38:	f000 f827 	bl	8012a8a <_ZNSt6vectorIPvSaIS0_EED1Ev>
}
 8012a3c:	bf00      	nop
 8012a3e:	3708      	adds	r7, #8
 8012a40:	46bd      	mov	sp, r7
 8012a42:	bd80      	pop	{r7, pc}
 8012a44:	2000098c 	.word	0x2000098c
 8012a48:	200000dc 	.word	0x200000dc
 8012a4c:	20000d74 	.word	0x20000d74
 8012a50:	20000d80 	.word	0x20000d80

08012a54 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8012a54:	b5b0      	push	{r4, r5, r7, lr}
 8012a56:	b082      	sub	sp, #8
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	681c      	ldr	r4, [r3, #0]
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	4618      	mov	r0, r3
 8012a68:	f7ff fb59 	bl	801211e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8012a6c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012a6e:	461a      	mov	r2, r3
 8012a70:	4629      	mov	r1, r5
 8012a72:	4620      	mov	r0, r4
 8012a74:	f7ff fb77 	bl	8012166 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      }
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f7fe fe00 	bl	8011680 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	4618      	mov	r0, r3
 8012a84:	3708      	adds	r7, #8
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bdb0      	pop	{r4, r5, r7, pc}

08012a8a <_ZNSt6vectorIPvSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8012a8a:	b5b0      	push	{r4, r5, r7, lr}
 8012a8c:	b082      	sub	sp, #8
 8012a8e:	af00      	add	r7, sp, #0
 8012a90:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	681c      	ldr	r4, [r3, #0]
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f7ff fa1f 	bl	8011ee0 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8012aa2:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012aa4:	461a      	mov	r2, r3
 8012aa6:	4629      	mov	r1, r5
 8012aa8:	4620      	mov	r0, r4
 8012aaa:	f7ff fa3d 	bl	8011f28 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      }
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f7fe fd8b 	bl	80115cc <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	4618      	mov	r0, r3
 8012aba:	3708      	adds	r7, #8
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bdb0      	pop	{r4, r5, r7, pc}

08012ac0 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	af00      	add	r7, sp, #0
 8012ac4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012ac8:	2001      	movs	r0, #1
 8012aca:	f7ff ff7f 	bl	80129cc <_Z41__static_initialization_and_destruction_0ii>
 8012ace:	bd80      	pop	{r7, pc}

08012ad0 <_GLOBAL__sub_D__Z18trained_model_initPFPvjjE>:
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	af00      	add	r7, sp, #0
 8012ad4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012ad8:	2000      	movs	r0, #0
 8012ada:	f7ff ff77 	bl	80129cc <_Z41__static_initialization_and_destruction_0ii>
 8012ade:	bd80      	pop	{r7, pc}

08012ae0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	4912      	ldr	r1, [pc, #72]	; (8012b30 <MX_USB_DEVICE_Init+0x50>)
 8012ae8:	4812      	ldr	r0, [pc, #72]	; (8012b34 <MX_USB_DEVICE_Init+0x54>)
 8012aea:	f7f7 f853 	bl	8009b94 <USBD_Init>
 8012aee:	4603      	mov	r3, r0
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d001      	beq.n	8012af8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012af4:	f7f0 fec2 	bl	800387c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012af8:	490f      	ldr	r1, [pc, #60]	; (8012b38 <MX_USB_DEVICE_Init+0x58>)
 8012afa:	480e      	ldr	r0, [pc, #56]	; (8012b34 <MX_USB_DEVICE_Init+0x54>)
 8012afc:	f7f7 f87a 	bl	8009bf4 <USBD_RegisterClass>
 8012b00:	4603      	mov	r3, r0
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d001      	beq.n	8012b0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012b06:	f7f0 feb9 	bl	800387c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012b0a:	490c      	ldr	r1, [pc, #48]	; (8012b3c <MX_USB_DEVICE_Init+0x5c>)
 8012b0c:	4809      	ldr	r0, [pc, #36]	; (8012b34 <MX_USB_DEVICE_Init+0x54>)
 8012b0e:	f7f6 ff6b 	bl	80099e8 <USBD_CDC_RegisterInterface>
 8012b12:	4603      	mov	r3, r0
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d001      	beq.n	8012b1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012b18:	f7f0 feb0 	bl	800387c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012b1c:	4805      	ldr	r0, [pc, #20]	; (8012b34 <MX_USB_DEVICE_Init+0x54>)
 8012b1e:	f7f7 f89f 	bl	8009c60 <USBD_Start>
 8012b22:	4603      	mov	r3, r0
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d001      	beq.n	8012b2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012b28:	f7f0 fea8 	bl	800387c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012b2c:	bf00      	nop
 8012b2e:	bd80      	pop	{r7, pc}
 8012b30:	200001e0 	.word	0x200001e0
 8012b34:	20000d8c 	.word	0x20000d8c
 8012b38:	20000050 	.word	0x20000050
 8012b3c:	200001cc 	.word	0x200001cc

08012b40 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012b44:	2200      	movs	r2, #0
 8012b46:	4905      	ldr	r1, [pc, #20]	; (8012b5c <CDC_Init_FS+0x1c>)
 8012b48:	4805      	ldr	r0, [pc, #20]	; (8012b60 <CDC_Init_FS+0x20>)
 8012b4a:	f7f6 ff67 	bl	8009a1c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012b4e:	4905      	ldr	r1, [pc, #20]	; (8012b64 <CDC_Init_FS+0x24>)
 8012b50:	4803      	ldr	r0, [pc, #12]	; (8012b60 <CDC_Init_FS+0x20>)
 8012b52:	f7f6 ff85 	bl	8009a60 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012b56:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012b58:	4618      	mov	r0, r3
 8012b5a:	bd80      	pop	{r7, pc}
 8012b5c:	20001868 	.word	0x20001868
 8012b60:	20000d8c 	.word	0x20000d8c
 8012b64:	20001068 	.word	0x20001068

08012b68 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012b68:	b480      	push	{r7}
 8012b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012b6c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012b6e:	4618      	mov	r0, r3
 8012b70:	46bd      	mov	sp, r7
 8012b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b76:	4770      	bx	lr

08012b78 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012b78:	b480      	push	{r7}
 8012b7a:	b083      	sub	sp, #12
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	4603      	mov	r3, r0
 8012b80:	6039      	str	r1, [r7, #0]
 8012b82:	71fb      	strb	r3, [r7, #7]
 8012b84:	4613      	mov	r3, r2
 8012b86:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012b88:	79fb      	ldrb	r3, [r7, #7]
 8012b8a:	2b23      	cmp	r3, #35	; 0x23
 8012b8c:	d84a      	bhi.n	8012c24 <CDC_Control_FS+0xac>
 8012b8e:	a201      	add	r2, pc, #4	; (adr r2, 8012b94 <CDC_Control_FS+0x1c>)
 8012b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b94:	08012c25 	.word	0x08012c25
 8012b98:	08012c25 	.word	0x08012c25
 8012b9c:	08012c25 	.word	0x08012c25
 8012ba0:	08012c25 	.word	0x08012c25
 8012ba4:	08012c25 	.word	0x08012c25
 8012ba8:	08012c25 	.word	0x08012c25
 8012bac:	08012c25 	.word	0x08012c25
 8012bb0:	08012c25 	.word	0x08012c25
 8012bb4:	08012c25 	.word	0x08012c25
 8012bb8:	08012c25 	.word	0x08012c25
 8012bbc:	08012c25 	.word	0x08012c25
 8012bc0:	08012c25 	.word	0x08012c25
 8012bc4:	08012c25 	.word	0x08012c25
 8012bc8:	08012c25 	.word	0x08012c25
 8012bcc:	08012c25 	.word	0x08012c25
 8012bd0:	08012c25 	.word	0x08012c25
 8012bd4:	08012c25 	.word	0x08012c25
 8012bd8:	08012c25 	.word	0x08012c25
 8012bdc:	08012c25 	.word	0x08012c25
 8012be0:	08012c25 	.word	0x08012c25
 8012be4:	08012c25 	.word	0x08012c25
 8012be8:	08012c25 	.word	0x08012c25
 8012bec:	08012c25 	.word	0x08012c25
 8012bf0:	08012c25 	.word	0x08012c25
 8012bf4:	08012c25 	.word	0x08012c25
 8012bf8:	08012c25 	.word	0x08012c25
 8012bfc:	08012c25 	.word	0x08012c25
 8012c00:	08012c25 	.word	0x08012c25
 8012c04:	08012c25 	.word	0x08012c25
 8012c08:	08012c25 	.word	0x08012c25
 8012c0c:	08012c25 	.word	0x08012c25
 8012c10:	08012c25 	.word	0x08012c25
 8012c14:	08012c25 	.word	0x08012c25
 8012c18:	08012c25 	.word	0x08012c25
 8012c1c:	08012c25 	.word	0x08012c25
 8012c20:	08012c25 	.word	0x08012c25
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012c24:	bf00      	nop
  }

  return (USBD_OK);
 8012c26:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012c28:	4618      	mov	r0, r3
 8012c2a:	370c      	adds	r7, #12
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c32:	4770      	bx	lr

08012c34 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b082      	sub	sp, #8
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
 8012c3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012c3e:	6879      	ldr	r1, [r7, #4]
 8012c40:	4805      	ldr	r0, [pc, #20]	; (8012c58 <CDC_Receive_FS+0x24>)
 8012c42:	f7f6 ff0d 	bl	8009a60 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012c46:	4804      	ldr	r0, [pc, #16]	; (8012c58 <CDC_Receive_FS+0x24>)
 8012c48:	f7f6 ff6e 	bl	8009b28 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012c4c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	3708      	adds	r7, #8
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd80      	pop	{r7, pc}
 8012c56:	bf00      	nop
 8012c58:	20000d8c 	.word	0x20000d8c

08012c5c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b084      	sub	sp, #16
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	460b      	mov	r3, r1
 8012c66:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012c68:	2300      	movs	r3, #0
 8012c6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012c6c:	4b0d      	ldr	r3, [pc, #52]	; (8012ca4 <CDC_Transmit_FS+0x48>)
 8012c6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012c72:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012c74:	68bb      	ldr	r3, [r7, #8]
 8012c76:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d001      	beq.n	8012c82 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012c7e:	2301      	movs	r3, #1
 8012c80:	e00b      	b.n	8012c9a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012c82:	887b      	ldrh	r3, [r7, #2]
 8012c84:	461a      	mov	r2, r3
 8012c86:	6879      	ldr	r1, [r7, #4]
 8012c88:	4806      	ldr	r0, [pc, #24]	; (8012ca4 <CDC_Transmit_FS+0x48>)
 8012c8a:	f7f6 fec7 	bl	8009a1c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012c8e:	4805      	ldr	r0, [pc, #20]	; (8012ca4 <CDC_Transmit_FS+0x48>)
 8012c90:	f7f6 ff04 	bl	8009a9c <USBD_CDC_TransmitPacket>
 8012c94:	4603      	mov	r3, r0
 8012c96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	3710      	adds	r7, #16
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd80      	pop	{r7, pc}
 8012ca2:	bf00      	nop
 8012ca4:	20000d8c 	.word	0x20000d8c

08012ca8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012ca8:	b480      	push	{r7}
 8012caa:	b087      	sub	sp, #28
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	60f8      	str	r0, [r7, #12]
 8012cb0:	60b9      	str	r1, [r7, #8]
 8012cb2:	4613      	mov	r3, r2
 8012cb4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012cba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	371c      	adds	r7, #28
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc8:	4770      	bx	lr
	...

08012ccc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ccc:	b480      	push	{r7}
 8012cce:	b083      	sub	sp, #12
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	6039      	str	r1, [r7, #0]
 8012cd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012cd8:	683b      	ldr	r3, [r7, #0]
 8012cda:	2212      	movs	r2, #18
 8012cdc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012cde:	4b03      	ldr	r3, [pc, #12]	; (8012cec <USBD_FS_DeviceDescriptor+0x20>)
}
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	370c      	adds	r7, #12
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cea:	4770      	bx	lr
 8012cec:	200001fc 	.word	0x200001fc

08012cf0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012cf0:	b480      	push	{r7}
 8012cf2:	b083      	sub	sp, #12
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	6039      	str	r1, [r7, #0]
 8012cfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012cfc:	683b      	ldr	r3, [r7, #0]
 8012cfe:	2204      	movs	r2, #4
 8012d00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012d02:	4b03      	ldr	r3, [pc, #12]	; (8012d10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012d04:	4618      	mov	r0, r3
 8012d06:	370c      	adds	r7, #12
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0e:	4770      	bx	lr
 8012d10:	20000210 	.word	0x20000210

08012d14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b082      	sub	sp, #8
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	6039      	str	r1, [r7, #0]
 8012d1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012d20:	79fb      	ldrb	r3, [r7, #7]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d105      	bne.n	8012d32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012d26:	683a      	ldr	r2, [r7, #0]
 8012d28:	4907      	ldr	r1, [pc, #28]	; (8012d48 <USBD_FS_ProductStrDescriptor+0x34>)
 8012d2a:	4808      	ldr	r0, [pc, #32]	; (8012d4c <USBD_FS_ProductStrDescriptor+0x38>)
 8012d2c:	f7f8 f944 	bl	800afb8 <USBD_GetString>
 8012d30:	e004      	b.n	8012d3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012d32:	683a      	ldr	r2, [r7, #0]
 8012d34:	4904      	ldr	r1, [pc, #16]	; (8012d48 <USBD_FS_ProductStrDescriptor+0x34>)
 8012d36:	4805      	ldr	r0, [pc, #20]	; (8012d4c <USBD_FS_ProductStrDescriptor+0x38>)
 8012d38:	f7f8 f93e 	bl	800afb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012d3c:	4b02      	ldr	r3, [pc, #8]	; (8012d48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012d3e:	4618      	mov	r0, r3
 8012d40:	3708      	adds	r7, #8
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}
 8012d46:	bf00      	nop
 8012d48:	20002068 	.word	0x20002068
 8012d4c:	0801a824 	.word	0x0801a824

08012d50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b082      	sub	sp, #8
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	4603      	mov	r3, r0
 8012d58:	6039      	str	r1, [r7, #0]
 8012d5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012d5c:	683a      	ldr	r2, [r7, #0]
 8012d5e:	4904      	ldr	r1, [pc, #16]	; (8012d70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012d60:	4804      	ldr	r0, [pc, #16]	; (8012d74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012d62:	f7f8 f929 	bl	800afb8 <USBD_GetString>
  return USBD_StrDesc;
 8012d66:	4b02      	ldr	r3, [pc, #8]	; (8012d70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012d68:	4618      	mov	r0, r3
 8012d6a:	3708      	adds	r7, #8
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bd80      	pop	{r7, pc}
 8012d70:	20002068 	.word	0x20002068
 8012d74:	0801a83c 	.word	0x0801a83c

08012d78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b082      	sub	sp, #8
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	4603      	mov	r3, r0
 8012d80:	6039      	str	r1, [r7, #0]
 8012d82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012d84:	683b      	ldr	r3, [r7, #0]
 8012d86:	221a      	movs	r2, #26
 8012d88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012d8a:	f000 f843 	bl	8012e14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012d8e:	4b02      	ldr	r3, [pc, #8]	; (8012d98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012d90:	4618      	mov	r0, r3
 8012d92:	3708      	adds	r7, #8
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd80      	pop	{r7, pc}
 8012d98:	20000214 	.word	0x20000214

08012d9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b082      	sub	sp, #8
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	4603      	mov	r3, r0
 8012da4:	6039      	str	r1, [r7, #0]
 8012da6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012da8:	79fb      	ldrb	r3, [r7, #7]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d105      	bne.n	8012dba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012dae:	683a      	ldr	r2, [r7, #0]
 8012db0:	4907      	ldr	r1, [pc, #28]	; (8012dd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012db2:	4808      	ldr	r0, [pc, #32]	; (8012dd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012db4:	f7f8 f900 	bl	800afb8 <USBD_GetString>
 8012db8:	e004      	b.n	8012dc4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012dba:	683a      	ldr	r2, [r7, #0]
 8012dbc:	4904      	ldr	r1, [pc, #16]	; (8012dd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012dbe:	4805      	ldr	r0, [pc, #20]	; (8012dd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012dc0:	f7f8 f8fa 	bl	800afb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012dc4:	4b02      	ldr	r3, [pc, #8]	; (8012dd0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	3708      	adds	r7, #8
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	20002068 	.word	0x20002068
 8012dd4:	0801a850 	.word	0x0801a850

08012dd8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b082      	sub	sp, #8
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	4603      	mov	r3, r0
 8012de0:	6039      	str	r1, [r7, #0]
 8012de2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012de4:	79fb      	ldrb	r3, [r7, #7]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d105      	bne.n	8012df6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012dea:	683a      	ldr	r2, [r7, #0]
 8012dec:	4907      	ldr	r1, [pc, #28]	; (8012e0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012dee:	4808      	ldr	r0, [pc, #32]	; (8012e10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012df0:	f7f8 f8e2 	bl	800afb8 <USBD_GetString>
 8012df4:	e004      	b.n	8012e00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012df6:	683a      	ldr	r2, [r7, #0]
 8012df8:	4904      	ldr	r1, [pc, #16]	; (8012e0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012dfa:	4805      	ldr	r0, [pc, #20]	; (8012e10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012dfc:	f7f8 f8dc 	bl	800afb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012e00:	4b02      	ldr	r3, [pc, #8]	; (8012e0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	3708      	adds	r7, #8
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}
 8012e0a:	bf00      	nop
 8012e0c:	20002068 	.word	0x20002068
 8012e10:	0801a85c 	.word	0x0801a85c

08012e14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b084      	sub	sp, #16
 8012e18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012e1a:	4b0f      	ldr	r3, [pc, #60]	; (8012e58 <Get_SerialNum+0x44>)
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012e20:	4b0e      	ldr	r3, [pc, #56]	; (8012e5c <Get_SerialNum+0x48>)
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012e26:	4b0e      	ldr	r3, [pc, #56]	; (8012e60 <Get_SerialNum+0x4c>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012e2c:	68fa      	ldr	r2, [r7, #12]
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	4413      	add	r3, r2
 8012e32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d009      	beq.n	8012e4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012e3a:	2208      	movs	r2, #8
 8012e3c:	4909      	ldr	r1, [pc, #36]	; (8012e64 <Get_SerialNum+0x50>)
 8012e3e:	68f8      	ldr	r0, [r7, #12]
 8012e40:	f000 f814 	bl	8012e6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012e44:	2204      	movs	r2, #4
 8012e46:	4908      	ldr	r1, [pc, #32]	; (8012e68 <Get_SerialNum+0x54>)
 8012e48:	68b8      	ldr	r0, [r7, #8]
 8012e4a:	f000 f80f 	bl	8012e6c <IntToUnicode>
  }
}
 8012e4e:	bf00      	nop
 8012e50:	3710      	adds	r7, #16
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}
 8012e56:	bf00      	nop
 8012e58:	1fff7a10 	.word	0x1fff7a10
 8012e5c:	1fff7a14 	.word	0x1fff7a14
 8012e60:	1fff7a18 	.word	0x1fff7a18
 8012e64:	20000216 	.word	0x20000216
 8012e68:	20000226 	.word	0x20000226

08012e6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012e6c:	b480      	push	{r7}
 8012e6e:	b087      	sub	sp, #28
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	60f8      	str	r0, [r7, #12]
 8012e74:	60b9      	str	r1, [r7, #8]
 8012e76:	4613      	mov	r3, r2
 8012e78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012e7e:	2300      	movs	r3, #0
 8012e80:	75fb      	strb	r3, [r7, #23]
 8012e82:	e027      	b.n	8012ed4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	0f1b      	lsrs	r3, r3, #28
 8012e88:	2b09      	cmp	r3, #9
 8012e8a:	d80b      	bhi.n	8012ea4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	0f1b      	lsrs	r3, r3, #28
 8012e90:	b2da      	uxtb	r2, r3
 8012e92:	7dfb      	ldrb	r3, [r7, #23]
 8012e94:	005b      	lsls	r3, r3, #1
 8012e96:	4619      	mov	r1, r3
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	440b      	add	r3, r1
 8012e9c:	3230      	adds	r2, #48	; 0x30
 8012e9e:	b2d2      	uxtb	r2, r2
 8012ea0:	701a      	strb	r2, [r3, #0]
 8012ea2:	e00a      	b.n	8012eba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	0f1b      	lsrs	r3, r3, #28
 8012ea8:	b2da      	uxtb	r2, r3
 8012eaa:	7dfb      	ldrb	r3, [r7, #23]
 8012eac:	005b      	lsls	r3, r3, #1
 8012eae:	4619      	mov	r1, r3
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	440b      	add	r3, r1
 8012eb4:	3237      	adds	r2, #55	; 0x37
 8012eb6:	b2d2      	uxtb	r2, r2
 8012eb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	011b      	lsls	r3, r3, #4
 8012ebe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012ec0:	7dfb      	ldrb	r3, [r7, #23]
 8012ec2:	005b      	lsls	r3, r3, #1
 8012ec4:	3301      	adds	r3, #1
 8012ec6:	68ba      	ldr	r2, [r7, #8]
 8012ec8:	4413      	add	r3, r2
 8012eca:	2200      	movs	r2, #0
 8012ecc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012ece:	7dfb      	ldrb	r3, [r7, #23]
 8012ed0:	3301      	adds	r3, #1
 8012ed2:	75fb      	strb	r3, [r7, #23]
 8012ed4:	7dfa      	ldrb	r2, [r7, #23]
 8012ed6:	79fb      	ldrb	r3, [r7, #7]
 8012ed8:	429a      	cmp	r2, r3
 8012eda:	d3d3      	bcc.n	8012e84 <IntToUnicode+0x18>
  }
}
 8012edc:	bf00      	nop
 8012ede:	bf00      	nop
 8012ee0:	371c      	adds	r7, #28
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee8:	4770      	bx	lr
	...

08012eec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b08a      	sub	sp, #40	; 0x28
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012ef4:	f107 0314 	add.w	r3, r7, #20
 8012ef8:	2200      	movs	r2, #0
 8012efa:	601a      	str	r2, [r3, #0]
 8012efc:	605a      	str	r2, [r3, #4]
 8012efe:	609a      	str	r2, [r3, #8]
 8012f00:	60da      	str	r2, [r3, #12]
 8012f02:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012f0c:	d13a      	bne.n	8012f84 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012f0e:	2300      	movs	r3, #0
 8012f10:	613b      	str	r3, [r7, #16]
 8012f12:	4b1e      	ldr	r3, [pc, #120]	; (8012f8c <HAL_PCD_MspInit+0xa0>)
 8012f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f16:	4a1d      	ldr	r2, [pc, #116]	; (8012f8c <HAL_PCD_MspInit+0xa0>)
 8012f18:	f043 0301 	orr.w	r3, r3, #1
 8012f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8012f1e:	4b1b      	ldr	r3, [pc, #108]	; (8012f8c <HAL_PCD_MspInit+0xa0>)
 8012f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f22:	f003 0301 	and.w	r3, r3, #1
 8012f26:	613b      	str	r3, [r7, #16]
 8012f28:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012f2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f30:	2302      	movs	r3, #2
 8012f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f34:	2300      	movs	r3, #0
 8012f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012f38:	2303      	movs	r3, #3
 8012f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012f3c:	230a      	movs	r3, #10
 8012f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012f40:	f107 0314 	add.w	r3, r7, #20
 8012f44:	4619      	mov	r1, r3
 8012f46:	4812      	ldr	r0, [pc, #72]	; (8012f90 <HAL_PCD_MspInit+0xa4>)
 8012f48:	f7f2 fc76 	bl	8005838 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012f4c:	4b0f      	ldr	r3, [pc, #60]	; (8012f8c <HAL_PCD_MspInit+0xa0>)
 8012f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f50:	4a0e      	ldr	r2, [pc, #56]	; (8012f8c <HAL_PCD_MspInit+0xa0>)
 8012f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f56:	6353      	str	r3, [r2, #52]	; 0x34
 8012f58:	2300      	movs	r3, #0
 8012f5a:	60fb      	str	r3, [r7, #12]
 8012f5c:	4b0b      	ldr	r3, [pc, #44]	; (8012f8c <HAL_PCD_MspInit+0xa0>)
 8012f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f60:	4a0a      	ldr	r2, [pc, #40]	; (8012f8c <HAL_PCD_MspInit+0xa0>)
 8012f62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012f66:	6453      	str	r3, [r2, #68]	; 0x44
 8012f68:	4b08      	ldr	r3, [pc, #32]	; (8012f8c <HAL_PCD_MspInit+0xa0>)
 8012f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012f70:	60fb      	str	r3, [r7, #12]
 8012f72:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012f74:	2200      	movs	r2, #0
 8012f76:	2100      	movs	r1, #0
 8012f78:	2043      	movs	r0, #67	; 0x43
 8012f7a:	f7f2 fc0a 	bl	8005792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012f7e:	2043      	movs	r0, #67	; 0x43
 8012f80:	f7f2 fc23 	bl	80057ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012f84:	bf00      	nop
 8012f86:	3728      	adds	r7, #40	; 0x28
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}
 8012f8c:	40023800 	.word	0x40023800
 8012f90:	40020000 	.word	0x40020000

08012f94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b082      	sub	sp, #8
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012fa8:	4619      	mov	r1, r3
 8012faa:	4610      	mov	r0, r2
 8012fac:	f7f6 fea5 	bl	8009cfa <USBD_LL_SetupStage>
}
 8012fb0:	bf00      	nop
 8012fb2:	3708      	adds	r7, #8
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}

08012fb8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b082      	sub	sp, #8
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
 8012fc0:	460b      	mov	r3, r1
 8012fc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012fca:	78fa      	ldrb	r2, [r7, #3]
 8012fcc:	6879      	ldr	r1, [r7, #4]
 8012fce:	4613      	mov	r3, r2
 8012fd0:	00db      	lsls	r3, r3, #3
 8012fd2:	4413      	add	r3, r2
 8012fd4:	009b      	lsls	r3, r3, #2
 8012fd6:	440b      	add	r3, r1
 8012fd8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8012fdc:	681a      	ldr	r2, [r3, #0]
 8012fde:	78fb      	ldrb	r3, [r7, #3]
 8012fe0:	4619      	mov	r1, r3
 8012fe2:	f7f6 fedf 	bl	8009da4 <USBD_LL_DataOutStage>
}
 8012fe6:	bf00      	nop
 8012fe8:	3708      	adds	r7, #8
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}

08012fee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fee:	b580      	push	{r7, lr}
 8012ff0:	b082      	sub	sp, #8
 8012ff2:	af00      	add	r7, sp, #0
 8012ff4:	6078      	str	r0, [r7, #4]
 8012ff6:	460b      	mov	r3, r1
 8012ff8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013000:	78fa      	ldrb	r2, [r7, #3]
 8013002:	6879      	ldr	r1, [r7, #4]
 8013004:	4613      	mov	r3, r2
 8013006:	00db      	lsls	r3, r3, #3
 8013008:	4413      	add	r3, r2
 801300a:	009b      	lsls	r3, r3, #2
 801300c:	440b      	add	r3, r1
 801300e:	334c      	adds	r3, #76	; 0x4c
 8013010:	681a      	ldr	r2, [r3, #0]
 8013012:	78fb      	ldrb	r3, [r7, #3]
 8013014:	4619      	mov	r1, r3
 8013016:	f7f6 ff78 	bl	8009f0a <USBD_LL_DataInStage>
}
 801301a:	bf00      	nop
 801301c:	3708      	adds	r7, #8
 801301e:	46bd      	mov	sp, r7
 8013020:	bd80      	pop	{r7, pc}

08013022 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013022:	b580      	push	{r7, lr}
 8013024:	b082      	sub	sp, #8
 8013026:	af00      	add	r7, sp, #0
 8013028:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013030:	4618      	mov	r0, r3
 8013032:	f7f7 f8ac 	bl	800a18e <USBD_LL_SOF>
}
 8013036:	bf00      	nop
 8013038:	3708      	adds	r7, #8
 801303a:	46bd      	mov	sp, r7
 801303c:	bd80      	pop	{r7, pc}

0801303e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801303e:	b580      	push	{r7, lr}
 8013040:	b084      	sub	sp, #16
 8013042:	af00      	add	r7, sp, #0
 8013044:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013046:	2301      	movs	r3, #1
 8013048:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	68db      	ldr	r3, [r3, #12]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d102      	bne.n	8013058 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8013052:	2300      	movs	r3, #0
 8013054:	73fb      	strb	r3, [r7, #15]
 8013056:	e008      	b.n	801306a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	68db      	ldr	r3, [r3, #12]
 801305c:	2b02      	cmp	r3, #2
 801305e:	d102      	bne.n	8013066 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8013060:	2301      	movs	r3, #1
 8013062:	73fb      	strb	r3, [r7, #15]
 8013064:	e001      	b.n	801306a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8013066:	f7f0 fc09 	bl	800387c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013070:	7bfa      	ldrb	r2, [r7, #15]
 8013072:	4611      	mov	r1, r2
 8013074:	4618      	mov	r0, r3
 8013076:	f7f7 f84c 	bl	800a112 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013080:	4618      	mov	r0, r3
 8013082:	f7f6 fff4 	bl	800a06e <USBD_LL_Reset>
}
 8013086:	bf00      	nop
 8013088:	3710      	adds	r7, #16
 801308a:	46bd      	mov	sp, r7
 801308c:	bd80      	pop	{r7, pc}
	...

08013090 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b082      	sub	sp, #8
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801309e:	4618      	mov	r0, r3
 80130a0:	f7f7 f847 	bl	800a132 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	687a      	ldr	r2, [r7, #4]
 80130b0:	6812      	ldr	r2, [r2, #0]
 80130b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80130b6:	f043 0301 	orr.w	r3, r3, #1
 80130ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	6a1b      	ldr	r3, [r3, #32]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d005      	beq.n	80130d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80130c4:	4b04      	ldr	r3, [pc, #16]	; (80130d8 <HAL_PCD_SuspendCallback+0x48>)
 80130c6:	691b      	ldr	r3, [r3, #16]
 80130c8:	4a03      	ldr	r2, [pc, #12]	; (80130d8 <HAL_PCD_SuspendCallback+0x48>)
 80130ca:	f043 0306 	orr.w	r3, r3, #6
 80130ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80130d0:	bf00      	nop
 80130d2:	3708      	adds	r7, #8
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}
 80130d8:	e000ed00 	.word	0xe000ed00

080130dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b082      	sub	sp, #8
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80130ea:	4618      	mov	r0, r3
 80130ec:	f7f7 f837 	bl	800a15e <USBD_LL_Resume>
}
 80130f0:	bf00      	nop
 80130f2:	3708      	adds	r7, #8
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}

080130f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b082      	sub	sp, #8
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
 8013100:	460b      	mov	r3, r1
 8013102:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801310a:	78fa      	ldrb	r2, [r7, #3]
 801310c:	4611      	mov	r1, r2
 801310e:	4618      	mov	r0, r3
 8013110:	f7f7 f88f 	bl	800a232 <USBD_LL_IsoOUTIncomplete>
}
 8013114:	bf00      	nop
 8013116:	3708      	adds	r7, #8
 8013118:	46bd      	mov	sp, r7
 801311a:	bd80      	pop	{r7, pc}

0801311c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b082      	sub	sp, #8
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
 8013124:	460b      	mov	r3, r1
 8013126:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801312e:	78fa      	ldrb	r2, [r7, #3]
 8013130:	4611      	mov	r1, r2
 8013132:	4618      	mov	r0, r3
 8013134:	f7f7 f84b 	bl	800a1ce <USBD_LL_IsoINIncomplete>
}
 8013138:	bf00      	nop
 801313a:	3708      	adds	r7, #8
 801313c:	46bd      	mov	sp, r7
 801313e:	bd80      	pop	{r7, pc}

08013140 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b082      	sub	sp, #8
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801314e:	4618      	mov	r0, r3
 8013150:	f7f7 f8a1 	bl	800a296 <USBD_LL_DevConnected>
}
 8013154:	bf00      	nop
 8013156:	3708      	adds	r7, #8
 8013158:	46bd      	mov	sp, r7
 801315a:	bd80      	pop	{r7, pc}

0801315c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b082      	sub	sp, #8
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801316a:	4618      	mov	r0, r3
 801316c:	f7f7 f89e 	bl	800a2ac <USBD_LL_DevDisconnected>
}
 8013170:	bf00      	nop
 8013172:	3708      	adds	r7, #8
 8013174:	46bd      	mov	sp, r7
 8013176:	bd80      	pop	{r7, pc}

08013178 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b082      	sub	sp, #8
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	781b      	ldrb	r3, [r3, #0]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d13c      	bne.n	8013202 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013188:	4a20      	ldr	r2, [pc, #128]	; (801320c <USBD_LL_Init+0x94>)
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	4a1e      	ldr	r2, [pc, #120]	; (801320c <USBD_LL_Init+0x94>)
 8013194:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013198:	4b1c      	ldr	r3, [pc, #112]	; (801320c <USBD_LL_Init+0x94>)
 801319a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801319e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80131a0:	4b1a      	ldr	r3, [pc, #104]	; (801320c <USBD_LL_Init+0x94>)
 80131a2:	2204      	movs	r2, #4
 80131a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80131a6:	4b19      	ldr	r3, [pc, #100]	; (801320c <USBD_LL_Init+0x94>)
 80131a8:	2202      	movs	r2, #2
 80131aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80131ac:	4b17      	ldr	r3, [pc, #92]	; (801320c <USBD_LL_Init+0x94>)
 80131ae:	2200      	movs	r2, #0
 80131b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80131b2:	4b16      	ldr	r3, [pc, #88]	; (801320c <USBD_LL_Init+0x94>)
 80131b4:	2202      	movs	r2, #2
 80131b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80131b8:	4b14      	ldr	r3, [pc, #80]	; (801320c <USBD_LL_Init+0x94>)
 80131ba:	2200      	movs	r2, #0
 80131bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80131be:	4b13      	ldr	r3, [pc, #76]	; (801320c <USBD_LL_Init+0x94>)
 80131c0:	2200      	movs	r2, #0
 80131c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80131c4:	4b11      	ldr	r3, [pc, #68]	; (801320c <USBD_LL_Init+0x94>)
 80131c6:	2200      	movs	r2, #0
 80131c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80131ca:	4b10      	ldr	r3, [pc, #64]	; (801320c <USBD_LL_Init+0x94>)
 80131cc:	2200      	movs	r2, #0
 80131ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80131d0:	4b0e      	ldr	r3, [pc, #56]	; (801320c <USBD_LL_Init+0x94>)
 80131d2:	2200      	movs	r2, #0
 80131d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80131d6:	480d      	ldr	r0, [pc, #52]	; (801320c <USBD_LL_Init+0x94>)
 80131d8:	f7f2 fcca 	bl	8005b70 <HAL_PCD_Init>
 80131dc:	4603      	mov	r3, r0
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d001      	beq.n	80131e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80131e2:	f7f0 fb4b 	bl	800387c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80131e6:	2180      	movs	r1, #128	; 0x80
 80131e8:	4808      	ldr	r0, [pc, #32]	; (801320c <USBD_LL_Init+0x94>)
 80131ea:	f7f3 ff22 	bl	8007032 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80131ee:	2240      	movs	r2, #64	; 0x40
 80131f0:	2100      	movs	r1, #0
 80131f2:	4806      	ldr	r0, [pc, #24]	; (801320c <USBD_LL_Init+0x94>)
 80131f4:	f7f3 fed6 	bl	8006fa4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80131f8:	2280      	movs	r2, #128	; 0x80
 80131fa:	2101      	movs	r1, #1
 80131fc:	4803      	ldr	r0, [pc, #12]	; (801320c <USBD_LL_Init+0x94>)
 80131fe:	f7f3 fed1 	bl	8006fa4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013202:	2300      	movs	r3, #0
}
 8013204:	4618      	mov	r0, r3
 8013206:	3708      	adds	r7, #8
 8013208:	46bd      	mov	sp, r7
 801320a:	bd80      	pop	{r7, pc}
 801320c:	20002268 	.word	0x20002268

08013210 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013210:	b580      	push	{r7, lr}
 8013212:	b084      	sub	sp, #16
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013218:	2300      	movs	r3, #0
 801321a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801321c:	2300      	movs	r3, #0
 801321e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013226:	4618      	mov	r0, r3
 8013228:	f7f2 fdbf 	bl	8005daa <HAL_PCD_Start>
 801322c:	4603      	mov	r3, r0
 801322e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013230:	7bfb      	ldrb	r3, [r7, #15]
 8013232:	4618      	mov	r0, r3
 8013234:	f000 f942 	bl	80134bc <USBD_Get_USB_Status>
 8013238:	4603      	mov	r3, r0
 801323a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801323c:	7bbb      	ldrb	r3, [r7, #14]
}
 801323e:	4618      	mov	r0, r3
 8013240:	3710      	adds	r7, #16
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}

08013246 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013246:	b580      	push	{r7, lr}
 8013248:	b084      	sub	sp, #16
 801324a:	af00      	add	r7, sp, #0
 801324c:	6078      	str	r0, [r7, #4]
 801324e:	4608      	mov	r0, r1
 8013250:	4611      	mov	r1, r2
 8013252:	461a      	mov	r2, r3
 8013254:	4603      	mov	r3, r0
 8013256:	70fb      	strb	r3, [r7, #3]
 8013258:	460b      	mov	r3, r1
 801325a:	70bb      	strb	r3, [r7, #2]
 801325c:	4613      	mov	r3, r2
 801325e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013260:	2300      	movs	r3, #0
 8013262:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013264:	2300      	movs	r3, #0
 8013266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801326e:	78bb      	ldrb	r3, [r7, #2]
 8013270:	883a      	ldrh	r2, [r7, #0]
 8013272:	78f9      	ldrb	r1, [r7, #3]
 8013274:	f7f3 fa90 	bl	8006798 <HAL_PCD_EP_Open>
 8013278:	4603      	mov	r3, r0
 801327a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801327c:	7bfb      	ldrb	r3, [r7, #15]
 801327e:	4618      	mov	r0, r3
 8013280:	f000 f91c 	bl	80134bc <USBD_Get_USB_Status>
 8013284:	4603      	mov	r3, r0
 8013286:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013288:	7bbb      	ldrb	r3, [r7, #14]
}
 801328a:	4618      	mov	r0, r3
 801328c:	3710      	adds	r7, #16
 801328e:	46bd      	mov	sp, r7
 8013290:	bd80      	pop	{r7, pc}

08013292 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013292:	b580      	push	{r7, lr}
 8013294:	b084      	sub	sp, #16
 8013296:	af00      	add	r7, sp, #0
 8013298:	6078      	str	r0, [r7, #4]
 801329a:	460b      	mov	r3, r1
 801329c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801329e:	2300      	movs	r3, #0
 80132a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132a2:	2300      	movs	r3, #0
 80132a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80132ac:	78fa      	ldrb	r2, [r7, #3]
 80132ae:	4611      	mov	r1, r2
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7f3 fad9 	bl	8006868 <HAL_PCD_EP_Close>
 80132b6:	4603      	mov	r3, r0
 80132b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80132ba:	7bfb      	ldrb	r3, [r7, #15]
 80132bc:	4618      	mov	r0, r3
 80132be:	f000 f8fd 	bl	80134bc <USBD_Get_USB_Status>
 80132c2:	4603      	mov	r3, r0
 80132c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80132c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80132c8:	4618      	mov	r0, r3
 80132ca:	3710      	adds	r7, #16
 80132cc:	46bd      	mov	sp, r7
 80132ce:	bd80      	pop	{r7, pc}

080132d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b084      	sub	sp, #16
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
 80132d8:	460b      	mov	r3, r1
 80132da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132dc:	2300      	movs	r3, #0
 80132de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132e0:	2300      	movs	r3, #0
 80132e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80132ea:	78fa      	ldrb	r2, [r7, #3]
 80132ec:	4611      	mov	r1, r2
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7f3 fbb1 	bl	8006a56 <HAL_PCD_EP_SetStall>
 80132f4:	4603      	mov	r3, r0
 80132f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80132f8:	7bfb      	ldrb	r3, [r7, #15]
 80132fa:	4618      	mov	r0, r3
 80132fc:	f000 f8de 	bl	80134bc <USBD_Get_USB_Status>
 8013300:	4603      	mov	r3, r0
 8013302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013304:	7bbb      	ldrb	r3, [r7, #14]
}
 8013306:	4618      	mov	r0, r3
 8013308:	3710      	adds	r7, #16
 801330a:	46bd      	mov	sp, r7
 801330c:	bd80      	pop	{r7, pc}

0801330e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801330e:	b580      	push	{r7, lr}
 8013310:	b084      	sub	sp, #16
 8013312:	af00      	add	r7, sp, #0
 8013314:	6078      	str	r0, [r7, #4]
 8013316:	460b      	mov	r3, r1
 8013318:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801331a:	2300      	movs	r3, #0
 801331c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801331e:	2300      	movs	r3, #0
 8013320:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013328:	78fa      	ldrb	r2, [r7, #3]
 801332a:	4611      	mov	r1, r2
 801332c:	4618      	mov	r0, r3
 801332e:	f7f3 fbf6 	bl	8006b1e <HAL_PCD_EP_ClrStall>
 8013332:	4603      	mov	r3, r0
 8013334:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013336:	7bfb      	ldrb	r3, [r7, #15]
 8013338:	4618      	mov	r0, r3
 801333a:	f000 f8bf 	bl	80134bc <USBD_Get_USB_Status>
 801333e:	4603      	mov	r3, r0
 8013340:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013342:	7bbb      	ldrb	r3, [r7, #14]
}
 8013344:	4618      	mov	r0, r3
 8013346:	3710      	adds	r7, #16
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}

0801334c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801334c:	b480      	push	{r7}
 801334e:	b085      	sub	sp, #20
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
 8013354:	460b      	mov	r3, r1
 8013356:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801335e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013360:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013364:	2b00      	cmp	r3, #0
 8013366:	da0b      	bge.n	8013380 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013368:	78fb      	ldrb	r3, [r7, #3]
 801336a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801336e:	68f9      	ldr	r1, [r7, #12]
 8013370:	4613      	mov	r3, r2
 8013372:	00db      	lsls	r3, r3, #3
 8013374:	4413      	add	r3, r2
 8013376:	009b      	lsls	r3, r3, #2
 8013378:	440b      	add	r3, r1
 801337a:	333e      	adds	r3, #62	; 0x3e
 801337c:	781b      	ldrb	r3, [r3, #0]
 801337e:	e00b      	b.n	8013398 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013380:	78fb      	ldrb	r3, [r7, #3]
 8013382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013386:	68f9      	ldr	r1, [r7, #12]
 8013388:	4613      	mov	r3, r2
 801338a:	00db      	lsls	r3, r3, #3
 801338c:	4413      	add	r3, r2
 801338e:	009b      	lsls	r3, r3, #2
 8013390:	440b      	add	r3, r1
 8013392:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8013396:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013398:	4618      	mov	r0, r3
 801339a:	3714      	adds	r7, #20
 801339c:	46bd      	mov	sp, r7
 801339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a2:	4770      	bx	lr

080133a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b084      	sub	sp, #16
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
 80133ac:	460b      	mov	r3, r1
 80133ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133b0:	2300      	movs	r3, #0
 80133b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133b4:	2300      	movs	r3, #0
 80133b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80133be:	78fa      	ldrb	r2, [r7, #3]
 80133c0:	4611      	mov	r1, r2
 80133c2:	4618      	mov	r0, r3
 80133c4:	f7f3 f9c3 	bl	800674e <HAL_PCD_SetAddress>
 80133c8:	4603      	mov	r3, r0
 80133ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80133cc:	7bfb      	ldrb	r3, [r7, #15]
 80133ce:	4618      	mov	r0, r3
 80133d0:	f000 f874 	bl	80134bc <USBD_Get_USB_Status>
 80133d4:	4603      	mov	r3, r0
 80133d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80133d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80133da:	4618      	mov	r0, r3
 80133dc:	3710      	adds	r7, #16
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}

080133e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80133e2:	b580      	push	{r7, lr}
 80133e4:	b086      	sub	sp, #24
 80133e6:	af00      	add	r7, sp, #0
 80133e8:	60f8      	str	r0, [r7, #12]
 80133ea:	607a      	str	r2, [r7, #4]
 80133ec:	603b      	str	r3, [r7, #0]
 80133ee:	460b      	mov	r3, r1
 80133f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133f2:	2300      	movs	r3, #0
 80133f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133f6:	2300      	movs	r3, #0
 80133f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013400:	7af9      	ldrb	r1, [r7, #11]
 8013402:	683b      	ldr	r3, [r7, #0]
 8013404:	687a      	ldr	r2, [r7, #4]
 8013406:	f7f3 fadc 	bl	80069c2 <HAL_PCD_EP_Transmit>
 801340a:	4603      	mov	r3, r0
 801340c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801340e:	7dfb      	ldrb	r3, [r7, #23]
 8013410:	4618      	mov	r0, r3
 8013412:	f000 f853 	bl	80134bc <USBD_Get_USB_Status>
 8013416:	4603      	mov	r3, r0
 8013418:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801341a:	7dbb      	ldrb	r3, [r7, #22]
}
 801341c:	4618      	mov	r0, r3
 801341e:	3718      	adds	r7, #24
 8013420:	46bd      	mov	sp, r7
 8013422:	bd80      	pop	{r7, pc}

08013424 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b086      	sub	sp, #24
 8013428:	af00      	add	r7, sp, #0
 801342a:	60f8      	str	r0, [r7, #12]
 801342c:	607a      	str	r2, [r7, #4]
 801342e:	603b      	str	r3, [r7, #0]
 8013430:	460b      	mov	r3, r1
 8013432:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013434:	2300      	movs	r3, #0
 8013436:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013438:	2300      	movs	r3, #0
 801343a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013442:	7af9      	ldrb	r1, [r7, #11]
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	687a      	ldr	r2, [r7, #4]
 8013448:	f7f3 fa58 	bl	80068fc <HAL_PCD_EP_Receive>
 801344c:	4603      	mov	r3, r0
 801344e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013450:	7dfb      	ldrb	r3, [r7, #23]
 8013452:	4618      	mov	r0, r3
 8013454:	f000 f832 	bl	80134bc <USBD_Get_USB_Status>
 8013458:	4603      	mov	r3, r0
 801345a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801345c:	7dbb      	ldrb	r3, [r7, #22]
}
 801345e:	4618      	mov	r0, r3
 8013460:	3718      	adds	r7, #24
 8013462:	46bd      	mov	sp, r7
 8013464:	bd80      	pop	{r7, pc}

08013466 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013466:	b580      	push	{r7, lr}
 8013468:	b082      	sub	sp, #8
 801346a:	af00      	add	r7, sp, #0
 801346c:	6078      	str	r0, [r7, #4]
 801346e:	460b      	mov	r3, r1
 8013470:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013478:	78fa      	ldrb	r2, [r7, #3]
 801347a:	4611      	mov	r1, r2
 801347c:	4618      	mov	r0, r3
 801347e:	f7f3 fa88 	bl	8006992 <HAL_PCD_EP_GetRxCount>
 8013482:	4603      	mov	r3, r0
}
 8013484:	4618      	mov	r0, r3
 8013486:	3708      	adds	r7, #8
 8013488:	46bd      	mov	sp, r7
 801348a:	bd80      	pop	{r7, pc}

0801348c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801348c:	b480      	push	{r7}
 801348e:	b083      	sub	sp, #12
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013494:	4b03      	ldr	r3, [pc, #12]	; (80134a4 <USBD_static_malloc+0x18>)
}
 8013496:	4618      	mov	r0, r3
 8013498:	370c      	adds	r7, #12
 801349a:	46bd      	mov	sp, r7
 801349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a0:	4770      	bx	lr
 80134a2:	bf00      	nop
 80134a4:	20002774 	.word	0x20002774

080134a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80134a8:	b480      	push	{r7}
 80134aa:	b083      	sub	sp, #12
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]

}
 80134b0:	bf00      	nop
 80134b2:	370c      	adds	r7, #12
 80134b4:	46bd      	mov	sp, r7
 80134b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ba:	4770      	bx	lr

080134bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80134bc:	b480      	push	{r7}
 80134be:	b085      	sub	sp, #20
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	4603      	mov	r3, r0
 80134c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134c6:	2300      	movs	r3, #0
 80134c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80134ca:	79fb      	ldrb	r3, [r7, #7]
 80134cc:	2b03      	cmp	r3, #3
 80134ce:	d817      	bhi.n	8013500 <USBD_Get_USB_Status+0x44>
 80134d0:	a201      	add	r2, pc, #4	; (adr r2, 80134d8 <USBD_Get_USB_Status+0x1c>)
 80134d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134d6:	bf00      	nop
 80134d8:	080134e9 	.word	0x080134e9
 80134dc:	080134ef 	.word	0x080134ef
 80134e0:	080134f5 	.word	0x080134f5
 80134e4:	080134fb 	.word	0x080134fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80134e8:	2300      	movs	r3, #0
 80134ea:	73fb      	strb	r3, [r7, #15]
    break;
 80134ec:	e00b      	b.n	8013506 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80134ee:	2303      	movs	r3, #3
 80134f0:	73fb      	strb	r3, [r7, #15]
    break;
 80134f2:	e008      	b.n	8013506 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80134f4:	2301      	movs	r3, #1
 80134f6:	73fb      	strb	r3, [r7, #15]
    break;
 80134f8:	e005      	b.n	8013506 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80134fa:	2303      	movs	r3, #3
 80134fc:	73fb      	strb	r3, [r7, #15]
    break;
 80134fe:	e002      	b.n	8013506 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013500:	2303      	movs	r3, #3
 8013502:	73fb      	strb	r3, [r7, #15]
    break;
 8013504:	bf00      	nop
  }
  return usb_status;
 8013506:	7bfb      	ldrb	r3, [r7, #15]
}
 8013508:	4618      	mov	r0, r3
 801350a:	3714      	adds	r7, #20
 801350c:	46bd      	mov	sp, r7
 801350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013512:	4770      	bx	lr

08013514 <_ZdlPvj>:
 8013514:	f000 b81b 	b.w	801354e <_ZdlPv>

08013518 <_ZdaPv>:
 8013518:	f000 b819 	b.w	801354e <_ZdlPv>

0801351c <_Znwj>:
 801351c:	2801      	cmp	r0, #1
 801351e:	bf38      	it	cc
 8013520:	2001      	movcc	r0, #1
 8013522:	b510      	push	{r4, lr}
 8013524:	4604      	mov	r4, r0
 8013526:	4620      	mov	r0, r4
 8013528:	f001 fa70 	bl	8014a0c <malloc>
 801352c:	b930      	cbnz	r0, 801353c <_Znwj+0x20>
 801352e:	f000 f811 	bl	8013554 <_ZSt15get_new_handlerv>
 8013532:	b908      	cbnz	r0, 8013538 <_Znwj+0x1c>
 8013534:	f001 f9fc 	bl	8014930 <abort>
 8013538:	4780      	blx	r0
 801353a:	e7f4      	b.n	8013526 <_Znwj+0xa>
 801353c:	bd10      	pop	{r4, pc}

0801353e <_Znaj>:
 801353e:	f7ff bfed 	b.w	801351c <_Znwj>

08013542 <_ZSt17__throw_bad_allocv>:
 8013542:	b508      	push	{r3, lr}
 8013544:	f001 f9f4 	bl	8014930 <abort>

08013548 <_ZSt20__throw_length_errorPKc>:
 8013548:	b508      	push	{r3, lr}
 801354a:	f001 f9f1 	bl	8014930 <abort>

0801354e <_ZdlPv>:
 801354e:	f001 ba65 	b.w	8014a1c <free>
	...

08013554 <_ZSt15get_new_handlerv>:
 8013554:	4b02      	ldr	r3, [pc, #8]	; (8013560 <_ZSt15get_new_handlerv+0xc>)
 8013556:	6818      	ldr	r0, [r3, #0]
 8013558:	f3bf 8f5b 	dmb	ish
 801355c:	4770      	bx	lr
 801355e:	bf00      	nop
 8013560:	20002994 	.word	0x20002994
 8013564:	00000000 	.word	0x00000000

08013568 <floor>:
 8013568:	ec51 0b10 	vmov	r0, r1, d0
 801356c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013570:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8013574:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013578:	2e13      	cmp	r6, #19
 801357a:	ee10 5a10 	vmov	r5, s0
 801357e:	ee10 8a10 	vmov	r8, s0
 8013582:	460c      	mov	r4, r1
 8013584:	dc32      	bgt.n	80135ec <floor+0x84>
 8013586:	2e00      	cmp	r6, #0
 8013588:	da14      	bge.n	80135b4 <floor+0x4c>
 801358a:	a333      	add	r3, pc, #204	; (adr r3, 8013658 <floor+0xf0>)
 801358c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013590:	f7ec fe86 	bl	80002a0 <__adddf3>
 8013594:	2200      	movs	r2, #0
 8013596:	2300      	movs	r3, #0
 8013598:	f7ed fac8 	bl	8000b2c <__aeabi_dcmpgt>
 801359c:	b138      	cbz	r0, 80135ae <floor+0x46>
 801359e:	2c00      	cmp	r4, #0
 80135a0:	da57      	bge.n	8013652 <floor+0xea>
 80135a2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80135a6:	431d      	orrs	r5, r3
 80135a8:	d001      	beq.n	80135ae <floor+0x46>
 80135aa:	4c2d      	ldr	r4, [pc, #180]	; (8013660 <floor+0xf8>)
 80135ac:	2500      	movs	r5, #0
 80135ae:	4621      	mov	r1, r4
 80135b0:	4628      	mov	r0, r5
 80135b2:	e025      	b.n	8013600 <floor+0x98>
 80135b4:	4f2b      	ldr	r7, [pc, #172]	; (8013664 <floor+0xfc>)
 80135b6:	4137      	asrs	r7, r6
 80135b8:	ea01 0307 	and.w	r3, r1, r7
 80135bc:	4303      	orrs	r3, r0
 80135be:	d01f      	beq.n	8013600 <floor+0x98>
 80135c0:	a325      	add	r3, pc, #148	; (adr r3, 8013658 <floor+0xf0>)
 80135c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135c6:	f7ec fe6b 	bl	80002a0 <__adddf3>
 80135ca:	2200      	movs	r2, #0
 80135cc:	2300      	movs	r3, #0
 80135ce:	f7ed faad 	bl	8000b2c <__aeabi_dcmpgt>
 80135d2:	2800      	cmp	r0, #0
 80135d4:	d0eb      	beq.n	80135ae <floor+0x46>
 80135d6:	2c00      	cmp	r4, #0
 80135d8:	bfbe      	ittt	lt
 80135da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80135de:	fa43 f606 	asrlt.w	r6, r3, r6
 80135e2:	19a4      	addlt	r4, r4, r6
 80135e4:	ea24 0407 	bic.w	r4, r4, r7
 80135e8:	2500      	movs	r5, #0
 80135ea:	e7e0      	b.n	80135ae <floor+0x46>
 80135ec:	2e33      	cmp	r6, #51	; 0x33
 80135ee:	dd0b      	ble.n	8013608 <floor+0xa0>
 80135f0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80135f4:	d104      	bne.n	8013600 <floor+0x98>
 80135f6:	ee10 2a10 	vmov	r2, s0
 80135fa:	460b      	mov	r3, r1
 80135fc:	f7ec fe50 	bl	80002a0 <__adddf3>
 8013600:	ec41 0b10 	vmov	d0, r0, r1
 8013604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013608:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801360c:	f04f 33ff 	mov.w	r3, #4294967295
 8013610:	fa23 f707 	lsr.w	r7, r3, r7
 8013614:	4207      	tst	r7, r0
 8013616:	d0f3      	beq.n	8013600 <floor+0x98>
 8013618:	a30f      	add	r3, pc, #60	; (adr r3, 8013658 <floor+0xf0>)
 801361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801361e:	f7ec fe3f 	bl	80002a0 <__adddf3>
 8013622:	2200      	movs	r2, #0
 8013624:	2300      	movs	r3, #0
 8013626:	f7ed fa81 	bl	8000b2c <__aeabi_dcmpgt>
 801362a:	2800      	cmp	r0, #0
 801362c:	d0bf      	beq.n	80135ae <floor+0x46>
 801362e:	2c00      	cmp	r4, #0
 8013630:	da02      	bge.n	8013638 <floor+0xd0>
 8013632:	2e14      	cmp	r6, #20
 8013634:	d103      	bne.n	801363e <floor+0xd6>
 8013636:	3401      	adds	r4, #1
 8013638:	ea25 0507 	bic.w	r5, r5, r7
 801363c:	e7b7      	b.n	80135ae <floor+0x46>
 801363e:	2301      	movs	r3, #1
 8013640:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013644:	fa03 f606 	lsl.w	r6, r3, r6
 8013648:	4435      	add	r5, r6
 801364a:	4545      	cmp	r5, r8
 801364c:	bf38      	it	cc
 801364e:	18e4      	addcc	r4, r4, r3
 8013650:	e7f2      	b.n	8013638 <floor+0xd0>
 8013652:	2500      	movs	r5, #0
 8013654:	462c      	mov	r4, r5
 8013656:	e7aa      	b.n	80135ae <floor+0x46>
 8013658:	8800759c 	.word	0x8800759c
 801365c:	7e37e43c 	.word	0x7e37e43c
 8013660:	bff00000 	.word	0xbff00000
 8013664:	000fffff 	.word	0x000fffff

08013668 <frexp>:
 8013668:	b570      	push	{r4, r5, r6, lr}
 801366a:	2100      	movs	r1, #0
 801366c:	ec55 4b10 	vmov	r4, r5, d0
 8013670:	6001      	str	r1, [r0, #0]
 8013672:	4916      	ldr	r1, [pc, #88]	; (80136cc <frexp+0x64>)
 8013674:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8013678:	428a      	cmp	r2, r1
 801367a:	4606      	mov	r6, r0
 801367c:	462b      	mov	r3, r5
 801367e:	dc22      	bgt.n	80136c6 <frexp+0x5e>
 8013680:	ee10 1a10 	vmov	r1, s0
 8013684:	4311      	orrs	r1, r2
 8013686:	d01e      	beq.n	80136c6 <frexp+0x5e>
 8013688:	4911      	ldr	r1, [pc, #68]	; (80136d0 <frexp+0x68>)
 801368a:	4029      	ands	r1, r5
 801368c:	b969      	cbnz	r1, 80136aa <frexp+0x42>
 801368e:	4b11      	ldr	r3, [pc, #68]	; (80136d4 <frexp+0x6c>)
 8013690:	2200      	movs	r2, #0
 8013692:	ee10 0a10 	vmov	r0, s0
 8013696:	4629      	mov	r1, r5
 8013698:	f7ec ffb8 	bl	800060c <__aeabi_dmul>
 801369c:	460b      	mov	r3, r1
 801369e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80136a2:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80136a6:	4604      	mov	r4, r0
 80136a8:	6031      	str	r1, [r6, #0]
 80136aa:	6831      	ldr	r1, [r6, #0]
 80136ac:	1512      	asrs	r2, r2, #20
 80136ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80136b2:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 80136b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80136ba:	440a      	add	r2, r1
 80136bc:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 80136c0:	6032      	str	r2, [r6, #0]
 80136c2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80136c6:	ec45 4b10 	vmov	d0, r4, r5
 80136ca:	bd70      	pop	{r4, r5, r6, pc}
 80136cc:	7fefffff 	.word	0x7fefffff
 80136d0:	7ff00000 	.word	0x7ff00000
 80136d4:	43500000 	.word	0x43500000

080136d8 <round>:
 80136d8:	ec51 0b10 	vmov	r0, r1, d0
 80136dc:	b570      	push	{r4, r5, r6, lr}
 80136de:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80136e2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80136e6:	2c13      	cmp	r4, #19
 80136e8:	ee10 2a10 	vmov	r2, s0
 80136ec:	460b      	mov	r3, r1
 80136ee:	dc19      	bgt.n	8013724 <round+0x4c>
 80136f0:	2c00      	cmp	r4, #0
 80136f2:	da09      	bge.n	8013708 <round+0x30>
 80136f4:	3401      	adds	r4, #1
 80136f6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80136fa:	d103      	bne.n	8013704 <round+0x2c>
 80136fc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8013700:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013704:	2200      	movs	r2, #0
 8013706:	e028      	b.n	801375a <round+0x82>
 8013708:	4d15      	ldr	r5, [pc, #84]	; (8013760 <round+0x88>)
 801370a:	4125      	asrs	r5, r4
 801370c:	ea01 0605 	and.w	r6, r1, r5
 8013710:	4332      	orrs	r2, r6
 8013712:	d00e      	beq.n	8013732 <round+0x5a>
 8013714:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013718:	fa42 f404 	asr.w	r4, r2, r4
 801371c:	4423      	add	r3, r4
 801371e:	ea23 0305 	bic.w	r3, r3, r5
 8013722:	e7ef      	b.n	8013704 <round+0x2c>
 8013724:	2c33      	cmp	r4, #51	; 0x33
 8013726:	dd07      	ble.n	8013738 <round+0x60>
 8013728:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801372c:	d101      	bne.n	8013732 <round+0x5a>
 801372e:	f7ec fdb7 	bl	80002a0 <__adddf3>
 8013732:	ec41 0b10 	vmov	d0, r0, r1
 8013736:	bd70      	pop	{r4, r5, r6, pc}
 8013738:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801373c:	f04f 35ff 	mov.w	r5, #4294967295
 8013740:	40f5      	lsrs	r5, r6
 8013742:	4228      	tst	r0, r5
 8013744:	d0f5      	beq.n	8013732 <round+0x5a>
 8013746:	2101      	movs	r1, #1
 8013748:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801374c:	fa01 f404 	lsl.w	r4, r1, r4
 8013750:	1912      	adds	r2, r2, r4
 8013752:	bf28      	it	cs
 8013754:	185b      	addcs	r3, r3, r1
 8013756:	ea22 0205 	bic.w	r2, r2, r5
 801375a:	4619      	mov	r1, r3
 801375c:	4610      	mov	r0, r2
 801375e:	e7e8      	b.n	8013732 <round+0x5a>
 8013760:	000fffff 	.word	0x000fffff

08013764 <roundf>:
 8013764:	ee10 0a10 	vmov	r0, s0
 8013768:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801376c:	3a7f      	subs	r2, #127	; 0x7f
 801376e:	2a16      	cmp	r2, #22
 8013770:	dc15      	bgt.n	801379e <roundf+0x3a>
 8013772:	2a00      	cmp	r2, #0
 8013774:	da08      	bge.n	8013788 <roundf+0x24>
 8013776:	3201      	adds	r2, #1
 8013778:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801377c:	d101      	bne.n	8013782 <roundf+0x1e>
 801377e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8013782:	ee00 3a10 	vmov	s0, r3
 8013786:	4770      	bx	lr
 8013788:	4907      	ldr	r1, [pc, #28]	; (80137a8 <roundf+0x44>)
 801378a:	4111      	asrs	r1, r2
 801378c:	4208      	tst	r0, r1
 801378e:	d0fa      	beq.n	8013786 <roundf+0x22>
 8013790:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013794:	4113      	asrs	r3, r2
 8013796:	4403      	add	r3, r0
 8013798:	ea23 0301 	bic.w	r3, r3, r1
 801379c:	e7f1      	b.n	8013782 <roundf+0x1e>
 801379e:	2a80      	cmp	r2, #128	; 0x80
 80137a0:	d1f1      	bne.n	8013786 <roundf+0x22>
 80137a2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80137a6:	4770      	bx	lr
 80137a8:	007fffff 	.word	0x007fffff

080137ac <pow>:
 80137ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137ae:	ed2d 8b02 	vpush	{d8}
 80137b2:	eeb0 8a40 	vmov.f32	s16, s0
 80137b6:	eef0 8a60 	vmov.f32	s17, s1
 80137ba:	ec55 4b11 	vmov	r4, r5, d1
 80137be:	f000 f8b3 	bl	8013928 <__ieee754_pow>
 80137c2:	4622      	mov	r2, r4
 80137c4:	462b      	mov	r3, r5
 80137c6:	4620      	mov	r0, r4
 80137c8:	4629      	mov	r1, r5
 80137ca:	ec57 6b10 	vmov	r6, r7, d0
 80137ce:	f7ed f9b7 	bl	8000b40 <__aeabi_dcmpun>
 80137d2:	2800      	cmp	r0, #0
 80137d4:	d13b      	bne.n	801384e <pow+0xa2>
 80137d6:	ec51 0b18 	vmov	r0, r1, d8
 80137da:	2200      	movs	r2, #0
 80137dc:	2300      	movs	r3, #0
 80137de:	f7ed f97d 	bl	8000adc <__aeabi_dcmpeq>
 80137e2:	b1b8      	cbz	r0, 8013814 <pow+0x68>
 80137e4:	2200      	movs	r2, #0
 80137e6:	2300      	movs	r3, #0
 80137e8:	4620      	mov	r0, r4
 80137ea:	4629      	mov	r1, r5
 80137ec:	f7ed f976 	bl	8000adc <__aeabi_dcmpeq>
 80137f0:	2800      	cmp	r0, #0
 80137f2:	d146      	bne.n	8013882 <pow+0xd6>
 80137f4:	ec45 4b10 	vmov	d0, r4, r5
 80137f8:	f000 fffa 	bl	80147f0 <finite>
 80137fc:	b338      	cbz	r0, 801384e <pow+0xa2>
 80137fe:	2200      	movs	r2, #0
 8013800:	2300      	movs	r3, #0
 8013802:	4620      	mov	r0, r4
 8013804:	4629      	mov	r1, r5
 8013806:	f7ed f973 	bl	8000af0 <__aeabi_dcmplt>
 801380a:	b300      	cbz	r0, 801384e <pow+0xa2>
 801380c:	f001 f8be 	bl	801498c <__errno>
 8013810:	2322      	movs	r3, #34	; 0x22
 8013812:	e01b      	b.n	801384c <pow+0xa0>
 8013814:	ec47 6b10 	vmov	d0, r6, r7
 8013818:	f000 ffea 	bl	80147f0 <finite>
 801381c:	b9e0      	cbnz	r0, 8013858 <pow+0xac>
 801381e:	eeb0 0a48 	vmov.f32	s0, s16
 8013822:	eef0 0a68 	vmov.f32	s1, s17
 8013826:	f000 ffe3 	bl	80147f0 <finite>
 801382a:	b1a8      	cbz	r0, 8013858 <pow+0xac>
 801382c:	ec45 4b10 	vmov	d0, r4, r5
 8013830:	f000 ffde 	bl	80147f0 <finite>
 8013834:	b180      	cbz	r0, 8013858 <pow+0xac>
 8013836:	4632      	mov	r2, r6
 8013838:	463b      	mov	r3, r7
 801383a:	4630      	mov	r0, r6
 801383c:	4639      	mov	r1, r7
 801383e:	f7ed f97f 	bl	8000b40 <__aeabi_dcmpun>
 8013842:	2800      	cmp	r0, #0
 8013844:	d0e2      	beq.n	801380c <pow+0x60>
 8013846:	f001 f8a1 	bl	801498c <__errno>
 801384a:	2321      	movs	r3, #33	; 0x21
 801384c:	6003      	str	r3, [r0, #0]
 801384e:	ecbd 8b02 	vpop	{d8}
 8013852:	ec47 6b10 	vmov	d0, r6, r7
 8013856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013858:	2200      	movs	r2, #0
 801385a:	2300      	movs	r3, #0
 801385c:	4630      	mov	r0, r6
 801385e:	4639      	mov	r1, r7
 8013860:	f7ed f93c 	bl	8000adc <__aeabi_dcmpeq>
 8013864:	2800      	cmp	r0, #0
 8013866:	d0f2      	beq.n	801384e <pow+0xa2>
 8013868:	eeb0 0a48 	vmov.f32	s0, s16
 801386c:	eef0 0a68 	vmov.f32	s1, s17
 8013870:	f000 ffbe 	bl	80147f0 <finite>
 8013874:	2800      	cmp	r0, #0
 8013876:	d0ea      	beq.n	801384e <pow+0xa2>
 8013878:	ec45 4b10 	vmov	d0, r4, r5
 801387c:	f000 ffb8 	bl	80147f0 <finite>
 8013880:	e7c3      	b.n	801380a <pow+0x5e>
 8013882:	4f01      	ldr	r7, [pc, #4]	; (8013888 <pow+0xdc>)
 8013884:	2600      	movs	r6, #0
 8013886:	e7e2      	b.n	801384e <pow+0xa2>
 8013888:	3ff00000 	.word	0x3ff00000

0801388c <log10f>:
 801388c:	b508      	push	{r3, lr}
 801388e:	ed2d 8b02 	vpush	{d8}
 8013892:	eeb0 8a40 	vmov.f32	s16, s0
 8013896:	f000 ff17 	bl	80146c8 <__ieee754_log10f>
 801389a:	eeb4 8a48 	vcmp.f32	s16, s16
 801389e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138a2:	d60f      	bvs.n	80138c4 <log10f+0x38>
 80138a4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80138a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ac:	d80a      	bhi.n	80138c4 <log10f+0x38>
 80138ae:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80138b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138b6:	d108      	bne.n	80138ca <log10f+0x3e>
 80138b8:	f001 f868 	bl	801498c <__errno>
 80138bc:	2322      	movs	r3, #34	; 0x22
 80138be:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80138e0 <log10f+0x54>
 80138c2:	6003      	str	r3, [r0, #0]
 80138c4:	ecbd 8b02 	vpop	{d8}
 80138c8:	bd08      	pop	{r3, pc}
 80138ca:	f001 f85f 	bl	801498c <__errno>
 80138ce:	ecbd 8b02 	vpop	{d8}
 80138d2:	2321      	movs	r3, #33	; 0x21
 80138d4:	6003      	str	r3, [r0, #0]
 80138d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80138da:	4802      	ldr	r0, [pc, #8]	; (80138e4 <log10f+0x58>)
 80138dc:	f001 b822 	b.w	8014924 <nanf>
 80138e0:	ff800000 	.word	0xff800000
 80138e4:	08059b0b 	.word	0x08059b0b

080138e8 <sqrtf>:
 80138e8:	b508      	push	{r3, lr}
 80138ea:	ed2d 8b02 	vpush	{d8}
 80138ee:	eeb0 8a40 	vmov.f32	s16, s0
 80138f2:	f000 ff41 	bl	8014778 <__ieee754_sqrtf>
 80138f6:	eeb4 8a48 	vcmp.f32	s16, s16
 80138fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138fe:	d60c      	bvs.n	801391a <sqrtf+0x32>
 8013900:	eddf 8a07 	vldr	s17, [pc, #28]	; 8013920 <sqrtf+0x38>
 8013904:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801390c:	d505      	bpl.n	801391a <sqrtf+0x32>
 801390e:	f001 f83d 	bl	801498c <__errno>
 8013912:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8013916:	2321      	movs	r3, #33	; 0x21
 8013918:	6003      	str	r3, [r0, #0]
 801391a:	ecbd 8b02 	vpop	{d8}
 801391e:	bd08      	pop	{r3, pc}
	...

08013928 <__ieee754_pow>:
 8013928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801392c:	ed2d 8b06 	vpush	{d8-d10}
 8013930:	b089      	sub	sp, #36	; 0x24
 8013932:	ed8d 1b00 	vstr	d1, [sp]
 8013936:	e9dd 2900 	ldrd	r2, r9, [sp]
 801393a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801393e:	ea58 0102 	orrs.w	r1, r8, r2
 8013942:	ec57 6b10 	vmov	r6, r7, d0
 8013946:	d115      	bne.n	8013974 <__ieee754_pow+0x4c>
 8013948:	19b3      	adds	r3, r6, r6
 801394a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801394e:	4152      	adcs	r2, r2
 8013950:	4299      	cmp	r1, r3
 8013952:	4b89      	ldr	r3, [pc, #548]	; (8013b78 <__ieee754_pow+0x250>)
 8013954:	4193      	sbcs	r3, r2
 8013956:	f080 84d2 	bcs.w	80142fe <__ieee754_pow+0x9d6>
 801395a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801395e:	4630      	mov	r0, r6
 8013960:	4639      	mov	r1, r7
 8013962:	f7ec fc9d 	bl	80002a0 <__adddf3>
 8013966:	ec41 0b10 	vmov	d0, r0, r1
 801396a:	b009      	add	sp, #36	; 0x24
 801396c:	ecbd 8b06 	vpop	{d8-d10}
 8013970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013974:	4b81      	ldr	r3, [pc, #516]	; (8013b7c <__ieee754_pow+0x254>)
 8013976:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801397a:	429c      	cmp	r4, r3
 801397c:	ee10 aa10 	vmov	sl, s0
 8013980:	463d      	mov	r5, r7
 8013982:	dc06      	bgt.n	8013992 <__ieee754_pow+0x6a>
 8013984:	d101      	bne.n	801398a <__ieee754_pow+0x62>
 8013986:	2e00      	cmp	r6, #0
 8013988:	d1e7      	bne.n	801395a <__ieee754_pow+0x32>
 801398a:	4598      	cmp	r8, r3
 801398c:	dc01      	bgt.n	8013992 <__ieee754_pow+0x6a>
 801398e:	d10f      	bne.n	80139b0 <__ieee754_pow+0x88>
 8013990:	b172      	cbz	r2, 80139b0 <__ieee754_pow+0x88>
 8013992:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8013996:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801399a:	ea55 050a 	orrs.w	r5, r5, sl
 801399e:	d1dc      	bne.n	801395a <__ieee754_pow+0x32>
 80139a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80139a4:	18db      	adds	r3, r3, r3
 80139a6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80139aa:	4152      	adcs	r2, r2
 80139ac:	429d      	cmp	r5, r3
 80139ae:	e7d0      	b.n	8013952 <__ieee754_pow+0x2a>
 80139b0:	2d00      	cmp	r5, #0
 80139b2:	da3b      	bge.n	8013a2c <__ieee754_pow+0x104>
 80139b4:	4b72      	ldr	r3, [pc, #456]	; (8013b80 <__ieee754_pow+0x258>)
 80139b6:	4598      	cmp	r8, r3
 80139b8:	dc51      	bgt.n	8013a5e <__ieee754_pow+0x136>
 80139ba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80139be:	4598      	cmp	r8, r3
 80139c0:	f340 84ac 	ble.w	801431c <__ieee754_pow+0x9f4>
 80139c4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80139c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80139cc:	2b14      	cmp	r3, #20
 80139ce:	dd0f      	ble.n	80139f0 <__ieee754_pow+0xc8>
 80139d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80139d4:	fa22 f103 	lsr.w	r1, r2, r3
 80139d8:	fa01 f303 	lsl.w	r3, r1, r3
 80139dc:	4293      	cmp	r3, r2
 80139de:	f040 849d 	bne.w	801431c <__ieee754_pow+0x9f4>
 80139e2:	f001 0101 	and.w	r1, r1, #1
 80139e6:	f1c1 0302 	rsb	r3, r1, #2
 80139ea:	9304      	str	r3, [sp, #16]
 80139ec:	b182      	cbz	r2, 8013a10 <__ieee754_pow+0xe8>
 80139ee:	e05f      	b.n	8013ab0 <__ieee754_pow+0x188>
 80139f0:	2a00      	cmp	r2, #0
 80139f2:	d15b      	bne.n	8013aac <__ieee754_pow+0x184>
 80139f4:	f1c3 0314 	rsb	r3, r3, #20
 80139f8:	fa48 f103 	asr.w	r1, r8, r3
 80139fc:	fa01 f303 	lsl.w	r3, r1, r3
 8013a00:	4543      	cmp	r3, r8
 8013a02:	f040 8488 	bne.w	8014316 <__ieee754_pow+0x9ee>
 8013a06:	f001 0101 	and.w	r1, r1, #1
 8013a0a:	f1c1 0302 	rsb	r3, r1, #2
 8013a0e:	9304      	str	r3, [sp, #16]
 8013a10:	4b5c      	ldr	r3, [pc, #368]	; (8013b84 <__ieee754_pow+0x25c>)
 8013a12:	4598      	cmp	r8, r3
 8013a14:	d132      	bne.n	8013a7c <__ieee754_pow+0x154>
 8013a16:	f1b9 0f00 	cmp.w	r9, #0
 8013a1a:	f280 8478 	bge.w	801430e <__ieee754_pow+0x9e6>
 8013a1e:	4959      	ldr	r1, [pc, #356]	; (8013b84 <__ieee754_pow+0x25c>)
 8013a20:	4632      	mov	r2, r6
 8013a22:	463b      	mov	r3, r7
 8013a24:	2000      	movs	r0, #0
 8013a26:	f7ec ff1b 	bl	8000860 <__aeabi_ddiv>
 8013a2a:	e79c      	b.n	8013966 <__ieee754_pow+0x3e>
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	9304      	str	r3, [sp, #16]
 8013a30:	2a00      	cmp	r2, #0
 8013a32:	d13d      	bne.n	8013ab0 <__ieee754_pow+0x188>
 8013a34:	4b51      	ldr	r3, [pc, #324]	; (8013b7c <__ieee754_pow+0x254>)
 8013a36:	4598      	cmp	r8, r3
 8013a38:	d1ea      	bne.n	8013a10 <__ieee754_pow+0xe8>
 8013a3a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013a3e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013a42:	ea53 030a 	orrs.w	r3, r3, sl
 8013a46:	f000 845a 	beq.w	80142fe <__ieee754_pow+0x9d6>
 8013a4a:	4b4f      	ldr	r3, [pc, #316]	; (8013b88 <__ieee754_pow+0x260>)
 8013a4c:	429c      	cmp	r4, r3
 8013a4e:	dd08      	ble.n	8013a62 <__ieee754_pow+0x13a>
 8013a50:	f1b9 0f00 	cmp.w	r9, #0
 8013a54:	f2c0 8457 	blt.w	8014306 <__ieee754_pow+0x9de>
 8013a58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013a5c:	e783      	b.n	8013966 <__ieee754_pow+0x3e>
 8013a5e:	2302      	movs	r3, #2
 8013a60:	e7e5      	b.n	8013a2e <__ieee754_pow+0x106>
 8013a62:	f1b9 0f00 	cmp.w	r9, #0
 8013a66:	f04f 0000 	mov.w	r0, #0
 8013a6a:	f04f 0100 	mov.w	r1, #0
 8013a6e:	f6bf af7a 	bge.w	8013966 <__ieee754_pow+0x3e>
 8013a72:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013a76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013a7a:	e774      	b.n	8013966 <__ieee754_pow+0x3e>
 8013a7c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013a80:	d106      	bne.n	8013a90 <__ieee754_pow+0x168>
 8013a82:	4632      	mov	r2, r6
 8013a84:	463b      	mov	r3, r7
 8013a86:	4630      	mov	r0, r6
 8013a88:	4639      	mov	r1, r7
 8013a8a:	f7ec fdbf 	bl	800060c <__aeabi_dmul>
 8013a8e:	e76a      	b.n	8013966 <__ieee754_pow+0x3e>
 8013a90:	4b3e      	ldr	r3, [pc, #248]	; (8013b8c <__ieee754_pow+0x264>)
 8013a92:	4599      	cmp	r9, r3
 8013a94:	d10c      	bne.n	8013ab0 <__ieee754_pow+0x188>
 8013a96:	2d00      	cmp	r5, #0
 8013a98:	db0a      	blt.n	8013ab0 <__ieee754_pow+0x188>
 8013a9a:	ec47 6b10 	vmov	d0, r6, r7
 8013a9e:	b009      	add	sp, #36	; 0x24
 8013aa0:	ecbd 8b06 	vpop	{d8-d10}
 8013aa4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aa8:	f000 bc6c 	b.w	8014384 <__ieee754_sqrt>
 8013aac:	2300      	movs	r3, #0
 8013aae:	9304      	str	r3, [sp, #16]
 8013ab0:	ec47 6b10 	vmov	d0, r6, r7
 8013ab4:	f000 fe93 	bl	80147de <fabs>
 8013ab8:	ec51 0b10 	vmov	r0, r1, d0
 8013abc:	f1ba 0f00 	cmp.w	sl, #0
 8013ac0:	d129      	bne.n	8013b16 <__ieee754_pow+0x1ee>
 8013ac2:	b124      	cbz	r4, 8013ace <__ieee754_pow+0x1a6>
 8013ac4:	4b2f      	ldr	r3, [pc, #188]	; (8013b84 <__ieee754_pow+0x25c>)
 8013ac6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8013aca:	429a      	cmp	r2, r3
 8013acc:	d123      	bne.n	8013b16 <__ieee754_pow+0x1ee>
 8013ace:	f1b9 0f00 	cmp.w	r9, #0
 8013ad2:	da05      	bge.n	8013ae0 <__ieee754_pow+0x1b8>
 8013ad4:	4602      	mov	r2, r0
 8013ad6:	460b      	mov	r3, r1
 8013ad8:	2000      	movs	r0, #0
 8013ada:	492a      	ldr	r1, [pc, #168]	; (8013b84 <__ieee754_pow+0x25c>)
 8013adc:	f7ec fec0 	bl	8000860 <__aeabi_ddiv>
 8013ae0:	2d00      	cmp	r5, #0
 8013ae2:	f6bf af40 	bge.w	8013966 <__ieee754_pow+0x3e>
 8013ae6:	9b04      	ldr	r3, [sp, #16]
 8013ae8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013aec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013af0:	4323      	orrs	r3, r4
 8013af2:	d108      	bne.n	8013b06 <__ieee754_pow+0x1de>
 8013af4:	4602      	mov	r2, r0
 8013af6:	460b      	mov	r3, r1
 8013af8:	4610      	mov	r0, r2
 8013afa:	4619      	mov	r1, r3
 8013afc:	f7ec fbce 	bl	800029c <__aeabi_dsub>
 8013b00:	4602      	mov	r2, r0
 8013b02:	460b      	mov	r3, r1
 8013b04:	e78f      	b.n	8013a26 <__ieee754_pow+0xfe>
 8013b06:	9b04      	ldr	r3, [sp, #16]
 8013b08:	2b01      	cmp	r3, #1
 8013b0a:	f47f af2c 	bne.w	8013966 <__ieee754_pow+0x3e>
 8013b0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013b12:	4619      	mov	r1, r3
 8013b14:	e727      	b.n	8013966 <__ieee754_pow+0x3e>
 8013b16:	0feb      	lsrs	r3, r5, #31
 8013b18:	3b01      	subs	r3, #1
 8013b1a:	9306      	str	r3, [sp, #24]
 8013b1c:	9a06      	ldr	r2, [sp, #24]
 8013b1e:	9b04      	ldr	r3, [sp, #16]
 8013b20:	4313      	orrs	r3, r2
 8013b22:	d102      	bne.n	8013b2a <__ieee754_pow+0x202>
 8013b24:	4632      	mov	r2, r6
 8013b26:	463b      	mov	r3, r7
 8013b28:	e7e6      	b.n	8013af8 <__ieee754_pow+0x1d0>
 8013b2a:	4b19      	ldr	r3, [pc, #100]	; (8013b90 <__ieee754_pow+0x268>)
 8013b2c:	4598      	cmp	r8, r3
 8013b2e:	f340 80fb 	ble.w	8013d28 <__ieee754_pow+0x400>
 8013b32:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013b36:	4598      	cmp	r8, r3
 8013b38:	4b13      	ldr	r3, [pc, #76]	; (8013b88 <__ieee754_pow+0x260>)
 8013b3a:	dd0c      	ble.n	8013b56 <__ieee754_pow+0x22e>
 8013b3c:	429c      	cmp	r4, r3
 8013b3e:	dc0f      	bgt.n	8013b60 <__ieee754_pow+0x238>
 8013b40:	f1b9 0f00 	cmp.w	r9, #0
 8013b44:	da0f      	bge.n	8013b66 <__ieee754_pow+0x23e>
 8013b46:	2000      	movs	r0, #0
 8013b48:	b009      	add	sp, #36	; 0x24
 8013b4a:	ecbd 8b06 	vpop	{d8-d10}
 8013b4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b52:	f000 be3b 	b.w	80147cc <__math_oflow>
 8013b56:	429c      	cmp	r4, r3
 8013b58:	dbf2      	blt.n	8013b40 <__ieee754_pow+0x218>
 8013b5a:	4b0a      	ldr	r3, [pc, #40]	; (8013b84 <__ieee754_pow+0x25c>)
 8013b5c:	429c      	cmp	r4, r3
 8013b5e:	dd19      	ble.n	8013b94 <__ieee754_pow+0x26c>
 8013b60:	f1b9 0f00 	cmp.w	r9, #0
 8013b64:	dcef      	bgt.n	8013b46 <__ieee754_pow+0x21e>
 8013b66:	2000      	movs	r0, #0
 8013b68:	b009      	add	sp, #36	; 0x24
 8013b6a:	ecbd 8b06 	vpop	{d8-d10}
 8013b6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b72:	f000 be22 	b.w	80147ba <__math_uflow>
 8013b76:	bf00      	nop
 8013b78:	fff00000 	.word	0xfff00000
 8013b7c:	7ff00000 	.word	0x7ff00000
 8013b80:	433fffff 	.word	0x433fffff
 8013b84:	3ff00000 	.word	0x3ff00000
 8013b88:	3fefffff 	.word	0x3fefffff
 8013b8c:	3fe00000 	.word	0x3fe00000
 8013b90:	41e00000 	.word	0x41e00000
 8013b94:	4b60      	ldr	r3, [pc, #384]	; (8013d18 <__ieee754_pow+0x3f0>)
 8013b96:	2200      	movs	r2, #0
 8013b98:	f7ec fb80 	bl	800029c <__aeabi_dsub>
 8013b9c:	a354      	add	r3, pc, #336	; (adr r3, 8013cf0 <__ieee754_pow+0x3c8>)
 8013b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ba2:	4604      	mov	r4, r0
 8013ba4:	460d      	mov	r5, r1
 8013ba6:	f7ec fd31 	bl	800060c <__aeabi_dmul>
 8013baa:	a353      	add	r3, pc, #332	; (adr r3, 8013cf8 <__ieee754_pow+0x3d0>)
 8013bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bb0:	4606      	mov	r6, r0
 8013bb2:	460f      	mov	r7, r1
 8013bb4:	4620      	mov	r0, r4
 8013bb6:	4629      	mov	r1, r5
 8013bb8:	f7ec fd28 	bl	800060c <__aeabi_dmul>
 8013bbc:	4b57      	ldr	r3, [pc, #348]	; (8013d1c <__ieee754_pow+0x3f4>)
 8013bbe:	4682      	mov	sl, r0
 8013bc0:	468b      	mov	fp, r1
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	4620      	mov	r0, r4
 8013bc6:	4629      	mov	r1, r5
 8013bc8:	f7ec fd20 	bl	800060c <__aeabi_dmul>
 8013bcc:	4602      	mov	r2, r0
 8013bce:	460b      	mov	r3, r1
 8013bd0:	a14b      	add	r1, pc, #300	; (adr r1, 8013d00 <__ieee754_pow+0x3d8>)
 8013bd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bd6:	f7ec fb61 	bl	800029c <__aeabi_dsub>
 8013bda:	4622      	mov	r2, r4
 8013bdc:	462b      	mov	r3, r5
 8013bde:	f7ec fd15 	bl	800060c <__aeabi_dmul>
 8013be2:	4602      	mov	r2, r0
 8013be4:	460b      	mov	r3, r1
 8013be6:	2000      	movs	r0, #0
 8013be8:	494d      	ldr	r1, [pc, #308]	; (8013d20 <__ieee754_pow+0x3f8>)
 8013bea:	f7ec fb57 	bl	800029c <__aeabi_dsub>
 8013bee:	4622      	mov	r2, r4
 8013bf0:	4680      	mov	r8, r0
 8013bf2:	4689      	mov	r9, r1
 8013bf4:	462b      	mov	r3, r5
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	4629      	mov	r1, r5
 8013bfa:	f7ec fd07 	bl	800060c <__aeabi_dmul>
 8013bfe:	4602      	mov	r2, r0
 8013c00:	460b      	mov	r3, r1
 8013c02:	4640      	mov	r0, r8
 8013c04:	4649      	mov	r1, r9
 8013c06:	f7ec fd01 	bl	800060c <__aeabi_dmul>
 8013c0a:	a33f      	add	r3, pc, #252	; (adr r3, 8013d08 <__ieee754_pow+0x3e0>)
 8013c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c10:	f7ec fcfc 	bl	800060c <__aeabi_dmul>
 8013c14:	4602      	mov	r2, r0
 8013c16:	460b      	mov	r3, r1
 8013c18:	4650      	mov	r0, sl
 8013c1a:	4659      	mov	r1, fp
 8013c1c:	f7ec fb3e 	bl	800029c <__aeabi_dsub>
 8013c20:	4602      	mov	r2, r0
 8013c22:	460b      	mov	r3, r1
 8013c24:	4680      	mov	r8, r0
 8013c26:	4689      	mov	r9, r1
 8013c28:	4630      	mov	r0, r6
 8013c2a:	4639      	mov	r1, r7
 8013c2c:	f7ec fb38 	bl	80002a0 <__adddf3>
 8013c30:	2000      	movs	r0, #0
 8013c32:	4632      	mov	r2, r6
 8013c34:	463b      	mov	r3, r7
 8013c36:	4604      	mov	r4, r0
 8013c38:	460d      	mov	r5, r1
 8013c3a:	f7ec fb2f 	bl	800029c <__aeabi_dsub>
 8013c3e:	4602      	mov	r2, r0
 8013c40:	460b      	mov	r3, r1
 8013c42:	4640      	mov	r0, r8
 8013c44:	4649      	mov	r1, r9
 8013c46:	f7ec fb29 	bl	800029c <__aeabi_dsub>
 8013c4a:	9b04      	ldr	r3, [sp, #16]
 8013c4c:	9a06      	ldr	r2, [sp, #24]
 8013c4e:	3b01      	subs	r3, #1
 8013c50:	4313      	orrs	r3, r2
 8013c52:	4682      	mov	sl, r0
 8013c54:	468b      	mov	fp, r1
 8013c56:	f040 81e7 	bne.w	8014028 <__ieee754_pow+0x700>
 8013c5a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8013d10 <__ieee754_pow+0x3e8>
 8013c5e:	eeb0 8a47 	vmov.f32	s16, s14
 8013c62:	eef0 8a67 	vmov.f32	s17, s15
 8013c66:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013c6a:	2600      	movs	r6, #0
 8013c6c:	4632      	mov	r2, r6
 8013c6e:	463b      	mov	r3, r7
 8013c70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c74:	f7ec fb12 	bl	800029c <__aeabi_dsub>
 8013c78:	4622      	mov	r2, r4
 8013c7a:	462b      	mov	r3, r5
 8013c7c:	f7ec fcc6 	bl	800060c <__aeabi_dmul>
 8013c80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c84:	4680      	mov	r8, r0
 8013c86:	4689      	mov	r9, r1
 8013c88:	4650      	mov	r0, sl
 8013c8a:	4659      	mov	r1, fp
 8013c8c:	f7ec fcbe 	bl	800060c <__aeabi_dmul>
 8013c90:	4602      	mov	r2, r0
 8013c92:	460b      	mov	r3, r1
 8013c94:	4640      	mov	r0, r8
 8013c96:	4649      	mov	r1, r9
 8013c98:	f7ec fb02 	bl	80002a0 <__adddf3>
 8013c9c:	4632      	mov	r2, r6
 8013c9e:	463b      	mov	r3, r7
 8013ca0:	4680      	mov	r8, r0
 8013ca2:	4689      	mov	r9, r1
 8013ca4:	4620      	mov	r0, r4
 8013ca6:	4629      	mov	r1, r5
 8013ca8:	f7ec fcb0 	bl	800060c <__aeabi_dmul>
 8013cac:	460b      	mov	r3, r1
 8013cae:	4604      	mov	r4, r0
 8013cb0:	460d      	mov	r5, r1
 8013cb2:	4602      	mov	r2, r0
 8013cb4:	4649      	mov	r1, r9
 8013cb6:	4640      	mov	r0, r8
 8013cb8:	f7ec faf2 	bl	80002a0 <__adddf3>
 8013cbc:	4b19      	ldr	r3, [pc, #100]	; (8013d24 <__ieee754_pow+0x3fc>)
 8013cbe:	4299      	cmp	r1, r3
 8013cc0:	ec45 4b19 	vmov	d9, r4, r5
 8013cc4:	4606      	mov	r6, r0
 8013cc6:	460f      	mov	r7, r1
 8013cc8:	468b      	mov	fp, r1
 8013cca:	f340 82f1 	ble.w	80142b0 <__ieee754_pow+0x988>
 8013cce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8013cd2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8013cd6:	4303      	orrs	r3, r0
 8013cd8:	f000 81e4 	beq.w	80140a4 <__ieee754_pow+0x77c>
 8013cdc:	ec51 0b18 	vmov	r0, r1, d8
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	f7ec ff04 	bl	8000af0 <__aeabi_dcmplt>
 8013ce8:	3800      	subs	r0, #0
 8013cea:	bf18      	it	ne
 8013cec:	2001      	movne	r0, #1
 8013cee:	e72b      	b.n	8013b48 <__ieee754_pow+0x220>
 8013cf0:	60000000 	.word	0x60000000
 8013cf4:	3ff71547 	.word	0x3ff71547
 8013cf8:	f85ddf44 	.word	0xf85ddf44
 8013cfc:	3e54ae0b 	.word	0x3e54ae0b
 8013d00:	55555555 	.word	0x55555555
 8013d04:	3fd55555 	.word	0x3fd55555
 8013d08:	652b82fe 	.word	0x652b82fe
 8013d0c:	3ff71547 	.word	0x3ff71547
 8013d10:	00000000 	.word	0x00000000
 8013d14:	bff00000 	.word	0xbff00000
 8013d18:	3ff00000 	.word	0x3ff00000
 8013d1c:	3fd00000 	.word	0x3fd00000
 8013d20:	3fe00000 	.word	0x3fe00000
 8013d24:	408fffff 	.word	0x408fffff
 8013d28:	4bd5      	ldr	r3, [pc, #852]	; (8014080 <__ieee754_pow+0x758>)
 8013d2a:	402b      	ands	r3, r5
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	b92b      	cbnz	r3, 8013d3c <__ieee754_pow+0x414>
 8013d30:	4bd4      	ldr	r3, [pc, #848]	; (8014084 <__ieee754_pow+0x75c>)
 8013d32:	f7ec fc6b 	bl	800060c <__aeabi_dmul>
 8013d36:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8013d3a:	460c      	mov	r4, r1
 8013d3c:	1523      	asrs	r3, r4, #20
 8013d3e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013d42:	4413      	add	r3, r2
 8013d44:	9305      	str	r3, [sp, #20]
 8013d46:	4bd0      	ldr	r3, [pc, #832]	; (8014088 <__ieee754_pow+0x760>)
 8013d48:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013d4c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013d50:	429c      	cmp	r4, r3
 8013d52:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013d56:	dd08      	ble.n	8013d6a <__ieee754_pow+0x442>
 8013d58:	4bcc      	ldr	r3, [pc, #816]	; (801408c <__ieee754_pow+0x764>)
 8013d5a:	429c      	cmp	r4, r3
 8013d5c:	f340 8162 	ble.w	8014024 <__ieee754_pow+0x6fc>
 8013d60:	9b05      	ldr	r3, [sp, #20]
 8013d62:	3301      	adds	r3, #1
 8013d64:	9305      	str	r3, [sp, #20]
 8013d66:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8013d6a:	2400      	movs	r4, #0
 8013d6c:	00e3      	lsls	r3, r4, #3
 8013d6e:	9307      	str	r3, [sp, #28]
 8013d70:	4bc7      	ldr	r3, [pc, #796]	; (8014090 <__ieee754_pow+0x768>)
 8013d72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013d76:	ed93 7b00 	vldr	d7, [r3]
 8013d7a:	4629      	mov	r1, r5
 8013d7c:	ec53 2b17 	vmov	r2, r3, d7
 8013d80:	eeb0 9a47 	vmov.f32	s18, s14
 8013d84:	eef0 9a67 	vmov.f32	s19, s15
 8013d88:	4682      	mov	sl, r0
 8013d8a:	f7ec fa87 	bl	800029c <__aeabi_dsub>
 8013d8e:	4652      	mov	r2, sl
 8013d90:	4606      	mov	r6, r0
 8013d92:	460f      	mov	r7, r1
 8013d94:	462b      	mov	r3, r5
 8013d96:	ec51 0b19 	vmov	r0, r1, d9
 8013d9a:	f7ec fa81 	bl	80002a0 <__adddf3>
 8013d9e:	4602      	mov	r2, r0
 8013da0:	460b      	mov	r3, r1
 8013da2:	2000      	movs	r0, #0
 8013da4:	49bb      	ldr	r1, [pc, #748]	; (8014094 <__ieee754_pow+0x76c>)
 8013da6:	f7ec fd5b 	bl	8000860 <__aeabi_ddiv>
 8013daa:	ec41 0b1a 	vmov	d10, r0, r1
 8013dae:	4602      	mov	r2, r0
 8013db0:	460b      	mov	r3, r1
 8013db2:	4630      	mov	r0, r6
 8013db4:	4639      	mov	r1, r7
 8013db6:	f7ec fc29 	bl	800060c <__aeabi_dmul>
 8013dba:	2300      	movs	r3, #0
 8013dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013dc0:	9302      	str	r3, [sp, #8]
 8013dc2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013dc6:	46ab      	mov	fp, r5
 8013dc8:	106d      	asrs	r5, r5, #1
 8013dca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013dce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8013dd2:	ec41 0b18 	vmov	d8, r0, r1
 8013dd6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8013dda:	2200      	movs	r2, #0
 8013ddc:	4640      	mov	r0, r8
 8013dde:	4649      	mov	r1, r9
 8013de0:	4614      	mov	r4, r2
 8013de2:	461d      	mov	r5, r3
 8013de4:	f7ec fc12 	bl	800060c <__aeabi_dmul>
 8013de8:	4602      	mov	r2, r0
 8013dea:	460b      	mov	r3, r1
 8013dec:	4630      	mov	r0, r6
 8013dee:	4639      	mov	r1, r7
 8013df0:	f7ec fa54 	bl	800029c <__aeabi_dsub>
 8013df4:	ec53 2b19 	vmov	r2, r3, d9
 8013df8:	4606      	mov	r6, r0
 8013dfa:	460f      	mov	r7, r1
 8013dfc:	4620      	mov	r0, r4
 8013dfe:	4629      	mov	r1, r5
 8013e00:	f7ec fa4c 	bl	800029c <__aeabi_dsub>
 8013e04:	4602      	mov	r2, r0
 8013e06:	460b      	mov	r3, r1
 8013e08:	4650      	mov	r0, sl
 8013e0a:	4659      	mov	r1, fp
 8013e0c:	f7ec fa46 	bl	800029c <__aeabi_dsub>
 8013e10:	4642      	mov	r2, r8
 8013e12:	464b      	mov	r3, r9
 8013e14:	f7ec fbfa 	bl	800060c <__aeabi_dmul>
 8013e18:	4602      	mov	r2, r0
 8013e1a:	460b      	mov	r3, r1
 8013e1c:	4630      	mov	r0, r6
 8013e1e:	4639      	mov	r1, r7
 8013e20:	f7ec fa3c 	bl	800029c <__aeabi_dsub>
 8013e24:	ec53 2b1a 	vmov	r2, r3, d10
 8013e28:	f7ec fbf0 	bl	800060c <__aeabi_dmul>
 8013e2c:	ec53 2b18 	vmov	r2, r3, d8
 8013e30:	ec41 0b19 	vmov	d9, r0, r1
 8013e34:	ec51 0b18 	vmov	r0, r1, d8
 8013e38:	f7ec fbe8 	bl	800060c <__aeabi_dmul>
 8013e3c:	a37c      	add	r3, pc, #496	; (adr r3, 8014030 <__ieee754_pow+0x708>)
 8013e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e42:	4604      	mov	r4, r0
 8013e44:	460d      	mov	r5, r1
 8013e46:	f7ec fbe1 	bl	800060c <__aeabi_dmul>
 8013e4a:	a37b      	add	r3, pc, #492	; (adr r3, 8014038 <__ieee754_pow+0x710>)
 8013e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e50:	f7ec fa26 	bl	80002a0 <__adddf3>
 8013e54:	4622      	mov	r2, r4
 8013e56:	462b      	mov	r3, r5
 8013e58:	f7ec fbd8 	bl	800060c <__aeabi_dmul>
 8013e5c:	a378      	add	r3, pc, #480	; (adr r3, 8014040 <__ieee754_pow+0x718>)
 8013e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e62:	f7ec fa1d 	bl	80002a0 <__adddf3>
 8013e66:	4622      	mov	r2, r4
 8013e68:	462b      	mov	r3, r5
 8013e6a:	f7ec fbcf 	bl	800060c <__aeabi_dmul>
 8013e6e:	a376      	add	r3, pc, #472	; (adr r3, 8014048 <__ieee754_pow+0x720>)
 8013e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e74:	f7ec fa14 	bl	80002a0 <__adddf3>
 8013e78:	4622      	mov	r2, r4
 8013e7a:	462b      	mov	r3, r5
 8013e7c:	f7ec fbc6 	bl	800060c <__aeabi_dmul>
 8013e80:	a373      	add	r3, pc, #460	; (adr r3, 8014050 <__ieee754_pow+0x728>)
 8013e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e86:	f7ec fa0b 	bl	80002a0 <__adddf3>
 8013e8a:	4622      	mov	r2, r4
 8013e8c:	462b      	mov	r3, r5
 8013e8e:	f7ec fbbd 	bl	800060c <__aeabi_dmul>
 8013e92:	a371      	add	r3, pc, #452	; (adr r3, 8014058 <__ieee754_pow+0x730>)
 8013e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e98:	f7ec fa02 	bl	80002a0 <__adddf3>
 8013e9c:	4622      	mov	r2, r4
 8013e9e:	4606      	mov	r6, r0
 8013ea0:	460f      	mov	r7, r1
 8013ea2:	462b      	mov	r3, r5
 8013ea4:	4620      	mov	r0, r4
 8013ea6:	4629      	mov	r1, r5
 8013ea8:	f7ec fbb0 	bl	800060c <__aeabi_dmul>
 8013eac:	4602      	mov	r2, r0
 8013eae:	460b      	mov	r3, r1
 8013eb0:	4630      	mov	r0, r6
 8013eb2:	4639      	mov	r1, r7
 8013eb4:	f7ec fbaa 	bl	800060c <__aeabi_dmul>
 8013eb8:	4642      	mov	r2, r8
 8013eba:	4604      	mov	r4, r0
 8013ebc:	460d      	mov	r5, r1
 8013ebe:	464b      	mov	r3, r9
 8013ec0:	ec51 0b18 	vmov	r0, r1, d8
 8013ec4:	f7ec f9ec 	bl	80002a0 <__adddf3>
 8013ec8:	ec53 2b19 	vmov	r2, r3, d9
 8013ecc:	f7ec fb9e 	bl	800060c <__aeabi_dmul>
 8013ed0:	4622      	mov	r2, r4
 8013ed2:	462b      	mov	r3, r5
 8013ed4:	f7ec f9e4 	bl	80002a0 <__adddf3>
 8013ed8:	4642      	mov	r2, r8
 8013eda:	4682      	mov	sl, r0
 8013edc:	468b      	mov	fp, r1
 8013ede:	464b      	mov	r3, r9
 8013ee0:	4640      	mov	r0, r8
 8013ee2:	4649      	mov	r1, r9
 8013ee4:	f7ec fb92 	bl	800060c <__aeabi_dmul>
 8013ee8:	4b6b      	ldr	r3, [pc, #428]	; (8014098 <__ieee754_pow+0x770>)
 8013eea:	2200      	movs	r2, #0
 8013eec:	4606      	mov	r6, r0
 8013eee:	460f      	mov	r7, r1
 8013ef0:	f7ec f9d6 	bl	80002a0 <__adddf3>
 8013ef4:	4652      	mov	r2, sl
 8013ef6:	465b      	mov	r3, fp
 8013ef8:	f7ec f9d2 	bl	80002a0 <__adddf3>
 8013efc:	2000      	movs	r0, #0
 8013efe:	4604      	mov	r4, r0
 8013f00:	460d      	mov	r5, r1
 8013f02:	4602      	mov	r2, r0
 8013f04:	460b      	mov	r3, r1
 8013f06:	4640      	mov	r0, r8
 8013f08:	4649      	mov	r1, r9
 8013f0a:	f7ec fb7f 	bl	800060c <__aeabi_dmul>
 8013f0e:	4b62      	ldr	r3, [pc, #392]	; (8014098 <__ieee754_pow+0x770>)
 8013f10:	4680      	mov	r8, r0
 8013f12:	4689      	mov	r9, r1
 8013f14:	2200      	movs	r2, #0
 8013f16:	4620      	mov	r0, r4
 8013f18:	4629      	mov	r1, r5
 8013f1a:	f7ec f9bf 	bl	800029c <__aeabi_dsub>
 8013f1e:	4632      	mov	r2, r6
 8013f20:	463b      	mov	r3, r7
 8013f22:	f7ec f9bb 	bl	800029c <__aeabi_dsub>
 8013f26:	4602      	mov	r2, r0
 8013f28:	460b      	mov	r3, r1
 8013f2a:	4650      	mov	r0, sl
 8013f2c:	4659      	mov	r1, fp
 8013f2e:	f7ec f9b5 	bl	800029c <__aeabi_dsub>
 8013f32:	ec53 2b18 	vmov	r2, r3, d8
 8013f36:	f7ec fb69 	bl	800060c <__aeabi_dmul>
 8013f3a:	4622      	mov	r2, r4
 8013f3c:	4606      	mov	r6, r0
 8013f3e:	460f      	mov	r7, r1
 8013f40:	462b      	mov	r3, r5
 8013f42:	ec51 0b19 	vmov	r0, r1, d9
 8013f46:	f7ec fb61 	bl	800060c <__aeabi_dmul>
 8013f4a:	4602      	mov	r2, r0
 8013f4c:	460b      	mov	r3, r1
 8013f4e:	4630      	mov	r0, r6
 8013f50:	4639      	mov	r1, r7
 8013f52:	f7ec f9a5 	bl	80002a0 <__adddf3>
 8013f56:	4606      	mov	r6, r0
 8013f58:	460f      	mov	r7, r1
 8013f5a:	4602      	mov	r2, r0
 8013f5c:	460b      	mov	r3, r1
 8013f5e:	4640      	mov	r0, r8
 8013f60:	4649      	mov	r1, r9
 8013f62:	f7ec f99d 	bl	80002a0 <__adddf3>
 8013f66:	a33e      	add	r3, pc, #248	; (adr r3, 8014060 <__ieee754_pow+0x738>)
 8013f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f6c:	2000      	movs	r0, #0
 8013f6e:	4604      	mov	r4, r0
 8013f70:	460d      	mov	r5, r1
 8013f72:	f7ec fb4b 	bl	800060c <__aeabi_dmul>
 8013f76:	4642      	mov	r2, r8
 8013f78:	ec41 0b18 	vmov	d8, r0, r1
 8013f7c:	464b      	mov	r3, r9
 8013f7e:	4620      	mov	r0, r4
 8013f80:	4629      	mov	r1, r5
 8013f82:	f7ec f98b 	bl	800029c <__aeabi_dsub>
 8013f86:	4602      	mov	r2, r0
 8013f88:	460b      	mov	r3, r1
 8013f8a:	4630      	mov	r0, r6
 8013f8c:	4639      	mov	r1, r7
 8013f8e:	f7ec f985 	bl	800029c <__aeabi_dsub>
 8013f92:	a335      	add	r3, pc, #212	; (adr r3, 8014068 <__ieee754_pow+0x740>)
 8013f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f98:	f7ec fb38 	bl	800060c <__aeabi_dmul>
 8013f9c:	a334      	add	r3, pc, #208	; (adr r3, 8014070 <__ieee754_pow+0x748>)
 8013f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa2:	4606      	mov	r6, r0
 8013fa4:	460f      	mov	r7, r1
 8013fa6:	4620      	mov	r0, r4
 8013fa8:	4629      	mov	r1, r5
 8013faa:	f7ec fb2f 	bl	800060c <__aeabi_dmul>
 8013fae:	4602      	mov	r2, r0
 8013fb0:	460b      	mov	r3, r1
 8013fb2:	4630      	mov	r0, r6
 8013fb4:	4639      	mov	r1, r7
 8013fb6:	f7ec f973 	bl	80002a0 <__adddf3>
 8013fba:	9a07      	ldr	r2, [sp, #28]
 8013fbc:	4b37      	ldr	r3, [pc, #220]	; (801409c <__ieee754_pow+0x774>)
 8013fbe:	4413      	add	r3, r2
 8013fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fc4:	f7ec f96c 	bl	80002a0 <__adddf3>
 8013fc8:	4682      	mov	sl, r0
 8013fca:	9805      	ldr	r0, [sp, #20]
 8013fcc:	468b      	mov	fp, r1
 8013fce:	f7ec fab3 	bl	8000538 <__aeabi_i2d>
 8013fd2:	9a07      	ldr	r2, [sp, #28]
 8013fd4:	4b32      	ldr	r3, [pc, #200]	; (80140a0 <__ieee754_pow+0x778>)
 8013fd6:	4413      	add	r3, r2
 8013fd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013fdc:	4606      	mov	r6, r0
 8013fde:	460f      	mov	r7, r1
 8013fe0:	4652      	mov	r2, sl
 8013fe2:	465b      	mov	r3, fp
 8013fe4:	ec51 0b18 	vmov	r0, r1, d8
 8013fe8:	f7ec f95a 	bl	80002a0 <__adddf3>
 8013fec:	4642      	mov	r2, r8
 8013fee:	464b      	mov	r3, r9
 8013ff0:	f7ec f956 	bl	80002a0 <__adddf3>
 8013ff4:	4632      	mov	r2, r6
 8013ff6:	463b      	mov	r3, r7
 8013ff8:	f7ec f952 	bl	80002a0 <__adddf3>
 8013ffc:	2000      	movs	r0, #0
 8013ffe:	4632      	mov	r2, r6
 8014000:	463b      	mov	r3, r7
 8014002:	4604      	mov	r4, r0
 8014004:	460d      	mov	r5, r1
 8014006:	f7ec f949 	bl	800029c <__aeabi_dsub>
 801400a:	4642      	mov	r2, r8
 801400c:	464b      	mov	r3, r9
 801400e:	f7ec f945 	bl	800029c <__aeabi_dsub>
 8014012:	ec53 2b18 	vmov	r2, r3, d8
 8014016:	f7ec f941 	bl	800029c <__aeabi_dsub>
 801401a:	4602      	mov	r2, r0
 801401c:	460b      	mov	r3, r1
 801401e:	4650      	mov	r0, sl
 8014020:	4659      	mov	r1, fp
 8014022:	e610      	b.n	8013c46 <__ieee754_pow+0x31e>
 8014024:	2401      	movs	r4, #1
 8014026:	e6a1      	b.n	8013d6c <__ieee754_pow+0x444>
 8014028:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8014078 <__ieee754_pow+0x750>
 801402c:	e617      	b.n	8013c5e <__ieee754_pow+0x336>
 801402e:	bf00      	nop
 8014030:	4a454eef 	.word	0x4a454eef
 8014034:	3fca7e28 	.word	0x3fca7e28
 8014038:	93c9db65 	.word	0x93c9db65
 801403c:	3fcd864a 	.word	0x3fcd864a
 8014040:	a91d4101 	.word	0xa91d4101
 8014044:	3fd17460 	.word	0x3fd17460
 8014048:	518f264d 	.word	0x518f264d
 801404c:	3fd55555 	.word	0x3fd55555
 8014050:	db6fabff 	.word	0xdb6fabff
 8014054:	3fdb6db6 	.word	0x3fdb6db6
 8014058:	33333303 	.word	0x33333303
 801405c:	3fe33333 	.word	0x3fe33333
 8014060:	e0000000 	.word	0xe0000000
 8014064:	3feec709 	.word	0x3feec709
 8014068:	dc3a03fd 	.word	0xdc3a03fd
 801406c:	3feec709 	.word	0x3feec709
 8014070:	145b01f5 	.word	0x145b01f5
 8014074:	be3e2fe0 	.word	0xbe3e2fe0
 8014078:	00000000 	.word	0x00000000
 801407c:	3ff00000 	.word	0x3ff00000
 8014080:	7ff00000 	.word	0x7ff00000
 8014084:	43400000 	.word	0x43400000
 8014088:	0003988e 	.word	0x0003988e
 801408c:	000bb679 	.word	0x000bb679
 8014090:	08059aa0 	.word	0x08059aa0
 8014094:	3ff00000 	.word	0x3ff00000
 8014098:	40080000 	.word	0x40080000
 801409c:	08059ac0 	.word	0x08059ac0
 80140a0:	08059ab0 	.word	0x08059ab0
 80140a4:	a3b5      	add	r3, pc, #724	; (adr r3, 801437c <__ieee754_pow+0xa54>)
 80140a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140aa:	4640      	mov	r0, r8
 80140ac:	4649      	mov	r1, r9
 80140ae:	f7ec f8f7 	bl	80002a0 <__adddf3>
 80140b2:	4622      	mov	r2, r4
 80140b4:	ec41 0b1a 	vmov	d10, r0, r1
 80140b8:	462b      	mov	r3, r5
 80140ba:	4630      	mov	r0, r6
 80140bc:	4639      	mov	r1, r7
 80140be:	f7ec f8ed 	bl	800029c <__aeabi_dsub>
 80140c2:	4602      	mov	r2, r0
 80140c4:	460b      	mov	r3, r1
 80140c6:	ec51 0b1a 	vmov	r0, r1, d10
 80140ca:	f7ec fd2f 	bl	8000b2c <__aeabi_dcmpgt>
 80140ce:	2800      	cmp	r0, #0
 80140d0:	f47f ae04 	bne.w	8013cdc <__ieee754_pow+0x3b4>
 80140d4:	4aa4      	ldr	r2, [pc, #656]	; (8014368 <__ieee754_pow+0xa40>)
 80140d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80140da:	4293      	cmp	r3, r2
 80140dc:	f340 8108 	ble.w	80142f0 <__ieee754_pow+0x9c8>
 80140e0:	151b      	asrs	r3, r3, #20
 80140e2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80140e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80140ea:	fa4a f303 	asr.w	r3, sl, r3
 80140ee:	445b      	add	r3, fp
 80140f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80140f4:	4e9d      	ldr	r6, [pc, #628]	; (801436c <__ieee754_pow+0xa44>)
 80140f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80140fa:	4116      	asrs	r6, r2
 80140fc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8014100:	2000      	movs	r0, #0
 8014102:	ea23 0106 	bic.w	r1, r3, r6
 8014106:	f1c2 0214 	rsb	r2, r2, #20
 801410a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801410e:	fa4a fa02 	asr.w	sl, sl, r2
 8014112:	f1bb 0f00 	cmp.w	fp, #0
 8014116:	4602      	mov	r2, r0
 8014118:	460b      	mov	r3, r1
 801411a:	4620      	mov	r0, r4
 801411c:	4629      	mov	r1, r5
 801411e:	bfb8      	it	lt
 8014120:	f1ca 0a00 	rsblt	sl, sl, #0
 8014124:	f7ec f8ba 	bl	800029c <__aeabi_dsub>
 8014128:	ec41 0b19 	vmov	d9, r0, r1
 801412c:	4642      	mov	r2, r8
 801412e:	464b      	mov	r3, r9
 8014130:	ec51 0b19 	vmov	r0, r1, d9
 8014134:	f7ec f8b4 	bl	80002a0 <__adddf3>
 8014138:	a37b      	add	r3, pc, #492	; (adr r3, 8014328 <__ieee754_pow+0xa00>)
 801413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801413e:	2000      	movs	r0, #0
 8014140:	4604      	mov	r4, r0
 8014142:	460d      	mov	r5, r1
 8014144:	f7ec fa62 	bl	800060c <__aeabi_dmul>
 8014148:	ec53 2b19 	vmov	r2, r3, d9
 801414c:	4606      	mov	r6, r0
 801414e:	460f      	mov	r7, r1
 8014150:	4620      	mov	r0, r4
 8014152:	4629      	mov	r1, r5
 8014154:	f7ec f8a2 	bl	800029c <__aeabi_dsub>
 8014158:	4602      	mov	r2, r0
 801415a:	460b      	mov	r3, r1
 801415c:	4640      	mov	r0, r8
 801415e:	4649      	mov	r1, r9
 8014160:	f7ec f89c 	bl	800029c <__aeabi_dsub>
 8014164:	a372      	add	r3, pc, #456	; (adr r3, 8014330 <__ieee754_pow+0xa08>)
 8014166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801416a:	f7ec fa4f 	bl	800060c <__aeabi_dmul>
 801416e:	a372      	add	r3, pc, #456	; (adr r3, 8014338 <__ieee754_pow+0xa10>)
 8014170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014174:	4680      	mov	r8, r0
 8014176:	4689      	mov	r9, r1
 8014178:	4620      	mov	r0, r4
 801417a:	4629      	mov	r1, r5
 801417c:	f7ec fa46 	bl	800060c <__aeabi_dmul>
 8014180:	4602      	mov	r2, r0
 8014182:	460b      	mov	r3, r1
 8014184:	4640      	mov	r0, r8
 8014186:	4649      	mov	r1, r9
 8014188:	f7ec f88a 	bl	80002a0 <__adddf3>
 801418c:	4604      	mov	r4, r0
 801418e:	460d      	mov	r5, r1
 8014190:	4602      	mov	r2, r0
 8014192:	460b      	mov	r3, r1
 8014194:	4630      	mov	r0, r6
 8014196:	4639      	mov	r1, r7
 8014198:	f7ec f882 	bl	80002a0 <__adddf3>
 801419c:	4632      	mov	r2, r6
 801419e:	463b      	mov	r3, r7
 80141a0:	4680      	mov	r8, r0
 80141a2:	4689      	mov	r9, r1
 80141a4:	f7ec f87a 	bl	800029c <__aeabi_dsub>
 80141a8:	4602      	mov	r2, r0
 80141aa:	460b      	mov	r3, r1
 80141ac:	4620      	mov	r0, r4
 80141ae:	4629      	mov	r1, r5
 80141b0:	f7ec f874 	bl	800029c <__aeabi_dsub>
 80141b4:	4642      	mov	r2, r8
 80141b6:	4606      	mov	r6, r0
 80141b8:	460f      	mov	r7, r1
 80141ba:	464b      	mov	r3, r9
 80141bc:	4640      	mov	r0, r8
 80141be:	4649      	mov	r1, r9
 80141c0:	f7ec fa24 	bl	800060c <__aeabi_dmul>
 80141c4:	a35e      	add	r3, pc, #376	; (adr r3, 8014340 <__ieee754_pow+0xa18>)
 80141c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ca:	4604      	mov	r4, r0
 80141cc:	460d      	mov	r5, r1
 80141ce:	f7ec fa1d 	bl	800060c <__aeabi_dmul>
 80141d2:	a35d      	add	r3, pc, #372	; (adr r3, 8014348 <__ieee754_pow+0xa20>)
 80141d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141d8:	f7ec f860 	bl	800029c <__aeabi_dsub>
 80141dc:	4622      	mov	r2, r4
 80141de:	462b      	mov	r3, r5
 80141e0:	f7ec fa14 	bl	800060c <__aeabi_dmul>
 80141e4:	a35a      	add	r3, pc, #360	; (adr r3, 8014350 <__ieee754_pow+0xa28>)
 80141e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ea:	f7ec f859 	bl	80002a0 <__adddf3>
 80141ee:	4622      	mov	r2, r4
 80141f0:	462b      	mov	r3, r5
 80141f2:	f7ec fa0b 	bl	800060c <__aeabi_dmul>
 80141f6:	a358      	add	r3, pc, #352	; (adr r3, 8014358 <__ieee754_pow+0xa30>)
 80141f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141fc:	f7ec f84e 	bl	800029c <__aeabi_dsub>
 8014200:	4622      	mov	r2, r4
 8014202:	462b      	mov	r3, r5
 8014204:	f7ec fa02 	bl	800060c <__aeabi_dmul>
 8014208:	a355      	add	r3, pc, #340	; (adr r3, 8014360 <__ieee754_pow+0xa38>)
 801420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801420e:	f7ec f847 	bl	80002a0 <__adddf3>
 8014212:	4622      	mov	r2, r4
 8014214:	462b      	mov	r3, r5
 8014216:	f7ec f9f9 	bl	800060c <__aeabi_dmul>
 801421a:	4602      	mov	r2, r0
 801421c:	460b      	mov	r3, r1
 801421e:	4640      	mov	r0, r8
 8014220:	4649      	mov	r1, r9
 8014222:	f7ec f83b 	bl	800029c <__aeabi_dsub>
 8014226:	4604      	mov	r4, r0
 8014228:	460d      	mov	r5, r1
 801422a:	4602      	mov	r2, r0
 801422c:	460b      	mov	r3, r1
 801422e:	4640      	mov	r0, r8
 8014230:	4649      	mov	r1, r9
 8014232:	f7ec f9eb 	bl	800060c <__aeabi_dmul>
 8014236:	2200      	movs	r2, #0
 8014238:	ec41 0b19 	vmov	d9, r0, r1
 801423c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014240:	4620      	mov	r0, r4
 8014242:	4629      	mov	r1, r5
 8014244:	f7ec f82a 	bl	800029c <__aeabi_dsub>
 8014248:	4602      	mov	r2, r0
 801424a:	460b      	mov	r3, r1
 801424c:	ec51 0b19 	vmov	r0, r1, d9
 8014250:	f7ec fb06 	bl	8000860 <__aeabi_ddiv>
 8014254:	4632      	mov	r2, r6
 8014256:	4604      	mov	r4, r0
 8014258:	460d      	mov	r5, r1
 801425a:	463b      	mov	r3, r7
 801425c:	4640      	mov	r0, r8
 801425e:	4649      	mov	r1, r9
 8014260:	f7ec f9d4 	bl	800060c <__aeabi_dmul>
 8014264:	4632      	mov	r2, r6
 8014266:	463b      	mov	r3, r7
 8014268:	f7ec f81a 	bl	80002a0 <__adddf3>
 801426c:	4602      	mov	r2, r0
 801426e:	460b      	mov	r3, r1
 8014270:	4620      	mov	r0, r4
 8014272:	4629      	mov	r1, r5
 8014274:	f7ec f812 	bl	800029c <__aeabi_dsub>
 8014278:	4642      	mov	r2, r8
 801427a:	464b      	mov	r3, r9
 801427c:	f7ec f80e 	bl	800029c <__aeabi_dsub>
 8014280:	460b      	mov	r3, r1
 8014282:	4602      	mov	r2, r0
 8014284:	493a      	ldr	r1, [pc, #232]	; (8014370 <__ieee754_pow+0xa48>)
 8014286:	2000      	movs	r0, #0
 8014288:	f7ec f808 	bl	800029c <__aeabi_dsub>
 801428c:	ec41 0b10 	vmov	d0, r0, r1
 8014290:	ee10 3a90 	vmov	r3, s1
 8014294:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8014298:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801429c:	da2b      	bge.n	80142f6 <__ieee754_pow+0x9ce>
 801429e:	4650      	mov	r0, sl
 80142a0:	f000 faba 	bl	8014818 <scalbn>
 80142a4:	ec51 0b10 	vmov	r0, r1, d0
 80142a8:	ec53 2b18 	vmov	r2, r3, d8
 80142ac:	f7ff bbed 	b.w	8013a8a <__ieee754_pow+0x162>
 80142b0:	4b30      	ldr	r3, [pc, #192]	; (8014374 <__ieee754_pow+0xa4c>)
 80142b2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80142b6:	429e      	cmp	r6, r3
 80142b8:	f77f af0c 	ble.w	80140d4 <__ieee754_pow+0x7ac>
 80142bc:	4b2e      	ldr	r3, [pc, #184]	; (8014378 <__ieee754_pow+0xa50>)
 80142be:	440b      	add	r3, r1
 80142c0:	4303      	orrs	r3, r0
 80142c2:	d009      	beq.n	80142d8 <__ieee754_pow+0x9b0>
 80142c4:	ec51 0b18 	vmov	r0, r1, d8
 80142c8:	2200      	movs	r2, #0
 80142ca:	2300      	movs	r3, #0
 80142cc:	f7ec fc10 	bl	8000af0 <__aeabi_dcmplt>
 80142d0:	3800      	subs	r0, #0
 80142d2:	bf18      	it	ne
 80142d4:	2001      	movne	r0, #1
 80142d6:	e447      	b.n	8013b68 <__ieee754_pow+0x240>
 80142d8:	4622      	mov	r2, r4
 80142da:	462b      	mov	r3, r5
 80142dc:	f7eb ffde 	bl	800029c <__aeabi_dsub>
 80142e0:	4642      	mov	r2, r8
 80142e2:	464b      	mov	r3, r9
 80142e4:	f7ec fc18 	bl	8000b18 <__aeabi_dcmpge>
 80142e8:	2800      	cmp	r0, #0
 80142ea:	f43f aef3 	beq.w	80140d4 <__ieee754_pow+0x7ac>
 80142ee:	e7e9      	b.n	80142c4 <__ieee754_pow+0x99c>
 80142f0:	f04f 0a00 	mov.w	sl, #0
 80142f4:	e71a      	b.n	801412c <__ieee754_pow+0x804>
 80142f6:	ec51 0b10 	vmov	r0, r1, d0
 80142fa:	4619      	mov	r1, r3
 80142fc:	e7d4      	b.n	80142a8 <__ieee754_pow+0x980>
 80142fe:	491c      	ldr	r1, [pc, #112]	; (8014370 <__ieee754_pow+0xa48>)
 8014300:	2000      	movs	r0, #0
 8014302:	f7ff bb30 	b.w	8013966 <__ieee754_pow+0x3e>
 8014306:	2000      	movs	r0, #0
 8014308:	2100      	movs	r1, #0
 801430a:	f7ff bb2c 	b.w	8013966 <__ieee754_pow+0x3e>
 801430e:	4630      	mov	r0, r6
 8014310:	4639      	mov	r1, r7
 8014312:	f7ff bb28 	b.w	8013966 <__ieee754_pow+0x3e>
 8014316:	9204      	str	r2, [sp, #16]
 8014318:	f7ff bb7a 	b.w	8013a10 <__ieee754_pow+0xe8>
 801431c:	2300      	movs	r3, #0
 801431e:	f7ff bb64 	b.w	80139ea <__ieee754_pow+0xc2>
 8014322:	bf00      	nop
 8014324:	f3af 8000 	nop.w
 8014328:	00000000 	.word	0x00000000
 801432c:	3fe62e43 	.word	0x3fe62e43
 8014330:	fefa39ef 	.word	0xfefa39ef
 8014334:	3fe62e42 	.word	0x3fe62e42
 8014338:	0ca86c39 	.word	0x0ca86c39
 801433c:	be205c61 	.word	0xbe205c61
 8014340:	72bea4d0 	.word	0x72bea4d0
 8014344:	3e663769 	.word	0x3e663769
 8014348:	c5d26bf1 	.word	0xc5d26bf1
 801434c:	3ebbbd41 	.word	0x3ebbbd41
 8014350:	af25de2c 	.word	0xaf25de2c
 8014354:	3f11566a 	.word	0x3f11566a
 8014358:	16bebd93 	.word	0x16bebd93
 801435c:	3f66c16c 	.word	0x3f66c16c
 8014360:	5555553e 	.word	0x5555553e
 8014364:	3fc55555 	.word	0x3fc55555
 8014368:	3fe00000 	.word	0x3fe00000
 801436c:	000fffff 	.word	0x000fffff
 8014370:	3ff00000 	.word	0x3ff00000
 8014374:	4090cbff 	.word	0x4090cbff
 8014378:	3f6f3400 	.word	0x3f6f3400
 801437c:	652b82fe 	.word	0x652b82fe
 8014380:	3c971547 	.word	0x3c971547

08014384 <__ieee754_sqrt>:
 8014384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014388:	ec55 4b10 	vmov	r4, r5, d0
 801438c:	4e55      	ldr	r6, [pc, #340]	; (80144e4 <__ieee754_sqrt+0x160>)
 801438e:	43ae      	bics	r6, r5
 8014390:	ee10 0a10 	vmov	r0, s0
 8014394:	ee10 3a10 	vmov	r3, s0
 8014398:	462a      	mov	r2, r5
 801439a:	4629      	mov	r1, r5
 801439c:	d110      	bne.n	80143c0 <__ieee754_sqrt+0x3c>
 801439e:	ee10 2a10 	vmov	r2, s0
 80143a2:	462b      	mov	r3, r5
 80143a4:	f7ec f932 	bl	800060c <__aeabi_dmul>
 80143a8:	4602      	mov	r2, r0
 80143aa:	460b      	mov	r3, r1
 80143ac:	4620      	mov	r0, r4
 80143ae:	4629      	mov	r1, r5
 80143b0:	f7eb ff76 	bl	80002a0 <__adddf3>
 80143b4:	4604      	mov	r4, r0
 80143b6:	460d      	mov	r5, r1
 80143b8:	ec45 4b10 	vmov	d0, r4, r5
 80143bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143c0:	2d00      	cmp	r5, #0
 80143c2:	dc10      	bgt.n	80143e6 <__ieee754_sqrt+0x62>
 80143c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80143c8:	4330      	orrs	r0, r6
 80143ca:	d0f5      	beq.n	80143b8 <__ieee754_sqrt+0x34>
 80143cc:	b15d      	cbz	r5, 80143e6 <__ieee754_sqrt+0x62>
 80143ce:	ee10 2a10 	vmov	r2, s0
 80143d2:	462b      	mov	r3, r5
 80143d4:	ee10 0a10 	vmov	r0, s0
 80143d8:	f7eb ff60 	bl	800029c <__aeabi_dsub>
 80143dc:	4602      	mov	r2, r0
 80143de:	460b      	mov	r3, r1
 80143e0:	f7ec fa3e 	bl	8000860 <__aeabi_ddiv>
 80143e4:	e7e6      	b.n	80143b4 <__ieee754_sqrt+0x30>
 80143e6:	1512      	asrs	r2, r2, #20
 80143e8:	d074      	beq.n	80144d4 <__ieee754_sqrt+0x150>
 80143ea:	07d4      	lsls	r4, r2, #31
 80143ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80143f0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80143f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80143f8:	bf5e      	ittt	pl
 80143fa:	0fda      	lsrpl	r2, r3, #31
 80143fc:	005b      	lslpl	r3, r3, #1
 80143fe:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8014402:	2400      	movs	r4, #0
 8014404:	0fda      	lsrs	r2, r3, #31
 8014406:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801440a:	107f      	asrs	r7, r7, #1
 801440c:	005b      	lsls	r3, r3, #1
 801440e:	2516      	movs	r5, #22
 8014410:	4620      	mov	r0, r4
 8014412:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8014416:	1886      	adds	r6, r0, r2
 8014418:	428e      	cmp	r6, r1
 801441a:	bfde      	ittt	le
 801441c:	1b89      	suble	r1, r1, r6
 801441e:	18b0      	addle	r0, r6, r2
 8014420:	18a4      	addle	r4, r4, r2
 8014422:	0049      	lsls	r1, r1, #1
 8014424:	3d01      	subs	r5, #1
 8014426:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801442a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801442e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014432:	d1f0      	bne.n	8014416 <__ieee754_sqrt+0x92>
 8014434:	462a      	mov	r2, r5
 8014436:	f04f 0e20 	mov.w	lr, #32
 801443a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801443e:	4281      	cmp	r1, r0
 8014440:	eb06 0c05 	add.w	ip, r6, r5
 8014444:	dc02      	bgt.n	801444c <__ieee754_sqrt+0xc8>
 8014446:	d113      	bne.n	8014470 <__ieee754_sqrt+0xec>
 8014448:	459c      	cmp	ip, r3
 801444a:	d811      	bhi.n	8014470 <__ieee754_sqrt+0xec>
 801444c:	f1bc 0f00 	cmp.w	ip, #0
 8014450:	eb0c 0506 	add.w	r5, ip, r6
 8014454:	da43      	bge.n	80144de <__ieee754_sqrt+0x15a>
 8014456:	2d00      	cmp	r5, #0
 8014458:	db41      	blt.n	80144de <__ieee754_sqrt+0x15a>
 801445a:	f100 0801 	add.w	r8, r0, #1
 801445e:	1a09      	subs	r1, r1, r0
 8014460:	459c      	cmp	ip, r3
 8014462:	bf88      	it	hi
 8014464:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8014468:	eba3 030c 	sub.w	r3, r3, ip
 801446c:	4432      	add	r2, r6
 801446e:	4640      	mov	r0, r8
 8014470:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8014474:	f1be 0e01 	subs.w	lr, lr, #1
 8014478:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801447c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014480:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014484:	d1db      	bne.n	801443e <__ieee754_sqrt+0xba>
 8014486:	430b      	orrs	r3, r1
 8014488:	d006      	beq.n	8014498 <__ieee754_sqrt+0x114>
 801448a:	1c50      	adds	r0, r2, #1
 801448c:	bf13      	iteet	ne
 801448e:	3201      	addne	r2, #1
 8014490:	3401      	addeq	r4, #1
 8014492:	4672      	moveq	r2, lr
 8014494:	f022 0201 	bicne.w	r2, r2, #1
 8014498:	1063      	asrs	r3, r4, #1
 801449a:	0852      	lsrs	r2, r2, #1
 801449c:	07e1      	lsls	r1, r4, #31
 801449e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80144a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80144a6:	bf48      	it	mi
 80144a8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80144ac:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80144b0:	4614      	mov	r4, r2
 80144b2:	e781      	b.n	80143b8 <__ieee754_sqrt+0x34>
 80144b4:	0ad9      	lsrs	r1, r3, #11
 80144b6:	3815      	subs	r0, #21
 80144b8:	055b      	lsls	r3, r3, #21
 80144ba:	2900      	cmp	r1, #0
 80144bc:	d0fa      	beq.n	80144b4 <__ieee754_sqrt+0x130>
 80144be:	02cd      	lsls	r5, r1, #11
 80144c0:	d50a      	bpl.n	80144d8 <__ieee754_sqrt+0x154>
 80144c2:	f1c2 0420 	rsb	r4, r2, #32
 80144c6:	fa23 f404 	lsr.w	r4, r3, r4
 80144ca:	1e55      	subs	r5, r2, #1
 80144cc:	4093      	lsls	r3, r2
 80144ce:	4321      	orrs	r1, r4
 80144d0:	1b42      	subs	r2, r0, r5
 80144d2:	e78a      	b.n	80143ea <__ieee754_sqrt+0x66>
 80144d4:	4610      	mov	r0, r2
 80144d6:	e7f0      	b.n	80144ba <__ieee754_sqrt+0x136>
 80144d8:	0049      	lsls	r1, r1, #1
 80144da:	3201      	adds	r2, #1
 80144dc:	e7ef      	b.n	80144be <__ieee754_sqrt+0x13a>
 80144de:	4680      	mov	r8, r0
 80144e0:	e7bd      	b.n	801445e <__ieee754_sqrt+0xda>
 80144e2:	bf00      	nop
 80144e4:	7ff00000 	.word	0x7ff00000

080144e8 <__ieee754_logf>:
 80144e8:	ee10 3a10 	vmov	r3, s0
 80144ec:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80144f0:	d106      	bne.n	8014500 <__ieee754_logf+0x18>
 80144f2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8014688 <__ieee754_logf+0x1a0>
 80144f6:	eddf 7a65 	vldr	s15, [pc, #404]	; 801468c <__ieee754_logf+0x1a4>
 80144fa:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80144fe:	4770      	bx	lr
 8014500:	2b00      	cmp	r3, #0
 8014502:	da02      	bge.n	801450a <__ieee754_logf+0x22>
 8014504:	ee30 7a40 	vsub.f32	s14, s0, s0
 8014508:	e7f5      	b.n	80144f6 <__ieee754_logf+0xe>
 801450a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801450e:	db02      	blt.n	8014516 <__ieee754_logf+0x2e>
 8014510:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014514:	4770      	bx	lr
 8014516:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801451a:	bfb8      	it	lt
 801451c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8014690 <__ieee754_logf+0x1a8>
 8014520:	485c      	ldr	r0, [pc, #368]	; (8014694 <__ieee754_logf+0x1ac>)
 8014522:	bfbe      	ittt	lt
 8014524:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8014528:	f06f 0118 	mvnlt.w	r1, #24
 801452c:	ee17 3a90 	vmovlt	r3, s15
 8014530:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8014534:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014538:	4418      	add	r0, r3
 801453a:	bfa8      	it	ge
 801453c:	2100      	movge	r1, #0
 801453e:	3a7f      	subs	r2, #127	; 0x7f
 8014540:	440a      	add	r2, r1
 8014542:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8014546:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 801454a:	4319      	orrs	r1, r3
 801454c:	ee00 1a10 	vmov	s0, r1
 8014550:	4951      	ldr	r1, [pc, #324]	; (8014698 <__ieee754_logf+0x1b0>)
 8014552:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8014556:	f103 000f 	add.w	r0, r3, #15
 801455a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801455e:	4001      	ands	r1, r0
 8014560:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014564:	bb89      	cbnz	r1, 80145ca <__ieee754_logf+0xe2>
 8014566:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801456a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801456e:	d10f      	bne.n	8014590 <__ieee754_logf+0xa8>
 8014570:	2a00      	cmp	r2, #0
 8014572:	f000 8085 	beq.w	8014680 <__ieee754_logf+0x198>
 8014576:	ee07 2a90 	vmov	s15, r2
 801457a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 801469c <__ieee754_logf+0x1b4>
 801457e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80146a0 <__ieee754_logf+0x1b8>
 8014582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014586:	ee27 0a80 	vmul.f32	s0, s15, s0
 801458a:	eea7 0a87 	vfma.f32	s0, s15, s14
 801458e:	4770      	bx	lr
 8014590:	eddf 6a44 	vldr	s13, [pc, #272]	; 80146a4 <__ieee754_logf+0x1bc>
 8014594:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014598:	eee0 7a66 	vfms.f32	s15, s0, s13
 801459c:	ee20 7a00 	vmul.f32	s14, s0, s0
 80145a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80145a4:	b912      	cbnz	r2, 80145ac <__ieee754_logf+0xc4>
 80145a6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80145aa:	4770      	bx	lr
 80145ac:	ee07 2a90 	vmov	s15, r2
 80145b0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 801469c <__ieee754_logf+0x1b4>
 80145b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80145b8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80145bc:	ee37 0a40 	vsub.f32	s0, s14, s0
 80145c0:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80146a0 <__ieee754_logf+0x1b8>
 80145c4:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80145c8:	4770      	bx	lr
 80145ca:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80145ce:	ee70 7a27 	vadd.f32	s15, s0, s15
 80145d2:	eddf 5a35 	vldr	s11, [pc, #212]	; 80146a8 <__ieee754_logf+0x1c0>
 80145d6:	eddf 4a35 	vldr	s9, [pc, #212]	; 80146ac <__ieee754_logf+0x1c4>
 80145da:	4935      	ldr	r1, [pc, #212]	; (80146b0 <__ieee754_logf+0x1c8>)
 80145dc:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80145e0:	4419      	add	r1, r3
 80145e2:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 80145e6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80145ea:	430b      	orrs	r3, r1
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	ee07 2a90 	vmov	s15, r2
 80145f2:	ee26 5a06 	vmul.f32	s10, s12, s12
 80145f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80145fa:	ee25 7a05 	vmul.f32	s14, s10, s10
 80145fe:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80146b4 <__ieee754_logf+0x1cc>
 8014602:	eee7 7a25 	vfma.f32	s15, s14, s11
 8014606:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80146b8 <__ieee754_logf+0x1d0>
 801460a:	eee7 5a87 	vfma.f32	s11, s15, s14
 801460e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80146bc <__ieee754_logf+0x1d4>
 8014612:	eee7 7a24 	vfma.f32	s15, s14, s9
 8014616:	eddf 4a2a 	vldr	s9, [pc, #168]	; 80146c0 <__ieee754_logf+0x1d8>
 801461a:	eee7 4a87 	vfma.f32	s9, s15, s14
 801461e:	eddf 7a29 	vldr	s15, [pc, #164]	; 80146c4 <__ieee754_logf+0x1dc>
 8014622:	eee4 7a87 	vfma.f32	s15, s9, s14
 8014626:	ee67 7a85 	vmul.f32	s15, s15, s10
 801462a:	eee5 7a87 	vfma.f32	s15, s11, s14
 801462e:	dd1c      	ble.n	801466a <__ieee754_logf+0x182>
 8014630:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014634:	ee20 7a07 	vmul.f32	s14, s0, s14
 8014638:	ee27 7a00 	vmul.f32	s14, s14, s0
 801463c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014640:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014644:	b922      	cbnz	r2, 8014650 <__ieee754_logf+0x168>
 8014646:	ee77 7a67 	vsub.f32	s15, s14, s15
 801464a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801464e:	4770      	bx	lr
 8014650:	ed9f 6a12 	vldr	s12, [pc, #72]	; 801469c <__ieee754_logf+0x1b4>
 8014654:	eee6 7a86 	vfma.f32	s15, s13, s12
 8014658:	ee77 7a67 	vsub.f32	s15, s14, s15
 801465c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014660:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80146a0 <__ieee754_logf+0x1b8>
 8014664:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8014668:	4770      	bx	lr
 801466a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801466e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014672:	2a00      	cmp	r2, #0
 8014674:	d0e9      	beq.n	801464a <__ieee754_logf+0x162>
 8014676:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801469c <__ieee754_logf+0x1b4>
 801467a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801467e:	e7ed      	b.n	801465c <__ieee754_logf+0x174>
 8014680:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801468c <__ieee754_logf+0x1a4>
 8014684:	4770      	bx	lr
 8014686:	bf00      	nop
 8014688:	cc000000 	.word	0xcc000000
 801468c:	00000000 	.word	0x00000000
 8014690:	4c000000 	.word	0x4c000000
 8014694:	004afb20 	.word	0x004afb20
 8014698:	007ffff0 	.word	0x007ffff0
 801469c:	3717f7d1 	.word	0x3717f7d1
 80146a0:	3f317180 	.word	0x3f317180
 80146a4:	3eaaaaab 	.word	0x3eaaaaab
 80146a8:	3e1cd04f 	.word	0x3e1cd04f
 80146ac:	3e178897 	.word	0x3e178897
 80146b0:	ffcf5c30 	.word	0xffcf5c30
 80146b4:	3e638e29 	.word	0x3e638e29
 80146b8:	3ecccccd 	.word	0x3ecccccd
 80146bc:	3e3a3325 	.word	0x3e3a3325
 80146c0:	3e924925 	.word	0x3e924925
 80146c4:	3f2aaaab 	.word	0x3f2aaaab

080146c8 <__ieee754_log10f>:
 80146c8:	b508      	push	{r3, lr}
 80146ca:	ee10 2a10 	vmov	r2, s0
 80146ce:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80146d2:	ed2d 8b02 	vpush	{d8}
 80146d6:	d108      	bne.n	80146ea <__ieee754_log10f+0x22>
 80146d8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8014760 <__ieee754_log10f+0x98>
 80146dc:	eddf 7a21 	vldr	s15, [pc, #132]	; 8014764 <__ieee754_log10f+0x9c>
 80146e0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80146e4:	ecbd 8b02 	vpop	{d8}
 80146e8:	bd08      	pop	{r3, pc}
 80146ea:	2a00      	cmp	r2, #0
 80146ec:	da02      	bge.n	80146f4 <__ieee754_log10f+0x2c>
 80146ee:	ee30 7a40 	vsub.f32	s14, s0, s0
 80146f2:	e7f3      	b.n	80146dc <__ieee754_log10f+0x14>
 80146f4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80146f8:	db02      	blt.n	8014700 <__ieee754_log10f+0x38>
 80146fa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80146fe:	e7f1      	b.n	80146e4 <__ieee754_log10f+0x1c>
 8014700:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8014704:	bfbf      	itttt	lt
 8014706:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8014768 <__ieee754_log10f+0xa0>
 801470a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801470e:	f06f 0118 	mvnlt.w	r1, #24
 8014712:	ee17 2a90 	vmovlt	r2, s15
 8014716:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801471a:	bfa8      	it	ge
 801471c:	2100      	movge	r1, #0
 801471e:	3b7f      	subs	r3, #127	; 0x7f
 8014720:	440b      	add	r3, r1
 8014722:	0fd9      	lsrs	r1, r3, #31
 8014724:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8014728:	ee07 3a90 	vmov	s15, r3
 801472c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8014730:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8014734:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8014738:	ee00 3a10 	vmov	s0, r3
 801473c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8014740:	f7ff fed2 	bl	80144e8 <__ieee754_logf>
 8014744:	eddf 7a09 	vldr	s15, [pc, #36]	; 801476c <__ieee754_log10f+0xa4>
 8014748:	ee20 0a27 	vmul.f32	s0, s0, s15
 801474c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014770 <__ieee754_log10f+0xa8>
 8014750:	eea8 0a27 	vfma.f32	s0, s16, s15
 8014754:	eddf 7a07 	vldr	s15, [pc, #28]	; 8014774 <__ieee754_log10f+0xac>
 8014758:	eea8 0a27 	vfma.f32	s0, s16, s15
 801475c:	e7c2      	b.n	80146e4 <__ieee754_log10f+0x1c>
 801475e:	bf00      	nop
 8014760:	cc000000 	.word	0xcc000000
 8014764:	00000000 	.word	0x00000000
 8014768:	4c000000 	.word	0x4c000000
 801476c:	3ede5bd9 	.word	0x3ede5bd9
 8014770:	355427db 	.word	0x355427db
 8014774:	3e9a2080 	.word	0x3e9a2080

08014778 <__ieee754_sqrtf>:
 8014778:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801477c:	4770      	bx	lr

0801477e <with_errno>:
 801477e:	b570      	push	{r4, r5, r6, lr}
 8014780:	4604      	mov	r4, r0
 8014782:	460d      	mov	r5, r1
 8014784:	4616      	mov	r6, r2
 8014786:	f000 f901 	bl	801498c <__errno>
 801478a:	4629      	mov	r1, r5
 801478c:	6006      	str	r6, [r0, #0]
 801478e:	4620      	mov	r0, r4
 8014790:	bd70      	pop	{r4, r5, r6, pc}

08014792 <xflow>:
 8014792:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014794:	4614      	mov	r4, r2
 8014796:	461d      	mov	r5, r3
 8014798:	b108      	cbz	r0, 801479e <xflow+0xc>
 801479a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801479e:	e9cd 2300 	strd	r2, r3, [sp]
 80147a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80147a6:	4620      	mov	r0, r4
 80147a8:	4629      	mov	r1, r5
 80147aa:	f7eb ff2f 	bl	800060c <__aeabi_dmul>
 80147ae:	2222      	movs	r2, #34	; 0x22
 80147b0:	b003      	add	sp, #12
 80147b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80147b6:	f7ff bfe2 	b.w	801477e <with_errno>

080147ba <__math_uflow>:
 80147ba:	b508      	push	{r3, lr}
 80147bc:	2200      	movs	r2, #0
 80147be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80147c2:	f7ff ffe6 	bl	8014792 <xflow>
 80147c6:	ec41 0b10 	vmov	d0, r0, r1
 80147ca:	bd08      	pop	{r3, pc}

080147cc <__math_oflow>:
 80147cc:	b508      	push	{r3, lr}
 80147ce:	2200      	movs	r2, #0
 80147d0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80147d4:	f7ff ffdd 	bl	8014792 <xflow>
 80147d8:	ec41 0b10 	vmov	d0, r0, r1
 80147dc:	bd08      	pop	{r3, pc}

080147de <fabs>:
 80147de:	ec51 0b10 	vmov	r0, r1, d0
 80147e2:	ee10 2a10 	vmov	r2, s0
 80147e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80147ea:	ec43 2b10 	vmov	d0, r2, r3
 80147ee:	4770      	bx	lr

080147f0 <finite>:
 80147f0:	b082      	sub	sp, #8
 80147f2:	ed8d 0b00 	vstr	d0, [sp]
 80147f6:	9801      	ldr	r0, [sp, #4]
 80147f8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80147fc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014800:	0fc0      	lsrs	r0, r0, #31
 8014802:	b002      	add	sp, #8
 8014804:	4770      	bx	lr
	...

08014808 <nan>:
 8014808:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014810 <nan+0x8>
 801480c:	4770      	bx	lr
 801480e:	bf00      	nop
 8014810:	00000000 	.word	0x00000000
 8014814:	7ff80000 	.word	0x7ff80000

08014818 <scalbn>:
 8014818:	b570      	push	{r4, r5, r6, lr}
 801481a:	ec55 4b10 	vmov	r4, r5, d0
 801481e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014822:	4606      	mov	r6, r0
 8014824:	462b      	mov	r3, r5
 8014826:	b99a      	cbnz	r2, 8014850 <scalbn+0x38>
 8014828:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801482c:	4323      	orrs	r3, r4
 801482e:	d036      	beq.n	801489e <scalbn+0x86>
 8014830:	4b39      	ldr	r3, [pc, #228]	; (8014918 <scalbn+0x100>)
 8014832:	4629      	mov	r1, r5
 8014834:	ee10 0a10 	vmov	r0, s0
 8014838:	2200      	movs	r2, #0
 801483a:	f7eb fee7 	bl	800060c <__aeabi_dmul>
 801483e:	4b37      	ldr	r3, [pc, #220]	; (801491c <scalbn+0x104>)
 8014840:	429e      	cmp	r6, r3
 8014842:	4604      	mov	r4, r0
 8014844:	460d      	mov	r5, r1
 8014846:	da10      	bge.n	801486a <scalbn+0x52>
 8014848:	a32b      	add	r3, pc, #172	; (adr r3, 80148f8 <scalbn+0xe0>)
 801484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801484e:	e03a      	b.n	80148c6 <scalbn+0xae>
 8014850:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014854:	428a      	cmp	r2, r1
 8014856:	d10c      	bne.n	8014872 <scalbn+0x5a>
 8014858:	ee10 2a10 	vmov	r2, s0
 801485c:	4620      	mov	r0, r4
 801485e:	4629      	mov	r1, r5
 8014860:	f7eb fd1e 	bl	80002a0 <__adddf3>
 8014864:	4604      	mov	r4, r0
 8014866:	460d      	mov	r5, r1
 8014868:	e019      	b.n	801489e <scalbn+0x86>
 801486a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801486e:	460b      	mov	r3, r1
 8014870:	3a36      	subs	r2, #54	; 0x36
 8014872:	4432      	add	r2, r6
 8014874:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014878:	428a      	cmp	r2, r1
 801487a:	dd08      	ble.n	801488e <scalbn+0x76>
 801487c:	2d00      	cmp	r5, #0
 801487e:	a120      	add	r1, pc, #128	; (adr r1, 8014900 <scalbn+0xe8>)
 8014880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014884:	da1c      	bge.n	80148c0 <scalbn+0xa8>
 8014886:	a120      	add	r1, pc, #128	; (adr r1, 8014908 <scalbn+0xf0>)
 8014888:	e9d1 0100 	ldrd	r0, r1, [r1]
 801488c:	e018      	b.n	80148c0 <scalbn+0xa8>
 801488e:	2a00      	cmp	r2, #0
 8014890:	dd08      	ble.n	80148a4 <scalbn+0x8c>
 8014892:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014896:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801489a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801489e:	ec45 4b10 	vmov	d0, r4, r5
 80148a2:	bd70      	pop	{r4, r5, r6, pc}
 80148a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80148a8:	da19      	bge.n	80148de <scalbn+0xc6>
 80148aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80148ae:	429e      	cmp	r6, r3
 80148b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80148b4:	dd0a      	ble.n	80148cc <scalbn+0xb4>
 80148b6:	a112      	add	r1, pc, #72	; (adr r1, 8014900 <scalbn+0xe8>)
 80148b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d1e2      	bne.n	8014886 <scalbn+0x6e>
 80148c0:	a30f      	add	r3, pc, #60	; (adr r3, 8014900 <scalbn+0xe8>)
 80148c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c6:	f7eb fea1 	bl	800060c <__aeabi_dmul>
 80148ca:	e7cb      	b.n	8014864 <scalbn+0x4c>
 80148cc:	a10a      	add	r1, pc, #40	; (adr r1, 80148f8 <scalbn+0xe0>)
 80148ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d0b8      	beq.n	8014848 <scalbn+0x30>
 80148d6:	a10e      	add	r1, pc, #56	; (adr r1, 8014910 <scalbn+0xf8>)
 80148d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80148dc:	e7b4      	b.n	8014848 <scalbn+0x30>
 80148de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80148e2:	3236      	adds	r2, #54	; 0x36
 80148e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80148e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80148ec:	4620      	mov	r0, r4
 80148ee:	4b0c      	ldr	r3, [pc, #48]	; (8014920 <scalbn+0x108>)
 80148f0:	2200      	movs	r2, #0
 80148f2:	e7e8      	b.n	80148c6 <scalbn+0xae>
 80148f4:	f3af 8000 	nop.w
 80148f8:	c2f8f359 	.word	0xc2f8f359
 80148fc:	01a56e1f 	.word	0x01a56e1f
 8014900:	8800759c 	.word	0x8800759c
 8014904:	7e37e43c 	.word	0x7e37e43c
 8014908:	8800759c 	.word	0x8800759c
 801490c:	fe37e43c 	.word	0xfe37e43c
 8014910:	c2f8f359 	.word	0xc2f8f359
 8014914:	81a56e1f 	.word	0x81a56e1f
 8014918:	43500000 	.word	0x43500000
 801491c:	ffff3cb0 	.word	0xffff3cb0
 8014920:	3c900000 	.word	0x3c900000

08014924 <nanf>:
 8014924:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801492c <nanf+0x8>
 8014928:	4770      	bx	lr
 801492a:	bf00      	nop
 801492c:	7fc00000 	.word	0x7fc00000

08014930 <abort>:
 8014930:	b508      	push	{r3, lr}
 8014932:	2006      	movs	r0, #6
 8014934:	f001 fa3a 	bl	8015dac <raise>
 8014938:	2001      	movs	r0, #1
 801493a:	f7f0 f8cf 	bl	8004adc <_exit>
	...

08014940 <__assert_func>:
 8014940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014942:	4614      	mov	r4, r2
 8014944:	461a      	mov	r2, r3
 8014946:	4b09      	ldr	r3, [pc, #36]	; (801496c <__assert_func+0x2c>)
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	4605      	mov	r5, r0
 801494c:	68d8      	ldr	r0, [r3, #12]
 801494e:	b14c      	cbz	r4, 8014964 <__assert_func+0x24>
 8014950:	4b07      	ldr	r3, [pc, #28]	; (8014970 <__assert_func+0x30>)
 8014952:	9100      	str	r1, [sp, #0]
 8014954:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014958:	4906      	ldr	r1, [pc, #24]	; (8014974 <__assert_func+0x34>)
 801495a:	462b      	mov	r3, r5
 801495c:	f000 f81c 	bl	8014998 <fiprintf>
 8014960:	f7ff ffe6 	bl	8014930 <abort>
 8014964:	4b04      	ldr	r3, [pc, #16]	; (8014978 <__assert_func+0x38>)
 8014966:	461c      	mov	r4, r3
 8014968:	e7f3      	b.n	8014952 <__assert_func+0x12>
 801496a:	bf00      	nop
 801496c:	20000230 	.word	0x20000230
 8014970:	08059ad0 	.word	0x08059ad0
 8014974:	08059add 	.word	0x08059add
 8014978:	08059b0b 	.word	0x08059b0b

0801497c <calloc>:
 801497c:	4b02      	ldr	r3, [pc, #8]	; (8014988 <calloc+0xc>)
 801497e:	460a      	mov	r2, r1
 8014980:	4601      	mov	r1, r0
 8014982:	6818      	ldr	r0, [r3, #0]
 8014984:	f000 b882 	b.w	8014a8c <_calloc_r>
 8014988:	20000230 	.word	0x20000230

0801498c <__errno>:
 801498c:	4b01      	ldr	r3, [pc, #4]	; (8014994 <__errno+0x8>)
 801498e:	6818      	ldr	r0, [r3, #0]
 8014990:	4770      	bx	lr
 8014992:	bf00      	nop
 8014994:	20000230 	.word	0x20000230

08014998 <fiprintf>:
 8014998:	b40e      	push	{r1, r2, r3}
 801499a:	b503      	push	{r0, r1, lr}
 801499c:	4601      	mov	r1, r0
 801499e:	ab03      	add	r3, sp, #12
 80149a0:	4805      	ldr	r0, [pc, #20]	; (80149b8 <fiprintf+0x20>)
 80149a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80149a6:	6800      	ldr	r0, [r0, #0]
 80149a8:	9301      	str	r3, [sp, #4]
 80149aa:	f000 f98f 	bl	8014ccc <_vfiprintf_r>
 80149ae:	b002      	add	sp, #8
 80149b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80149b4:	b003      	add	sp, #12
 80149b6:	4770      	bx	lr
 80149b8:	20000230 	.word	0x20000230

080149bc <__libc_init_array>:
 80149bc:	b570      	push	{r4, r5, r6, lr}
 80149be:	4d0d      	ldr	r5, [pc, #52]	; (80149f4 <__libc_init_array+0x38>)
 80149c0:	4c0d      	ldr	r4, [pc, #52]	; (80149f8 <__libc_init_array+0x3c>)
 80149c2:	1b64      	subs	r4, r4, r5
 80149c4:	10a4      	asrs	r4, r4, #2
 80149c6:	2600      	movs	r6, #0
 80149c8:	42a6      	cmp	r6, r4
 80149ca:	d109      	bne.n	80149e0 <__libc_init_array+0x24>
 80149cc:	4d0b      	ldr	r5, [pc, #44]	; (80149fc <__libc_init_array+0x40>)
 80149ce:	4c0c      	ldr	r4, [pc, #48]	; (8014a00 <__libc_init_array+0x44>)
 80149d0:	f004 fcfe 	bl	80193d0 <_init>
 80149d4:	1b64      	subs	r4, r4, r5
 80149d6:	10a4      	asrs	r4, r4, #2
 80149d8:	2600      	movs	r6, #0
 80149da:	42a6      	cmp	r6, r4
 80149dc:	d105      	bne.n	80149ea <__libc_init_array+0x2e>
 80149de:	bd70      	pop	{r4, r5, r6, pc}
 80149e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80149e4:	4798      	blx	r3
 80149e6:	3601      	adds	r6, #1
 80149e8:	e7ee      	b.n	80149c8 <__libc_init_array+0xc>
 80149ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80149ee:	4798      	blx	r3
 80149f0:	3601      	adds	r6, #1
 80149f2:	e7f2      	b.n	80149da <__libc_init_array+0x1e>
 80149f4:	08059f84 	.word	0x08059f84
 80149f8:	08059f84 	.word	0x08059f84
 80149fc:	08059f84 	.word	0x08059f84
 8014a00:	08059f90 	.word	0x08059f90

08014a04 <__retarget_lock_init_recursive>:
 8014a04:	4770      	bx	lr

08014a06 <__retarget_lock_acquire_recursive>:
 8014a06:	4770      	bx	lr

08014a08 <__retarget_lock_release_recursive>:
 8014a08:	4770      	bx	lr
	...

08014a0c <malloc>:
 8014a0c:	4b02      	ldr	r3, [pc, #8]	; (8014a18 <malloc+0xc>)
 8014a0e:	4601      	mov	r1, r0
 8014a10:	6818      	ldr	r0, [r3, #0]
 8014a12:	f000 b8bd 	b.w	8014b90 <_malloc_r>
 8014a16:	bf00      	nop
 8014a18:	20000230 	.word	0x20000230

08014a1c <free>:
 8014a1c:	4b02      	ldr	r3, [pc, #8]	; (8014a28 <free+0xc>)
 8014a1e:	4601      	mov	r1, r0
 8014a20:	6818      	ldr	r0, [r3, #0]
 8014a22:	f000 b849 	b.w	8014ab8 <_free_r>
 8014a26:	bf00      	nop
 8014a28:	20000230 	.word	0x20000230

08014a2c <memcpy>:
 8014a2c:	440a      	add	r2, r1
 8014a2e:	4291      	cmp	r1, r2
 8014a30:	f100 33ff 	add.w	r3, r0, #4294967295
 8014a34:	d100      	bne.n	8014a38 <memcpy+0xc>
 8014a36:	4770      	bx	lr
 8014a38:	b510      	push	{r4, lr}
 8014a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014a42:	4291      	cmp	r1, r2
 8014a44:	d1f9      	bne.n	8014a3a <memcpy+0xe>
 8014a46:	bd10      	pop	{r4, pc}

08014a48 <memmove>:
 8014a48:	4288      	cmp	r0, r1
 8014a4a:	b510      	push	{r4, lr}
 8014a4c:	eb01 0402 	add.w	r4, r1, r2
 8014a50:	d902      	bls.n	8014a58 <memmove+0x10>
 8014a52:	4284      	cmp	r4, r0
 8014a54:	4623      	mov	r3, r4
 8014a56:	d807      	bhi.n	8014a68 <memmove+0x20>
 8014a58:	1e43      	subs	r3, r0, #1
 8014a5a:	42a1      	cmp	r1, r4
 8014a5c:	d008      	beq.n	8014a70 <memmove+0x28>
 8014a5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014a62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014a66:	e7f8      	b.n	8014a5a <memmove+0x12>
 8014a68:	4402      	add	r2, r0
 8014a6a:	4601      	mov	r1, r0
 8014a6c:	428a      	cmp	r2, r1
 8014a6e:	d100      	bne.n	8014a72 <memmove+0x2a>
 8014a70:	bd10      	pop	{r4, pc}
 8014a72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014a76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014a7a:	e7f7      	b.n	8014a6c <memmove+0x24>

08014a7c <memset>:
 8014a7c:	4402      	add	r2, r0
 8014a7e:	4603      	mov	r3, r0
 8014a80:	4293      	cmp	r3, r2
 8014a82:	d100      	bne.n	8014a86 <memset+0xa>
 8014a84:	4770      	bx	lr
 8014a86:	f803 1b01 	strb.w	r1, [r3], #1
 8014a8a:	e7f9      	b.n	8014a80 <memset+0x4>

08014a8c <_calloc_r>:
 8014a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014a8e:	fba1 2402 	umull	r2, r4, r1, r2
 8014a92:	b94c      	cbnz	r4, 8014aa8 <_calloc_r+0x1c>
 8014a94:	4611      	mov	r1, r2
 8014a96:	9201      	str	r2, [sp, #4]
 8014a98:	f000 f87a 	bl	8014b90 <_malloc_r>
 8014a9c:	9a01      	ldr	r2, [sp, #4]
 8014a9e:	4605      	mov	r5, r0
 8014aa0:	b930      	cbnz	r0, 8014ab0 <_calloc_r+0x24>
 8014aa2:	4628      	mov	r0, r5
 8014aa4:	b003      	add	sp, #12
 8014aa6:	bd30      	pop	{r4, r5, pc}
 8014aa8:	220c      	movs	r2, #12
 8014aaa:	6002      	str	r2, [r0, #0]
 8014aac:	2500      	movs	r5, #0
 8014aae:	e7f8      	b.n	8014aa2 <_calloc_r+0x16>
 8014ab0:	4621      	mov	r1, r4
 8014ab2:	f7ff ffe3 	bl	8014a7c <memset>
 8014ab6:	e7f4      	b.n	8014aa2 <_calloc_r+0x16>

08014ab8 <_free_r>:
 8014ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014aba:	2900      	cmp	r1, #0
 8014abc:	d044      	beq.n	8014b48 <_free_r+0x90>
 8014abe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ac2:	9001      	str	r0, [sp, #4]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	f1a1 0404 	sub.w	r4, r1, #4
 8014aca:	bfb8      	it	lt
 8014acc:	18e4      	addlt	r4, r4, r3
 8014ace:	f003 fd67 	bl	80185a0 <__malloc_lock>
 8014ad2:	4a1e      	ldr	r2, [pc, #120]	; (8014b4c <_free_r+0x94>)
 8014ad4:	9801      	ldr	r0, [sp, #4]
 8014ad6:	6813      	ldr	r3, [r2, #0]
 8014ad8:	b933      	cbnz	r3, 8014ae8 <_free_r+0x30>
 8014ada:	6063      	str	r3, [r4, #4]
 8014adc:	6014      	str	r4, [r2, #0]
 8014ade:	b003      	add	sp, #12
 8014ae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014ae4:	f003 bd62 	b.w	80185ac <__malloc_unlock>
 8014ae8:	42a3      	cmp	r3, r4
 8014aea:	d908      	bls.n	8014afe <_free_r+0x46>
 8014aec:	6825      	ldr	r5, [r4, #0]
 8014aee:	1961      	adds	r1, r4, r5
 8014af0:	428b      	cmp	r3, r1
 8014af2:	bf01      	itttt	eq
 8014af4:	6819      	ldreq	r1, [r3, #0]
 8014af6:	685b      	ldreq	r3, [r3, #4]
 8014af8:	1949      	addeq	r1, r1, r5
 8014afa:	6021      	streq	r1, [r4, #0]
 8014afc:	e7ed      	b.n	8014ada <_free_r+0x22>
 8014afe:	461a      	mov	r2, r3
 8014b00:	685b      	ldr	r3, [r3, #4]
 8014b02:	b10b      	cbz	r3, 8014b08 <_free_r+0x50>
 8014b04:	42a3      	cmp	r3, r4
 8014b06:	d9fa      	bls.n	8014afe <_free_r+0x46>
 8014b08:	6811      	ldr	r1, [r2, #0]
 8014b0a:	1855      	adds	r5, r2, r1
 8014b0c:	42a5      	cmp	r5, r4
 8014b0e:	d10b      	bne.n	8014b28 <_free_r+0x70>
 8014b10:	6824      	ldr	r4, [r4, #0]
 8014b12:	4421      	add	r1, r4
 8014b14:	1854      	adds	r4, r2, r1
 8014b16:	42a3      	cmp	r3, r4
 8014b18:	6011      	str	r1, [r2, #0]
 8014b1a:	d1e0      	bne.n	8014ade <_free_r+0x26>
 8014b1c:	681c      	ldr	r4, [r3, #0]
 8014b1e:	685b      	ldr	r3, [r3, #4]
 8014b20:	6053      	str	r3, [r2, #4]
 8014b22:	4421      	add	r1, r4
 8014b24:	6011      	str	r1, [r2, #0]
 8014b26:	e7da      	b.n	8014ade <_free_r+0x26>
 8014b28:	d902      	bls.n	8014b30 <_free_r+0x78>
 8014b2a:	230c      	movs	r3, #12
 8014b2c:	6003      	str	r3, [r0, #0]
 8014b2e:	e7d6      	b.n	8014ade <_free_r+0x26>
 8014b30:	6825      	ldr	r5, [r4, #0]
 8014b32:	1961      	adds	r1, r4, r5
 8014b34:	428b      	cmp	r3, r1
 8014b36:	bf04      	itt	eq
 8014b38:	6819      	ldreq	r1, [r3, #0]
 8014b3a:	685b      	ldreq	r3, [r3, #4]
 8014b3c:	6063      	str	r3, [r4, #4]
 8014b3e:	bf04      	itt	eq
 8014b40:	1949      	addeq	r1, r1, r5
 8014b42:	6021      	streq	r1, [r4, #0]
 8014b44:	6054      	str	r4, [r2, #4]
 8014b46:	e7ca      	b.n	8014ade <_free_r+0x26>
 8014b48:	b003      	add	sp, #12
 8014b4a:	bd30      	pop	{r4, r5, pc}
 8014b4c:	2000299c 	.word	0x2000299c

08014b50 <sbrk_aligned>:
 8014b50:	b570      	push	{r4, r5, r6, lr}
 8014b52:	4e0e      	ldr	r6, [pc, #56]	; (8014b8c <sbrk_aligned+0x3c>)
 8014b54:	460c      	mov	r4, r1
 8014b56:	6831      	ldr	r1, [r6, #0]
 8014b58:	4605      	mov	r5, r0
 8014b5a:	b911      	cbnz	r1, 8014b62 <sbrk_aligned+0x12>
 8014b5c:	f001 f8ee 	bl	8015d3c <_sbrk_r>
 8014b60:	6030      	str	r0, [r6, #0]
 8014b62:	4621      	mov	r1, r4
 8014b64:	4628      	mov	r0, r5
 8014b66:	f001 f8e9 	bl	8015d3c <_sbrk_r>
 8014b6a:	1c43      	adds	r3, r0, #1
 8014b6c:	d00a      	beq.n	8014b84 <sbrk_aligned+0x34>
 8014b6e:	1cc4      	adds	r4, r0, #3
 8014b70:	f024 0403 	bic.w	r4, r4, #3
 8014b74:	42a0      	cmp	r0, r4
 8014b76:	d007      	beq.n	8014b88 <sbrk_aligned+0x38>
 8014b78:	1a21      	subs	r1, r4, r0
 8014b7a:	4628      	mov	r0, r5
 8014b7c:	f001 f8de 	bl	8015d3c <_sbrk_r>
 8014b80:	3001      	adds	r0, #1
 8014b82:	d101      	bne.n	8014b88 <sbrk_aligned+0x38>
 8014b84:	f04f 34ff 	mov.w	r4, #4294967295
 8014b88:	4620      	mov	r0, r4
 8014b8a:	bd70      	pop	{r4, r5, r6, pc}
 8014b8c:	200029a0 	.word	0x200029a0

08014b90 <_malloc_r>:
 8014b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b94:	1ccd      	adds	r5, r1, #3
 8014b96:	f025 0503 	bic.w	r5, r5, #3
 8014b9a:	3508      	adds	r5, #8
 8014b9c:	2d0c      	cmp	r5, #12
 8014b9e:	bf38      	it	cc
 8014ba0:	250c      	movcc	r5, #12
 8014ba2:	2d00      	cmp	r5, #0
 8014ba4:	4607      	mov	r7, r0
 8014ba6:	db01      	blt.n	8014bac <_malloc_r+0x1c>
 8014ba8:	42a9      	cmp	r1, r5
 8014baa:	d905      	bls.n	8014bb8 <_malloc_r+0x28>
 8014bac:	230c      	movs	r3, #12
 8014bae:	603b      	str	r3, [r7, #0]
 8014bb0:	2600      	movs	r6, #0
 8014bb2:	4630      	mov	r0, r6
 8014bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bb8:	4e2e      	ldr	r6, [pc, #184]	; (8014c74 <_malloc_r+0xe4>)
 8014bba:	f003 fcf1 	bl	80185a0 <__malloc_lock>
 8014bbe:	6833      	ldr	r3, [r6, #0]
 8014bc0:	461c      	mov	r4, r3
 8014bc2:	bb34      	cbnz	r4, 8014c12 <_malloc_r+0x82>
 8014bc4:	4629      	mov	r1, r5
 8014bc6:	4638      	mov	r0, r7
 8014bc8:	f7ff ffc2 	bl	8014b50 <sbrk_aligned>
 8014bcc:	1c43      	adds	r3, r0, #1
 8014bce:	4604      	mov	r4, r0
 8014bd0:	d14d      	bne.n	8014c6e <_malloc_r+0xde>
 8014bd2:	6834      	ldr	r4, [r6, #0]
 8014bd4:	4626      	mov	r6, r4
 8014bd6:	2e00      	cmp	r6, #0
 8014bd8:	d140      	bne.n	8014c5c <_malloc_r+0xcc>
 8014bda:	6823      	ldr	r3, [r4, #0]
 8014bdc:	4631      	mov	r1, r6
 8014bde:	4638      	mov	r0, r7
 8014be0:	eb04 0803 	add.w	r8, r4, r3
 8014be4:	f001 f8aa 	bl	8015d3c <_sbrk_r>
 8014be8:	4580      	cmp	r8, r0
 8014bea:	d13a      	bne.n	8014c62 <_malloc_r+0xd2>
 8014bec:	6821      	ldr	r1, [r4, #0]
 8014bee:	3503      	adds	r5, #3
 8014bf0:	1a6d      	subs	r5, r5, r1
 8014bf2:	f025 0503 	bic.w	r5, r5, #3
 8014bf6:	3508      	adds	r5, #8
 8014bf8:	2d0c      	cmp	r5, #12
 8014bfa:	bf38      	it	cc
 8014bfc:	250c      	movcc	r5, #12
 8014bfe:	4629      	mov	r1, r5
 8014c00:	4638      	mov	r0, r7
 8014c02:	f7ff ffa5 	bl	8014b50 <sbrk_aligned>
 8014c06:	3001      	adds	r0, #1
 8014c08:	d02b      	beq.n	8014c62 <_malloc_r+0xd2>
 8014c0a:	6823      	ldr	r3, [r4, #0]
 8014c0c:	442b      	add	r3, r5
 8014c0e:	6023      	str	r3, [r4, #0]
 8014c10:	e00e      	b.n	8014c30 <_malloc_r+0xa0>
 8014c12:	6822      	ldr	r2, [r4, #0]
 8014c14:	1b52      	subs	r2, r2, r5
 8014c16:	d41e      	bmi.n	8014c56 <_malloc_r+0xc6>
 8014c18:	2a0b      	cmp	r2, #11
 8014c1a:	d916      	bls.n	8014c4a <_malloc_r+0xba>
 8014c1c:	1961      	adds	r1, r4, r5
 8014c1e:	42a3      	cmp	r3, r4
 8014c20:	6025      	str	r5, [r4, #0]
 8014c22:	bf18      	it	ne
 8014c24:	6059      	strne	r1, [r3, #4]
 8014c26:	6863      	ldr	r3, [r4, #4]
 8014c28:	bf08      	it	eq
 8014c2a:	6031      	streq	r1, [r6, #0]
 8014c2c:	5162      	str	r2, [r4, r5]
 8014c2e:	604b      	str	r3, [r1, #4]
 8014c30:	4638      	mov	r0, r7
 8014c32:	f104 060b 	add.w	r6, r4, #11
 8014c36:	f003 fcb9 	bl	80185ac <__malloc_unlock>
 8014c3a:	f026 0607 	bic.w	r6, r6, #7
 8014c3e:	1d23      	adds	r3, r4, #4
 8014c40:	1af2      	subs	r2, r6, r3
 8014c42:	d0b6      	beq.n	8014bb2 <_malloc_r+0x22>
 8014c44:	1b9b      	subs	r3, r3, r6
 8014c46:	50a3      	str	r3, [r4, r2]
 8014c48:	e7b3      	b.n	8014bb2 <_malloc_r+0x22>
 8014c4a:	6862      	ldr	r2, [r4, #4]
 8014c4c:	42a3      	cmp	r3, r4
 8014c4e:	bf0c      	ite	eq
 8014c50:	6032      	streq	r2, [r6, #0]
 8014c52:	605a      	strne	r2, [r3, #4]
 8014c54:	e7ec      	b.n	8014c30 <_malloc_r+0xa0>
 8014c56:	4623      	mov	r3, r4
 8014c58:	6864      	ldr	r4, [r4, #4]
 8014c5a:	e7b2      	b.n	8014bc2 <_malloc_r+0x32>
 8014c5c:	4634      	mov	r4, r6
 8014c5e:	6876      	ldr	r6, [r6, #4]
 8014c60:	e7b9      	b.n	8014bd6 <_malloc_r+0x46>
 8014c62:	230c      	movs	r3, #12
 8014c64:	603b      	str	r3, [r7, #0]
 8014c66:	4638      	mov	r0, r7
 8014c68:	f003 fca0 	bl	80185ac <__malloc_unlock>
 8014c6c:	e7a1      	b.n	8014bb2 <_malloc_r+0x22>
 8014c6e:	6025      	str	r5, [r4, #0]
 8014c70:	e7de      	b.n	8014c30 <_malloc_r+0xa0>
 8014c72:	bf00      	nop
 8014c74:	2000299c 	.word	0x2000299c

08014c78 <__sfputc_r>:
 8014c78:	6893      	ldr	r3, [r2, #8]
 8014c7a:	3b01      	subs	r3, #1
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	b410      	push	{r4}
 8014c80:	6093      	str	r3, [r2, #8]
 8014c82:	da08      	bge.n	8014c96 <__sfputc_r+0x1e>
 8014c84:	6994      	ldr	r4, [r2, #24]
 8014c86:	42a3      	cmp	r3, r4
 8014c88:	db01      	blt.n	8014c8e <__sfputc_r+0x16>
 8014c8a:	290a      	cmp	r1, #10
 8014c8c:	d103      	bne.n	8014c96 <__sfputc_r+0x1e>
 8014c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c92:	f001 bfa9 	b.w	8016be8 <__swbuf_r>
 8014c96:	6813      	ldr	r3, [r2, #0]
 8014c98:	1c58      	adds	r0, r3, #1
 8014c9a:	6010      	str	r0, [r2, #0]
 8014c9c:	7019      	strb	r1, [r3, #0]
 8014c9e:	4608      	mov	r0, r1
 8014ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ca4:	4770      	bx	lr

08014ca6 <__sfputs_r>:
 8014ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ca8:	4606      	mov	r6, r0
 8014caa:	460f      	mov	r7, r1
 8014cac:	4614      	mov	r4, r2
 8014cae:	18d5      	adds	r5, r2, r3
 8014cb0:	42ac      	cmp	r4, r5
 8014cb2:	d101      	bne.n	8014cb8 <__sfputs_r+0x12>
 8014cb4:	2000      	movs	r0, #0
 8014cb6:	e007      	b.n	8014cc8 <__sfputs_r+0x22>
 8014cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014cbc:	463a      	mov	r2, r7
 8014cbe:	4630      	mov	r0, r6
 8014cc0:	f7ff ffda 	bl	8014c78 <__sfputc_r>
 8014cc4:	1c43      	adds	r3, r0, #1
 8014cc6:	d1f3      	bne.n	8014cb0 <__sfputs_r+0xa>
 8014cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014ccc <_vfiprintf_r>:
 8014ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cd0:	460d      	mov	r5, r1
 8014cd2:	b09d      	sub	sp, #116	; 0x74
 8014cd4:	4614      	mov	r4, r2
 8014cd6:	4698      	mov	r8, r3
 8014cd8:	4606      	mov	r6, r0
 8014cda:	b118      	cbz	r0, 8014ce4 <_vfiprintf_r+0x18>
 8014cdc:	6983      	ldr	r3, [r0, #24]
 8014cde:	b90b      	cbnz	r3, 8014ce4 <_vfiprintf_r+0x18>
 8014ce0:	f002 ffd6 	bl	8017c90 <__sinit>
 8014ce4:	4b89      	ldr	r3, [pc, #548]	; (8014f0c <_vfiprintf_r+0x240>)
 8014ce6:	429d      	cmp	r5, r3
 8014ce8:	d11b      	bne.n	8014d22 <_vfiprintf_r+0x56>
 8014cea:	6875      	ldr	r5, [r6, #4]
 8014cec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014cee:	07d9      	lsls	r1, r3, #31
 8014cf0:	d405      	bmi.n	8014cfe <_vfiprintf_r+0x32>
 8014cf2:	89ab      	ldrh	r3, [r5, #12]
 8014cf4:	059a      	lsls	r2, r3, #22
 8014cf6:	d402      	bmi.n	8014cfe <_vfiprintf_r+0x32>
 8014cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014cfa:	f7ff fe84 	bl	8014a06 <__retarget_lock_acquire_recursive>
 8014cfe:	89ab      	ldrh	r3, [r5, #12]
 8014d00:	071b      	lsls	r3, r3, #28
 8014d02:	d501      	bpl.n	8014d08 <_vfiprintf_r+0x3c>
 8014d04:	692b      	ldr	r3, [r5, #16]
 8014d06:	b9eb      	cbnz	r3, 8014d44 <_vfiprintf_r+0x78>
 8014d08:	4629      	mov	r1, r5
 8014d0a:	4630      	mov	r0, r6
 8014d0c:	f001 ffbe 	bl	8016c8c <__swsetup_r>
 8014d10:	b1c0      	cbz	r0, 8014d44 <_vfiprintf_r+0x78>
 8014d12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014d14:	07dc      	lsls	r4, r3, #31
 8014d16:	d50e      	bpl.n	8014d36 <_vfiprintf_r+0x6a>
 8014d18:	f04f 30ff 	mov.w	r0, #4294967295
 8014d1c:	b01d      	add	sp, #116	; 0x74
 8014d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d22:	4b7b      	ldr	r3, [pc, #492]	; (8014f10 <_vfiprintf_r+0x244>)
 8014d24:	429d      	cmp	r5, r3
 8014d26:	d101      	bne.n	8014d2c <_vfiprintf_r+0x60>
 8014d28:	68b5      	ldr	r5, [r6, #8]
 8014d2a:	e7df      	b.n	8014cec <_vfiprintf_r+0x20>
 8014d2c:	4b79      	ldr	r3, [pc, #484]	; (8014f14 <_vfiprintf_r+0x248>)
 8014d2e:	429d      	cmp	r5, r3
 8014d30:	bf08      	it	eq
 8014d32:	68f5      	ldreq	r5, [r6, #12]
 8014d34:	e7da      	b.n	8014cec <_vfiprintf_r+0x20>
 8014d36:	89ab      	ldrh	r3, [r5, #12]
 8014d38:	0598      	lsls	r0, r3, #22
 8014d3a:	d4ed      	bmi.n	8014d18 <_vfiprintf_r+0x4c>
 8014d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014d3e:	f7ff fe63 	bl	8014a08 <__retarget_lock_release_recursive>
 8014d42:	e7e9      	b.n	8014d18 <_vfiprintf_r+0x4c>
 8014d44:	2300      	movs	r3, #0
 8014d46:	9309      	str	r3, [sp, #36]	; 0x24
 8014d48:	2320      	movs	r3, #32
 8014d4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014d4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d52:	2330      	movs	r3, #48	; 0x30
 8014d54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014f18 <_vfiprintf_r+0x24c>
 8014d58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014d5c:	f04f 0901 	mov.w	r9, #1
 8014d60:	4623      	mov	r3, r4
 8014d62:	469a      	mov	sl, r3
 8014d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d68:	b10a      	cbz	r2, 8014d6e <_vfiprintf_r+0xa2>
 8014d6a:	2a25      	cmp	r2, #37	; 0x25
 8014d6c:	d1f9      	bne.n	8014d62 <_vfiprintf_r+0x96>
 8014d6e:	ebba 0b04 	subs.w	fp, sl, r4
 8014d72:	d00b      	beq.n	8014d8c <_vfiprintf_r+0xc0>
 8014d74:	465b      	mov	r3, fp
 8014d76:	4622      	mov	r2, r4
 8014d78:	4629      	mov	r1, r5
 8014d7a:	4630      	mov	r0, r6
 8014d7c:	f7ff ff93 	bl	8014ca6 <__sfputs_r>
 8014d80:	3001      	adds	r0, #1
 8014d82:	f000 80aa 	beq.w	8014eda <_vfiprintf_r+0x20e>
 8014d86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d88:	445a      	add	r2, fp
 8014d8a:	9209      	str	r2, [sp, #36]	; 0x24
 8014d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	f000 80a2 	beq.w	8014eda <_vfiprintf_r+0x20e>
 8014d96:	2300      	movs	r3, #0
 8014d98:	f04f 32ff 	mov.w	r2, #4294967295
 8014d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014da0:	f10a 0a01 	add.w	sl, sl, #1
 8014da4:	9304      	str	r3, [sp, #16]
 8014da6:	9307      	str	r3, [sp, #28]
 8014da8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014dac:	931a      	str	r3, [sp, #104]	; 0x68
 8014dae:	4654      	mov	r4, sl
 8014db0:	2205      	movs	r2, #5
 8014db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014db6:	4858      	ldr	r0, [pc, #352]	; (8014f18 <_vfiprintf_r+0x24c>)
 8014db8:	f7eb fa0a 	bl	80001d0 <memchr>
 8014dbc:	9a04      	ldr	r2, [sp, #16]
 8014dbe:	b9d8      	cbnz	r0, 8014df8 <_vfiprintf_r+0x12c>
 8014dc0:	06d1      	lsls	r1, r2, #27
 8014dc2:	bf44      	itt	mi
 8014dc4:	2320      	movmi	r3, #32
 8014dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014dca:	0713      	lsls	r3, r2, #28
 8014dcc:	bf44      	itt	mi
 8014dce:	232b      	movmi	r3, #43	; 0x2b
 8014dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8014dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8014dda:	d015      	beq.n	8014e08 <_vfiprintf_r+0x13c>
 8014ddc:	9a07      	ldr	r2, [sp, #28]
 8014dde:	4654      	mov	r4, sl
 8014de0:	2000      	movs	r0, #0
 8014de2:	f04f 0c0a 	mov.w	ip, #10
 8014de6:	4621      	mov	r1, r4
 8014de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014dec:	3b30      	subs	r3, #48	; 0x30
 8014dee:	2b09      	cmp	r3, #9
 8014df0:	d94e      	bls.n	8014e90 <_vfiprintf_r+0x1c4>
 8014df2:	b1b0      	cbz	r0, 8014e22 <_vfiprintf_r+0x156>
 8014df4:	9207      	str	r2, [sp, #28]
 8014df6:	e014      	b.n	8014e22 <_vfiprintf_r+0x156>
 8014df8:	eba0 0308 	sub.w	r3, r0, r8
 8014dfc:	fa09 f303 	lsl.w	r3, r9, r3
 8014e00:	4313      	orrs	r3, r2
 8014e02:	9304      	str	r3, [sp, #16]
 8014e04:	46a2      	mov	sl, r4
 8014e06:	e7d2      	b.n	8014dae <_vfiprintf_r+0xe2>
 8014e08:	9b03      	ldr	r3, [sp, #12]
 8014e0a:	1d19      	adds	r1, r3, #4
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	9103      	str	r1, [sp, #12]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	bfbb      	ittet	lt
 8014e14:	425b      	neglt	r3, r3
 8014e16:	f042 0202 	orrlt.w	r2, r2, #2
 8014e1a:	9307      	strge	r3, [sp, #28]
 8014e1c:	9307      	strlt	r3, [sp, #28]
 8014e1e:	bfb8      	it	lt
 8014e20:	9204      	strlt	r2, [sp, #16]
 8014e22:	7823      	ldrb	r3, [r4, #0]
 8014e24:	2b2e      	cmp	r3, #46	; 0x2e
 8014e26:	d10c      	bne.n	8014e42 <_vfiprintf_r+0x176>
 8014e28:	7863      	ldrb	r3, [r4, #1]
 8014e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8014e2c:	d135      	bne.n	8014e9a <_vfiprintf_r+0x1ce>
 8014e2e:	9b03      	ldr	r3, [sp, #12]
 8014e30:	1d1a      	adds	r2, r3, #4
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	9203      	str	r2, [sp, #12]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	bfb8      	it	lt
 8014e3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8014e3e:	3402      	adds	r4, #2
 8014e40:	9305      	str	r3, [sp, #20]
 8014e42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014f28 <_vfiprintf_r+0x25c>
 8014e46:	7821      	ldrb	r1, [r4, #0]
 8014e48:	2203      	movs	r2, #3
 8014e4a:	4650      	mov	r0, sl
 8014e4c:	f7eb f9c0 	bl	80001d0 <memchr>
 8014e50:	b140      	cbz	r0, 8014e64 <_vfiprintf_r+0x198>
 8014e52:	2340      	movs	r3, #64	; 0x40
 8014e54:	eba0 000a 	sub.w	r0, r0, sl
 8014e58:	fa03 f000 	lsl.w	r0, r3, r0
 8014e5c:	9b04      	ldr	r3, [sp, #16]
 8014e5e:	4303      	orrs	r3, r0
 8014e60:	3401      	adds	r4, #1
 8014e62:	9304      	str	r3, [sp, #16]
 8014e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e68:	482c      	ldr	r0, [pc, #176]	; (8014f1c <_vfiprintf_r+0x250>)
 8014e6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014e6e:	2206      	movs	r2, #6
 8014e70:	f7eb f9ae 	bl	80001d0 <memchr>
 8014e74:	2800      	cmp	r0, #0
 8014e76:	d03f      	beq.n	8014ef8 <_vfiprintf_r+0x22c>
 8014e78:	4b29      	ldr	r3, [pc, #164]	; (8014f20 <_vfiprintf_r+0x254>)
 8014e7a:	bb1b      	cbnz	r3, 8014ec4 <_vfiprintf_r+0x1f8>
 8014e7c:	9b03      	ldr	r3, [sp, #12]
 8014e7e:	3307      	adds	r3, #7
 8014e80:	f023 0307 	bic.w	r3, r3, #7
 8014e84:	3308      	adds	r3, #8
 8014e86:	9303      	str	r3, [sp, #12]
 8014e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e8a:	443b      	add	r3, r7
 8014e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8014e8e:	e767      	b.n	8014d60 <_vfiprintf_r+0x94>
 8014e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8014e94:	460c      	mov	r4, r1
 8014e96:	2001      	movs	r0, #1
 8014e98:	e7a5      	b.n	8014de6 <_vfiprintf_r+0x11a>
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	3401      	adds	r4, #1
 8014e9e:	9305      	str	r3, [sp, #20]
 8014ea0:	4619      	mov	r1, r3
 8014ea2:	f04f 0c0a 	mov.w	ip, #10
 8014ea6:	4620      	mov	r0, r4
 8014ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014eac:	3a30      	subs	r2, #48	; 0x30
 8014eae:	2a09      	cmp	r2, #9
 8014eb0:	d903      	bls.n	8014eba <_vfiprintf_r+0x1ee>
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d0c5      	beq.n	8014e42 <_vfiprintf_r+0x176>
 8014eb6:	9105      	str	r1, [sp, #20]
 8014eb8:	e7c3      	b.n	8014e42 <_vfiprintf_r+0x176>
 8014eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8014ebe:	4604      	mov	r4, r0
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	e7f0      	b.n	8014ea6 <_vfiprintf_r+0x1da>
 8014ec4:	ab03      	add	r3, sp, #12
 8014ec6:	9300      	str	r3, [sp, #0]
 8014ec8:	462a      	mov	r2, r5
 8014eca:	4b16      	ldr	r3, [pc, #88]	; (8014f24 <_vfiprintf_r+0x258>)
 8014ecc:	a904      	add	r1, sp, #16
 8014ece:	4630      	mov	r0, r6
 8014ed0:	f000 f8cc 	bl	801506c <_printf_float>
 8014ed4:	4607      	mov	r7, r0
 8014ed6:	1c78      	adds	r0, r7, #1
 8014ed8:	d1d6      	bne.n	8014e88 <_vfiprintf_r+0x1bc>
 8014eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014edc:	07d9      	lsls	r1, r3, #31
 8014ede:	d405      	bmi.n	8014eec <_vfiprintf_r+0x220>
 8014ee0:	89ab      	ldrh	r3, [r5, #12]
 8014ee2:	059a      	lsls	r2, r3, #22
 8014ee4:	d402      	bmi.n	8014eec <_vfiprintf_r+0x220>
 8014ee6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014ee8:	f7ff fd8e 	bl	8014a08 <__retarget_lock_release_recursive>
 8014eec:	89ab      	ldrh	r3, [r5, #12]
 8014eee:	065b      	lsls	r3, r3, #25
 8014ef0:	f53f af12 	bmi.w	8014d18 <_vfiprintf_r+0x4c>
 8014ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ef6:	e711      	b.n	8014d1c <_vfiprintf_r+0x50>
 8014ef8:	ab03      	add	r3, sp, #12
 8014efa:	9300      	str	r3, [sp, #0]
 8014efc:	462a      	mov	r2, r5
 8014efe:	4b09      	ldr	r3, [pc, #36]	; (8014f24 <_vfiprintf_r+0x258>)
 8014f00:	a904      	add	r1, sp, #16
 8014f02:	4630      	mov	r0, r6
 8014f04:	f000 fb56 	bl	80155b4 <_printf_i>
 8014f08:	e7e4      	b.n	8014ed4 <_vfiprintf_r+0x208>
 8014f0a:	bf00      	nop
 8014f0c:	08059d64 	.word	0x08059d64
 8014f10:	08059d84 	.word	0x08059d84
 8014f14:	08059d44 	.word	0x08059d44
 8014f18:	08059b10 	.word	0x08059b10
 8014f1c:	08059b1a 	.word	0x08059b1a
 8014f20:	0801506d 	.word	0x0801506d
 8014f24:	08014ca7 	.word	0x08014ca7
 8014f28:	08059b16 	.word	0x08059b16

08014f2c <__cvt>:
 8014f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014f30:	ec55 4b10 	vmov	r4, r5, d0
 8014f34:	2d00      	cmp	r5, #0
 8014f36:	460e      	mov	r6, r1
 8014f38:	4619      	mov	r1, r3
 8014f3a:	462b      	mov	r3, r5
 8014f3c:	bfbb      	ittet	lt
 8014f3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014f42:	461d      	movlt	r5, r3
 8014f44:	2300      	movge	r3, #0
 8014f46:	232d      	movlt	r3, #45	; 0x2d
 8014f48:	700b      	strb	r3, [r1, #0]
 8014f4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014f50:	4691      	mov	r9, r2
 8014f52:	f023 0820 	bic.w	r8, r3, #32
 8014f56:	bfbc      	itt	lt
 8014f58:	4622      	movlt	r2, r4
 8014f5a:	4614      	movlt	r4, r2
 8014f5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014f60:	d005      	beq.n	8014f6e <__cvt+0x42>
 8014f62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014f66:	d100      	bne.n	8014f6a <__cvt+0x3e>
 8014f68:	3601      	adds	r6, #1
 8014f6a:	2102      	movs	r1, #2
 8014f6c:	e000      	b.n	8014f70 <__cvt+0x44>
 8014f6e:	2103      	movs	r1, #3
 8014f70:	ab03      	add	r3, sp, #12
 8014f72:	9301      	str	r3, [sp, #4]
 8014f74:	ab02      	add	r3, sp, #8
 8014f76:	9300      	str	r3, [sp, #0]
 8014f78:	ec45 4b10 	vmov	d0, r4, r5
 8014f7c:	4653      	mov	r3, sl
 8014f7e:	4632      	mov	r2, r6
 8014f80:	f001 ff7e 	bl	8016e80 <_dtoa_r>
 8014f84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014f88:	4607      	mov	r7, r0
 8014f8a:	d102      	bne.n	8014f92 <__cvt+0x66>
 8014f8c:	f019 0f01 	tst.w	r9, #1
 8014f90:	d022      	beq.n	8014fd8 <__cvt+0xac>
 8014f92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014f96:	eb07 0906 	add.w	r9, r7, r6
 8014f9a:	d110      	bne.n	8014fbe <__cvt+0x92>
 8014f9c:	783b      	ldrb	r3, [r7, #0]
 8014f9e:	2b30      	cmp	r3, #48	; 0x30
 8014fa0:	d10a      	bne.n	8014fb8 <__cvt+0x8c>
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	4620      	mov	r0, r4
 8014fa8:	4629      	mov	r1, r5
 8014faa:	f7eb fd97 	bl	8000adc <__aeabi_dcmpeq>
 8014fae:	b918      	cbnz	r0, 8014fb8 <__cvt+0x8c>
 8014fb0:	f1c6 0601 	rsb	r6, r6, #1
 8014fb4:	f8ca 6000 	str.w	r6, [sl]
 8014fb8:	f8da 3000 	ldr.w	r3, [sl]
 8014fbc:	4499      	add	r9, r3
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	4620      	mov	r0, r4
 8014fc4:	4629      	mov	r1, r5
 8014fc6:	f7eb fd89 	bl	8000adc <__aeabi_dcmpeq>
 8014fca:	b108      	cbz	r0, 8014fd0 <__cvt+0xa4>
 8014fcc:	f8cd 900c 	str.w	r9, [sp, #12]
 8014fd0:	2230      	movs	r2, #48	; 0x30
 8014fd2:	9b03      	ldr	r3, [sp, #12]
 8014fd4:	454b      	cmp	r3, r9
 8014fd6:	d307      	bcc.n	8014fe8 <__cvt+0xbc>
 8014fd8:	9b03      	ldr	r3, [sp, #12]
 8014fda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014fdc:	1bdb      	subs	r3, r3, r7
 8014fde:	4638      	mov	r0, r7
 8014fe0:	6013      	str	r3, [r2, #0]
 8014fe2:	b004      	add	sp, #16
 8014fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fe8:	1c59      	adds	r1, r3, #1
 8014fea:	9103      	str	r1, [sp, #12]
 8014fec:	701a      	strb	r2, [r3, #0]
 8014fee:	e7f0      	b.n	8014fd2 <__cvt+0xa6>

08014ff0 <__exponent>:
 8014ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	2900      	cmp	r1, #0
 8014ff6:	bfb8      	it	lt
 8014ff8:	4249      	neglt	r1, r1
 8014ffa:	f803 2b02 	strb.w	r2, [r3], #2
 8014ffe:	bfb4      	ite	lt
 8015000:	222d      	movlt	r2, #45	; 0x2d
 8015002:	222b      	movge	r2, #43	; 0x2b
 8015004:	2909      	cmp	r1, #9
 8015006:	7042      	strb	r2, [r0, #1]
 8015008:	dd2a      	ble.n	8015060 <__exponent+0x70>
 801500a:	f10d 0407 	add.w	r4, sp, #7
 801500e:	46a4      	mov	ip, r4
 8015010:	270a      	movs	r7, #10
 8015012:	46a6      	mov	lr, r4
 8015014:	460a      	mov	r2, r1
 8015016:	fb91 f6f7 	sdiv	r6, r1, r7
 801501a:	fb07 1516 	mls	r5, r7, r6, r1
 801501e:	3530      	adds	r5, #48	; 0x30
 8015020:	2a63      	cmp	r2, #99	; 0x63
 8015022:	f104 34ff 	add.w	r4, r4, #4294967295
 8015026:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801502a:	4631      	mov	r1, r6
 801502c:	dcf1      	bgt.n	8015012 <__exponent+0x22>
 801502e:	3130      	adds	r1, #48	; 0x30
 8015030:	f1ae 0502 	sub.w	r5, lr, #2
 8015034:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015038:	1c44      	adds	r4, r0, #1
 801503a:	4629      	mov	r1, r5
 801503c:	4561      	cmp	r1, ip
 801503e:	d30a      	bcc.n	8015056 <__exponent+0x66>
 8015040:	f10d 0209 	add.w	r2, sp, #9
 8015044:	eba2 020e 	sub.w	r2, r2, lr
 8015048:	4565      	cmp	r5, ip
 801504a:	bf88      	it	hi
 801504c:	2200      	movhi	r2, #0
 801504e:	4413      	add	r3, r2
 8015050:	1a18      	subs	r0, r3, r0
 8015052:	b003      	add	sp, #12
 8015054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015056:	f811 2b01 	ldrb.w	r2, [r1], #1
 801505a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801505e:	e7ed      	b.n	801503c <__exponent+0x4c>
 8015060:	2330      	movs	r3, #48	; 0x30
 8015062:	3130      	adds	r1, #48	; 0x30
 8015064:	7083      	strb	r3, [r0, #2]
 8015066:	70c1      	strb	r1, [r0, #3]
 8015068:	1d03      	adds	r3, r0, #4
 801506a:	e7f1      	b.n	8015050 <__exponent+0x60>

0801506c <_printf_float>:
 801506c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015070:	ed2d 8b02 	vpush	{d8}
 8015074:	b08d      	sub	sp, #52	; 0x34
 8015076:	460c      	mov	r4, r1
 8015078:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801507c:	4616      	mov	r6, r2
 801507e:	461f      	mov	r7, r3
 8015080:	4605      	mov	r5, r0
 8015082:	f003 fa11 	bl	80184a8 <_localeconv_r>
 8015086:	f8d0 a000 	ldr.w	sl, [r0]
 801508a:	4650      	mov	r0, sl
 801508c:	f7eb f8fa 	bl	8000284 <strlen>
 8015090:	2300      	movs	r3, #0
 8015092:	930a      	str	r3, [sp, #40]	; 0x28
 8015094:	6823      	ldr	r3, [r4, #0]
 8015096:	9305      	str	r3, [sp, #20]
 8015098:	f8d8 3000 	ldr.w	r3, [r8]
 801509c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80150a0:	3307      	adds	r3, #7
 80150a2:	f023 0307 	bic.w	r3, r3, #7
 80150a6:	f103 0208 	add.w	r2, r3, #8
 80150aa:	f8c8 2000 	str.w	r2, [r8]
 80150ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80150b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80150ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80150be:	9307      	str	r3, [sp, #28]
 80150c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80150c4:	ee08 0a10 	vmov	s16, r0
 80150c8:	4b9f      	ldr	r3, [pc, #636]	; (8015348 <_printf_float+0x2dc>)
 80150ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80150ce:	f04f 32ff 	mov.w	r2, #4294967295
 80150d2:	f7eb fd35 	bl	8000b40 <__aeabi_dcmpun>
 80150d6:	bb88      	cbnz	r0, 801513c <_printf_float+0xd0>
 80150d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80150dc:	4b9a      	ldr	r3, [pc, #616]	; (8015348 <_printf_float+0x2dc>)
 80150de:	f04f 32ff 	mov.w	r2, #4294967295
 80150e2:	f7eb fd0f 	bl	8000b04 <__aeabi_dcmple>
 80150e6:	bb48      	cbnz	r0, 801513c <_printf_float+0xd0>
 80150e8:	2200      	movs	r2, #0
 80150ea:	2300      	movs	r3, #0
 80150ec:	4640      	mov	r0, r8
 80150ee:	4649      	mov	r1, r9
 80150f0:	f7eb fcfe 	bl	8000af0 <__aeabi_dcmplt>
 80150f4:	b110      	cbz	r0, 80150fc <_printf_float+0x90>
 80150f6:	232d      	movs	r3, #45	; 0x2d
 80150f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80150fc:	4b93      	ldr	r3, [pc, #588]	; (801534c <_printf_float+0x2e0>)
 80150fe:	4894      	ldr	r0, [pc, #592]	; (8015350 <_printf_float+0x2e4>)
 8015100:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015104:	bf94      	ite	ls
 8015106:	4698      	movls	r8, r3
 8015108:	4680      	movhi	r8, r0
 801510a:	2303      	movs	r3, #3
 801510c:	6123      	str	r3, [r4, #16]
 801510e:	9b05      	ldr	r3, [sp, #20]
 8015110:	f023 0204 	bic.w	r2, r3, #4
 8015114:	6022      	str	r2, [r4, #0]
 8015116:	f04f 0900 	mov.w	r9, #0
 801511a:	9700      	str	r7, [sp, #0]
 801511c:	4633      	mov	r3, r6
 801511e:	aa0b      	add	r2, sp, #44	; 0x2c
 8015120:	4621      	mov	r1, r4
 8015122:	4628      	mov	r0, r5
 8015124:	f000 f9d8 	bl	80154d8 <_printf_common>
 8015128:	3001      	adds	r0, #1
 801512a:	f040 8090 	bne.w	801524e <_printf_float+0x1e2>
 801512e:	f04f 30ff 	mov.w	r0, #4294967295
 8015132:	b00d      	add	sp, #52	; 0x34
 8015134:	ecbd 8b02 	vpop	{d8}
 8015138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801513c:	4642      	mov	r2, r8
 801513e:	464b      	mov	r3, r9
 8015140:	4640      	mov	r0, r8
 8015142:	4649      	mov	r1, r9
 8015144:	f7eb fcfc 	bl	8000b40 <__aeabi_dcmpun>
 8015148:	b140      	cbz	r0, 801515c <_printf_float+0xf0>
 801514a:	464b      	mov	r3, r9
 801514c:	2b00      	cmp	r3, #0
 801514e:	bfbc      	itt	lt
 8015150:	232d      	movlt	r3, #45	; 0x2d
 8015152:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015156:	487f      	ldr	r0, [pc, #508]	; (8015354 <_printf_float+0x2e8>)
 8015158:	4b7f      	ldr	r3, [pc, #508]	; (8015358 <_printf_float+0x2ec>)
 801515a:	e7d1      	b.n	8015100 <_printf_float+0x94>
 801515c:	6863      	ldr	r3, [r4, #4]
 801515e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8015162:	9206      	str	r2, [sp, #24]
 8015164:	1c5a      	adds	r2, r3, #1
 8015166:	d13f      	bne.n	80151e8 <_printf_float+0x17c>
 8015168:	2306      	movs	r3, #6
 801516a:	6063      	str	r3, [r4, #4]
 801516c:	9b05      	ldr	r3, [sp, #20]
 801516e:	6861      	ldr	r1, [r4, #4]
 8015170:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015174:	2300      	movs	r3, #0
 8015176:	9303      	str	r3, [sp, #12]
 8015178:	ab0a      	add	r3, sp, #40	; 0x28
 801517a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801517e:	ab09      	add	r3, sp, #36	; 0x24
 8015180:	ec49 8b10 	vmov	d0, r8, r9
 8015184:	9300      	str	r3, [sp, #0]
 8015186:	6022      	str	r2, [r4, #0]
 8015188:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801518c:	4628      	mov	r0, r5
 801518e:	f7ff fecd 	bl	8014f2c <__cvt>
 8015192:	9b06      	ldr	r3, [sp, #24]
 8015194:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015196:	2b47      	cmp	r3, #71	; 0x47
 8015198:	4680      	mov	r8, r0
 801519a:	d108      	bne.n	80151ae <_printf_float+0x142>
 801519c:	1cc8      	adds	r0, r1, #3
 801519e:	db02      	blt.n	80151a6 <_printf_float+0x13a>
 80151a0:	6863      	ldr	r3, [r4, #4]
 80151a2:	4299      	cmp	r1, r3
 80151a4:	dd41      	ble.n	801522a <_printf_float+0x1be>
 80151a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80151aa:	fa5f fb8b 	uxtb.w	fp, fp
 80151ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80151b2:	d820      	bhi.n	80151f6 <_printf_float+0x18a>
 80151b4:	3901      	subs	r1, #1
 80151b6:	465a      	mov	r2, fp
 80151b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80151bc:	9109      	str	r1, [sp, #36]	; 0x24
 80151be:	f7ff ff17 	bl	8014ff0 <__exponent>
 80151c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80151c4:	1813      	adds	r3, r2, r0
 80151c6:	2a01      	cmp	r2, #1
 80151c8:	4681      	mov	r9, r0
 80151ca:	6123      	str	r3, [r4, #16]
 80151cc:	dc02      	bgt.n	80151d4 <_printf_float+0x168>
 80151ce:	6822      	ldr	r2, [r4, #0]
 80151d0:	07d2      	lsls	r2, r2, #31
 80151d2:	d501      	bpl.n	80151d8 <_printf_float+0x16c>
 80151d4:	3301      	adds	r3, #1
 80151d6:	6123      	str	r3, [r4, #16]
 80151d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d09c      	beq.n	801511a <_printf_float+0xae>
 80151e0:	232d      	movs	r3, #45	; 0x2d
 80151e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80151e6:	e798      	b.n	801511a <_printf_float+0xae>
 80151e8:	9a06      	ldr	r2, [sp, #24]
 80151ea:	2a47      	cmp	r2, #71	; 0x47
 80151ec:	d1be      	bne.n	801516c <_printf_float+0x100>
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d1bc      	bne.n	801516c <_printf_float+0x100>
 80151f2:	2301      	movs	r3, #1
 80151f4:	e7b9      	b.n	801516a <_printf_float+0xfe>
 80151f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80151fa:	d118      	bne.n	801522e <_printf_float+0x1c2>
 80151fc:	2900      	cmp	r1, #0
 80151fe:	6863      	ldr	r3, [r4, #4]
 8015200:	dd0b      	ble.n	801521a <_printf_float+0x1ae>
 8015202:	6121      	str	r1, [r4, #16]
 8015204:	b913      	cbnz	r3, 801520c <_printf_float+0x1a0>
 8015206:	6822      	ldr	r2, [r4, #0]
 8015208:	07d0      	lsls	r0, r2, #31
 801520a:	d502      	bpl.n	8015212 <_printf_float+0x1a6>
 801520c:	3301      	adds	r3, #1
 801520e:	440b      	add	r3, r1
 8015210:	6123      	str	r3, [r4, #16]
 8015212:	65a1      	str	r1, [r4, #88]	; 0x58
 8015214:	f04f 0900 	mov.w	r9, #0
 8015218:	e7de      	b.n	80151d8 <_printf_float+0x16c>
 801521a:	b913      	cbnz	r3, 8015222 <_printf_float+0x1b6>
 801521c:	6822      	ldr	r2, [r4, #0]
 801521e:	07d2      	lsls	r2, r2, #31
 8015220:	d501      	bpl.n	8015226 <_printf_float+0x1ba>
 8015222:	3302      	adds	r3, #2
 8015224:	e7f4      	b.n	8015210 <_printf_float+0x1a4>
 8015226:	2301      	movs	r3, #1
 8015228:	e7f2      	b.n	8015210 <_printf_float+0x1a4>
 801522a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801522e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015230:	4299      	cmp	r1, r3
 8015232:	db05      	blt.n	8015240 <_printf_float+0x1d4>
 8015234:	6823      	ldr	r3, [r4, #0]
 8015236:	6121      	str	r1, [r4, #16]
 8015238:	07d8      	lsls	r0, r3, #31
 801523a:	d5ea      	bpl.n	8015212 <_printf_float+0x1a6>
 801523c:	1c4b      	adds	r3, r1, #1
 801523e:	e7e7      	b.n	8015210 <_printf_float+0x1a4>
 8015240:	2900      	cmp	r1, #0
 8015242:	bfd4      	ite	le
 8015244:	f1c1 0202 	rsble	r2, r1, #2
 8015248:	2201      	movgt	r2, #1
 801524a:	4413      	add	r3, r2
 801524c:	e7e0      	b.n	8015210 <_printf_float+0x1a4>
 801524e:	6823      	ldr	r3, [r4, #0]
 8015250:	055a      	lsls	r2, r3, #21
 8015252:	d407      	bmi.n	8015264 <_printf_float+0x1f8>
 8015254:	6923      	ldr	r3, [r4, #16]
 8015256:	4642      	mov	r2, r8
 8015258:	4631      	mov	r1, r6
 801525a:	4628      	mov	r0, r5
 801525c:	47b8      	blx	r7
 801525e:	3001      	adds	r0, #1
 8015260:	d12c      	bne.n	80152bc <_printf_float+0x250>
 8015262:	e764      	b.n	801512e <_printf_float+0xc2>
 8015264:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015268:	f240 80e0 	bls.w	801542c <_printf_float+0x3c0>
 801526c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015270:	2200      	movs	r2, #0
 8015272:	2300      	movs	r3, #0
 8015274:	f7eb fc32 	bl	8000adc <__aeabi_dcmpeq>
 8015278:	2800      	cmp	r0, #0
 801527a:	d034      	beq.n	80152e6 <_printf_float+0x27a>
 801527c:	4a37      	ldr	r2, [pc, #220]	; (801535c <_printf_float+0x2f0>)
 801527e:	2301      	movs	r3, #1
 8015280:	4631      	mov	r1, r6
 8015282:	4628      	mov	r0, r5
 8015284:	47b8      	blx	r7
 8015286:	3001      	adds	r0, #1
 8015288:	f43f af51 	beq.w	801512e <_printf_float+0xc2>
 801528c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015290:	429a      	cmp	r2, r3
 8015292:	db02      	blt.n	801529a <_printf_float+0x22e>
 8015294:	6823      	ldr	r3, [r4, #0]
 8015296:	07d8      	lsls	r0, r3, #31
 8015298:	d510      	bpl.n	80152bc <_printf_float+0x250>
 801529a:	ee18 3a10 	vmov	r3, s16
 801529e:	4652      	mov	r2, sl
 80152a0:	4631      	mov	r1, r6
 80152a2:	4628      	mov	r0, r5
 80152a4:	47b8      	blx	r7
 80152a6:	3001      	adds	r0, #1
 80152a8:	f43f af41 	beq.w	801512e <_printf_float+0xc2>
 80152ac:	f04f 0800 	mov.w	r8, #0
 80152b0:	f104 091a 	add.w	r9, r4, #26
 80152b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152b6:	3b01      	subs	r3, #1
 80152b8:	4543      	cmp	r3, r8
 80152ba:	dc09      	bgt.n	80152d0 <_printf_float+0x264>
 80152bc:	6823      	ldr	r3, [r4, #0]
 80152be:	079b      	lsls	r3, r3, #30
 80152c0:	f100 8105 	bmi.w	80154ce <_printf_float+0x462>
 80152c4:	68e0      	ldr	r0, [r4, #12]
 80152c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152c8:	4298      	cmp	r0, r3
 80152ca:	bfb8      	it	lt
 80152cc:	4618      	movlt	r0, r3
 80152ce:	e730      	b.n	8015132 <_printf_float+0xc6>
 80152d0:	2301      	movs	r3, #1
 80152d2:	464a      	mov	r2, r9
 80152d4:	4631      	mov	r1, r6
 80152d6:	4628      	mov	r0, r5
 80152d8:	47b8      	blx	r7
 80152da:	3001      	adds	r0, #1
 80152dc:	f43f af27 	beq.w	801512e <_printf_float+0xc2>
 80152e0:	f108 0801 	add.w	r8, r8, #1
 80152e4:	e7e6      	b.n	80152b4 <_printf_float+0x248>
 80152e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	dc39      	bgt.n	8015360 <_printf_float+0x2f4>
 80152ec:	4a1b      	ldr	r2, [pc, #108]	; (801535c <_printf_float+0x2f0>)
 80152ee:	2301      	movs	r3, #1
 80152f0:	4631      	mov	r1, r6
 80152f2:	4628      	mov	r0, r5
 80152f4:	47b8      	blx	r7
 80152f6:	3001      	adds	r0, #1
 80152f8:	f43f af19 	beq.w	801512e <_printf_float+0xc2>
 80152fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015300:	4313      	orrs	r3, r2
 8015302:	d102      	bne.n	801530a <_printf_float+0x29e>
 8015304:	6823      	ldr	r3, [r4, #0]
 8015306:	07d9      	lsls	r1, r3, #31
 8015308:	d5d8      	bpl.n	80152bc <_printf_float+0x250>
 801530a:	ee18 3a10 	vmov	r3, s16
 801530e:	4652      	mov	r2, sl
 8015310:	4631      	mov	r1, r6
 8015312:	4628      	mov	r0, r5
 8015314:	47b8      	blx	r7
 8015316:	3001      	adds	r0, #1
 8015318:	f43f af09 	beq.w	801512e <_printf_float+0xc2>
 801531c:	f04f 0900 	mov.w	r9, #0
 8015320:	f104 0a1a 	add.w	sl, r4, #26
 8015324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015326:	425b      	negs	r3, r3
 8015328:	454b      	cmp	r3, r9
 801532a:	dc01      	bgt.n	8015330 <_printf_float+0x2c4>
 801532c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801532e:	e792      	b.n	8015256 <_printf_float+0x1ea>
 8015330:	2301      	movs	r3, #1
 8015332:	4652      	mov	r2, sl
 8015334:	4631      	mov	r1, r6
 8015336:	4628      	mov	r0, r5
 8015338:	47b8      	blx	r7
 801533a:	3001      	adds	r0, #1
 801533c:	f43f aef7 	beq.w	801512e <_printf_float+0xc2>
 8015340:	f109 0901 	add.w	r9, r9, #1
 8015344:	e7ee      	b.n	8015324 <_printf_float+0x2b8>
 8015346:	bf00      	nop
 8015348:	7fefffff 	.word	0x7fefffff
 801534c:	08059b21 	.word	0x08059b21
 8015350:	08059b25 	.word	0x08059b25
 8015354:	08059b2d 	.word	0x08059b2d
 8015358:	08059b29 	.word	0x08059b29
 801535c:	08059b31 	.word	0x08059b31
 8015360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015362:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015364:	429a      	cmp	r2, r3
 8015366:	bfa8      	it	ge
 8015368:	461a      	movge	r2, r3
 801536a:	2a00      	cmp	r2, #0
 801536c:	4691      	mov	r9, r2
 801536e:	dc37      	bgt.n	80153e0 <_printf_float+0x374>
 8015370:	f04f 0b00 	mov.w	fp, #0
 8015374:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015378:	f104 021a 	add.w	r2, r4, #26
 801537c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801537e:	9305      	str	r3, [sp, #20]
 8015380:	eba3 0309 	sub.w	r3, r3, r9
 8015384:	455b      	cmp	r3, fp
 8015386:	dc33      	bgt.n	80153f0 <_printf_float+0x384>
 8015388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801538c:	429a      	cmp	r2, r3
 801538e:	db3b      	blt.n	8015408 <_printf_float+0x39c>
 8015390:	6823      	ldr	r3, [r4, #0]
 8015392:	07da      	lsls	r2, r3, #31
 8015394:	d438      	bmi.n	8015408 <_printf_float+0x39c>
 8015396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015398:	9a05      	ldr	r2, [sp, #20]
 801539a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801539c:	1a9a      	subs	r2, r3, r2
 801539e:	eba3 0901 	sub.w	r9, r3, r1
 80153a2:	4591      	cmp	r9, r2
 80153a4:	bfa8      	it	ge
 80153a6:	4691      	movge	r9, r2
 80153a8:	f1b9 0f00 	cmp.w	r9, #0
 80153ac:	dc35      	bgt.n	801541a <_printf_float+0x3ae>
 80153ae:	f04f 0800 	mov.w	r8, #0
 80153b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80153b6:	f104 0a1a 	add.w	sl, r4, #26
 80153ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80153be:	1a9b      	subs	r3, r3, r2
 80153c0:	eba3 0309 	sub.w	r3, r3, r9
 80153c4:	4543      	cmp	r3, r8
 80153c6:	f77f af79 	ble.w	80152bc <_printf_float+0x250>
 80153ca:	2301      	movs	r3, #1
 80153cc:	4652      	mov	r2, sl
 80153ce:	4631      	mov	r1, r6
 80153d0:	4628      	mov	r0, r5
 80153d2:	47b8      	blx	r7
 80153d4:	3001      	adds	r0, #1
 80153d6:	f43f aeaa 	beq.w	801512e <_printf_float+0xc2>
 80153da:	f108 0801 	add.w	r8, r8, #1
 80153de:	e7ec      	b.n	80153ba <_printf_float+0x34e>
 80153e0:	4613      	mov	r3, r2
 80153e2:	4631      	mov	r1, r6
 80153e4:	4642      	mov	r2, r8
 80153e6:	4628      	mov	r0, r5
 80153e8:	47b8      	blx	r7
 80153ea:	3001      	adds	r0, #1
 80153ec:	d1c0      	bne.n	8015370 <_printf_float+0x304>
 80153ee:	e69e      	b.n	801512e <_printf_float+0xc2>
 80153f0:	2301      	movs	r3, #1
 80153f2:	4631      	mov	r1, r6
 80153f4:	4628      	mov	r0, r5
 80153f6:	9205      	str	r2, [sp, #20]
 80153f8:	47b8      	blx	r7
 80153fa:	3001      	adds	r0, #1
 80153fc:	f43f ae97 	beq.w	801512e <_printf_float+0xc2>
 8015400:	9a05      	ldr	r2, [sp, #20]
 8015402:	f10b 0b01 	add.w	fp, fp, #1
 8015406:	e7b9      	b.n	801537c <_printf_float+0x310>
 8015408:	ee18 3a10 	vmov	r3, s16
 801540c:	4652      	mov	r2, sl
 801540e:	4631      	mov	r1, r6
 8015410:	4628      	mov	r0, r5
 8015412:	47b8      	blx	r7
 8015414:	3001      	adds	r0, #1
 8015416:	d1be      	bne.n	8015396 <_printf_float+0x32a>
 8015418:	e689      	b.n	801512e <_printf_float+0xc2>
 801541a:	9a05      	ldr	r2, [sp, #20]
 801541c:	464b      	mov	r3, r9
 801541e:	4442      	add	r2, r8
 8015420:	4631      	mov	r1, r6
 8015422:	4628      	mov	r0, r5
 8015424:	47b8      	blx	r7
 8015426:	3001      	adds	r0, #1
 8015428:	d1c1      	bne.n	80153ae <_printf_float+0x342>
 801542a:	e680      	b.n	801512e <_printf_float+0xc2>
 801542c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801542e:	2a01      	cmp	r2, #1
 8015430:	dc01      	bgt.n	8015436 <_printf_float+0x3ca>
 8015432:	07db      	lsls	r3, r3, #31
 8015434:	d538      	bpl.n	80154a8 <_printf_float+0x43c>
 8015436:	2301      	movs	r3, #1
 8015438:	4642      	mov	r2, r8
 801543a:	4631      	mov	r1, r6
 801543c:	4628      	mov	r0, r5
 801543e:	47b8      	blx	r7
 8015440:	3001      	adds	r0, #1
 8015442:	f43f ae74 	beq.w	801512e <_printf_float+0xc2>
 8015446:	ee18 3a10 	vmov	r3, s16
 801544a:	4652      	mov	r2, sl
 801544c:	4631      	mov	r1, r6
 801544e:	4628      	mov	r0, r5
 8015450:	47b8      	blx	r7
 8015452:	3001      	adds	r0, #1
 8015454:	f43f ae6b 	beq.w	801512e <_printf_float+0xc2>
 8015458:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801545c:	2200      	movs	r2, #0
 801545e:	2300      	movs	r3, #0
 8015460:	f7eb fb3c 	bl	8000adc <__aeabi_dcmpeq>
 8015464:	b9d8      	cbnz	r0, 801549e <_printf_float+0x432>
 8015466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015468:	f108 0201 	add.w	r2, r8, #1
 801546c:	3b01      	subs	r3, #1
 801546e:	4631      	mov	r1, r6
 8015470:	4628      	mov	r0, r5
 8015472:	47b8      	blx	r7
 8015474:	3001      	adds	r0, #1
 8015476:	d10e      	bne.n	8015496 <_printf_float+0x42a>
 8015478:	e659      	b.n	801512e <_printf_float+0xc2>
 801547a:	2301      	movs	r3, #1
 801547c:	4652      	mov	r2, sl
 801547e:	4631      	mov	r1, r6
 8015480:	4628      	mov	r0, r5
 8015482:	47b8      	blx	r7
 8015484:	3001      	adds	r0, #1
 8015486:	f43f ae52 	beq.w	801512e <_printf_float+0xc2>
 801548a:	f108 0801 	add.w	r8, r8, #1
 801548e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015490:	3b01      	subs	r3, #1
 8015492:	4543      	cmp	r3, r8
 8015494:	dcf1      	bgt.n	801547a <_printf_float+0x40e>
 8015496:	464b      	mov	r3, r9
 8015498:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801549c:	e6dc      	b.n	8015258 <_printf_float+0x1ec>
 801549e:	f04f 0800 	mov.w	r8, #0
 80154a2:	f104 0a1a 	add.w	sl, r4, #26
 80154a6:	e7f2      	b.n	801548e <_printf_float+0x422>
 80154a8:	2301      	movs	r3, #1
 80154aa:	4642      	mov	r2, r8
 80154ac:	e7df      	b.n	801546e <_printf_float+0x402>
 80154ae:	2301      	movs	r3, #1
 80154b0:	464a      	mov	r2, r9
 80154b2:	4631      	mov	r1, r6
 80154b4:	4628      	mov	r0, r5
 80154b6:	47b8      	blx	r7
 80154b8:	3001      	adds	r0, #1
 80154ba:	f43f ae38 	beq.w	801512e <_printf_float+0xc2>
 80154be:	f108 0801 	add.w	r8, r8, #1
 80154c2:	68e3      	ldr	r3, [r4, #12]
 80154c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154c6:	1a5b      	subs	r3, r3, r1
 80154c8:	4543      	cmp	r3, r8
 80154ca:	dcf0      	bgt.n	80154ae <_printf_float+0x442>
 80154cc:	e6fa      	b.n	80152c4 <_printf_float+0x258>
 80154ce:	f04f 0800 	mov.w	r8, #0
 80154d2:	f104 0919 	add.w	r9, r4, #25
 80154d6:	e7f4      	b.n	80154c2 <_printf_float+0x456>

080154d8 <_printf_common>:
 80154d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154dc:	4616      	mov	r6, r2
 80154de:	4699      	mov	r9, r3
 80154e0:	688a      	ldr	r2, [r1, #8]
 80154e2:	690b      	ldr	r3, [r1, #16]
 80154e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80154e8:	4293      	cmp	r3, r2
 80154ea:	bfb8      	it	lt
 80154ec:	4613      	movlt	r3, r2
 80154ee:	6033      	str	r3, [r6, #0]
 80154f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80154f4:	4607      	mov	r7, r0
 80154f6:	460c      	mov	r4, r1
 80154f8:	b10a      	cbz	r2, 80154fe <_printf_common+0x26>
 80154fa:	3301      	adds	r3, #1
 80154fc:	6033      	str	r3, [r6, #0]
 80154fe:	6823      	ldr	r3, [r4, #0]
 8015500:	0699      	lsls	r1, r3, #26
 8015502:	bf42      	ittt	mi
 8015504:	6833      	ldrmi	r3, [r6, #0]
 8015506:	3302      	addmi	r3, #2
 8015508:	6033      	strmi	r3, [r6, #0]
 801550a:	6825      	ldr	r5, [r4, #0]
 801550c:	f015 0506 	ands.w	r5, r5, #6
 8015510:	d106      	bne.n	8015520 <_printf_common+0x48>
 8015512:	f104 0a19 	add.w	sl, r4, #25
 8015516:	68e3      	ldr	r3, [r4, #12]
 8015518:	6832      	ldr	r2, [r6, #0]
 801551a:	1a9b      	subs	r3, r3, r2
 801551c:	42ab      	cmp	r3, r5
 801551e:	dc26      	bgt.n	801556e <_printf_common+0x96>
 8015520:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015524:	1e13      	subs	r3, r2, #0
 8015526:	6822      	ldr	r2, [r4, #0]
 8015528:	bf18      	it	ne
 801552a:	2301      	movne	r3, #1
 801552c:	0692      	lsls	r2, r2, #26
 801552e:	d42b      	bmi.n	8015588 <_printf_common+0xb0>
 8015530:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015534:	4649      	mov	r1, r9
 8015536:	4638      	mov	r0, r7
 8015538:	47c0      	blx	r8
 801553a:	3001      	adds	r0, #1
 801553c:	d01e      	beq.n	801557c <_printf_common+0xa4>
 801553e:	6823      	ldr	r3, [r4, #0]
 8015540:	68e5      	ldr	r5, [r4, #12]
 8015542:	6832      	ldr	r2, [r6, #0]
 8015544:	f003 0306 	and.w	r3, r3, #6
 8015548:	2b04      	cmp	r3, #4
 801554a:	bf08      	it	eq
 801554c:	1aad      	subeq	r5, r5, r2
 801554e:	68a3      	ldr	r3, [r4, #8]
 8015550:	6922      	ldr	r2, [r4, #16]
 8015552:	bf0c      	ite	eq
 8015554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015558:	2500      	movne	r5, #0
 801555a:	4293      	cmp	r3, r2
 801555c:	bfc4      	itt	gt
 801555e:	1a9b      	subgt	r3, r3, r2
 8015560:	18ed      	addgt	r5, r5, r3
 8015562:	2600      	movs	r6, #0
 8015564:	341a      	adds	r4, #26
 8015566:	42b5      	cmp	r5, r6
 8015568:	d11a      	bne.n	80155a0 <_printf_common+0xc8>
 801556a:	2000      	movs	r0, #0
 801556c:	e008      	b.n	8015580 <_printf_common+0xa8>
 801556e:	2301      	movs	r3, #1
 8015570:	4652      	mov	r2, sl
 8015572:	4649      	mov	r1, r9
 8015574:	4638      	mov	r0, r7
 8015576:	47c0      	blx	r8
 8015578:	3001      	adds	r0, #1
 801557a:	d103      	bne.n	8015584 <_printf_common+0xac>
 801557c:	f04f 30ff 	mov.w	r0, #4294967295
 8015580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015584:	3501      	adds	r5, #1
 8015586:	e7c6      	b.n	8015516 <_printf_common+0x3e>
 8015588:	18e1      	adds	r1, r4, r3
 801558a:	1c5a      	adds	r2, r3, #1
 801558c:	2030      	movs	r0, #48	; 0x30
 801558e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015592:	4422      	add	r2, r4
 8015594:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015598:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801559c:	3302      	adds	r3, #2
 801559e:	e7c7      	b.n	8015530 <_printf_common+0x58>
 80155a0:	2301      	movs	r3, #1
 80155a2:	4622      	mov	r2, r4
 80155a4:	4649      	mov	r1, r9
 80155a6:	4638      	mov	r0, r7
 80155a8:	47c0      	blx	r8
 80155aa:	3001      	adds	r0, #1
 80155ac:	d0e6      	beq.n	801557c <_printf_common+0xa4>
 80155ae:	3601      	adds	r6, #1
 80155b0:	e7d9      	b.n	8015566 <_printf_common+0x8e>
	...

080155b4 <_printf_i>:
 80155b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80155b8:	7e0f      	ldrb	r7, [r1, #24]
 80155ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80155bc:	2f78      	cmp	r7, #120	; 0x78
 80155be:	4691      	mov	r9, r2
 80155c0:	4680      	mov	r8, r0
 80155c2:	460c      	mov	r4, r1
 80155c4:	469a      	mov	sl, r3
 80155c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80155ca:	d807      	bhi.n	80155dc <_printf_i+0x28>
 80155cc:	2f62      	cmp	r7, #98	; 0x62
 80155ce:	d80a      	bhi.n	80155e6 <_printf_i+0x32>
 80155d0:	2f00      	cmp	r7, #0
 80155d2:	f000 80d8 	beq.w	8015786 <_printf_i+0x1d2>
 80155d6:	2f58      	cmp	r7, #88	; 0x58
 80155d8:	f000 80a3 	beq.w	8015722 <_printf_i+0x16e>
 80155dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80155e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80155e4:	e03a      	b.n	801565c <_printf_i+0xa8>
 80155e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80155ea:	2b15      	cmp	r3, #21
 80155ec:	d8f6      	bhi.n	80155dc <_printf_i+0x28>
 80155ee:	a101      	add	r1, pc, #4	; (adr r1, 80155f4 <_printf_i+0x40>)
 80155f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80155f4:	0801564d 	.word	0x0801564d
 80155f8:	08015661 	.word	0x08015661
 80155fc:	080155dd 	.word	0x080155dd
 8015600:	080155dd 	.word	0x080155dd
 8015604:	080155dd 	.word	0x080155dd
 8015608:	080155dd 	.word	0x080155dd
 801560c:	08015661 	.word	0x08015661
 8015610:	080155dd 	.word	0x080155dd
 8015614:	080155dd 	.word	0x080155dd
 8015618:	080155dd 	.word	0x080155dd
 801561c:	080155dd 	.word	0x080155dd
 8015620:	0801576d 	.word	0x0801576d
 8015624:	08015691 	.word	0x08015691
 8015628:	0801574f 	.word	0x0801574f
 801562c:	080155dd 	.word	0x080155dd
 8015630:	080155dd 	.word	0x080155dd
 8015634:	0801578f 	.word	0x0801578f
 8015638:	080155dd 	.word	0x080155dd
 801563c:	08015691 	.word	0x08015691
 8015640:	080155dd 	.word	0x080155dd
 8015644:	080155dd 	.word	0x080155dd
 8015648:	08015757 	.word	0x08015757
 801564c:	682b      	ldr	r3, [r5, #0]
 801564e:	1d1a      	adds	r2, r3, #4
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	602a      	str	r2, [r5, #0]
 8015654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015658:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801565c:	2301      	movs	r3, #1
 801565e:	e0a3      	b.n	80157a8 <_printf_i+0x1f4>
 8015660:	6820      	ldr	r0, [r4, #0]
 8015662:	6829      	ldr	r1, [r5, #0]
 8015664:	0606      	lsls	r6, r0, #24
 8015666:	f101 0304 	add.w	r3, r1, #4
 801566a:	d50a      	bpl.n	8015682 <_printf_i+0xce>
 801566c:	680e      	ldr	r6, [r1, #0]
 801566e:	602b      	str	r3, [r5, #0]
 8015670:	2e00      	cmp	r6, #0
 8015672:	da03      	bge.n	801567c <_printf_i+0xc8>
 8015674:	232d      	movs	r3, #45	; 0x2d
 8015676:	4276      	negs	r6, r6
 8015678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801567c:	485e      	ldr	r0, [pc, #376]	; (80157f8 <_printf_i+0x244>)
 801567e:	230a      	movs	r3, #10
 8015680:	e019      	b.n	80156b6 <_printf_i+0x102>
 8015682:	680e      	ldr	r6, [r1, #0]
 8015684:	602b      	str	r3, [r5, #0]
 8015686:	f010 0f40 	tst.w	r0, #64	; 0x40
 801568a:	bf18      	it	ne
 801568c:	b236      	sxthne	r6, r6
 801568e:	e7ef      	b.n	8015670 <_printf_i+0xbc>
 8015690:	682b      	ldr	r3, [r5, #0]
 8015692:	6820      	ldr	r0, [r4, #0]
 8015694:	1d19      	adds	r1, r3, #4
 8015696:	6029      	str	r1, [r5, #0]
 8015698:	0601      	lsls	r1, r0, #24
 801569a:	d501      	bpl.n	80156a0 <_printf_i+0xec>
 801569c:	681e      	ldr	r6, [r3, #0]
 801569e:	e002      	b.n	80156a6 <_printf_i+0xf2>
 80156a0:	0646      	lsls	r6, r0, #25
 80156a2:	d5fb      	bpl.n	801569c <_printf_i+0xe8>
 80156a4:	881e      	ldrh	r6, [r3, #0]
 80156a6:	4854      	ldr	r0, [pc, #336]	; (80157f8 <_printf_i+0x244>)
 80156a8:	2f6f      	cmp	r7, #111	; 0x6f
 80156aa:	bf0c      	ite	eq
 80156ac:	2308      	moveq	r3, #8
 80156ae:	230a      	movne	r3, #10
 80156b0:	2100      	movs	r1, #0
 80156b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80156b6:	6865      	ldr	r5, [r4, #4]
 80156b8:	60a5      	str	r5, [r4, #8]
 80156ba:	2d00      	cmp	r5, #0
 80156bc:	bfa2      	ittt	ge
 80156be:	6821      	ldrge	r1, [r4, #0]
 80156c0:	f021 0104 	bicge.w	r1, r1, #4
 80156c4:	6021      	strge	r1, [r4, #0]
 80156c6:	b90e      	cbnz	r6, 80156cc <_printf_i+0x118>
 80156c8:	2d00      	cmp	r5, #0
 80156ca:	d04d      	beq.n	8015768 <_printf_i+0x1b4>
 80156cc:	4615      	mov	r5, r2
 80156ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80156d2:	fb03 6711 	mls	r7, r3, r1, r6
 80156d6:	5dc7      	ldrb	r7, [r0, r7]
 80156d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80156dc:	4637      	mov	r7, r6
 80156de:	42bb      	cmp	r3, r7
 80156e0:	460e      	mov	r6, r1
 80156e2:	d9f4      	bls.n	80156ce <_printf_i+0x11a>
 80156e4:	2b08      	cmp	r3, #8
 80156e6:	d10b      	bne.n	8015700 <_printf_i+0x14c>
 80156e8:	6823      	ldr	r3, [r4, #0]
 80156ea:	07de      	lsls	r6, r3, #31
 80156ec:	d508      	bpl.n	8015700 <_printf_i+0x14c>
 80156ee:	6923      	ldr	r3, [r4, #16]
 80156f0:	6861      	ldr	r1, [r4, #4]
 80156f2:	4299      	cmp	r1, r3
 80156f4:	bfde      	ittt	le
 80156f6:	2330      	movle	r3, #48	; 0x30
 80156f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80156fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015700:	1b52      	subs	r2, r2, r5
 8015702:	6122      	str	r2, [r4, #16]
 8015704:	f8cd a000 	str.w	sl, [sp]
 8015708:	464b      	mov	r3, r9
 801570a:	aa03      	add	r2, sp, #12
 801570c:	4621      	mov	r1, r4
 801570e:	4640      	mov	r0, r8
 8015710:	f7ff fee2 	bl	80154d8 <_printf_common>
 8015714:	3001      	adds	r0, #1
 8015716:	d14c      	bne.n	80157b2 <_printf_i+0x1fe>
 8015718:	f04f 30ff 	mov.w	r0, #4294967295
 801571c:	b004      	add	sp, #16
 801571e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015722:	4835      	ldr	r0, [pc, #212]	; (80157f8 <_printf_i+0x244>)
 8015724:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015728:	6829      	ldr	r1, [r5, #0]
 801572a:	6823      	ldr	r3, [r4, #0]
 801572c:	f851 6b04 	ldr.w	r6, [r1], #4
 8015730:	6029      	str	r1, [r5, #0]
 8015732:	061d      	lsls	r5, r3, #24
 8015734:	d514      	bpl.n	8015760 <_printf_i+0x1ac>
 8015736:	07df      	lsls	r7, r3, #31
 8015738:	bf44      	itt	mi
 801573a:	f043 0320 	orrmi.w	r3, r3, #32
 801573e:	6023      	strmi	r3, [r4, #0]
 8015740:	b91e      	cbnz	r6, 801574a <_printf_i+0x196>
 8015742:	6823      	ldr	r3, [r4, #0]
 8015744:	f023 0320 	bic.w	r3, r3, #32
 8015748:	6023      	str	r3, [r4, #0]
 801574a:	2310      	movs	r3, #16
 801574c:	e7b0      	b.n	80156b0 <_printf_i+0xfc>
 801574e:	6823      	ldr	r3, [r4, #0]
 8015750:	f043 0320 	orr.w	r3, r3, #32
 8015754:	6023      	str	r3, [r4, #0]
 8015756:	2378      	movs	r3, #120	; 0x78
 8015758:	4828      	ldr	r0, [pc, #160]	; (80157fc <_printf_i+0x248>)
 801575a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801575e:	e7e3      	b.n	8015728 <_printf_i+0x174>
 8015760:	0659      	lsls	r1, r3, #25
 8015762:	bf48      	it	mi
 8015764:	b2b6      	uxthmi	r6, r6
 8015766:	e7e6      	b.n	8015736 <_printf_i+0x182>
 8015768:	4615      	mov	r5, r2
 801576a:	e7bb      	b.n	80156e4 <_printf_i+0x130>
 801576c:	682b      	ldr	r3, [r5, #0]
 801576e:	6826      	ldr	r6, [r4, #0]
 8015770:	6961      	ldr	r1, [r4, #20]
 8015772:	1d18      	adds	r0, r3, #4
 8015774:	6028      	str	r0, [r5, #0]
 8015776:	0635      	lsls	r5, r6, #24
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	d501      	bpl.n	8015780 <_printf_i+0x1cc>
 801577c:	6019      	str	r1, [r3, #0]
 801577e:	e002      	b.n	8015786 <_printf_i+0x1d2>
 8015780:	0670      	lsls	r0, r6, #25
 8015782:	d5fb      	bpl.n	801577c <_printf_i+0x1c8>
 8015784:	8019      	strh	r1, [r3, #0]
 8015786:	2300      	movs	r3, #0
 8015788:	6123      	str	r3, [r4, #16]
 801578a:	4615      	mov	r5, r2
 801578c:	e7ba      	b.n	8015704 <_printf_i+0x150>
 801578e:	682b      	ldr	r3, [r5, #0]
 8015790:	1d1a      	adds	r2, r3, #4
 8015792:	602a      	str	r2, [r5, #0]
 8015794:	681d      	ldr	r5, [r3, #0]
 8015796:	6862      	ldr	r2, [r4, #4]
 8015798:	2100      	movs	r1, #0
 801579a:	4628      	mov	r0, r5
 801579c:	f7ea fd18 	bl	80001d0 <memchr>
 80157a0:	b108      	cbz	r0, 80157a6 <_printf_i+0x1f2>
 80157a2:	1b40      	subs	r0, r0, r5
 80157a4:	6060      	str	r0, [r4, #4]
 80157a6:	6863      	ldr	r3, [r4, #4]
 80157a8:	6123      	str	r3, [r4, #16]
 80157aa:	2300      	movs	r3, #0
 80157ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80157b0:	e7a8      	b.n	8015704 <_printf_i+0x150>
 80157b2:	6923      	ldr	r3, [r4, #16]
 80157b4:	462a      	mov	r2, r5
 80157b6:	4649      	mov	r1, r9
 80157b8:	4640      	mov	r0, r8
 80157ba:	47d0      	blx	sl
 80157bc:	3001      	adds	r0, #1
 80157be:	d0ab      	beq.n	8015718 <_printf_i+0x164>
 80157c0:	6823      	ldr	r3, [r4, #0]
 80157c2:	079b      	lsls	r3, r3, #30
 80157c4:	d413      	bmi.n	80157ee <_printf_i+0x23a>
 80157c6:	68e0      	ldr	r0, [r4, #12]
 80157c8:	9b03      	ldr	r3, [sp, #12]
 80157ca:	4298      	cmp	r0, r3
 80157cc:	bfb8      	it	lt
 80157ce:	4618      	movlt	r0, r3
 80157d0:	e7a4      	b.n	801571c <_printf_i+0x168>
 80157d2:	2301      	movs	r3, #1
 80157d4:	4632      	mov	r2, r6
 80157d6:	4649      	mov	r1, r9
 80157d8:	4640      	mov	r0, r8
 80157da:	47d0      	blx	sl
 80157dc:	3001      	adds	r0, #1
 80157de:	d09b      	beq.n	8015718 <_printf_i+0x164>
 80157e0:	3501      	adds	r5, #1
 80157e2:	68e3      	ldr	r3, [r4, #12]
 80157e4:	9903      	ldr	r1, [sp, #12]
 80157e6:	1a5b      	subs	r3, r3, r1
 80157e8:	42ab      	cmp	r3, r5
 80157ea:	dcf2      	bgt.n	80157d2 <_printf_i+0x21e>
 80157ec:	e7eb      	b.n	80157c6 <_printf_i+0x212>
 80157ee:	2500      	movs	r5, #0
 80157f0:	f104 0619 	add.w	r6, r4, #25
 80157f4:	e7f5      	b.n	80157e2 <_printf_i+0x22e>
 80157f6:	bf00      	nop
 80157f8:	08059b33 	.word	0x08059b33
 80157fc:	08059b44 	.word	0x08059b44

08015800 <_scanf_float>:
 8015800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015804:	b087      	sub	sp, #28
 8015806:	4617      	mov	r7, r2
 8015808:	9303      	str	r3, [sp, #12]
 801580a:	688b      	ldr	r3, [r1, #8]
 801580c:	1e5a      	subs	r2, r3, #1
 801580e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015812:	bf83      	ittte	hi
 8015814:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015818:	195b      	addhi	r3, r3, r5
 801581a:	9302      	strhi	r3, [sp, #8]
 801581c:	2300      	movls	r3, #0
 801581e:	bf86      	itte	hi
 8015820:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015824:	608b      	strhi	r3, [r1, #8]
 8015826:	9302      	strls	r3, [sp, #8]
 8015828:	680b      	ldr	r3, [r1, #0]
 801582a:	468b      	mov	fp, r1
 801582c:	2500      	movs	r5, #0
 801582e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015832:	f84b 3b1c 	str.w	r3, [fp], #28
 8015836:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801583a:	4680      	mov	r8, r0
 801583c:	460c      	mov	r4, r1
 801583e:	465e      	mov	r6, fp
 8015840:	46aa      	mov	sl, r5
 8015842:	46a9      	mov	r9, r5
 8015844:	9501      	str	r5, [sp, #4]
 8015846:	68a2      	ldr	r2, [r4, #8]
 8015848:	b152      	cbz	r2, 8015860 <_scanf_float+0x60>
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	781b      	ldrb	r3, [r3, #0]
 801584e:	2b4e      	cmp	r3, #78	; 0x4e
 8015850:	d864      	bhi.n	801591c <_scanf_float+0x11c>
 8015852:	2b40      	cmp	r3, #64	; 0x40
 8015854:	d83c      	bhi.n	80158d0 <_scanf_float+0xd0>
 8015856:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801585a:	b2c8      	uxtb	r0, r1
 801585c:	280e      	cmp	r0, #14
 801585e:	d93a      	bls.n	80158d6 <_scanf_float+0xd6>
 8015860:	f1b9 0f00 	cmp.w	r9, #0
 8015864:	d003      	beq.n	801586e <_scanf_float+0x6e>
 8015866:	6823      	ldr	r3, [r4, #0]
 8015868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801586c:	6023      	str	r3, [r4, #0]
 801586e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015872:	f1ba 0f01 	cmp.w	sl, #1
 8015876:	f200 8113 	bhi.w	8015aa0 <_scanf_float+0x2a0>
 801587a:	455e      	cmp	r6, fp
 801587c:	f200 8105 	bhi.w	8015a8a <_scanf_float+0x28a>
 8015880:	2501      	movs	r5, #1
 8015882:	4628      	mov	r0, r5
 8015884:	b007      	add	sp, #28
 8015886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801588a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801588e:	2a0d      	cmp	r2, #13
 8015890:	d8e6      	bhi.n	8015860 <_scanf_float+0x60>
 8015892:	a101      	add	r1, pc, #4	; (adr r1, 8015898 <_scanf_float+0x98>)
 8015894:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015898:	080159d7 	.word	0x080159d7
 801589c:	08015861 	.word	0x08015861
 80158a0:	08015861 	.word	0x08015861
 80158a4:	08015861 	.word	0x08015861
 80158a8:	08015a37 	.word	0x08015a37
 80158ac:	08015a0f 	.word	0x08015a0f
 80158b0:	08015861 	.word	0x08015861
 80158b4:	08015861 	.word	0x08015861
 80158b8:	080159e5 	.word	0x080159e5
 80158bc:	08015861 	.word	0x08015861
 80158c0:	08015861 	.word	0x08015861
 80158c4:	08015861 	.word	0x08015861
 80158c8:	08015861 	.word	0x08015861
 80158cc:	0801599d 	.word	0x0801599d
 80158d0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80158d4:	e7db      	b.n	801588e <_scanf_float+0x8e>
 80158d6:	290e      	cmp	r1, #14
 80158d8:	d8c2      	bhi.n	8015860 <_scanf_float+0x60>
 80158da:	a001      	add	r0, pc, #4	; (adr r0, 80158e0 <_scanf_float+0xe0>)
 80158dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80158e0:	0801598f 	.word	0x0801598f
 80158e4:	08015861 	.word	0x08015861
 80158e8:	0801598f 	.word	0x0801598f
 80158ec:	08015a23 	.word	0x08015a23
 80158f0:	08015861 	.word	0x08015861
 80158f4:	0801593d 	.word	0x0801593d
 80158f8:	08015979 	.word	0x08015979
 80158fc:	08015979 	.word	0x08015979
 8015900:	08015979 	.word	0x08015979
 8015904:	08015979 	.word	0x08015979
 8015908:	08015979 	.word	0x08015979
 801590c:	08015979 	.word	0x08015979
 8015910:	08015979 	.word	0x08015979
 8015914:	08015979 	.word	0x08015979
 8015918:	08015979 	.word	0x08015979
 801591c:	2b6e      	cmp	r3, #110	; 0x6e
 801591e:	d809      	bhi.n	8015934 <_scanf_float+0x134>
 8015920:	2b60      	cmp	r3, #96	; 0x60
 8015922:	d8b2      	bhi.n	801588a <_scanf_float+0x8a>
 8015924:	2b54      	cmp	r3, #84	; 0x54
 8015926:	d077      	beq.n	8015a18 <_scanf_float+0x218>
 8015928:	2b59      	cmp	r3, #89	; 0x59
 801592a:	d199      	bne.n	8015860 <_scanf_float+0x60>
 801592c:	2d07      	cmp	r5, #7
 801592e:	d197      	bne.n	8015860 <_scanf_float+0x60>
 8015930:	2508      	movs	r5, #8
 8015932:	e029      	b.n	8015988 <_scanf_float+0x188>
 8015934:	2b74      	cmp	r3, #116	; 0x74
 8015936:	d06f      	beq.n	8015a18 <_scanf_float+0x218>
 8015938:	2b79      	cmp	r3, #121	; 0x79
 801593a:	e7f6      	b.n	801592a <_scanf_float+0x12a>
 801593c:	6821      	ldr	r1, [r4, #0]
 801593e:	05c8      	lsls	r0, r1, #23
 8015940:	d51a      	bpl.n	8015978 <_scanf_float+0x178>
 8015942:	9b02      	ldr	r3, [sp, #8]
 8015944:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015948:	6021      	str	r1, [r4, #0]
 801594a:	f109 0901 	add.w	r9, r9, #1
 801594e:	b11b      	cbz	r3, 8015958 <_scanf_float+0x158>
 8015950:	3b01      	subs	r3, #1
 8015952:	3201      	adds	r2, #1
 8015954:	9302      	str	r3, [sp, #8]
 8015956:	60a2      	str	r2, [r4, #8]
 8015958:	68a3      	ldr	r3, [r4, #8]
 801595a:	3b01      	subs	r3, #1
 801595c:	60a3      	str	r3, [r4, #8]
 801595e:	6923      	ldr	r3, [r4, #16]
 8015960:	3301      	adds	r3, #1
 8015962:	6123      	str	r3, [r4, #16]
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	3b01      	subs	r3, #1
 8015968:	2b00      	cmp	r3, #0
 801596a:	607b      	str	r3, [r7, #4]
 801596c:	f340 8084 	ble.w	8015a78 <_scanf_float+0x278>
 8015970:	683b      	ldr	r3, [r7, #0]
 8015972:	3301      	adds	r3, #1
 8015974:	603b      	str	r3, [r7, #0]
 8015976:	e766      	b.n	8015846 <_scanf_float+0x46>
 8015978:	eb1a 0f05 	cmn.w	sl, r5
 801597c:	f47f af70 	bne.w	8015860 <_scanf_float+0x60>
 8015980:	6822      	ldr	r2, [r4, #0]
 8015982:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8015986:	6022      	str	r2, [r4, #0]
 8015988:	f806 3b01 	strb.w	r3, [r6], #1
 801598c:	e7e4      	b.n	8015958 <_scanf_float+0x158>
 801598e:	6822      	ldr	r2, [r4, #0]
 8015990:	0610      	lsls	r0, r2, #24
 8015992:	f57f af65 	bpl.w	8015860 <_scanf_float+0x60>
 8015996:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801599a:	e7f4      	b.n	8015986 <_scanf_float+0x186>
 801599c:	f1ba 0f00 	cmp.w	sl, #0
 80159a0:	d10e      	bne.n	80159c0 <_scanf_float+0x1c0>
 80159a2:	f1b9 0f00 	cmp.w	r9, #0
 80159a6:	d10e      	bne.n	80159c6 <_scanf_float+0x1c6>
 80159a8:	6822      	ldr	r2, [r4, #0]
 80159aa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80159ae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80159b2:	d108      	bne.n	80159c6 <_scanf_float+0x1c6>
 80159b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80159b8:	6022      	str	r2, [r4, #0]
 80159ba:	f04f 0a01 	mov.w	sl, #1
 80159be:	e7e3      	b.n	8015988 <_scanf_float+0x188>
 80159c0:	f1ba 0f02 	cmp.w	sl, #2
 80159c4:	d055      	beq.n	8015a72 <_scanf_float+0x272>
 80159c6:	2d01      	cmp	r5, #1
 80159c8:	d002      	beq.n	80159d0 <_scanf_float+0x1d0>
 80159ca:	2d04      	cmp	r5, #4
 80159cc:	f47f af48 	bne.w	8015860 <_scanf_float+0x60>
 80159d0:	3501      	adds	r5, #1
 80159d2:	b2ed      	uxtb	r5, r5
 80159d4:	e7d8      	b.n	8015988 <_scanf_float+0x188>
 80159d6:	f1ba 0f01 	cmp.w	sl, #1
 80159da:	f47f af41 	bne.w	8015860 <_scanf_float+0x60>
 80159de:	f04f 0a02 	mov.w	sl, #2
 80159e2:	e7d1      	b.n	8015988 <_scanf_float+0x188>
 80159e4:	b97d      	cbnz	r5, 8015a06 <_scanf_float+0x206>
 80159e6:	f1b9 0f00 	cmp.w	r9, #0
 80159ea:	f47f af3c 	bne.w	8015866 <_scanf_float+0x66>
 80159ee:	6822      	ldr	r2, [r4, #0]
 80159f0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80159f4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80159f8:	f47f af39 	bne.w	801586e <_scanf_float+0x6e>
 80159fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015a00:	6022      	str	r2, [r4, #0]
 8015a02:	2501      	movs	r5, #1
 8015a04:	e7c0      	b.n	8015988 <_scanf_float+0x188>
 8015a06:	2d03      	cmp	r5, #3
 8015a08:	d0e2      	beq.n	80159d0 <_scanf_float+0x1d0>
 8015a0a:	2d05      	cmp	r5, #5
 8015a0c:	e7de      	b.n	80159cc <_scanf_float+0x1cc>
 8015a0e:	2d02      	cmp	r5, #2
 8015a10:	f47f af26 	bne.w	8015860 <_scanf_float+0x60>
 8015a14:	2503      	movs	r5, #3
 8015a16:	e7b7      	b.n	8015988 <_scanf_float+0x188>
 8015a18:	2d06      	cmp	r5, #6
 8015a1a:	f47f af21 	bne.w	8015860 <_scanf_float+0x60>
 8015a1e:	2507      	movs	r5, #7
 8015a20:	e7b2      	b.n	8015988 <_scanf_float+0x188>
 8015a22:	6822      	ldr	r2, [r4, #0]
 8015a24:	0591      	lsls	r1, r2, #22
 8015a26:	f57f af1b 	bpl.w	8015860 <_scanf_float+0x60>
 8015a2a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8015a2e:	6022      	str	r2, [r4, #0]
 8015a30:	f8cd 9004 	str.w	r9, [sp, #4]
 8015a34:	e7a8      	b.n	8015988 <_scanf_float+0x188>
 8015a36:	6822      	ldr	r2, [r4, #0]
 8015a38:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8015a3c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8015a40:	d006      	beq.n	8015a50 <_scanf_float+0x250>
 8015a42:	0550      	lsls	r0, r2, #21
 8015a44:	f57f af0c 	bpl.w	8015860 <_scanf_float+0x60>
 8015a48:	f1b9 0f00 	cmp.w	r9, #0
 8015a4c:	f43f af0f 	beq.w	801586e <_scanf_float+0x6e>
 8015a50:	0591      	lsls	r1, r2, #22
 8015a52:	bf58      	it	pl
 8015a54:	9901      	ldrpl	r1, [sp, #4]
 8015a56:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015a5a:	bf58      	it	pl
 8015a5c:	eba9 0101 	subpl.w	r1, r9, r1
 8015a60:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8015a64:	bf58      	it	pl
 8015a66:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8015a6a:	6022      	str	r2, [r4, #0]
 8015a6c:	f04f 0900 	mov.w	r9, #0
 8015a70:	e78a      	b.n	8015988 <_scanf_float+0x188>
 8015a72:	f04f 0a03 	mov.w	sl, #3
 8015a76:	e787      	b.n	8015988 <_scanf_float+0x188>
 8015a78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015a7c:	4639      	mov	r1, r7
 8015a7e:	4640      	mov	r0, r8
 8015a80:	4798      	blx	r3
 8015a82:	2800      	cmp	r0, #0
 8015a84:	f43f aedf 	beq.w	8015846 <_scanf_float+0x46>
 8015a88:	e6ea      	b.n	8015860 <_scanf_float+0x60>
 8015a8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015a8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015a92:	463a      	mov	r2, r7
 8015a94:	4640      	mov	r0, r8
 8015a96:	4798      	blx	r3
 8015a98:	6923      	ldr	r3, [r4, #16]
 8015a9a:	3b01      	subs	r3, #1
 8015a9c:	6123      	str	r3, [r4, #16]
 8015a9e:	e6ec      	b.n	801587a <_scanf_float+0x7a>
 8015aa0:	1e6b      	subs	r3, r5, #1
 8015aa2:	2b06      	cmp	r3, #6
 8015aa4:	d825      	bhi.n	8015af2 <_scanf_float+0x2f2>
 8015aa6:	2d02      	cmp	r5, #2
 8015aa8:	d836      	bhi.n	8015b18 <_scanf_float+0x318>
 8015aaa:	455e      	cmp	r6, fp
 8015aac:	f67f aee8 	bls.w	8015880 <_scanf_float+0x80>
 8015ab0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015ab4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015ab8:	463a      	mov	r2, r7
 8015aba:	4640      	mov	r0, r8
 8015abc:	4798      	blx	r3
 8015abe:	6923      	ldr	r3, [r4, #16]
 8015ac0:	3b01      	subs	r3, #1
 8015ac2:	6123      	str	r3, [r4, #16]
 8015ac4:	e7f1      	b.n	8015aaa <_scanf_float+0x2aa>
 8015ac6:	9802      	ldr	r0, [sp, #8]
 8015ac8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015acc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8015ad0:	9002      	str	r0, [sp, #8]
 8015ad2:	463a      	mov	r2, r7
 8015ad4:	4640      	mov	r0, r8
 8015ad6:	4798      	blx	r3
 8015ad8:	6923      	ldr	r3, [r4, #16]
 8015ada:	3b01      	subs	r3, #1
 8015adc:	6123      	str	r3, [r4, #16]
 8015ade:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015ae2:	fa5f fa8a 	uxtb.w	sl, sl
 8015ae6:	f1ba 0f02 	cmp.w	sl, #2
 8015aea:	d1ec      	bne.n	8015ac6 <_scanf_float+0x2c6>
 8015aec:	3d03      	subs	r5, #3
 8015aee:	b2ed      	uxtb	r5, r5
 8015af0:	1b76      	subs	r6, r6, r5
 8015af2:	6823      	ldr	r3, [r4, #0]
 8015af4:	05da      	lsls	r2, r3, #23
 8015af6:	d52f      	bpl.n	8015b58 <_scanf_float+0x358>
 8015af8:	055b      	lsls	r3, r3, #21
 8015afa:	d510      	bpl.n	8015b1e <_scanf_float+0x31e>
 8015afc:	455e      	cmp	r6, fp
 8015afe:	f67f aebf 	bls.w	8015880 <_scanf_float+0x80>
 8015b02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015b06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015b0a:	463a      	mov	r2, r7
 8015b0c:	4640      	mov	r0, r8
 8015b0e:	4798      	blx	r3
 8015b10:	6923      	ldr	r3, [r4, #16]
 8015b12:	3b01      	subs	r3, #1
 8015b14:	6123      	str	r3, [r4, #16]
 8015b16:	e7f1      	b.n	8015afc <_scanf_float+0x2fc>
 8015b18:	46aa      	mov	sl, r5
 8015b1a:	9602      	str	r6, [sp, #8]
 8015b1c:	e7df      	b.n	8015ade <_scanf_float+0x2de>
 8015b1e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8015b22:	6923      	ldr	r3, [r4, #16]
 8015b24:	2965      	cmp	r1, #101	; 0x65
 8015b26:	f103 33ff 	add.w	r3, r3, #4294967295
 8015b2a:	f106 35ff 	add.w	r5, r6, #4294967295
 8015b2e:	6123      	str	r3, [r4, #16]
 8015b30:	d00c      	beq.n	8015b4c <_scanf_float+0x34c>
 8015b32:	2945      	cmp	r1, #69	; 0x45
 8015b34:	d00a      	beq.n	8015b4c <_scanf_float+0x34c>
 8015b36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015b3a:	463a      	mov	r2, r7
 8015b3c:	4640      	mov	r0, r8
 8015b3e:	4798      	blx	r3
 8015b40:	6923      	ldr	r3, [r4, #16]
 8015b42:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8015b46:	3b01      	subs	r3, #1
 8015b48:	1eb5      	subs	r5, r6, #2
 8015b4a:	6123      	str	r3, [r4, #16]
 8015b4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015b50:	463a      	mov	r2, r7
 8015b52:	4640      	mov	r0, r8
 8015b54:	4798      	blx	r3
 8015b56:	462e      	mov	r6, r5
 8015b58:	6825      	ldr	r5, [r4, #0]
 8015b5a:	f015 0510 	ands.w	r5, r5, #16
 8015b5e:	d159      	bne.n	8015c14 <_scanf_float+0x414>
 8015b60:	7035      	strb	r5, [r6, #0]
 8015b62:	6823      	ldr	r3, [r4, #0]
 8015b64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015b6c:	d11b      	bne.n	8015ba6 <_scanf_float+0x3a6>
 8015b6e:	9b01      	ldr	r3, [sp, #4]
 8015b70:	454b      	cmp	r3, r9
 8015b72:	eba3 0209 	sub.w	r2, r3, r9
 8015b76:	d123      	bne.n	8015bc0 <_scanf_float+0x3c0>
 8015b78:	2200      	movs	r2, #0
 8015b7a:	4659      	mov	r1, fp
 8015b7c:	4640      	mov	r0, r8
 8015b7e:	f000 ff89 	bl	8016a94 <_strtod_r>
 8015b82:	6822      	ldr	r2, [r4, #0]
 8015b84:	9b03      	ldr	r3, [sp, #12]
 8015b86:	f012 0f02 	tst.w	r2, #2
 8015b8a:	ec57 6b10 	vmov	r6, r7, d0
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	d021      	beq.n	8015bd6 <_scanf_float+0x3d6>
 8015b92:	9903      	ldr	r1, [sp, #12]
 8015b94:	1d1a      	adds	r2, r3, #4
 8015b96:	600a      	str	r2, [r1, #0]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	e9c3 6700 	strd	r6, r7, [r3]
 8015b9e:	68e3      	ldr	r3, [r4, #12]
 8015ba0:	3301      	adds	r3, #1
 8015ba2:	60e3      	str	r3, [r4, #12]
 8015ba4:	e66d      	b.n	8015882 <_scanf_float+0x82>
 8015ba6:	9b04      	ldr	r3, [sp, #16]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d0e5      	beq.n	8015b78 <_scanf_float+0x378>
 8015bac:	9905      	ldr	r1, [sp, #20]
 8015bae:	230a      	movs	r3, #10
 8015bb0:	462a      	mov	r2, r5
 8015bb2:	3101      	adds	r1, #1
 8015bb4:	4640      	mov	r0, r8
 8015bb6:	f000 fff5 	bl	8016ba4 <_strtol_r>
 8015bba:	9b04      	ldr	r3, [sp, #16]
 8015bbc:	9e05      	ldr	r6, [sp, #20]
 8015bbe:	1ac2      	subs	r2, r0, r3
 8015bc0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015bc4:	429e      	cmp	r6, r3
 8015bc6:	bf28      	it	cs
 8015bc8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8015bcc:	4912      	ldr	r1, [pc, #72]	; (8015c18 <_scanf_float+0x418>)
 8015bce:	4630      	mov	r0, r6
 8015bd0:	f000 f908 	bl	8015de4 <siprintf>
 8015bd4:	e7d0      	b.n	8015b78 <_scanf_float+0x378>
 8015bd6:	9903      	ldr	r1, [sp, #12]
 8015bd8:	f012 0f04 	tst.w	r2, #4
 8015bdc:	f103 0204 	add.w	r2, r3, #4
 8015be0:	600a      	str	r2, [r1, #0]
 8015be2:	d1d9      	bne.n	8015b98 <_scanf_float+0x398>
 8015be4:	f8d3 8000 	ldr.w	r8, [r3]
 8015be8:	ee10 2a10 	vmov	r2, s0
 8015bec:	ee10 0a10 	vmov	r0, s0
 8015bf0:	463b      	mov	r3, r7
 8015bf2:	4639      	mov	r1, r7
 8015bf4:	f7ea ffa4 	bl	8000b40 <__aeabi_dcmpun>
 8015bf8:	b128      	cbz	r0, 8015c06 <_scanf_float+0x406>
 8015bfa:	4808      	ldr	r0, [pc, #32]	; (8015c1c <_scanf_float+0x41c>)
 8015bfc:	f7fe fe92 	bl	8014924 <nanf>
 8015c00:	ed88 0a00 	vstr	s0, [r8]
 8015c04:	e7cb      	b.n	8015b9e <_scanf_float+0x39e>
 8015c06:	4630      	mov	r0, r6
 8015c08:	4639      	mov	r1, r7
 8015c0a:	f7ea fff7 	bl	8000bfc <__aeabi_d2f>
 8015c0e:	f8c8 0000 	str.w	r0, [r8]
 8015c12:	e7c4      	b.n	8015b9e <_scanf_float+0x39e>
 8015c14:	2500      	movs	r5, #0
 8015c16:	e634      	b.n	8015882 <_scanf_float+0x82>
 8015c18:	08059b55 	.word	0x08059b55
 8015c1c:	08059b0b 	.word	0x08059b0b

08015c20 <iprintf>:
 8015c20:	b40f      	push	{r0, r1, r2, r3}
 8015c22:	4b0a      	ldr	r3, [pc, #40]	; (8015c4c <iprintf+0x2c>)
 8015c24:	b513      	push	{r0, r1, r4, lr}
 8015c26:	681c      	ldr	r4, [r3, #0]
 8015c28:	b124      	cbz	r4, 8015c34 <iprintf+0x14>
 8015c2a:	69a3      	ldr	r3, [r4, #24]
 8015c2c:	b913      	cbnz	r3, 8015c34 <iprintf+0x14>
 8015c2e:	4620      	mov	r0, r4
 8015c30:	f002 f82e 	bl	8017c90 <__sinit>
 8015c34:	ab05      	add	r3, sp, #20
 8015c36:	9a04      	ldr	r2, [sp, #16]
 8015c38:	68a1      	ldr	r1, [r4, #8]
 8015c3a:	9301      	str	r3, [sp, #4]
 8015c3c:	4620      	mov	r0, r4
 8015c3e:	f7ff f845 	bl	8014ccc <_vfiprintf_r>
 8015c42:	b002      	add	sp, #8
 8015c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015c48:	b004      	add	sp, #16
 8015c4a:	4770      	bx	lr
 8015c4c:	20000230 	.word	0x20000230

08015c50 <_puts_r>:
 8015c50:	b570      	push	{r4, r5, r6, lr}
 8015c52:	460e      	mov	r6, r1
 8015c54:	4605      	mov	r5, r0
 8015c56:	b118      	cbz	r0, 8015c60 <_puts_r+0x10>
 8015c58:	6983      	ldr	r3, [r0, #24]
 8015c5a:	b90b      	cbnz	r3, 8015c60 <_puts_r+0x10>
 8015c5c:	f002 f818 	bl	8017c90 <__sinit>
 8015c60:	69ab      	ldr	r3, [r5, #24]
 8015c62:	68ac      	ldr	r4, [r5, #8]
 8015c64:	b913      	cbnz	r3, 8015c6c <_puts_r+0x1c>
 8015c66:	4628      	mov	r0, r5
 8015c68:	f002 f812 	bl	8017c90 <__sinit>
 8015c6c:	4b2c      	ldr	r3, [pc, #176]	; (8015d20 <_puts_r+0xd0>)
 8015c6e:	429c      	cmp	r4, r3
 8015c70:	d120      	bne.n	8015cb4 <_puts_r+0x64>
 8015c72:	686c      	ldr	r4, [r5, #4]
 8015c74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015c76:	07db      	lsls	r3, r3, #31
 8015c78:	d405      	bmi.n	8015c86 <_puts_r+0x36>
 8015c7a:	89a3      	ldrh	r3, [r4, #12]
 8015c7c:	0598      	lsls	r0, r3, #22
 8015c7e:	d402      	bmi.n	8015c86 <_puts_r+0x36>
 8015c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c82:	f7fe fec0 	bl	8014a06 <__retarget_lock_acquire_recursive>
 8015c86:	89a3      	ldrh	r3, [r4, #12]
 8015c88:	0719      	lsls	r1, r3, #28
 8015c8a:	d51d      	bpl.n	8015cc8 <_puts_r+0x78>
 8015c8c:	6923      	ldr	r3, [r4, #16]
 8015c8e:	b1db      	cbz	r3, 8015cc8 <_puts_r+0x78>
 8015c90:	3e01      	subs	r6, #1
 8015c92:	68a3      	ldr	r3, [r4, #8]
 8015c94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015c98:	3b01      	subs	r3, #1
 8015c9a:	60a3      	str	r3, [r4, #8]
 8015c9c:	bb39      	cbnz	r1, 8015cee <_puts_r+0x9e>
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	da38      	bge.n	8015d14 <_puts_r+0xc4>
 8015ca2:	4622      	mov	r2, r4
 8015ca4:	210a      	movs	r1, #10
 8015ca6:	4628      	mov	r0, r5
 8015ca8:	f000 ff9e 	bl	8016be8 <__swbuf_r>
 8015cac:	3001      	adds	r0, #1
 8015cae:	d011      	beq.n	8015cd4 <_puts_r+0x84>
 8015cb0:	250a      	movs	r5, #10
 8015cb2:	e011      	b.n	8015cd8 <_puts_r+0x88>
 8015cb4:	4b1b      	ldr	r3, [pc, #108]	; (8015d24 <_puts_r+0xd4>)
 8015cb6:	429c      	cmp	r4, r3
 8015cb8:	d101      	bne.n	8015cbe <_puts_r+0x6e>
 8015cba:	68ac      	ldr	r4, [r5, #8]
 8015cbc:	e7da      	b.n	8015c74 <_puts_r+0x24>
 8015cbe:	4b1a      	ldr	r3, [pc, #104]	; (8015d28 <_puts_r+0xd8>)
 8015cc0:	429c      	cmp	r4, r3
 8015cc2:	bf08      	it	eq
 8015cc4:	68ec      	ldreq	r4, [r5, #12]
 8015cc6:	e7d5      	b.n	8015c74 <_puts_r+0x24>
 8015cc8:	4621      	mov	r1, r4
 8015cca:	4628      	mov	r0, r5
 8015ccc:	f000 ffde 	bl	8016c8c <__swsetup_r>
 8015cd0:	2800      	cmp	r0, #0
 8015cd2:	d0dd      	beq.n	8015c90 <_puts_r+0x40>
 8015cd4:	f04f 35ff 	mov.w	r5, #4294967295
 8015cd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015cda:	07da      	lsls	r2, r3, #31
 8015cdc:	d405      	bmi.n	8015cea <_puts_r+0x9a>
 8015cde:	89a3      	ldrh	r3, [r4, #12]
 8015ce0:	059b      	lsls	r3, r3, #22
 8015ce2:	d402      	bmi.n	8015cea <_puts_r+0x9a>
 8015ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ce6:	f7fe fe8f 	bl	8014a08 <__retarget_lock_release_recursive>
 8015cea:	4628      	mov	r0, r5
 8015cec:	bd70      	pop	{r4, r5, r6, pc}
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	da04      	bge.n	8015cfc <_puts_r+0xac>
 8015cf2:	69a2      	ldr	r2, [r4, #24]
 8015cf4:	429a      	cmp	r2, r3
 8015cf6:	dc06      	bgt.n	8015d06 <_puts_r+0xb6>
 8015cf8:	290a      	cmp	r1, #10
 8015cfa:	d004      	beq.n	8015d06 <_puts_r+0xb6>
 8015cfc:	6823      	ldr	r3, [r4, #0]
 8015cfe:	1c5a      	adds	r2, r3, #1
 8015d00:	6022      	str	r2, [r4, #0]
 8015d02:	7019      	strb	r1, [r3, #0]
 8015d04:	e7c5      	b.n	8015c92 <_puts_r+0x42>
 8015d06:	4622      	mov	r2, r4
 8015d08:	4628      	mov	r0, r5
 8015d0a:	f000 ff6d 	bl	8016be8 <__swbuf_r>
 8015d0e:	3001      	adds	r0, #1
 8015d10:	d1bf      	bne.n	8015c92 <_puts_r+0x42>
 8015d12:	e7df      	b.n	8015cd4 <_puts_r+0x84>
 8015d14:	6823      	ldr	r3, [r4, #0]
 8015d16:	250a      	movs	r5, #10
 8015d18:	1c5a      	adds	r2, r3, #1
 8015d1a:	6022      	str	r2, [r4, #0]
 8015d1c:	701d      	strb	r5, [r3, #0]
 8015d1e:	e7db      	b.n	8015cd8 <_puts_r+0x88>
 8015d20:	08059d64 	.word	0x08059d64
 8015d24:	08059d84 	.word	0x08059d84
 8015d28:	08059d44 	.word	0x08059d44

08015d2c <puts>:
 8015d2c:	4b02      	ldr	r3, [pc, #8]	; (8015d38 <puts+0xc>)
 8015d2e:	4601      	mov	r1, r0
 8015d30:	6818      	ldr	r0, [r3, #0]
 8015d32:	f7ff bf8d 	b.w	8015c50 <_puts_r>
 8015d36:	bf00      	nop
 8015d38:	20000230 	.word	0x20000230

08015d3c <_sbrk_r>:
 8015d3c:	b538      	push	{r3, r4, r5, lr}
 8015d3e:	4d06      	ldr	r5, [pc, #24]	; (8015d58 <_sbrk_r+0x1c>)
 8015d40:	2300      	movs	r3, #0
 8015d42:	4604      	mov	r4, r0
 8015d44:	4608      	mov	r0, r1
 8015d46:	602b      	str	r3, [r5, #0]
 8015d48:	f7ee ff40 	bl	8004bcc <_sbrk>
 8015d4c:	1c43      	adds	r3, r0, #1
 8015d4e:	d102      	bne.n	8015d56 <_sbrk_r+0x1a>
 8015d50:	682b      	ldr	r3, [r5, #0]
 8015d52:	b103      	cbz	r3, 8015d56 <_sbrk_r+0x1a>
 8015d54:	6023      	str	r3, [r4, #0]
 8015d56:	bd38      	pop	{r3, r4, r5, pc}
 8015d58:	200029a4 	.word	0x200029a4

08015d5c <_raise_r>:
 8015d5c:	291f      	cmp	r1, #31
 8015d5e:	b538      	push	{r3, r4, r5, lr}
 8015d60:	4604      	mov	r4, r0
 8015d62:	460d      	mov	r5, r1
 8015d64:	d904      	bls.n	8015d70 <_raise_r+0x14>
 8015d66:	2316      	movs	r3, #22
 8015d68:	6003      	str	r3, [r0, #0]
 8015d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8015d6e:	bd38      	pop	{r3, r4, r5, pc}
 8015d70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015d72:	b112      	cbz	r2, 8015d7a <_raise_r+0x1e>
 8015d74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015d78:	b94b      	cbnz	r3, 8015d8e <_raise_r+0x32>
 8015d7a:	4620      	mov	r0, r4
 8015d7c:	f000 f830 	bl	8015de0 <_getpid_r>
 8015d80:	462a      	mov	r2, r5
 8015d82:	4601      	mov	r1, r0
 8015d84:	4620      	mov	r0, r4
 8015d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015d8a:	f000 b817 	b.w	8015dbc <_kill_r>
 8015d8e:	2b01      	cmp	r3, #1
 8015d90:	d00a      	beq.n	8015da8 <_raise_r+0x4c>
 8015d92:	1c59      	adds	r1, r3, #1
 8015d94:	d103      	bne.n	8015d9e <_raise_r+0x42>
 8015d96:	2316      	movs	r3, #22
 8015d98:	6003      	str	r3, [r0, #0]
 8015d9a:	2001      	movs	r0, #1
 8015d9c:	e7e7      	b.n	8015d6e <_raise_r+0x12>
 8015d9e:	2400      	movs	r4, #0
 8015da0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015da4:	4628      	mov	r0, r5
 8015da6:	4798      	blx	r3
 8015da8:	2000      	movs	r0, #0
 8015daa:	e7e0      	b.n	8015d6e <_raise_r+0x12>

08015dac <raise>:
 8015dac:	4b02      	ldr	r3, [pc, #8]	; (8015db8 <raise+0xc>)
 8015dae:	4601      	mov	r1, r0
 8015db0:	6818      	ldr	r0, [r3, #0]
 8015db2:	f7ff bfd3 	b.w	8015d5c <_raise_r>
 8015db6:	bf00      	nop
 8015db8:	20000230 	.word	0x20000230

08015dbc <_kill_r>:
 8015dbc:	b538      	push	{r3, r4, r5, lr}
 8015dbe:	4d07      	ldr	r5, [pc, #28]	; (8015ddc <_kill_r+0x20>)
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	4604      	mov	r4, r0
 8015dc4:	4608      	mov	r0, r1
 8015dc6:	4611      	mov	r1, r2
 8015dc8:	602b      	str	r3, [r5, #0]
 8015dca:	f7ee fe77 	bl	8004abc <_kill>
 8015dce:	1c43      	adds	r3, r0, #1
 8015dd0:	d102      	bne.n	8015dd8 <_kill_r+0x1c>
 8015dd2:	682b      	ldr	r3, [r5, #0]
 8015dd4:	b103      	cbz	r3, 8015dd8 <_kill_r+0x1c>
 8015dd6:	6023      	str	r3, [r4, #0]
 8015dd8:	bd38      	pop	{r3, r4, r5, pc}
 8015dda:	bf00      	nop
 8015ddc:	200029a4 	.word	0x200029a4

08015de0 <_getpid_r>:
 8015de0:	f7ee be64 	b.w	8004aac <_getpid>

08015de4 <siprintf>:
 8015de4:	b40e      	push	{r1, r2, r3}
 8015de6:	b500      	push	{lr}
 8015de8:	b09c      	sub	sp, #112	; 0x70
 8015dea:	ab1d      	add	r3, sp, #116	; 0x74
 8015dec:	9002      	str	r0, [sp, #8]
 8015dee:	9006      	str	r0, [sp, #24]
 8015df0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015df4:	4809      	ldr	r0, [pc, #36]	; (8015e1c <siprintf+0x38>)
 8015df6:	9107      	str	r1, [sp, #28]
 8015df8:	9104      	str	r1, [sp, #16]
 8015dfa:	4909      	ldr	r1, [pc, #36]	; (8015e20 <siprintf+0x3c>)
 8015dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e00:	9105      	str	r1, [sp, #20]
 8015e02:	6800      	ldr	r0, [r0, #0]
 8015e04:	9301      	str	r3, [sp, #4]
 8015e06:	a902      	add	r1, sp, #8
 8015e08:	f003 f922 	bl	8019050 <_svfiprintf_r>
 8015e0c:	9b02      	ldr	r3, [sp, #8]
 8015e0e:	2200      	movs	r2, #0
 8015e10:	701a      	strb	r2, [r3, #0]
 8015e12:	b01c      	add	sp, #112	; 0x70
 8015e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8015e18:	b003      	add	sp, #12
 8015e1a:	4770      	bx	lr
 8015e1c:	20000230 	.word	0x20000230
 8015e20:	ffff0208 	.word	0xffff0208

08015e24 <strncmp>:
 8015e24:	b510      	push	{r4, lr}
 8015e26:	b17a      	cbz	r2, 8015e48 <strncmp+0x24>
 8015e28:	4603      	mov	r3, r0
 8015e2a:	3901      	subs	r1, #1
 8015e2c:	1884      	adds	r4, r0, r2
 8015e2e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015e32:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015e36:	4290      	cmp	r0, r2
 8015e38:	d101      	bne.n	8015e3e <strncmp+0x1a>
 8015e3a:	42a3      	cmp	r3, r4
 8015e3c:	d101      	bne.n	8015e42 <strncmp+0x1e>
 8015e3e:	1a80      	subs	r0, r0, r2
 8015e40:	bd10      	pop	{r4, pc}
 8015e42:	2800      	cmp	r0, #0
 8015e44:	d1f3      	bne.n	8015e2e <strncmp+0xa>
 8015e46:	e7fa      	b.n	8015e3e <strncmp+0x1a>
 8015e48:	4610      	mov	r0, r2
 8015e4a:	e7f9      	b.n	8015e40 <strncmp+0x1c>

08015e4c <sulp>:
 8015e4c:	b570      	push	{r4, r5, r6, lr}
 8015e4e:	4604      	mov	r4, r0
 8015e50:	460d      	mov	r5, r1
 8015e52:	ec45 4b10 	vmov	d0, r4, r5
 8015e56:	4616      	mov	r6, r2
 8015e58:	f002 ff20 	bl	8018c9c <__ulp>
 8015e5c:	ec51 0b10 	vmov	r0, r1, d0
 8015e60:	b17e      	cbz	r6, 8015e82 <sulp+0x36>
 8015e62:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015e66:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	dd09      	ble.n	8015e82 <sulp+0x36>
 8015e6e:	051b      	lsls	r3, r3, #20
 8015e70:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015e74:	2400      	movs	r4, #0
 8015e76:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015e7a:	4622      	mov	r2, r4
 8015e7c:	462b      	mov	r3, r5
 8015e7e:	f7ea fbc5 	bl	800060c <__aeabi_dmul>
 8015e82:	bd70      	pop	{r4, r5, r6, pc}
 8015e84:	0000      	movs	r0, r0
	...

08015e88 <_strtod_l>:
 8015e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e8c:	ed2d 8b02 	vpush	{d8}
 8015e90:	b09d      	sub	sp, #116	; 0x74
 8015e92:	461f      	mov	r7, r3
 8015e94:	2300      	movs	r3, #0
 8015e96:	9318      	str	r3, [sp, #96]	; 0x60
 8015e98:	4ba2      	ldr	r3, [pc, #648]	; (8016124 <_strtod_l+0x29c>)
 8015e9a:	9213      	str	r2, [sp, #76]	; 0x4c
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	9305      	str	r3, [sp, #20]
 8015ea0:	4604      	mov	r4, r0
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	4688      	mov	r8, r1
 8015ea6:	f7ea f9ed 	bl	8000284 <strlen>
 8015eaa:	f04f 0a00 	mov.w	sl, #0
 8015eae:	4605      	mov	r5, r0
 8015eb0:	f04f 0b00 	mov.w	fp, #0
 8015eb4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8015eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015eba:	781a      	ldrb	r2, [r3, #0]
 8015ebc:	2a2b      	cmp	r2, #43	; 0x2b
 8015ebe:	d04e      	beq.n	8015f5e <_strtod_l+0xd6>
 8015ec0:	d83b      	bhi.n	8015f3a <_strtod_l+0xb2>
 8015ec2:	2a0d      	cmp	r2, #13
 8015ec4:	d834      	bhi.n	8015f30 <_strtod_l+0xa8>
 8015ec6:	2a08      	cmp	r2, #8
 8015ec8:	d834      	bhi.n	8015f34 <_strtod_l+0xac>
 8015eca:	2a00      	cmp	r2, #0
 8015ecc:	d03e      	beq.n	8015f4c <_strtod_l+0xc4>
 8015ece:	2300      	movs	r3, #0
 8015ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8015ed2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8015ed4:	7833      	ldrb	r3, [r6, #0]
 8015ed6:	2b30      	cmp	r3, #48	; 0x30
 8015ed8:	f040 80b0 	bne.w	801603c <_strtod_l+0x1b4>
 8015edc:	7873      	ldrb	r3, [r6, #1]
 8015ede:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015ee2:	2b58      	cmp	r3, #88	; 0x58
 8015ee4:	d168      	bne.n	8015fb8 <_strtod_l+0x130>
 8015ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ee8:	9301      	str	r3, [sp, #4]
 8015eea:	ab18      	add	r3, sp, #96	; 0x60
 8015eec:	9702      	str	r7, [sp, #8]
 8015eee:	9300      	str	r3, [sp, #0]
 8015ef0:	4a8d      	ldr	r2, [pc, #564]	; (8016128 <_strtod_l+0x2a0>)
 8015ef2:	ab19      	add	r3, sp, #100	; 0x64
 8015ef4:	a917      	add	r1, sp, #92	; 0x5c
 8015ef6:	4620      	mov	r0, r4
 8015ef8:	f001 ffce 	bl	8017e98 <__gethex>
 8015efc:	f010 0707 	ands.w	r7, r0, #7
 8015f00:	4605      	mov	r5, r0
 8015f02:	d005      	beq.n	8015f10 <_strtod_l+0x88>
 8015f04:	2f06      	cmp	r7, #6
 8015f06:	d12c      	bne.n	8015f62 <_strtod_l+0xda>
 8015f08:	3601      	adds	r6, #1
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	9617      	str	r6, [sp, #92]	; 0x5c
 8015f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8015f10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	f040 8590 	bne.w	8016a38 <_strtod_l+0xbb0>
 8015f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f1a:	b1eb      	cbz	r3, 8015f58 <_strtod_l+0xd0>
 8015f1c:	4652      	mov	r2, sl
 8015f1e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015f22:	ec43 2b10 	vmov	d0, r2, r3
 8015f26:	b01d      	add	sp, #116	; 0x74
 8015f28:	ecbd 8b02 	vpop	{d8}
 8015f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f30:	2a20      	cmp	r2, #32
 8015f32:	d1cc      	bne.n	8015ece <_strtod_l+0x46>
 8015f34:	3301      	adds	r3, #1
 8015f36:	9317      	str	r3, [sp, #92]	; 0x5c
 8015f38:	e7be      	b.n	8015eb8 <_strtod_l+0x30>
 8015f3a:	2a2d      	cmp	r2, #45	; 0x2d
 8015f3c:	d1c7      	bne.n	8015ece <_strtod_l+0x46>
 8015f3e:	2201      	movs	r2, #1
 8015f40:	920a      	str	r2, [sp, #40]	; 0x28
 8015f42:	1c5a      	adds	r2, r3, #1
 8015f44:	9217      	str	r2, [sp, #92]	; 0x5c
 8015f46:	785b      	ldrb	r3, [r3, #1]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d1c2      	bne.n	8015ed2 <_strtod_l+0x4a>
 8015f4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015f4e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	f040 856e 	bne.w	8016a34 <_strtod_l+0xbac>
 8015f58:	4652      	mov	r2, sl
 8015f5a:	465b      	mov	r3, fp
 8015f5c:	e7e1      	b.n	8015f22 <_strtod_l+0x9a>
 8015f5e:	2200      	movs	r2, #0
 8015f60:	e7ee      	b.n	8015f40 <_strtod_l+0xb8>
 8015f62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015f64:	b13a      	cbz	r2, 8015f76 <_strtod_l+0xee>
 8015f66:	2135      	movs	r1, #53	; 0x35
 8015f68:	a81a      	add	r0, sp, #104	; 0x68
 8015f6a:	f002 ffa2 	bl	8018eb2 <__copybits>
 8015f6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015f70:	4620      	mov	r0, r4
 8015f72:	f002 fb61 	bl	8018638 <_Bfree>
 8015f76:	3f01      	subs	r7, #1
 8015f78:	2f04      	cmp	r7, #4
 8015f7a:	d806      	bhi.n	8015f8a <_strtod_l+0x102>
 8015f7c:	e8df f007 	tbb	[pc, r7]
 8015f80:	1714030a 	.word	0x1714030a
 8015f84:	0a          	.byte	0x0a
 8015f85:	00          	.byte	0x00
 8015f86:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8015f8a:	0728      	lsls	r0, r5, #28
 8015f8c:	d5c0      	bpl.n	8015f10 <_strtod_l+0x88>
 8015f8e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015f92:	e7bd      	b.n	8015f10 <_strtod_l+0x88>
 8015f94:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8015f98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015f9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015f9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015fa2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015fa6:	e7f0      	b.n	8015f8a <_strtod_l+0x102>
 8015fa8:	f8df b180 	ldr.w	fp, [pc, #384]	; 801612c <_strtod_l+0x2a4>
 8015fac:	e7ed      	b.n	8015f8a <_strtod_l+0x102>
 8015fae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015fb2:	f04f 3aff 	mov.w	sl, #4294967295
 8015fb6:	e7e8      	b.n	8015f8a <_strtod_l+0x102>
 8015fb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015fba:	1c5a      	adds	r2, r3, #1
 8015fbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8015fbe:	785b      	ldrb	r3, [r3, #1]
 8015fc0:	2b30      	cmp	r3, #48	; 0x30
 8015fc2:	d0f9      	beq.n	8015fb8 <_strtod_l+0x130>
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d0a3      	beq.n	8015f10 <_strtod_l+0x88>
 8015fc8:	2301      	movs	r3, #1
 8015fca:	f04f 0900 	mov.w	r9, #0
 8015fce:	9304      	str	r3, [sp, #16]
 8015fd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015fd2:	9308      	str	r3, [sp, #32]
 8015fd4:	f8cd 901c 	str.w	r9, [sp, #28]
 8015fd8:	464f      	mov	r7, r9
 8015fda:	220a      	movs	r2, #10
 8015fdc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015fde:	7806      	ldrb	r6, [r0, #0]
 8015fe0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8015fe4:	b2d9      	uxtb	r1, r3
 8015fe6:	2909      	cmp	r1, #9
 8015fe8:	d92a      	bls.n	8016040 <_strtod_l+0x1b8>
 8015fea:	9905      	ldr	r1, [sp, #20]
 8015fec:	462a      	mov	r2, r5
 8015fee:	f7ff ff19 	bl	8015e24 <strncmp>
 8015ff2:	b398      	cbz	r0, 801605c <_strtod_l+0x1d4>
 8015ff4:	2000      	movs	r0, #0
 8015ff6:	4632      	mov	r2, r6
 8015ff8:	463d      	mov	r5, r7
 8015ffa:	9005      	str	r0, [sp, #20]
 8015ffc:	4603      	mov	r3, r0
 8015ffe:	2a65      	cmp	r2, #101	; 0x65
 8016000:	d001      	beq.n	8016006 <_strtod_l+0x17e>
 8016002:	2a45      	cmp	r2, #69	; 0x45
 8016004:	d118      	bne.n	8016038 <_strtod_l+0x1b0>
 8016006:	b91d      	cbnz	r5, 8016010 <_strtod_l+0x188>
 8016008:	9a04      	ldr	r2, [sp, #16]
 801600a:	4302      	orrs	r2, r0
 801600c:	d09e      	beq.n	8015f4c <_strtod_l+0xc4>
 801600e:	2500      	movs	r5, #0
 8016010:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8016014:	f108 0201 	add.w	r2, r8, #1
 8016018:	9217      	str	r2, [sp, #92]	; 0x5c
 801601a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801601e:	2a2b      	cmp	r2, #43	; 0x2b
 8016020:	d075      	beq.n	801610e <_strtod_l+0x286>
 8016022:	2a2d      	cmp	r2, #45	; 0x2d
 8016024:	d07b      	beq.n	801611e <_strtod_l+0x296>
 8016026:	f04f 0c00 	mov.w	ip, #0
 801602a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801602e:	2909      	cmp	r1, #9
 8016030:	f240 8082 	bls.w	8016138 <_strtod_l+0x2b0>
 8016034:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8016038:	2600      	movs	r6, #0
 801603a:	e09d      	b.n	8016178 <_strtod_l+0x2f0>
 801603c:	2300      	movs	r3, #0
 801603e:	e7c4      	b.n	8015fca <_strtod_l+0x142>
 8016040:	2f08      	cmp	r7, #8
 8016042:	bfd8      	it	le
 8016044:	9907      	ldrle	r1, [sp, #28]
 8016046:	f100 0001 	add.w	r0, r0, #1
 801604a:	bfda      	itte	le
 801604c:	fb02 3301 	mlale	r3, r2, r1, r3
 8016050:	9307      	strle	r3, [sp, #28]
 8016052:	fb02 3909 	mlagt	r9, r2, r9, r3
 8016056:	3701      	adds	r7, #1
 8016058:	9017      	str	r0, [sp, #92]	; 0x5c
 801605a:	e7bf      	b.n	8015fdc <_strtod_l+0x154>
 801605c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801605e:	195a      	adds	r2, r3, r5
 8016060:	9217      	str	r2, [sp, #92]	; 0x5c
 8016062:	5d5a      	ldrb	r2, [r3, r5]
 8016064:	2f00      	cmp	r7, #0
 8016066:	d037      	beq.n	80160d8 <_strtod_l+0x250>
 8016068:	9005      	str	r0, [sp, #20]
 801606a:	463d      	mov	r5, r7
 801606c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8016070:	2b09      	cmp	r3, #9
 8016072:	d912      	bls.n	801609a <_strtod_l+0x212>
 8016074:	2301      	movs	r3, #1
 8016076:	e7c2      	b.n	8015ffe <_strtod_l+0x176>
 8016078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801607a:	1c5a      	adds	r2, r3, #1
 801607c:	9217      	str	r2, [sp, #92]	; 0x5c
 801607e:	785a      	ldrb	r2, [r3, #1]
 8016080:	3001      	adds	r0, #1
 8016082:	2a30      	cmp	r2, #48	; 0x30
 8016084:	d0f8      	beq.n	8016078 <_strtod_l+0x1f0>
 8016086:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801608a:	2b08      	cmp	r3, #8
 801608c:	f200 84d9 	bhi.w	8016a42 <_strtod_l+0xbba>
 8016090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016092:	9005      	str	r0, [sp, #20]
 8016094:	2000      	movs	r0, #0
 8016096:	9308      	str	r3, [sp, #32]
 8016098:	4605      	mov	r5, r0
 801609a:	3a30      	subs	r2, #48	; 0x30
 801609c:	f100 0301 	add.w	r3, r0, #1
 80160a0:	d014      	beq.n	80160cc <_strtod_l+0x244>
 80160a2:	9905      	ldr	r1, [sp, #20]
 80160a4:	4419      	add	r1, r3
 80160a6:	9105      	str	r1, [sp, #20]
 80160a8:	462b      	mov	r3, r5
 80160aa:	eb00 0e05 	add.w	lr, r0, r5
 80160ae:	210a      	movs	r1, #10
 80160b0:	4573      	cmp	r3, lr
 80160b2:	d113      	bne.n	80160dc <_strtod_l+0x254>
 80160b4:	182b      	adds	r3, r5, r0
 80160b6:	2b08      	cmp	r3, #8
 80160b8:	f105 0501 	add.w	r5, r5, #1
 80160bc:	4405      	add	r5, r0
 80160be:	dc1c      	bgt.n	80160fa <_strtod_l+0x272>
 80160c0:	9907      	ldr	r1, [sp, #28]
 80160c2:	230a      	movs	r3, #10
 80160c4:	fb03 2301 	mla	r3, r3, r1, r2
 80160c8:	9307      	str	r3, [sp, #28]
 80160ca:	2300      	movs	r3, #0
 80160cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80160ce:	1c51      	adds	r1, r2, #1
 80160d0:	9117      	str	r1, [sp, #92]	; 0x5c
 80160d2:	7852      	ldrb	r2, [r2, #1]
 80160d4:	4618      	mov	r0, r3
 80160d6:	e7c9      	b.n	801606c <_strtod_l+0x1e4>
 80160d8:	4638      	mov	r0, r7
 80160da:	e7d2      	b.n	8016082 <_strtod_l+0x1fa>
 80160dc:	2b08      	cmp	r3, #8
 80160de:	dc04      	bgt.n	80160ea <_strtod_l+0x262>
 80160e0:	9e07      	ldr	r6, [sp, #28]
 80160e2:	434e      	muls	r6, r1
 80160e4:	9607      	str	r6, [sp, #28]
 80160e6:	3301      	adds	r3, #1
 80160e8:	e7e2      	b.n	80160b0 <_strtod_l+0x228>
 80160ea:	f103 0c01 	add.w	ip, r3, #1
 80160ee:	f1bc 0f10 	cmp.w	ip, #16
 80160f2:	bfd8      	it	le
 80160f4:	fb01 f909 	mulle.w	r9, r1, r9
 80160f8:	e7f5      	b.n	80160e6 <_strtod_l+0x25e>
 80160fa:	2d10      	cmp	r5, #16
 80160fc:	bfdc      	itt	le
 80160fe:	230a      	movle	r3, #10
 8016100:	fb03 2909 	mlale	r9, r3, r9, r2
 8016104:	e7e1      	b.n	80160ca <_strtod_l+0x242>
 8016106:	2300      	movs	r3, #0
 8016108:	9305      	str	r3, [sp, #20]
 801610a:	2301      	movs	r3, #1
 801610c:	e77c      	b.n	8016008 <_strtod_l+0x180>
 801610e:	f04f 0c00 	mov.w	ip, #0
 8016112:	f108 0202 	add.w	r2, r8, #2
 8016116:	9217      	str	r2, [sp, #92]	; 0x5c
 8016118:	f898 2002 	ldrb.w	r2, [r8, #2]
 801611c:	e785      	b.n	801602a <_strtod_l+0x1a2>
 801611e:	f04f 0c01 	mov.w	ip, #1
 8016122:	e7f6      	b.n	8016112 <_strtod_l+0x28a>
 8016124:	08059e0c 	.word	0x08059e0c
 8016128:	08059b5c 	.word	0x08059b5c
 801612c:	7ff00000 	.word	0x7ff00000
 8016130:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016132:	1c51      	adds	r1, r2, #1
 8016134:	9117      	str	r1, [sp, #92]	; 0x5c
 8016136:	7852      	ldrb	r2, [r2, #1]
 8016138:	2a30      	cmp	r2, #48	; 0x30
 801613a:	d0f9      	beq.n	8016130 <_strtod_l+0x2a8>
 801613c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8016140:	2908      	cmp	r1, #8
 8016142:	f63f af79 	bhi.w	8016038 <_strtod_l+0x1b0>
 8016146:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801614a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801614c:	9206      	str	r2, [sp, #24]
 801614e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016150:	1c51      	adds	r1, r2, #1
 8016152:	9117      	str	r1, [sp, #92]	; 0x5c
 8016154:	7852      	ldrb	r2, [r2, #1]
 8016156:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801615a:	2e09      	cmp	r6, #9
 801615c:	d937      	bls.n	80161ce <_strtod_l+0x346>
 801615e:	9e06      	ldr	r6, [sp, #24]
 8016160:	1b89      	subs	r1, r1, r6
 8016162:	2908      	cmp	r1, #8
 8016164:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8016168:	dc02      	bgt.n	8016170 <_strtod_l+0x2e8>
 801616a:	4576      	cmp	r6, lr
 801616c:	bfa8      	it	ge
 801616e:	4676      	movge	r6, lr
 8016170:	f1bc 0f00 	cmp.w	ip, #0
 8016174:	d000      	beq.n	8016178 <_strtod_l+0x2f0>
 8016176:	4276      	negs	r6, r6
 8016178:	2d00      	cmp	r5, #0
 801617a:	d14d      	bne.n	8016218 <_strtod_l+0x390>
 801617c:	9904      	ldr	r1, [sp, #16]
 801617e:	4301      	orrs	r1, r0
 8016180:	f47f aec6 	bne.w	8015f10 <_strtod_l+0x88>
 8016184:	2b00      	cmp	r3, #0
 8016186:	f47f aee1 	bne.w	8015f4c <_strtod_l+0xc4>
 801618a:	2a69      	cmp	r2, #105	; 0x69
 801618c:	d027      	beq.n	80161de <_strtod_l+0x356>
 801618e:	dc24      	bgt.n	80161da <_strtod_l+0x352>
 8016190:	2a49      	cmp	r2, #73	; 0x49
 8016192:	d024      	beq.n	80161de <_strtod_l+0x356>
 8016194:	2a4e      	cmp	r2, #78	; 0x4e
 8016196:	f47f aed9 	bne.w	8015f4c <_strtod_l+0xc4>
 801619a:	499f      	ldr	r1, [pc, #636]	; (8016418 <_strtod_l+0x590>)
 801619c:	a817      	add	r0, sp, #92	; 0x5c
 801619e:	f002 f8d3 	bl	8018348 <__match>
 80161a2:	2800      	cmp	r0, #0
 80161a4:	f43f aed2 	beq.w	8015f4c <_strtod_l+0xc4>
 80161a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80161aa:	781b      	ldrb	r3, [r3, #0]
 80161ac:	2b28      	cmp	r3, #40	; 0x28
 80161ae:	d12d      	bne.n	801620c <_strtod_l+0x384>
 80161b0:	499a      	ldr	r1, [pc, #616]	; (801641c <_strtod_l+0x594>)
 80161b2:	aa1a      	add	r2, sp, #104	; 0x68
 80161b4:	a817      	add	r0, sp, #92	; 0x5c
 80161b6:	f002 f8db 	bl	8018370 <__hexnan>
 80161ba:	2805      	cmp	r0, #5
 80161bc:	d126      	bne.n	801620c <_strtod_l+0x384>
 80161be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80161c0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80161c4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80161c8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80161cc:	e6a0      	b.n	8015f10 <_strtod_l+0x88>
 80161ce:	210a      	movs	r1, #10
 80161d0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80161d4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80161d8:	e7b9      	b.n	801614e <_strtod_l+0x2c6>
 80161da:	2a6e      	cmp	r2, #110	; 0x6e
 80161dc:	e7db      	b.n	8016196 <_strtod_l+0x30e>
 80161de:	4990      	ldr	r1, [pc, #576]	; (8016420 <_strtod_l+0x598>)
 80161e0:	a817      	add	r0, sp, #92	; 0x5c
 80161e2:	f002 f8b1 	bl	8018348 <__match>
 80161e6:	2800      	cmp	r0, #0
 80161e8:	f43f aeb0 	beq.w	8015f4c <_strtod_l+0xc4>
 80161ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80161ee:	498d      	ldr	r1, [pc, #564]	; (8016424 <_strtod_l+0x59c>)
 80161f0:	3b01      	subs	r3, #1
 80161f2:	a817      	add	r0, sp, #92	; 0x5c
 80161f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80161f6:	f002 f8a7 	bl	8018348 <__match>
 80161fa:	b910      	cbnz	r0, 8016202 <_strtod_l+0x37a>
 80161fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80161fe:	3301      	adds	r3, #1
 8016200:	9317      	str	r3, [sp, #92]	; 0x5c
 8016202:	f8df b230 	ldr.w	fp, [pc, #560]	; 8016434 <_strtod_l+0x5ac>
 8016206:	f04f 0a00 	mov.w	sl, #0
 801620a:	e681      	b.n	8015f10 <_strtod_l+0x88>
 801620c:	4886      	ldr	r0, [pc, #536]	; (8016428 <_strtod_l+0x5a0>)
 801620e:	f7fe fafb 	bl	8014808 <nan>
 8016212:	ec5b ab10 	vmov	sl, fp, d0
 8016216:	e67b      	b.n	8015f10 <_strtod_l+0x88>
 8016218:	9b05      	ldr	r3, [sp, #20]
 801621a:	9807      	ldr	r0, [sp, #28]
 801621c:	1af3      	subs	r3, r6, r3
 801621e:	2f00      	cmp	r7, #0
 8016220:	bf08      	it	eq
 8016222:	462f      	moveq	r7, r5
 8016224:	2d10      	cmp	r5, #16
 8016226:	9306      	str	r3, [sp, #24]
 8016228:	46a8      	mov	r8, r5
 801622a:	bfa8      	it	ge
 801622c:	f04f 0810 	movge.w	r8, #16
 8016230:	f7ea f972 	bl	8000518 <__aeabi_ui2d>
 8016234:	2d09      	cmp	r5, #9
 8016236:	4682      	mov	sl, r0
 8016238:	468b      	mov	fp, r1
 801623a:	dd13      	ble.n	8016264 <_strtod_l+0x3dc>
 801623c:	4b7b      	ldr	r3, [pc, #492]	; (801642c <_strtod_l+0x5a4>)
 801623e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016242:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016246:	f7ea f9e1 	bl	800060c <__aeabi_dmul>
 801624a:	4682      	mov	sl, r0
 801624c:	4648      	mov	r0, r9
 801624e:	468b      	mov	fp, r1
 8016250:	f7ea f962 	bl	8000518 <__aeabi_ui2d>
 8016254:	4602      	mov	r2, r0
 8016256:	460b      	mov	r3, r1
 8016258:	4650      	mov	r0, sl
 801625a:	4659      	mov	r1, fp
 801625c:	f7ea f820 	bl	80002a0 <__adddf3>
 8016260:	4682      	mov	sl, r0
 8016262:	468b      	mov	fp, r1
 8016264:	2d0f      	cmp	r5, #15
 8016266:	dc38      	bgt.n	80162da <_strtod_l+0x452>
 8016268:	9b06      	ldr	r3, [sp, #24]
 801626a:	2b00      	cmp	r3, #0
 801626c:	f43f ae50 	beq.w	8015f10 <_strtod_l+0x88>
 8016270:	dd24      	ble.n	80162bc <_strtod_l+0x434>
 8016272:	2b16      	cmp	r3, #22
 8016274:	dc0b      	bgt.n	801628e <_strtod_l+0x406>
 8016276:	496d      	ldr	r1, [pc, #436]	; (801642c <_strtod_l+0x5a4>)
 8016278:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801627c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016280:	4652      	mov	r2, sl
 8016282:	465b      	mov	r3, fp
 8016284:	f7ea f9c2 	bl	800060c <__aeabi_dmul>
 8016288:	4682      	mov	sl, r0
 801628a:	468b      	mov	fp, r1
 801628c:	e640      	b.n	8015f10 <_strtod_l+0x88>
 801628e:	9a06      	ldr	r2, [sp, #24]
 8016290:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8016294:	4293      	cmp	r3, r2
 8016296:	db20      	blt.n	80162da <_strtod_l+0x452>
 8016298:	4c64      	ldr	r4, [pc, #400]	; (801642c <_strtod_l+0x5a4>)
 801629a:	f1c5 050f 	rsb	r5, r5, #15
 801629e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80162a2:	4652      	mov	r2, sl
 80162a4:	465b      	mov	r3, fp
 80162a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162aa:	f7ea f9af 	bl	800060c <__aeabi_dmul>
 80162ae:	9b06      	ldr	r3, [sp, #24]
 80162b0:	1b5d      	subs	r5, r3, r5
 80162b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80162b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80162ba:	e7e3      	b.n	8016284 <_strtod_l+0x3fc>
 80162bc:	9b06      	ldr	r3, [sp, #24]
 80162be:	3316      	adds	r3, #22
 80162c0:	db0b      	blt.n	80162da <_strtod_l+0x452>
 80162c2:	9b05      	ldr	r3, [sp, #20]
 80162c4:	1b9e      	subs	r6, r3, r6
 80162c6:	4b59      	ldr	r3, [pc, #356]	; (801642c <_strtod_l+0x5a4>)
 80162c8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80162cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80162d0:	4650      	mov	r0, sl
 80162d2:	4659      	mov	r1, fp
 80162d4:	f7ea fac4 	bl	8000860 <__aeabi_ddiv>
 80162d8:	e7d6      	b.n	8016288 <_strtod_l+0x400>
 80162da:	9b06      	ldr	r3, [sp, #24]
 80162dc:	eba5 0808 	sub.w	r8, r5, r8
 80162e0:	4498      	add	r8, r3
 80162e2:	f1b8 0f00 	cmp.w	r8, #0
 80162e6:	dd74      	ble.n	80163d2 <_strtod_l+0x54a>
 80162e8:	f018 030f 	ands.w	r3, r8, #15
 80162ec:	d00a      	beq.n	8016304 <_strtod_l+0x47c>
 80162ee:	494f      	ldr	r1, [pc, #316]	; (801642c <_strtod_l+0x5a4>)
 80162f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80162f4:	4652      	mov	r2, sl
 80162f6:	465b      	mov	r3, fp
 80162f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162fc:	f7ea f986 	bl	800060c <__aeabi_dmul>
 8016300:	4682      	mov	sl, r0
 8016302:	468b      	mov	fp, r1
 8016304:	f038 080f 	bics.w	r8, r8, #15
 8016308:	d04f      	beq.n	80163aa <_strtod_l+0x522>
 801630a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801630e:	dd22      	ble.n	8016356 <_strtod_l+0x4ce>
 8016310:	2500      	movs	r5, #0
 8016312:	462e      	mov	r6, r5
 8016314:	9507      	str	r5, [sp, #28]
 8016316:	9505      	str	r5, [sp, #20]
 8016318:	2322      	movs	r3, #34	; 0x22
 801631a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8016434 <_strtod_l+0x5ac>
 801631e:	6023      	str	r3, [r4, #0]
 8016320:	f04f 0a00 	mov.w	sl, #0
 8016324:	9b07      	ldr	r3, [sp, #28]
 8016326:	2b00      	cmp	r3, #0
 8016328:	f43f adf2 	beq.w	8015f10 <_strtod_l+0x88>
 801632c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801632e:	4620      	mov	r0, r4
 8016330:	f002 f982 	bl	8018638 <_Bfree>
 8016334:	9905      	ldr	r1, [sp, #20]
 8016336:	4620      	mov	r0, r4
 8016338:	f002 f97e 	bl	8018638 <_Bfree>
 801633c:	4631      	mov	r1, r6
 801633e:	4620      	mov	r0, r4
 8016340:	f002 f97a 	bl	8018638 <_Bfree>
 8016344:	9907      	ldr	r1, [sp, #28]
 8016346:	4620      	mov	r0, r4
 8016348:	f002 f976 	bl	8018638 <_Bfree>
 801634c:	4629      	mov	r1, r5
 801634e:	4620      	mov	r0, r4
 8016350:	f002 f972 	bl	8018638 <_Bfree>
 8016354:	e5dc      	b.n	8015f10 <_strtod_l+0x88>
 8016356:	4b36      	ldr	r3, [pc, #216]	; (8016430 <_strtod_l+0x5a8>)
 8016358:	9304      	str	r3, [sp, #16]
 801635a:	2300      	movs	r3, #0
 801635c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016360:	4650      	mov	r0, sl
 8016362:	4659      	mov	r1, fp
 8016364:	4699      	mov	r9, r3
 8016366:	f1b8 0f01 	cmp.w	r8, #1
 801636a:	dc21      	bgt.n	80163b0 <_strtod_l+0x528>
 801636c:	b10b      	cbz	r3, 8016372 <_strtod_l+0x4ea>
 801636e:	4682      	mov	sl, r0
 8016370:	468b      	mov	fp, r1
 8016372:	4b2f      	ldr	r3, [pc, #188]	; (8016430 <_strtod_l+0x5a8>)
 8016374:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016378:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801637c:	4652      	mov	r2, sl
 801637e:	465b      	mov	r3, fp
 8016380:	e9d9 0100 	ldrd	r0, r1, [r9]
 8016384:	f7ea f942 	bl	800060c <__aeabi_dmul>
 8016388:	4b2a      	ldr	r3, [pc, #168]	; (8016434 <_strtod_l+0x5ac>)
 801638a:	460a      	mov	r2, r1
 801638c:	400b      	ands	r3, r1
 801638e:	492a      	ldr	r1, [pc, #168]	; (8016438 <_strtod_l+0x5b0>)
 8016390:	428b      	cmp	r3, r1
 8016392:	4682      	mov	sl, r0
 8016394:	d8bc      	bhi.n	8016310 <_strtod_l+0x488>
 8016396:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801639a:	428b      	cmp	r3, r1
 801639c:	bf86      	itte	hi
 801639e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801643c <_strtod_l+0x5b4>
 80163a2:	f04f 3aff 	movhi.w	sl, #4294967295
 80163a6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80163aa:	2300      	movs	r3, #0
 80163ac:	9304      	str	r3, [sp, #16]
 80163ae:	e084      	b.n	80164ba <_strtod_l+0x632>
 80163b0:	f018 0f01 	tst.w	r8, #1
 80163b4:	d005      	beq.n	80163c2 <_strtod_l+0x53a>
 80163b6:	9b04      	ldr	r3, [sp, #16]
 80163b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163bc:	f7ea f926 	bl	800060c <__aeabi_dmul>
 80163c0:	2301      	movs	r3, #1
 80163c2:	9a04      	ldr	r2, [sp, #16]
 80163c4:	3208      	adds	r2, #8
 80163c6:	f109 0901 	add.w	r9, r9, #1
 80163ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80163ce:	9204      	str	r2, [sp, #16]
 80163d0:	e7c9      	b.n	8016366 <_strtod_l+0x4de>
 80163d2:	d0ea      	beq.n	80163aa <_strtod_l+0x522>
 80163d4:	f1c8 0800 	rsb	r8, r8, #0
 80163d8:	f018 020f 	ands.w	r2, r8, #15
 80163dc:	d00a      	beq.n	80163f4 <_strtod_l+0x56c>
 80163de:	4b13      	ldr	r3, [pc, #76]	; (801642c <_strtod_l+0x5a4>)
 80163e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80163e4:	4650      	mov	r0, sl
 80163e6:	4659      	mov	r1, fp
 80163e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163ec:	f7ea fa38 	bl	8000860 <__aeabi_ddiv>
 80163f0:	4682      	mov	sl, r0
 80163f2:	468b      	mov	fp, r1
 80163f4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80163f8:	d0d7      	beq.n	80163aa <_strtod_l+0x522>
 80163fa:	f1b8 0f1f 	cmp.w	r8, #31
 80163fe:	dd1f      	ble.n	8016440 <_strtod_l+0x5b8>
 8016400:	2500      	movs	r5, #0
 8016402:	462e      	mov	r6, r5
 8016404:	9507      	str	r5, [sp, #28]
 8016406:	9505      	str	r5, [sp, #20]
 8016408:	2322      	movs	r3, #34	; 0x22
 801640a:	f04f 0a00 	mov.w	sl, #0
 801640e:	f04f 0b00 	mov.w	fp, #0
 8016412:	6023      	str	r3, [r4, #0]
 8016414:	e786      	b.n	8016324 <_strtod_l+0x49c>
 8016416:	bf00      	nop
 8016418:	08059b2e 	.word	0x08059b2e
 801641c:	08059b70 	.word	0x08059b70
 8016420:	08059b26 	.word	0x08059b26
 8016424:	08059cb4 	.word	0x08059cb4
 8016428:	08059b0b 	.word	0x08059b0b
 801642c:	08059ea8 	.word	0x08059ea8
 8016430:	08059e80 	.word	0x08059e80
 8016434:	7ff00000 	.word	0x7ff00000
 8016438:	7ca00000 	.word	0x7ca00000
 801643c:	7fefffff 	.word	0x7fefffff
 8016440:	f018 0310 	ands.w	r3, r8, #16
 8016444:	bf18      	it	ne
 8016446:	236a      	movne	r3, #106	; 0x6a
 8016448:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80167f8 <_strtod_l+0x970>
 801644c:	9304      	str	r3, [sp, #16]
 801644e:	4650      	mov	r0, sl
 8016450:	4659      	mov	r1, fp
 8016452:	2300      	movs	r3, #0
 8016454:	f018 0f01 	tst.w	r8, #1
 8016458:	d004      	beq.n	8016464 <_strtod_l+0x5dc>
 801645a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801645e:	f7ea f8d5 	bl	800060c <__aeabi_dmul>
 8016462:	2301      	movs	r3, #1
 8016464:	ea5f 0868 	movs.w	r8, r8, asr #1
 8016468:	f109 0908 	add.w	r9, r9, #8
 801646c:	d1f2      	bne.n	8016454 <_strtod_l+0x5cc>
 801646e:	b10b      	cbz	r3, 8016474 <_strtod_l+0x5ec>
 8016470:	4682      	mov	sl, r0
 8016472:	468b      	mov	fp, r1
 8016474:	9b04      	ldr	r3, [sp, #16]
 8016476:	b1c3      	cbz	r3, 80164aa <_strtod_l+0x622>
 8016478:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801647c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016480:	2b00      	cmp	r3, #0
 8016482:	4659      	mov	r1, fp
 8016484:	dd11      	ble.n	80164aa <_strtod_l+0x622>
 8016486:	2b1f      	cmp	r3, #31
 8016488:	f340 8124 	ble.w	80166d4 <_strtod_l+0x84c>
 801648c:	2b34      	cmp	r3, #52	; 0x34
 801648e:	bfde      	ittt	le
 8016490:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8016494:	f04f 33ff 	movle.w	r3, #4294967295
 8016498:	fa03 f202 	lslle.w	r2, r3, r2
 801649c:	f04f 0a00 	mov.w	sl, #0
 80164a0:	bfcc      	ite	gt
 80164a2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80164a6:	ea02 0b01 	andle.w	fp, r2, r1
 80164aa:	2200      	movs	r2, #0
 80164ac:	2300      	movs	r3, #0
 80164ae:	4650      	mov	r0, sl
 80164b0:	4659      	mov	r1, fp
 80164b2:	f7ea fb13 	bl	8000adc <__aeabi_dcmpeq>
 80164b6:	2800      	cmp	r0, #0
 80164b8:	d1a2      	bne.n	8016400 <_strtod_l+0x578>
 80164ba:	9b07      	ldr	r3, [sp, #28]
 80164bc:	9300      	str	r3, [sp, #0]
 80164be:	9908      	ldr	r1, [sp, #32]
 80164c0:	462b      	mov	r3, r5
 80164c2:	463a      	mov	r2, r7
 80164c4:	4620      	mov	r0, r4
 80164c6:	f002 f91f 	bl	8018708 <__s2b>
 80164ca:	9007      	str	r0, [sp, #28]
 80164cc:	2800      	cmp	r0, #0
 80164ce:	f43f af1f 	beq.w	8016310 <_strtod_l+0x488>
 80164d2:	9b05      	ldr	r3, [sp, #20]
 80164d4:	1b9e      	subs	r6, r3, r6
 80164d6:	9b06      	ldr	r3, [sp, #24]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	bfb4      	ite	lt
 80164dc:	4633      	movlt	r3, r6
 80164de:	2300      	movge	r3, #0
 80164e0:	930c      	str	r3, [sp, #48]	; 0x30
 80164e2:	9b06      	ldr	r3, [sp, #24]
 80164e4:	2500      	movs	r5, #0
 80164e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80164ea:	9312      	str	r3, [sp, #72]	; 0x48
 80164ec:	462e      	mov	r6, r5
 80164ee:	9b07      	ldr	r3, [sp, #28]
 80164f0:	4620      	mov	r0, r4
 80164f2:	6859      	ldr	r1, [r3, #4]
 80164f4:	f002 f860 	bl	80185b8 <_Balloc>
 80164f8:	9005      	str	r0, [sp, #20]
 80164fa:	2800      	cmp	r0, #0
 80164fc:	f43f af0c 	beq.w	8016318 <_strtod_l+0x490>
 8016500:	9b07      	ldr	r3, [sp, #28]
 8016502:	691a      	ldr	r2, [r3, #16]
 8016504:	3202      	adds	r2, #2
 8016506:	f103 010c 	add.w	r1, r3, #12
 801650a:	0092      	lsls	r2, r2, #2
 801650c:	300c      	adds	r0, #12
 801650e:	f7fe fa8d 	bl	8014a2c <memcpy>
 8016512:	ec4b ab10 	vmov	d0, sl, fp
 8016516:	aa1a      	add	r2, sp, #104	; 0x68
 8016518:	a919      	add	r1, sp, #100	; 0x64
 801651a:	4620      	mov	r0, r4
 801651c:	f002 fc3a 	bl	8018d94 <__d2b>
 8016520:	ec4b ab18 	vmov	d8, sl, fp
 8016524:	9018      	str	r0, [sp, #96]	; 0x60
 8016526:	2800      	cmp	r0, #0
 8016528:	f43f aef6 	beq.w	8016318 <_strtod_l+0x490>
 801652c:	2101      	movs	r1, #1
 801652e:	4620      	mov	r0, r4
 8016530:	f002 f984 	bl	801883c <__i2b>
 8016534:	4606      	mov	r6, r0
 8016536:	2800      	cmp	r0, #0
 8016538:	f43f aeee 	beq.w	8016318 <_strtod_l+0x490>
 801653c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801653e:	9904      	ldr	r1, [sp, #16]
 8016540:	2b00      	cmp	r3, #0
 8016542:	bfab      	itete	ge
 8016544:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8016546:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8016548:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801654a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801654e:	bfac      	ite	ge
 8016550:	eb03 0902 	addge.w	r9, r3, r2
 8016554:	1ad7      	sublt	r7, r2, r3
 8016556:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016558:	eba3 0801 	sub.w	r8, r3, r1
 801655c:	4490      	add	r8, r2
 801655e:	4ba1      	ldr	r3, [pc, #644]	; (80167e4 <_strtod_l+0x95c>)
 8016560:	f108 38ff 	add.w	r8, r8, #4294967295
 8016564:	4598      	cmp	r8, r3
 8016566:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801656a:	f280 80c7 	bge.w	80166fc <_strtod_l+0x874>
 801656e:	eba3 0308 	sub.w	r3, r3, r8
 8016572:	2b1f      	cmp	r3, #31
 8016574:	eba2 0203 	sub.w	r2, r2, r3
 8016578:	f04f 0101 	mov.w	r1, #1
 801657c:	f300 80b1 	bgt.w	80166e2 <_strtod_l+0x85a>
 8016580:	fa01 f303 	lsl.w	r3, r1, r3
 8016584:	930d      	str	r3, [sp, #52]	; 0x34
 8016586:	2300      	movs	r3, #0
 8016588:	9308      	str	r3, [sp, #32]
 801658a:	eb09 0802 	add.w	r8, r9, r2
 801658e:	9b04      	ldr	r3, [sp, #16]
 8016590:	45c1      	cmp	r9, r8
 8016592:	4417      	add	r7, r2
 8016594:	441f      	add	r7, r3
 8016596:	464b      	mov	r3, r9
 8016598:	bfa8      	it	ge
 801659a:	4643      	movge	r3, r8
 801659c:	42bb      	cmp	r3, r7
 801659e:	bfa8      	it	ge
 80165a0:	463b      	movge	r3, r7
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	bfc2      	ittt	gt
 80165a6:	eba8 0803 	subgt.w	r8, r8, r3
 80165aa:	1aff      	subgt	r7, r7, r3
 80165ac:	eba9 0903 	subgt.w	r9, r9, r3
 80165b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	dd17      	ble.n	80165e6 <_strtod_l+0x75e>
 80165b6:	4631      	mov	r1, r6
 80165b8:	461a      	mov	r2, r3
 80165ba:	4620      	mov	r0, r4
 80165bc:	f002 f9fe 	bl	80189bc <__pow5mult>
 80165c0:	4606      	mov	r6, r0
 80165c2:	2800      	cmp	r0, #0
 80165c4:	f43f aea8 	beq.w	8016318 <_strtod_l+0x490>
 80165c8:	4601      	mov	r1, r0
 80165ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80165cc:	4620      	mov	r0, r4
 80165ce:	f002 f94b 	bl	8018868 <__multiply>
 80165d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80165d4:	2800      	cmp	r0, #0
 80165d6:	f43f ae9f 	beq.w	8016318 <_strtod_l+0x490>
 80165da:	9918      	ldr	r1, [sp, #96]	; 0x60
 80165dc:	4620      	mov	r0, r4
 80165de:	f002 f82b 	bl	8018638 <_Bfree>
 80165e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80165e4:	9318      	str	r3, [sp, #96]	; 0x60
 80165e6:	f1b8 0f00 	cmp.w	r8, #0
 80165ea:	f300 808c 	bgt.w	8016706 <_strtod_l+0x87e>
 80165ee:	9b06      	ldr	r3, [sp, #24]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	dd08      	ble.n	8016606 <_strtod_l+0x77e>
 80165f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80165f6:	9905      	ldr	r1, [sp, #20]
 80165f8:	4620      	mov	r0, r4
 80165fa:	f002 f9df 	bl	80189bc <__pow5mult>
 80165fe:	9005      	str	r0, [sp, #20]
 8016600:	2800      	cmp	r0, #0
 8016602:	f43f ae89 	beq.w	8016318 <_strtod_l+0x490>
 8016606:	2f00      	cmp	r7, #0
 8016608:	dd08      	ble.n	801661c <_strtod_l+0x794>
 801660a:	9905      	ldr	r1, [sp, #20]
 801660c:	463a      	mov	r2, r7
 801660e:	4620      	mov	r0, r4
 8016610:	f002 fa2e 	bl	8018a70 <__lshift>
 8016614:	9005      	str	r0, [sp, #20]
 8016616:	2800      	cmp	r0, #0
 8016618:	f43f ae7e 	beq.w	8016318 <_strtod_l+0x490>
 801661c:	f1b9 0f00 	cmp.w	r9, #0
 8016620:	dd08      	ble.n	8016634 <_strtod_l+0x7ac>
 8016622:	4631      	mov	r1, r6
 8016624:	464a      	mov	r2, r9
 8016626:	4620      	mov	r0, r4
 8016628:	f002 fa22 	bl	8018a70 <__lshift>
 801662c:	4606      	mov	r6, r0
 801662e:	2800      	cmp	r0, #0
 8016630:	f43f ae72 	beq.w	8016318 <_strtod_l+0x490>
 8016634:	9a05      	ldr	r2, [sp, #20]
 8016636:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016638:	4620      	mov	r0, r4
 801663a:	f002 faa5 	bl	8018b88 <__mdiff>
 801663e:	4605      	mov	r5, r0
 8016640:	2800      	cmp	r0, #0
 8016642:	f43f ae69 	beq.w	8016318 <_strtod_l+0x490>
 8016646:	68c3      	ldr	r3, [r0, #12]
 8016648:	930b      	str	r3, [sp, #44]	; 0x2c
 801664a:	2300      	movs	r3, #0
 801664c:	60c3      	str	r3, [r0, #12]
 801664e:	4631      	mov	r1, r6
 8016650:	f002 fa7e 	bl	8018b50 <__mcmp>
 8016654:	2800      	cmp	r0, #0
 8016656:	da60      	bge.n	801671a <_strtod_l+0x892>
 8016658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801665a:	ea53 030a 	orrs.w	r3, r3, sl
 801665e:	f040 8082 	bne.w	8016766 <_strtod_l+0x8de>
 8016662:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016666:	2b00      	cmp	r3, #0
 8016668:	d17d      	bne.n	8016766 <_strtod_l+0x8de>
 801666a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801666e:	0d1b      	lsrs	r3, r3, #20
 8016670:	051b      	lsls	r3, r3, #20
 8016672:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016676:	d976      	bls.n	8016766 <_strtod_l+0x8de>
 8016678:	696b      	ldr	r3, [r5, #20]
 801667a:	b913      	cbnz	r3, 8016682 <_strtod_l+0x7fa>
 801667c:	692b      	ldr	r3, [r5, #16]
 801667e:	2b01      	cmp	r3, #1
 8016680:	dd71      	ble.n	8016766 <_strtod_l+0x8de>
 8016682:	4629      	mov	r1, r5
 8016684:	2201      	movs	r2, #1
 8016686:	4620      	mov	r0, r4
 8016688:	f002 f9f2 	bl	8018a70 <__lshift>
 801668c:	4631      	mov	r1, r6
 801668e:	4605      	mov	r5, r0
 8016690:	f002 fa5e 	bl	8018b50 <__mcmp>
 8016694:	2800      	cmp	r0, #0
 8016696:	dd66      	ble.n	8016766 <_strtod_l+0x8de>
 8016698:	9904      	ldr	r1, [sp, #16]
 801669a:	4a53      	ldr	r2, [pc, #332]	; (80167e8 <_strtod_l+0x960>)
 801669c:	465b      	mov	r3, fp
 801669e:	2900      	cmp	r1, #0
 80166a0:	f000 8081 	beq.w	80167a6 <_strtod_l+0x91e>
 80166a4:	ea02 010b 	and.w	r1, r2, fp
 80166a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80166ac:	dc7b      	bgt.n	80167a6 <_strtod_l+0x91e>
 80166ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80166b2:	f77f aea9 	ble.w	8016408 <_strtod_l+0x580>
 80166b6:	4b4d      	ldr	r3, [pc, #308]	; (80167ec <_strtod_l+0x964>)
 80166b8:	4650      	mov	r0, sl
 80166ba:	4659      	mov	r1, fp
 80166bc:	2200      	movs	r2, #0
 80166be:	f7e9 ffa5 	bl	800060c <__aeabi_dmul>
 80166c2:	460b      	mov	r3, r1
 80166c4:	4303      	orrs	r3, r0
 80166c6:	bf08      	it	eq
 80166c8:	2322      	moveq	r3, #34	; 0x22
 80166ca:	4682      	mov	sl, r0
 80166cc:	468b      	mov	fp, r1
 80166ce:	bf08      	it	eq
 80166d0:	6023      	streq	r3, [r4, #0]
 80166d2:	e62b      	b.n	801632c <_strtod_l+0x4a4>
 80166d4:	f04f 32ff 	mov.w	r2, #4294967295
 80166d8:	fa02 f303 	lsl.w	r3, r2, r3
 80166dc:	ea03 0a0a 	and.w	sl, r3, sl
 80166e0:	e6e3      	b.n	80164aa <_strtod_l+0x622>
 80166e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80166e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80166ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80166ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80166f2:	fa01 f308 	lsl.w	r3, r1, r8
 80166f6:	9308      	str	r3, [sp, #32]
 80166f8:	910d      	str	r1, [sp, #52]	; 0x34
 80166fa:	e746      	b.n	801658a <_strtod_l+0x702>
 80166fc:	2300      	movs	r3, #0
 80166fe:	9308      	str	r3, [sp, #32]
 8016700:	2301      	movs	r3, #1
 8016702:	930d      	str	r3, [sp, #52]	; 0x34
 8016704:	e741      	b.n	801658a <_strtod_l+0x702>
 8016706:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016708:	4642      	mov	r2, r8
 801670a:	4620      	mov	r0, r4
 801670c:	f002 f9b0 	bl	8018a70 <__lshift>
 8016710:	9018      	str	r0, [sp, #96]	; 0x60
 8016712:	2800      	cmp	r0, #0
 8016714:	f47f af6b 	bne.w	80165ee <_strtod_l+0x766>
 8016718:	e5fe      	b.n	8016318 <_strtod_l+0x490>
 801671a:	465f      	mov	r7, fp
 801671c:	d16e      	bne.n	80167fc <_strtod_l+0x974>
 801671e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016720:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016724:	b342      	cbz	r2, 8016778 <_strtod_l+0x8f0>
 8016726:	4a32      	ldr	r2, [pc, #200]	; (80167f0 <_strtod_l+0x968>)
 8016728:	4293      	cmp	r3, r2
 801672a:	d128      	bne.n	801677e <_strtod_l+0x8f6>
 801672c:	9b04      	ldr	r3, [sp, #16]
 801672e:	4651      	mov	r1, sl
 8016730:	b1eb      	cbz	r3, 801676e <_strtod_l+0x8e6>
 8016732:	4b2d      	ldr	r3, [pc, #180]	; (80167e8 <_strtod_l+0x960>)
 8016734:	403b      	ands	r3, r7
 8016736:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801673a:	f04f 32ff 	mov.w	r2, #4294967295
 801673e:	d819      	bhi.n	8016774 <_strtod_l+0x8ec>
 8016740:	0d1b      	lsrs	r3, r3, #20
 8016742:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016746:	fa02 f303 	lsl.w	r3, r2, r3
 801674a:	4299      	cmp	r1, r3
 801674c:	d117      	bne.n	801677e <_strtod_l+0x8f6>
 801674e:	4b29      	ldr	r3, [pc, #164]	; (80167f4 <_strtod_l+0x96c>)
 8016750:	429f      	cmp	r7, r3
 8016752:	d102      	bne.n	801675a <_strtod_l+0x8d2>
 8016754:	3101      	adds	r1, #1
 8016756:	f43f addf 	beq.w	8016318 <_strtod_l+0x490>
 801675a:	4b23      	ldr	r3, [pc, #140]	; (80167e8 <_strtod_l+0x960>)
 801675c:	403b      	ands	r3, r7
 801675e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016762:	f04f 0a00 	mov.w	sl, #0
 8016766:	9b04      	ldr	r3, [sp, #16]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d1a4      	bne.n	80166b6 <_strtod_l+0x82e>
 801676c:	e5de      	b.n	801632c <_strtod_l+0x4a4>
 801676e:	f04f 33ff 	mov.w	r3, #4294967295
 8016772:	e7ea      	b.n	801674a <_strtod_l+0x8c2>
 8016774:	4613      	mov	r3, r2
 8016776:	e7e8      	b.n	801674a <_strtod_l+0x8c2>
 8016778:	ea53 030a 	orrs.w	r3, r3, sl
 801677c:	d08c      	beq.n	8016698 <_strtod_l+0x810>
 801677e:	9b08      	ldr	r3, [sp, #32]
 8016780:	b1db      	cbz	r3, 80167ba <_strtod_l+0x932>
 8016782:	423b      	tst	r3, r7
 8016784:	d0ef      	beq.n	8016766 <_strtod_l+0x8de>
 8016786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016788:	9a04      	ldr	r2, [sp, #16]
 801678a:	4650      	mov	r0, sl
 801678c:	4659      	mov	r1, fp
 801678e:	b1c3      	cbz	r3, 80167c2 <_strtod_l+0x93a>
 8016790:	f7ff fb5c 	bl	8015e4c <sulp>
 8016794:	4602      	mov	r2, r0
 8016796:	460b      	mov	r3, r1
 8016798:	ec51 0b18 	vmov	r0, r1, d8
 801679c:	f7e9 fd80 	bl	80002a0 <__adddf3>
 80167a0:	4682      	mov	sl, r0
 80167a2:	468b      	mov	fp, r1
 80167a4:	e7df      	b.n	8016766 <_strtod_l+0x8de>
 80167a6:	4013      	ands	r3, r2
 80167a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80167ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80167b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80167b4:	f04f 3aff 	mov.w	sl, #4294967295
 80167b8:	e7d5      	b.n	8016766 <_strtod_l+0x8de>
 80167ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167bc:	ea13 0f0a 	tst.w	r3, sl
 80167c0:	e7e0      	b.n	8016784 <_strtod_l+0x8fc>
 80167c2:	f7ff fb43 	bl	8015e4c <sulp>
 80167c6:	4602      	mov	r2, r0
 80167c8:	460b      	mov	r3, r1
 80167ca:	ec51 0b18 	vmov	r0, r1, d8
 80167ce:	f7e9 fd65 	bl	800029c <__aeabi_dsub>
 80167d2:	2200      	movs	r2, #0
 80167d4:	2300      	movs	r3, #0
 80167d6:	4682      	mov	sl, r0
 80167d8:	468b      	mov	fp, r1
 80167da:	f7ea f97f 	bl	8000adc <__aeabi_dcmpeq>
 80167de:	2800      	cmp	r0, #0
 80167e0:	d0c1      	beq.n	8016766 <_strtod_l+0x8de>
 80167e2:	e611      	b.n	8016408 <_strtod_l+0x580>
 80167e4:	fffffc02 	.word	0xfffffc02
 80167e8:	7ff00000 	.word	0x7ff00000
 80167ec:	39500000 	.word	0x39500000
 80167f0:	000fffff 	.word	0x000fffff
 80167f4:	7fefffff 	.word	0x7fefffff
 80167f8:	08059b88 	.word	0x08059b88
 80167fc:	4631      	mov	r1, r6
 80167fe:	4628      	mov	r0, r5
 8016800:	f002 fb24 	bl	8018e4c <__ratio>
 8016804:	ec59 8b10 	vmov	r8, r9, d0
 8016808:	ee10 0a10 	vmov	r0, s0
 801680c:	2200      	movs	r2, #0
 801680e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016812:	4649      	mov	r1, r9
 8016814:	f7ea f976 	bl	8000b04 <__aeabi_dcmple>
 8016818:	2800      	cmp	r0, #0
 801681a:	d07a      	beq.n	8016912 <_strtod_l+0xa8a>
 801681c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801681e:	2b00      	cmp	r3, #0
 8016820:	d04a      	beq.n	80168b8 <_strtod_l+0xa30>
 8016822:	4b95      	ldr	r3, [pc, #596]	; (8016a78 <_strtod_l+0xbf0>)
 8016824:	2200      	movs	r2, #0
 8016826:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801682a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8016a78 <_strtod_l+0xbf0>
 801682e:	f04f 0800 	mov.w	r8, #0
 8016832:	4b92      	ldr	r3, [pc, #584]	; (8016a7c <_strtod_l+0xbf4>)
 8016834:	403b      	ands	r3, r7
 8016836:	930d      	str	r3, [sp, #52]	; 0x34
 8016838:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801683a:	4b91      	ldr	r3, [pc, #580]	; (8016a80 <_strtod_l+0xbf8>)
 801683c:	429a      	cmp	r2, r3
 801683e:	f040 80b0 	bne.w	80169a2 <_strtod_l+0xb1a>
 8016842:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016846:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801684a:	ec4b ab10 	vmov	d0, sl, fp
 801684e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016852:	f002 fa23 	bl	8018c9c <__ulp>
 8016856:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801685a:	ec53 2b10 	vmov	r2, r3, d0
 801685e:	f7e9 fed5 	bl	800060c <__aeabi_dmul>
 8016862:	4652      	mov	r2, sl
 8016864:	465b      	mov	r3, fp
 8016866:	f7e9 fd1b 	bl	80002a0 <__adddf3>
 801686a:	460b      	mov	r3, r1
 801686c:	4983      	ldr	r1, [pc, #524]	; (8016a7c <_strtod_l+0xbf4>)
 801686e:	4a85      	ldr	r2, [pc, #532]	; (8016a84 <_strtod_l+0xbfc>)
 8016870:	4019      	ands	r1, r3
 8016872:	4291      	cmp	r1, r2
 8016874:	4682      	mov	sl, r0
 8016876:	d960      	bls.n	801693a <_strtod_l+0xab2>
 8016878:	ee18 3a90 	vmov	r3, s17
 801687c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016880:	4293      	cmp	r3, r2
 8016882:	d104      	bne.n	801688e <_strtod_l+0xa06>
 8016884:	ee18 3a10 	vmov	r3, s16
 8016888:	3301      	adds	r3, #1
 801688a:	f43f ad45 	beq.w	8016318 <_strtod_l+0x490>
 801688e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8016a90 <_strtod_l+0xc08>
 8016892:	f04f 3aff 	mov.w	sl, #4294967295
 8016896:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016898:	4620      	mov	r0, r4
 801689a:	f001 fecd 	bl	8018638 <_Bfree>
 801689e:	9905      	ldr	r1, [sp, #20]
 80168a0:	4620      	mov	r0, r4
 80168a2:	f001 fec9 	bl	8018638 <_Bfree>
 80168a6:	4631      	mov	r1, r6
 80168a8:	4620      	mov	r0, r4
 80168aa:	f001 fec5 	bl	8018638 <_Bfree>
 80168ae:	4629      	mov	r1, r5
 80168b0:	4620      	mov	r0, r4
 80168b2:	f001 fec1 	bl	8018638 <_Bfree>
 80168b6:	e61a      	b.n	80164ee <_strtod_l+0x666>
 80168b8:	f1ba 0f00 	cmp.w	sl, #0
 80168bc:	d11b      	bne.n	80168f6 <_strtod_l+0xa6e>
 80168be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80168c2:	b9f3      	cbnz	r3, 8016902 <_strtod_l+0xa7a>
 80168c4:	4b6c      	ldr	r3, [pc, #432]	; (8016a78 <_strtod_l+0xbf0>)
 80168c6:	2200      	movs	r2, #0
 80168c8:	4640      	mov	r0, r8
 80168ca:	4649      	mov	r1, r9
 80168cc:	f7ea f910 	bl	8000af0 <__aeabi_dcmplt>
 80168d0:	b9d0      	cbnz	r0, 8016908 <_strtod_l+0xa80>
 80168d2:	4640      	mov	r0, r8
 80168d4:	4649      	mov	r1, r9
 80168d6:	4b6c      	ldr	r3, [pc, #432]	; (8016a88 <_strtod_l+0xc00>)
 80168d8:	2200      	movs	r2, #0
 80168da:	f7e9 fe97 	bl	800060c <__aeabi_dmul>
 80168de:	4680      	mov	r8, r0
 80168e0:	4689      	mov	r9, r1
 80168e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80168e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80168ea:	9315      	str	r3, [sp, #84]	; 0x54
 80168ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80168f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80168f4:	e79d      	b.n	8016832 <_strtod_l+0x9aa>
 80168f6:	f1ba 0f01 	cmp.w	sl, #1
 80168fa:	d102      	bne.n	8016902 <_strtod_l+0xa7a>
 80168fc:	2f00      	cmp	r7, #0
 80168fe:	f43f ad83 	beq.w	8016408 <_strtod_l+0x580>
 8016902:	4b62      	ldr	r3, [pc, #392]	; (8016a8c <_strtod_l+0xc04>)
 8016904:	2200      	movs	r2, #0
 8016906:	e78e      	b.n	8016826 <_strtod_l+0x99e>
 8016908:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8016a88 <_strtod_l+0xc00>
 801690c:	f04f 0800 	mov.w	r8, #0
 8016910:	e7e7      	b.n	80168e2 <_strtod_l+0xa5a>
 8016912:	4b5d      	ldr	r3, [pc, #372]	; (8016a88 <_strtod_l+0xc00>)
 8016914:	4640      	mov	r0, r8
 8016916:	4649      	mov	r1, r9
 8016918:	2200      	movs	r2, #0
 801691a:	f7e9 fe77 	bl	800060c <__aeabi_dmul>
 801691e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016920:	4680      	mov	r8, r0
 8016922:	4689      	mov	r9, r1
 8016924:	b933      	cbnz	r3, 8016934 <_strtod_l+0xaac>
 8016926:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801692a:	900e      	str	r0, [sp, #56]	; 0x38
 801692c:	930f      	str	r3, [sp, #60]	; 0x3c
 801692e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8016932:	e7dd      	b.n	80168f0 <_strtod_l+0xa68>
 8016934:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8016938:	e7f9      	b.n	801692e <_strtod_l+0xaa6>
 801693a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801693e:	9b04      	ldr	r3, [sp, #16]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d1a8      	bne.n	8016896 <_strtod_l+0xa0e>
 8016944:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016948:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801694a:	0d1b      	lsrs	r3, r3, #20
 801694c:	051b      	lsls	r3, r3, #20
 801694e:	429a      	cmp	r2, r3
 8016950:	d1a1      	bne.n	8016896 <_strtod_l+0xa0e>
 8016952:	4640      	mov	r0, r8
 8016954:	4649      	mov	r1, r9
 8016956:	f7ea fa09 	bl	8000d6c <__aeabi_d2lz>
 801695a:	f7e9 fe29 	bl	80005b0 <__aeabi_l2d>
 801695e:	4602      	mov	r2, r0
 8016960:	460b      	mov	r3, r1
 8016962:	4640      	mov	r0, r8
 8016964:	4649      	mov	r1, r9
 8016966:	f7e9 fc99 	bl	800029c <__aeabi_dsub>
 801696a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801696c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016970:	ea43 030a 	orr.w	r3, r3, sl
 8016974:	4313      	orrs	r3, r2
 8016976:	4680      	mov	r8, r0
 8016978:	4689      	mov	r9, r1
 801697a:	d055      	beq.n	8016a28 <_strtod_l+0xba0>
 801697c:	a336      	add	r3, pc, #216	; (adr r3, 8016a58 <_strtod_l+0xbd0>)
 801697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016982:	f7ea f8b5 	bl	8000af0 <__aeabi_dcmplt>
 8016986:	2800      	cmp	r0, #0
 8016988:	f47f acd0 	bne.w	801632c <_strtod_l+0x4a4>
 801698c:	a334      	add	r3, pc, #208	; (adr r3, 8016a60 <_strtod_l+0xbd8>)
 801698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016992:	4640      	mov	r0, r8
 8016994:	4649      	mov	r1, r9
 8016996:	f7ea f8c9 	bl	8000b2c <__aeabi_dcmpgt>
 801699a:	2800      	cmp	r0, #0
 801699c:	f43f af7b 	beq.w	8016896 <_strtod_l+0xa0e>
 80169a0:	e4c4      	b.n	801632c <_strtod_l+0x4a4>
 80169a2:	9b04      	ldr	r3, [sp, #16]
 80169a4:	b333      	cbz	r3, 80169f4 <_strtod_l+0xb6c>
 80169a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80169a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80169ac:	d822      	bhi.n	80169f4 <_strtod_l+0xb6c>
 80169ae:	a32e      	add	r3, pc, #184	; (adr r3, 8016a68 <_strtod_l+0xbe0>)
 80169b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169b4:	4640      	mov	r0, r8
 80169b6:	4649      	mov	r1, r9
 80169b8:	f7ea f8a4 	bl	8000b04 <__aeabi_dcmple>
 80169bc:	b1a0      	cbz	r0, 80169e8 <_strtod_l+0xb60>
 80169be:	4649      	mov	r1, r9
 80169c0:	4640      	mov	r0, r8
 80169c2:	f7ea f8fb 	bl	8000bbc <__aeabi_d2uiz>
 80169c6:	2801      	cmp	r0, #1
 80169c8:	bf38      	it	cc
 80169ca:	2001      	movcc	r0, #1
 80169cc:	f7e9 fda4 	bl	8000518 <__aeabi_ui2d>
 80169d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80169d2:	4680      	mov	r8, r0
 80169d4:	4689      	mov	r9, r1
 80169d6:	bb23      	cbnz	r3, 8016a22 <_strtod_l+0xb9a>
 80169d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80169dc:	9010      	str	r0, [sp, #64]	; 0x40
 80169de:	9311      	str	r3, [sp, #68]	; 0x44
 80169e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80169e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80169e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80169ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80169f0:	1a9b      	subs	r3, r3, r2
 80169f2:	9309      	str	r3, [sp, #36]	; 0x24
 80169f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80169f8:	eeb0 0a48 	vmov.f32	s0, s16
 80169fc:	eef0 0a68 	vmov.f32	s1, s17
 8016a00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016a04:	f002 f94a 	bl	8018c9c <__ulp>
 8016a08:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016a0c:	ec53 2b10 	vmov	r2, r3, d0
 8016a10:	f7e9 fdfc 	bl	800060c <__aeabi_dmul>
 8016a14:	ec53 2b18 	vmov	r2, r3, d8
 8016a18:	f7e9 fc42 	bl	80002a0 <__adddf3>
 8016a1c:	4682      	mov	sl, r0
 8016a1e:	468b      	mov	fp, r1
 8016a20:	e78d      	b.n	801693e <_strtod_l+0xab6>
 8016a22:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8016a26:	e7db      	b.n	80169e0 <_strtod_l+0xb58>
 8016a28:	a311      	add	r3, pc, #68	; (adr r3, 8016a70 <_strtod_l+0xbe8>)
 8016a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a2e:	f7ea f85f 	bl	8000af0 <__aeabi_dcmplt>
 8016a32:	e7b2      	b.n	801699a <_strtod_l+0xb12>
 8016a34:	2300      	movs	r3, #0
 8016a36:	930a      	str	r3, [sp, #40]	; 0x28
 8016a38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016a3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016a3c:	6013      	str	r3, [r2, #0]
 8016a3e:	f7ff ba6b 	b.w	8015f18 <_strtod_l+0x90>
 8016a42:	2a65      	cmp	r2, #101	; 0x65
 8016a44:	f43f ab5f 	beq.w	8016106 <_strtod_l+0x27e>
 8016a48:	2a45      	cmp	r2, #69	; 0x45
 8016a4a:	f43f ab5c 	beq.w	8016106 <_strtod_l+0x27e>
 8016a4e:	2301      	movs	r3, #1
 8016a50:	f7ff bb94 	b.w	801617c <_strtod_l+0x2f4>
 8016a54:	f3af 8000 	nop.w
 8016a58:	94a03595 	.word	0x94a03595
 8016a5c:	3fdfffff 	.word	0x3fdfffff
 8016a60:	35afe535 	.word	0x35afe535
 8016a64:	3fe00000 	.word	0x3fe00000
 8016a68:	ffc00000 	.word	0xffc00000
 8016a6c:	41dfffff 	.word	0x41dfffff
 8016a70:	94a03595 	.word	0x94a03595
 8016a74:	3fcfffff 	.word	0x3fcfffff
 8016a78:	3ff00000 	.word	0x3ff00000
 8016a7c:	7ff00000 	.word	0x7ff00000
 8016a80:	7fe00000 	.word	0x7fe00000
 8016a84:	7c9fffff 	.word	0x7c9fffff
 8016a88:	3fe00000 	.word	0x3fe00000
 8016a8c:	bff00000 	.word	0xbff00000
 8016a90:	7fefffff 	.word	0x7fefffff

08016a94 <_strtod_r>:
 8016a94:	4b01      	ldr	r3, [pc, #4]	; (8016a9c <_strtod_r+0x8>)
 8016a96:	f7ff b9f7 	b.w	8015e88 <_strtod_l>
 8016a9a:	bf00      	nop
 8016a9c:	20000298 	.word	0x20000298

08016aa0 <_strtol_l.constprop.0>:
 8016aa0:	2b01      	cmp	r3, #1
 8016aa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016aa6:	d001      	beq.n	8016aac <_strtol_l.constprop.0+0xc>
 8016aa8:	2b24      	cmp	r3, #36	; 0x24
 8016aaa:	d906      	bls.n	8016aba <_strtol_l.constprop.0+0x1a>
 8016aac:	f7fd ff6e 	bl	801498c <__errno>
 8016ab0:	2316      	movs	r3, #22
 8016ab2:	6003      	str	r3, [r0, #0]
 8016ab4:	2000      	movs	r0, #0
 8016ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016aba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8016ba0 <_strtol_l.constprop.0+0x100>
 8016abe:	460d      	mov	r5, r1
 8016ac0:	462e      	mov	r6, r5
 8016ac2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ac6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8016aca:	f017 0708 	ands.w	r7, r7, #8
 8016ace:	d1f7      	bne.n	8016ac0 <_strtol_l.constprop.0+0x20>
 8016ad0:	2c2d      	cmp	r4, #45	; 0x2d
 8016ad2:	d132      	bne.n	8016b3a <_strtol_l.constprop.0+0x9a>
 8016ad4:	782c      	ldrb	r4, [r5, #0]
 8016ad6:	2701      	movs	r7, #1
 8016ad8:	1cb5      	adds	r5, r6, #2
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d05b      	beq.n	8016b96 <_strtol_l.constprop.0+0xf6>
 8016ade:	2b10      	cmp	r3, #16
 8016ae0:	d109      	bne.n	8016af6 <_strtol_l.constprop.0+0x56>
 8016ae2:	2c30      	cmp	r4, #48	; 0x30
 8016ae4:	d107      	bne.n	8016af6 <_strtol_l.constprop.0+0x56>
 8016ae6:	782c      	ldrb	r4, [r5, #0]
 8016ae8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016aec:	2c58      	cmp	r4, #88	; 0x58
 8016aee:	d14d      	bne.n	8016b8c <_strtol_l.constprop.0+0xec>
 8016af0:	786c      	ldrb	r4, [r5, #1]
 8016af2:	2310      	movs	r3, #16
 8016af4:	3502      	adds	r5, #2
 8016af6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8016afa:	f108 38ff 	add.w	r8, r8, #4294967295
 8016afe:	f04f 0c00 	mov.w	ip, #0
 8016b02:	fbb8 f9f3 	udiv	r9, r8, r3
 8016b06:	4666      	mov	r6, ip
 8016b08:	fb03 8a19 	mls	sl, r3, r9, r8
 8016b0c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8016b10:	f1be 0f09 	cmp.w	lr, #9
 8016b14:	d816      	bhi.n	8016b44 <_strtol_l.constprop.0+0xa4>
 8016b16:	4674      	mov	r4, lr
 8016b18:	42a3      	cmp	r3, r4
 8016b1a:	dd24      	ble.n	8016b66 <_strtol_l.constprop.0+0xc6>
 8016b1c:	f1bc 0f00 	cmp.w	ip, #0
 8016b20:	db1e      	blt.n	8016b60 <_strtol_l.constprop.0+0xc0>
 8016b22:	45b1      	cmp	r9, r6
 8016b24:	d31c      	bcc.n	8016b60 <_strtol_l.constprop.0+0xc0>
 8016b26:	d101      	bne.n	8016b2c <_strtol_l.constprop.0+0x8c>
 8016b28:	45a2      	cmp	sl, r4
 8016b2a:	db19      	blt.n	8016b60 <_strtol_l.constprop.0+0xc0>
 8016b2c:	fb06 4603 	mla	r6, r6, r3, r4
 8016b30:	f04f 0c01 	mov.w	ip, #1
 8016b34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016b38:	e7e8      	b.n	8016b0c <_strtol_l.constprop.0+0x6c>
 8016b3a:	2c2b      	cmp	r4, #43	; 0x2b
 8016b3c:	bf04      	itt	eq
 8016b3e:	782c      	ldrbeq	r4, [r5, #0]
 8016b40:	1cb5      	addeq	r5, r6, #2
 8016b42:	e7ca      	b.n	8016ada <_strtol_l.constprop.0+0x3a>
 8016b44:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8016b48:	f1be 0f19 	cmp.w	lr, #25
 8016b4c:	d801      	bhi.n	8016b52 <_strtol_l.constprop.0+0xb2>
 8016b4e:	3c37      	subs	r4, #55	; 0x37
 8016b50:	e7e2      	b.n	8016b18 <_strtol_l.constprop.0+0x78>
 8016b52:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8016b56:	f1be 0f19 	cmp.w	lr, #25
 8016b5a:	d804      	bhi.n	8016b66 <_strtol_l.constprop.0+0xc6>
 8016b5c:	3c57      	subs	r4, #87	; 0x57
 8016b5e:	e7db      	b.n	8016b18 <_strtol_l.constprop.0+0x78>
 8016b60:	f04f 3cff 	mov.w	ip, #4294967295
 8016b64:	e7e6      	b.n	8016b34 <_strtol_l.constprop.0+0x94>
 8016b66:	f1bc 0f00 	cmp.w	ip, #0
 8016b6a:	da05      	bge.n	8016b78 <_strtol_l.constprop.0+0xd8>
 8016b6c:	2322      	movs	r3, #34	; 0x22
 8016b6e:	6003      	str	r3, [r0, #0]
 8016b70:	4646      	mov	r6, r8
 8016b72:	b942      	cbnz	r2, 8016b86 <_strtol_l.constprop.0+0xe6>
 8016b74:	4630      	mov	r0, r6
 8016b76:	e79e      	b.n	8016ab6 <_strtol_l.constprop.0+0x16>
 8016b78:	b107      	cbz	r7, 8016b7c <_strtol_l.constprop.0+0xdc>
 8016b7a:	4276      	negs	r6, r6
 8016b7c:	2a00      	cmp	r2, #0
 8016b7e:	d0f9      	beq.n	8016b74 <_strtol_l.constprop.0+0xd4>
 8016b80:	f1bc 0f00 	cmp.w	ip, #0
 8016b84:	d000      	beq.n	8016b88 <_strtol_l.constprop.0+0xe8>
 8016b86:	1e69      	subs	r1, r5, #1
 8016b88:	6011      	str	r1, [r2, #0]
 8016b8a:	e7f3      	b.n	8016b74 <_strtol_l.constprop.0+0xd4>
 8016b8c:	2430      	movs	r4, #48	; 0x30
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d1b1      	bne.n	8016af6 <_strtol_l.constprop.0+0x56>
 8016b92:	2308      	movs	r3, #8
 8016b94:	e7af      	b.n	8016af6 <_strtol_l.constprop.0+0x56>
 8016b96:	2c30      	cmp	r4, #48	; 0x30
 8016b98:	d0a5      	beq.n	8016ae6 <_strtol_l.constprop.0+0x46>
 8016b9a:	230a      	movs	r3, #10
 8016b9c:	e7ab      	b.n	8016af6 <_strtol_l.constprop.0+0x56>
 8016b9e:	bf00      	nop
 8016ba0:	08059bb1 	.word	0x08059bb1

08016ba4 <_strtol_r>:
 8016ba4:	f7ff bf7c 	b.w	8016aa0 <_strtol_l.constprop.0>

08016ba8 <_vsiprintf_r>:
 8016ba8:	b500      	push	{lr}
 8016baa:	b09b      	sub	sp, #108	; 0x6c
 8016bac:	9100      	str	r1, [sp, #0]
 8016bae:	9104      	str	r1, [sp, #16]
 8016bb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016bb4:	9105      	str	r1, [sp, #20]
 8016bb6:	9102      	str	r1, [sp, #8]
 8016bb8:	4905      	ldr	r1, [pc, #20]	; (8016bd0 <_vsiprintf_r+0x28>)
 8016bba:	9103      	str	r1, [sp, #12]
 8016bbc:	4669      	mov	r1, sp
 8016bbe:	f002 fa47 	bl	8019050 <_svfiprintf_r>
 8016bc2:	9b00      	ldr	r3, [sp, #0]
 8016bc4:	2200      	movs	r2, #0
 8016bc6:	701a      	strb	r2, [r3, #0]
 8016bc8:	b01b      	add	sp, #108	; 0x6c
 8016bca:	f85d fb04 	ldr.w	pc, [sp], #4
 8016bce:	bf00      	nop
 8016bd0:	ffff0208 	.word	0xffff0208

08016bd4 <vsiprintf>:
 8016bd4:	4613      	mov	r3, r2
 8016bd6:	460a      	mov	r2, r1
 8016bd8:	4601      	mov	r1, r0
 8016bda:	4802      	ldr	r0, [pc, #8]	; (8016be4 <vsiprintf+0x10>)
 8016bdc:	6800      	ldr	r0, [r0, #0]
 8016bde:	f7ff bfe3 	b.w	8016ba8 <_vsiprintf_r>
 8016be2:	bf00      	nop
 8016be4:	20000230 	.word	0x20000230

08016be8 <__swbuf_r>:
 8016be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bea:	460e      	mov	r6, r1
 8016bec:	4614      	mov	r4, r2
 8016bee:	4605      	mov	r5, r0
 8016bf0:	b118      	cbz	r0, 8016bfa <__swbuf_r+0x12>
 8016bf2:	6983      	ldr	r3, [r0, #24]
 8016bf4:	b90b      	cbnz	r3, 8016bfa <__swbuf_r+0x12>
 8016bf6:	f001 f84b 	bl	8017c90 <__sinit>
 8016bfa:	4b21      	ldr	r3, [pc, #132]	; (8016c80 <__swbuf_r+0x98>)
 8016bfc:	429c      	cmp	r4, r3
 8016bfe:	d12b      	bne.n	8016c58 <__swbuf_r+0x70>
 8016c00:	686c      	ldr	r4, [r5, #4]
 8016c02:	69a3      	ldr	r3, [r4, #24]
 8016c04:	60a3      	str	r3, [r4, #8]
 8016c06:	89a3      	ldrh	r3, [r4, #12]
 8016c08:	071a      	lsls	r2, r3, #28
 8016c0a:	d52f      	bpl.n	8016c6c <__swbuf_r+0x84>
 8016c0c:	6923      	ldr	r3, [r4, #16]
 8016c0e:	b36b      	cbz	r3, 8016c6c <__swbuf_r+0x84>
 8016c10:	6923      	ldr	r3, [r4, #16]
 8016c12:	6820      	ldr	r0, [r4, #0]
 8016c14:	1ac0      	subs	r0, r0, r3
 8016c16:	6963      	ldr	r3, [r4, #20]
 8016c18:	b2f6      	uxtb	r6, r6
 8016c1a:	4283      	cmp	r3, r0
 8016c1c:	4637      	mov	r7, r6
 8016c1e:	dc04      	bgt.n	8016c2a <__swbuf_r+0x42>
 8016c20:	4621      	mov	r1, r4
 8016c22:	4628      	mov	r0, r5
 8016c24:	f000 ffa0 	bl	8017b68 <_fflush_r>
 8016c28:	bb30      	cbnz	r0, 8016c78 <__swbuf_r+0x90>
 8016c2a:	68a3      	ldr	r3, [r4, #8]
 8016c2c:	3b01      	subs	r3, #1
 8016c2e:	60a3      	str	r3, [r4, #8]
 8016c30:	6823      	ldr	r3, [r4, #0]
 8016c32:	1c5a      	adds	r2, r3, #1
 8016c34:	6022      	str	r2, [r4, #0]
 8016c36:	701e      	strb	r6, [r3, #0]
 8016c38:	6963      	ldr	r3, [r4, #20]
 8016c3a:	3001      	adds	r0, #1
 8016c3c:	4283      	cmp	r3, r0
 8016c3e:	d004      	beq.n	8016c4a <__swbuf_r+0x62>
 8016c40:	89a3      	ldrh	r3, [r4, #12]
 8016c42:	07db      	lsls	r3, r3, #31
 8016c44:	d506      	bpl.n	8016c54 <__swbuf_r+0x6c>
 8016c46:	2e0a      	cmp	r6, #10
 8016c48:	d104      	bne.n	8016c54 <__swbuf_r+0x6c>
 8016c4a:	4621      	mov	r1, r4
 8016c4c:	4628      	mov	r0, r5
 8016c4e:	f000 ff8b 	bl	8017b68 <_fflush_r>
 8016c52:	b988      	cbnz	r0, 8016c78 <__swbuf_r+0x90>
 8016c54:	4638      	mov	r0, r7
 8016c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c58:	4b0a      	ldr	r3, [pc, #40]	; (8016c84 <__swbuf_r+0x9c>)
 8016c5a:	429c      	cmp	r4, r3
 8016c5c:	d101      	bne.n	8016c62 <__swbuf_r+0x7a>
 8016c5e:	68ac      	ldr	r4, [r5, #8]
 8016c60:	e7cf      	b.n	8016c02 <__swbuf_r+0x1a>
 8016c62:	4b09      	ldr	r3, [pc, #36]	; (8016c88 <__swbuf_r+0xa0>)
 8016c64:	429c      	cmp	r4, r3
 8016c66:	bf08      	it	eq
 8016c68:	68ec      	ldreq	r4, [r5, #12]
 8016c6a:	e7ca      	b.n	8016c02 <__swbuf_r+0x1a>
 8016c6c:	4621      	mov	r1, r4
 8016c6e:	4628      	mov	r0, r5
 8016c70:	f000 f80c 	bl	8016c8c <__swsetup_r>
 8016c74:	2800      	cmp	r0, #0
 8016c76:	d0cb      	beq.n	8016c10 <__swbuf_r+0x28>
 8016c78:	f04f 37ff 	mov.w	r7, #4294967295
 8016c7c:	e7ea      	b.n	8016c54 <__swbuf_r+0x6c>
 8016c7e:	bf00      	nop
 8016c80:	08059d64 	.word	0x08059d64
 8016c84:	08059d84 	.word	0x08059d84
 8016c88:	08059d44 	.word	0x08059d44

08016c8c <__swsetup_r>:
 8016c8c:	4b32      	ldr	r3, [pc, #200]	; (8016d58 <__swsetup_r+0xcc>)
 8016c8e:	b570      	push	{r4, r5, r6, lr}
 8016c90:	681d      	ldr	r5, [r3, #0]
 8016c92:	4606      	mov	r6, r0
 8016c94:	460c      	mov	r4, r1
 8016c96:	b125      	cbz	r5, 8016ca2 <__swsetup_r+0x16>
 8016c98:	69ab      	ldr	r3, [r5, #24]
 8016c9a:	b913      	cbnz	r3, 8016ca2 <__swsetup_r+0x16>
 8016c9c:	4628      	mov	r0, r5
 8016c9e:	f000 fff7 	bl	8017c90 <__sinit>
 8016ca2:	4b2e      	ldr	r3, [pc, #184]	; (8016d5c <__swsetup_r+0xd0>)
 8016ca4:	429c      	cmp	r4, r3
 8016ca6:	d10f      	bne.n	8016cc8 <__swsetup_r+0x3c>
 8016ca8:	686c      	ldr	r4, [r5, #4]
 8016caa:	89a3      	ldrh	r3, [r4, #12]
 8016cac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016cb0:	0719      	lsls	r1, r3, #28
 8016cb2:	d42c      	bmi.n	8016d0e <__swsetup_r+0x82>
 8016cb4:	06dd      	lsls	r5, r3, #27
 8016cb6:	d411      	bmi.n	8016cdc <__swsetup_r+0x50>
 8016cb8:	2309      	movs	r3, #9
 8016cba:	6033      	str	r3, [r6, #0]
 8016cbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016cc0:	81a3      	strh	r3, [r4, #12]
 8016cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8016cc6:	e03e      	b.n	8016d46 <__swsetup_r+0xba>
 8016cc8:	4b25      	ldr	r3, [pc, #148]	; (8016d60 <__swsetup_r+0xd4>)
 8016cca:	429c      	cmp	r4, r3
 8016ccc:	d101      	bne.n	8016cd2 <__swsetup_r+0x46>
 8016cce:	68ac      	ldr	r4, [r5, #8]
 8016cd0:	e7eb      	b.n	8016caa <__swsetup_r+0x1e>
 8016cd2:	4b24      	ldr	r3, [pc, #144]	; (8016d64 <__swsetup_r+0xd8>)
 8016cd4:	429c      	cmp	r4, r3
 8016cd6:	bf08      	it	eq
 8016cd8:	68ec      	ldreq	r4, [r5, #12]
 8016cda:	e7e6      	b.n	8016caa <__swsetup_r+0x1e>
 8016cdc:	0758      	lsls	r0, r3, #29
 8016cde:	d512      	bpl.n	8016d06 <__swsetup_r+0x7a>
 8016ce0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ce2:	b141      	cbz	r1, 8016cf6 <__swsetup_r+0x6a>
 8016ce4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ce8:	4299      	cmp	r1, r3
 8016cea:	d002      	beq.n	8016cf2 <__swsetup_r+0x66>
 8016cec:	4630      	mov	r0, r6
 8016cee:	f7fd fee3 	bl	8014ab8 <_free_r>
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	6363      	str	r3, [r4, #52]	; 0x34
 8016cf6:	89a3      	ldrh	r3, [r4, #12]
 8016cf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016cfc:	81a3      	strh	r3, [r4, #12]
 8016cfe:	2300      	movs	r3, #0
 8016d00:	6063      	str	r3, [r4, #4]
 8016d02:	6923      	ldr	r3, [r4, #16]
 8016d04:	6023      	str	r3, [r4, #0]
 8016d06:	89a3      	ldrh	r3, [r4, #12]
 8016d08:	f043 0308 	orr.w	r3, r3, #8
 8016d0c:	81a3      	strh	r3, [r4, #12]
 8016d0e:	6923      	ldr	r3, [r4, #16]
 8016d10:	b94b      	cbnz	r3, 8016d26 <__swsetup_r+0x9a>
 8016d12:	89a3      	ldrh	r3, [r4, #12]
 8016d14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016d1c:	d003      	beq.n	8016d26 <__swsetup_r+0x9a>
 8016d1e:	4621      	mov	r1, r4
 8016d20:	4630      	mov	r0, r6
 8016d22:	f001 fbeb 	bl	80184fc <__smakebuf_r>
 8016d26:	89a0      	ldrh	r0, [r4, #12]
 8016d28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016d2c:	f010 0301 	ands.w	r3, r0, #1
 8016d30:	d00a      	beq.n	8016d48 <__swsetup_r+0xbc>
 8016d32:	2300      	movs	r3, #0
 8016d34:	60a3      	str	r3, [r4, #8]
 8016d36:	6963      	ldr	r3, [r4, #20]
 8016d38:	425b      	negs	r3, r3
 8016d3a:	61a3      	str	r3, [r4, #24]
 8016d3c:	6923      	ldr	r3, [r4, #16]
 8016d3e:	b943      	cbnz	r3, 8016d52 <__swsetup_r+0xc6>
 8016d40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016d44:	d1ba      	bne.n	8016cbc <__swsetup_r+0x30>
 8016d46:	bd70      	pop	{r4, r5, r6, pc}
 8016d48:	0781      	lsls	r1, r0, #30
 8016d4a:	bf58      	it	pl
 8016d4c:	6963      	ldrpl	r3, [r4, #20]
 8016d4e:	60a3      	str	r3, [r4, #8]
 8016d50:	e7f4      	b.n	8016d3c <__swsetup_r+0xb0>
 8016d52:	2000      	movs	r0, #0
 8016d54:	e7f7      	b.n	8016d46 <__swsetup_r+0xba>
 8016d56:	bf00      	nop
 8016d58:	20000230 	.word	0x20000230
 8016d5c:	08059d64 	.word	0x08059d64
 8016d60:	08059d84 	.word	0x08059d84
 8016d64:	08059d44 	.word	0x08059d44

08016d68 <quorem>:
 8016d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d6c:	6903      	ldr	r3, [r0, #16]
 8016d6e:	690c      	ldr	r4, [r1, #16]
 8016d70:	42a3      	cmp	r3, r4
 8016d72:	4607      	mov	r7, r0
 8016d74:	f2c0 8081 	blt.w	8016e7a <quorem+0x112>
 8016d78:	3c01      	subs	r4, #1
 8016d7a:	f101 0814 	add.w	r8, r1, #20
 8016d7e:	f100 0514 	add.w	r5, r0, #20
 8016d82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016d86:	9301      	str	r3, [sp, #4]
 8016d88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016d8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016d90:	3301      	adds	r3, #1
 8016d92:	429a      	cmp	r2, r3
 8016d94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016d98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016d9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8016da0:	d331      	bcc.n	8016e06 <quorem+0x9e>
 8016da2:	f04f 0e00 	mov.w	lr, #0
 8016da6:	4640      	mov	r0, r8
 8016da8:	46ac      	mov	ip, r5
 8016daa:	46f2      	mov	sl, lr
 8016dac:	f850 2b04 	ldr.w	r2, [r0], #4
 8016db0:	b293      	uxth	r3, r2
 8016db2:	fb06 e303 	mla	r3, r6, r3, lr
 8016db6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8016dba:	b29b      	uxth	r3, r3
 8016dbc:	ebaa 0303 	sub.w	r3, sl, r3
 8016dc0:	f8dc a000 	ldr.w	sl, [ip]
 8016dc4:	0c12      	lsrs	r2, r2, #16
 8016dc6:	fa13 f38a 	uxtah	r3, r3, sl
 8016dca:	fb06 e202 	mla	r2, r6, r2, lr
 8016dce:	9300      	str	r3, [sp, #0]
 8016dd0:	9b00      	ldr	r3, [sp, #0]
 8016dd2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016dd6:	b292      	uxth	r2, r2
 8016dd8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016ddc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016de0:	f8bd 3000 	ldrh.w	r3, [sp]
 8016de4:	4581      	cmp	r9, r0
 8016de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016dea:	f84c 3b04 	str.w	r3, [ip], #4
 8016dee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016df2:	d2db      	bcs.n	8016dac <quorem+0x44>
 8016df4:	f855 300b 	ldr.w	r3, [r5, fp]
 8016df8:	b92b      	cbnz	r3, 8016e06 <quorem+0x9e>
 8016dfa:	9b01      	ldr	r3, [sp, #4]
 8016dfc:	3b04      	subs	r3, #4
 8016dfe:	429d      	cmp	r5, r3
 8016e00:	461a      	mov	r2, r3
 8016e02:	d32e      	bcc.n	8016e62 <quorem+0xfa>
 8016e04:	613c      	str	r4, [r7, #16]
 8016e06:	4638      	mov	r0, r7
 8016e08:	f001 fea2 	bl	8018b50 <__mcmp>
 8016e0c:	2800      	cmp	r0, #0
 8016e0e:	db24      	blt.n	8016e5a <quorem+0xf2>
 8016e10:	3601      	adds	r6, #1
 8016e12:	4628      	mov	r0, r5
 8016e14:	f04f 0c00 	mov.w	ip, #0
 8016e18:	f858 2b04 	ldr.w	r2, [r8], #4
 8016e1c:	f8d0 e000 	ldr.w	lr, [r0]
 8016e20:	b293      	uxth	r3, r2
 8016e22:	ebac 0303 	sub.w	r3, ip, r3
 8016e26:	0c12      	lsrs	r2, r2, #16
 8016e28:	fa13 f38e 	uxtah	r3, r3, lr
 8016e2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016e30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016e34:	b29b      	uxth	r3, r3
 8016e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016e3a:	45c1      	cmp	r9, r8
 8016e3c:	f840 3b04 	str.w	r3, [r0], #4
 8016e40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016e44:	d2e8      	bcs.n	8016e18 <quorem+0xb0>
 8016e46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016e4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016e4e:	b922      	cbnz	r2, 8016e5a <quorem+0xf2>
 8016e50:	3b04      	subs	r3, #4
 8016e52:	429d      	cmp	r5, r3
 8016e54:	461a      	mov	r2, r3
 8016e56:	d30a      	bcc.n	8016e6e <quorem+0x106>
 8016e58:	613c      	str	r4, [r7, #16]
 8016e5a:	4630      	mov	r0, r6
 8016e5c:	b003      	add	sp, #12
 8016e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e62:	6812      	ldr	r2, [r2, #0]
 8016e64:	3b04      	subs	r3, #4
 8016e66:	2a00      	cmp	r2, #0
 8016e68:	d1cc      	bne.n	8016e04 <quorem+0x9c>
 8016e6a:	3c01      	subs	r4, #1
 8016e6c:	e7c7      	b.n	8016dfe <quorem+0x96>
 8016e6e:	6812      	ldr	r2, [r2, #0]
 8016e70:	3b04      	subs	r3, #4
 8016e72:	2a00      	cmp	r2, #0
 8016e74:	d1f0      	bne.n	8016e58 <quorem+0xf0>
 8016e76:	3c01      	subs	r4, #1
 8016e78:	e7eb      	b.n	8016e52 <quorem+0xea>
 8016e7a:	2000      	movs	r0, #0
 8016e7c:	e7ee      	b.n	8016e5c <quorem+0xf4>
	...

08016e80 <_dtoa_r>:
 8016e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e84:	ed2d 8b04 	vpush	{d8-d9}
 8016e88:	ec57 6b10 	vmov	r6, r7, d0
 8016e8c:	b093      	sub	sp, #76	; 0x4c
 8016e8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016e90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016e94:	9106      	str	r1, [sp, #24]
 8016e96:	ee10 aa10 	vmov	sl, s0
 8016e9a:	4604      	mov	r4, r0
 8016e9c:	9209      	str	r2, [sp, #36]	; 0x24
 8016e9e:	930c      	str	r3, [sp, #48]	; 0x30
 8016ea0:	46bb      	mov	fp, r7
 8016ea2:	b975      	cbnz	r5, 8016ec2 <_dtoa_r+0x42>
 8016ea4:	2010      	movs	r0, #16
 8016ea6:	f7fd fdb1 	bl	8014a0c <malloc>
 8016eaa:	4602      	mov	r2, r0
 8016eac:	6260      	str	r0, [r4, #36]	; 0x24
 8016eae:	b920      	cbnz	r0, 8016eba <_dtoa_r+0x3a>
 8016eb0:	4ba7      	ldr	r3, [pc, #668]	; (8017150 <_dtoa_r+0x2d0>)
 8016eb2:	21ea      	movs	r1, #234	; 0xea
 8016eb4:	48a7      	ldr	r0, [pc, #668]	; (8017154 <_dtoa_r+0x2d4>)
 8016eb6:	f7fd fd43 	bl	8014940 <__assert_func>
 8016eba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016ebe:	6005      	str	r5, [r0, #0]
 8016ec0:	60c5      	str	r5, [r0, #12]
 8016ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ec4:	6819      	ldr	r1, [r3, #0]
 8016ec6:	b151      	cbz	r1, 8016ede <_dtoa_r+0x5e>
 8016ec8:	685a      	ldr	r2, [r3, #4]
 8016eca:	604a      	str	r2, [r1, #4]
 8016ecc:	2301      	movs	r3, #1
 8016ece:	4093      	lsls	r3, r2
 8016ed0:	608b      	str	r3, [r1, #8]
 8016ed2:	4620      	mov	r0, r4
 8016ed4:	f001 fbb0 	bl	8018638 <_Bfree>
 8016ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016eda:	2200      	movs	r2, #0
 8016edc:	601a      	str	r2, [r3, #0]
 8016ede:	1e3b      	subs	r3, r7, #0
 8016ee0:	bfaa      	itet	ge
 8016ee2:	2300      	movge	r3, #0
 8016ee4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8016ee8:	f8c8 3000 	strge.w	r3, [r8]
 8016eec:	4b9a      	ldr	r3, [pc, #616]	; (8017158 <_dtoa_r+0x2d8>)
 8016eee:	bfbc      	itt	lt
 8016ef0:	2201      	movlt	r2, #1
 8016ef2:	f8c8 2000 	strlt.w	r2, [r8]
 8016ef6:	ea33 030b 	bics.w	r3, r3, fp
 8016efa:	d11b      	bne.n	8016f34 <_dtoa_r+0xb4>
 8016efc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016efe:	f242 730f 	movw	r3, #9999	; 0x270f
 8016f02:	6013      	str	r3, [r2, #0]
 8016f04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016f08:	4333      	orrs	r3, r6
 8016f0a:	f000 8592 	beq.w	8017a32 <_dtoa_r+0xbb2>
 8016f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016f10:	b963      	cbnz	r3, 8016f2c <_dtoa_r+0xac>
 8016f12:	4b92      	ldr	r3, [pc, #584]	; (801715c <_dtoa_r+0x2dc>)
 8016f14:	e022      	b.n	8016f5c <_dtoa_r+0xdc>
 8016f16:	4b92      	ldr	r3, [pc, #584]	; (8017160 <_dtoa_r+0x2e0>)
 8016f18:	9301      	str	r3, [sp, #4]
 8016f1a:	3308      	adds	r3, #8
 8016f1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016f1e:	6013      	str	r3, [r2, #0]
 8016f20:	9801      	ldr	r0, [sp, #4]
 8016f22:	b013      	add	sp, #76	; 0x4c
 8016f24:	ecbd 8b04 	vpop	{d8-d9}
 8016f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f2c:	4b8b      	ldr	r3, [pc, #556]	; (801715c <_dtoa_r+0x2dc>)
 8016f2e:	9301      	str	r3, [sp, #4]
 8016f30:	3303      	adds	r3, #3
 8016f32:	e7f3      	b.n	8016f1c <_dtoa_r+0x9c>
 8016f34:	2200      	movs	r2, #0
 8016f36:	2300      	movs	r3, #0
 8016f38:	4650      	mov	r0, sl
 8016f3a:	4659      	mov	r1, fp
 8016f3c:	f7e9 fdce 	bl	8000adc <__aeabi_dcmpeq>
 8016f40:	ec4b ab19 	vmov	d9, sl, fp
 8016f44:	4680      	mov	r8, r0
 8016f46:	b158      	cbz	r0, 8016f60 <_dtoa_r+0xe0>
 8016f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016f4a:	2301      	movs	r3, #1
 8016f4c:	6013      	str	r3, [r2, #0]
 8016f4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	f000 856b 	beq.w	8017a2c <_dtoa_r+0xbac>
 8016f56:	4883      	ldr	r0, [pc, #524]	; (8017164 <_dtoa_r+0x2e4>)
 8016f58:	6018      	str	r0, [r3, #0]
 8016f5a:	1e43      	subs	r3, r0, #1
 8016f5c:	9301      	str	r3, [sp, #4]
 8016f5e:	e7df      	b.n	8016f20 <_dtoa_r+0xa0>
 8016f60:	ec4b ab10 	vmov	d0, sl, fp
 8016f64:	aa10      	add	r2, sp, #64	; 0x40
 8016f66:	a911      	add	r1, sp, #68	; 0x44
 8016f68:	4620      	mov	r0, r4
 8016f6a:	f001 ff13 	bl	8018d94 <__d2b>
 8016f6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8016f72:	ee08 0a10 	vmov	s16, r0
 8016f76:	2d00      	cmp	r5, #0
 8016f78:	f000 8084 	beq.w	8017084 <_dtoa_r+0x204>
 8016f7c:	ee19 3a90 	vmov	r3, s19
 8016f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016f84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8016f88:	4656      	mov	r6, sl
 8016f8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8016f8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016f92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8016f96:	4b74      	ldr	r3, [pc, #464]	; (8017168 <_dtoa_r+0x2e8>)
 8016f98:	2200      	movs	r2, #0
 8016f9a:	4630      	mov	r0, r6
 8016f9c:	4639      	mov	r1, r7
 8016f9e:	f7e9 f97d 	bl	800029c <__aeabi_dsub>
 8016fa2:	a365      	add	r3, pc, #404	; (adr r3, 8017138 <_dtoa_r+0x2b8>)
 8016fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fa8:	f7e9 fb30 	bl	800060c <__aeabi_dmul>
 8016fac:	a364      	add	r3, pc, #400	; (adr r3, 8017140 <_dtoa_r+0x2c0>)
 8016fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fb2:	f7e9 f975 	bl	80002a0 <__adddf3>
 8016fb6:	4606      	mov	r6, r0
 8016fb8:	4628      	mov	r0, r5
 8016fba:	460f      	mov	r7, r1
 8016fbc:	f7e9 fabc 	bl	8000538 <__aeabi_i2d>
 8016fc0:	a361      	add	r3, pc, #388	; (adr r3, 8017148 <_dtoa_r+0x2c8>)
 8016fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fc6:	f7e9 fb21 	bl	800060c <__aeabi_dmul>
 8016fca:	4602      	mov	r2, r0
 8016fcc:	460b      	mov	r3, r1
 8016fce:	4630      	mov	r0, r6
 8016fd0:	4639      	mov	r1, r7
 8016fd2:	f7e9 f965 	bl	80002a0 <__adddf3>
 8016fd6:	4606      	mov	r6, r0
 8016fd8:	460f      	mov	r7, r1
 8016fda:	f7e9 fdc7 	bl	8000b6c <__aeabi_d2iz>
 8016fde:	2200      	movs	r2, #0
 8016fe0:	9000      	str	r0, [sp, #0]
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	4630      	mov	r0, r6
 8016fe6:	4639      	mov	r1, r7
 8016fe8:	f7e9 fd82 	bl	8000af0 <__aeabi_dcmplt>
 8016fec:	b150      	cbz	r0, 8017004 <_dtoa_r+0x184>
 8016fee:	9800      	ldr	r0, [sp, #0]
 8016ff0:	f7e9 faa2 	bl	8000538 <__aeabi_i2d>
 8016ff4:	4632      	mov	r2, r6
 8016ff6:	463b      	mov	r3, r7
 8016ff8:	f7e9 fd70 	bl	8000adc <__aeabi_dcmpeq>
 8016ffc:	b910      	cbnz	r0, 8017004 <_dtoa_r+0x184>
 8016ffe:	9b00      	ldr	r3, [sp, #0]
 8017000:	3b01      	subs	r3, #1
 8017002:	9300      	str	r3, [sp, #0]
 8017004:	9b00      	ldr	r3, [sp, #0]
 8017006:	2b16      	cmp	r3, #22
 8017008:	d85a      	bhi.n	80170c0 <_dtoa_r+0x240>
 801700a:	9a00      	ldr	r2, [sp, #0]
 801700c:	4b57      	ldr	r3, [pc, #348]	; (801716c <_dtoa_r+0x2ec>)
 801700e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017016:	ec51 0b19 	vmov	r0, r1, d9
 801701a:	f7e9 fd69 	bl	8000af0 <__aeabi_dcmplt>
 801701e:	2800      	cmp	r0, #0
 8017020:	d050      	beq.n	80170c4 <_dtoa_r+0x244>
 8017022:	9b00      	ldr	r3, [sp, #0]
 8017024:	3b01      	subs	r3, #1
 8017026:	9300      	str	r3, [sp, #0]
 8017028:	2300      	movs	r3, #0
 801702a:	930b      	str	r3, [sp, #44]	; 0x2c
 801702c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801702e:	1b5d      	subs	r5, r3, r5
 8017030:	1e6b      	subs	r3, r5, #1
 8017032:	9305      	str	r3, [sp, #20]
 8017034:	bf45      	ittet	mi
 8017036:	f1c5 0301 	rsbmi	r3, r5, #1
 801703a:	9304      	strmi	r3, [sp, #16]
 801703c:	2300      	movpl	r3, #0
 801703e:	2300      	movmi	r3, #0
 8017040:	bf4c      	ite	mi
 8017042:	9305      	strmi	r3, [sp, #20]
 8017044:	9304      	strpl	r3, [sp, #16]
 8017046:	9b00      	ldr	r3, [sp, #0]
 8017048:	2b00      	cmp	r3, #0
 801704a:	db3d      	blt.n	80170c8 <_dtoa_r+0x248>
 801704c:	9b05      	ldr	r3, [sp, #20]
 801704e:	9a00      	ldr	r2, [sp, #0]
 8017050:	920a      	str	r2, [sp, #40]	; 0x28
 8017052:	4413      	add	r3, r2
 8017054:	9305      	str	r3, [sp, #20]
 8017056:	2300      	movs	r3, #0
 8017058:	9307      	str	r3, [sp, #28]
 801705a:	9b06      	ldr	r3, [sp, #24]
 801705c:	2b09      	cmp	r3, #9
 801705e:	f200 8089 	bhi.w	8017174 <_dtoa_r+0x2f4>
 8017062:	2b05      	cmp	r3, #5
 8017064:	bfc4      	itt	gt
 8017066:	3b04      	subgt	r3, #4
 8017068:	9306      	strgt	r3, [sp, #24]
 801706a:	9b06      	ldr	r3, [sp, #24]
 801706c:	f1a3 0302 	sub.w	r3, r3, #2
 8017070:	bfcc      	ite	gt
 8017072:	2500      	movgt	r5, #0
 8017074:	2501      	movle	r5, #1
 8017076:	2b03      	cmp	r3, #3
 8017078:	f200 8087 	bhi.w	801718a <_dtoa_r+0x30a>
 801707c:	e8df f003 	tbb	[pc, r3]
 8017080:	59383a2d 	.word	0x59383a2d
 8017084:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8017088:	441d      	add	r5, r3
 801708a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801708e:	2b20      	cmp	r3, #32
 8017090:	bfc1      	itttt	gt
 8017092:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017096:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801709a:	fa0b f303 	lslgt.w	r3, fp, r3
 801709e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80170a2:	bfda      	itte	le
 80170a4:	f1c3 0320 	rsble	r3, r3, #32
 80170a8:	fa06 f003 	lslle.w	r0, r6, r3
 80170ac:	4318      	orrgt	r0, r3
 80170ae:	f7e9 fa33 	bl	8000518 <__aeabi_ui2d>
 80170b2:	2301      	movs	r3, #1
 80170b4:	4606      	mov	r6, r0
 80170b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80170ba:	3d01      	subs	r5, #1
 80170bc:	930e      	str	r3, [sp, #56]	; 0x38
 80170be:	e76a      	b.n	8016f96 <_dtoa_r+0x116>
 80170c0:	2301      	movs	r3, #1
 80170c2:	e7b2      	b.n	801702a <_dtoa_r+0x1aa>
 80170c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80170c6:	e7b1      	b.n	801702c <_dtoa_r+0x1ac>
 80170c8:	9b04      	ldr	r3, [sp, #16]
 80170ca:	9a00      	ldr	r2, [sp, #0]
 80170cc:	1a9b      	subs	r3, r3, r2
 80170ce:	9304      	str	r3, [sp, #16]
 80170d0:	4253      	negs	r3, r2
 80170d2:	9307      	str	r3, [sp, #28]
 80170d4:	2300      	movs	r3, #0
 80170d6:	930a      	str	r3, [sp, #40]	; 0x28
 80170d8:	e7bf      	b.n	801705a <_dtoa_r+0x1da>
 80170da:	2300      	movs	r3, #0
 80170dc:	9308      	str	r3, [sp, #32]
 80170de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	dc55      	bgt.n	8017190 <_dtoa_r+0x310>
 80170e4:	2301      	movs	r3, #1
 80170e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80170ea:	461a      	mov	r2, r3
 80170ec:	9209      	str	r2, [sp, #36]	; 0x24
 80170ee:	e00c      	b.n	801710a <_dtoa_r+0x28a>
 80170f0:	2301      	movs	r3, #1
 80170f2:	e7f3      	b.n	80170dc <_dtoa_r+0x25c>
 80170f4:	2300      	movs	r3, #0
 80170f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80170f8:	9308      	str	r3, [sp, #32]
 80170fa:	9b00      	ldr	r3, [sp, #0]
 80170fc:	4413      	add	r3, r2
 80170fe:	9302      	str	r3, [sp, #8]
 8017100:	3301      	adds	r3, #1
 8017102:	2b01      	cmp	r3, #1
 8017104:	9303      	str	r3, [sp, #12]
 8017106:	bfb8      	it	lt
 8017108:	2301      	movlt	r3, #1
 801710a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801710c:	2200      	movs	r2, #0
 801710e:	6042      	str	r2, [r0, #4]
 8017110:	2204      	movs	r2, #4
 8017112:	f102 0614 	add.w	r6, r2, #20
 8017116:	429e      	cmp	r6, r3
 8017118:	6841      	ldr	r1, [r0, #4]
 801711a:	d93d      	bls.n	8017198 <_dtoa_r+0x318>
 801711c:	4620      	mov	r0, r4
 801711e:	f001 fa4b 	bl	80185b8 <_Balloc>
 8017122:	9001      	str	r0, [sp, #4]
 8017124:	2800      	cmp	r0, #0
 8017126:	d13b      	bne.n	80171a0 <_dtoa_r+0x320>
 8017128:	4b11      	ldr	r3, [pc, #68]	; (8017170 <_dtoa_r+0x2f0>)
 801712a:	4602      	mov	r2, r0
 801712c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017130:	e6c0      	b.n	8016eb4 <_dtoa_r+0x34>
 8017132:	2301      	movs	r3, #1
 8017134:	e7df      	b.n	80170f6 <_dtoa_r+0x276>
 8017136:	bf00      	nop
 8017138:	636f4361 	.word	0x636f4361
 801713c:	3fd287a7 	.word	0x3fd287a7
 8017140:	8b60c8b3 	.word	0x8b60c8b3
 8017144:	3fc68a28 	.word	0x3fc68a28
 8017148:	509f79fb 	.word	0x509f79fb
 801714c:	3fd34413 	.word	0x3fd34413
 8017150:	08059cbe 	.word	0x08059cbe
 8017154:	08059cd5 	.word	0x08059cd5
 8017158:	7ff00000 	.word	0x7ff00000
 801715c:	08059cba 	.word	0x08059cba
 8017160:	08059cb1 	.word	0x08059cb1
 8017164:	08059b32 	.word	0x08059b32
 8017168:	3ff80000 	.word	0x3ff80000
 801716c:	08059ea8 	.word	0x08059ea8
 8017170:	08059d30 	.word	0x08059d30
 8017174:	2501      	movs	r5, #1
 8017176:	2300      	movs	r3, #0
 8017178:	9306      	str	r3, [sp, #24]
 801717a:	9508      	str	r5, [sp, #32]
 801717c:	f04f 33ff 	mov.w	r3, #4294967295
 8017180:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017184:	2200      	movs	r2, #0
 8017186:	2312      	movs	r3, #18
 8017188:	e7b0      	b.n	80170ec <_dtoa_r+0x26c>
 801718a:	2301      	movs	r3, #1
 801718c:	9308      	str	r3, [sp, #32]
 801718e:	e7f5      	b.n	801717c <_dtoa_r+0x2fc>
 8017190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017192:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017196:	e7b8      	b.n	801710a <_dtoa_r+0x28a>
 8017198:	3101      	adds	r1, #1
 801719a:	6041      	str	r1, [r0, #4]
 801719c:	0052      	lsls	r2, r2, #1
 801719e:	e7b8      	b.n	8017112 <_dtoa_r+0x292>
 80171a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80171a2:	9a01      	ldr	r2, [sp, #4]
 80171a4:	601a      	str	r2, [r3, #0]
 80171a6:	9b03      	ldr	r3, [sp, #12]
 80171a8:	2b0e      	cmp	r3, #14
 80171aa:	f200 809d 	bhi.w	80172e8 <_dtoa_r+0x468>
 80171ae:	2d00      	cmp	r5, #0
 80171b0:	f000 809a 	beq.w	80172e8 <_dtoa_r+0x468>
 80171b4:	9b00      	ldr	r3, [sp, #0]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	dd32      	ble.n	8017220 <_dtoa_r+0x3a0>
 80171ba:	4ab7      	ldr	r2, [pc, #732]	; (8017498 <_dtoa_r+0x618>)
 80171bc:	f003 030f 	and.w	r3, r3, #15
 80171c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80171c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80171c8:	9b00      	ldr	r3, [sp, #0]
 80171ca:	05d8      	lsls	r0, r3, #23
 80171cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80171d0:	d516      	bpl.n	8017200 <_dtoa_r+0x380>
 80171d2:	4bb2      	ldr	r3, [pc, #712]	; (801749c <_dtoa_r+0x61c>)
 80171d4:	ec51 0b19 	vmov	r0, r1, d9
 80171d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80171dc:	f7e9 fb40 	bl	8000860 <__aeabi_ddiv>
 80171e0:	f007 070f 	and.w	r7, r7, #15
 80171e4:	4682      	mov	sl, r0
 80171e6:	468b      	mov	fp, r1
 80171e8:	2503      	movs	r5, #3
 80171ea:	4eac      	ldr	r6, [pc, #688]	; (801749c <_dtoa_r+0x61c>)
 80171ec:	b957      	cbnz	r7, 8017204 <_dtoa_r+0x384>
 80171ee:	4642      	mov	r2, r8
 80171f0:	464b      	mov	r3, r9
 80171f2:	4650      	mov	r0, sl
 80171f4:	4659      	mov	r1, fp
 80171f6:	f7e9 fb33 	bl	8000860 <__aeabi_ddiv>
 80171fa:	4682      	mov	sl, r0
 80171fc:	468b      	mov	fp, r1
 80171fe:	e028      	b.n	8017252 <_dtoa_r+0x3d2>
 8017200:	2502      	movs	r5, #2
 8017202:	e7f2      	b.n	80171ea <_dtoa_r+0x36a>
 8017204:	07f9      	lsls	r1, r7, #31
 8017206:	d508      	bpl.n	801721a <_dtoa_r+0x39a>
 8017208:	4640      	mov	r0, r8
 801720a:	4649      	mov	r1, r9
 801720c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017210:	f7e9 f9fc 	bl	800060c <__aeabi_dmul>
 8017214:	3501      	adds	r5, #1
 8017216:	4680      	mov	r8, r0
 8017218:	4689      	mov	r9, r1
 801721a:	107f      	asrs	r7, r7, #1
 801721c:	3608      	adds	r6, #8
 801721e:	e7e5      	b.n	80171ec <_dtoa_r+0x36c>
 8017220:	f000 809b 	beq.w	801735a <_dtoa_r+0x4da>
 8017224:	9b00      	ldr	r3, [sp, #0]
 8017226:	4f9d      	ldr	r7, [pc, #628]	; (801749c <_dtoa_r+0x61c>)
 8017228:	425e      	negs	r6, r3
 801722a:	4b9b      	ldr	r3, [pc, #620]	; (8017498 <_dtoa_r+0x618>)
 801722c:	f006 020f 	and.w	r2, r6, #15
 8017230:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017238:	ec51 0b19 	vmov	r0, r1, d9
 801723c:	f7e9 f9e6 	bl	800060c <__aeabi_dmul>
 8017240:	1136      	asrs	r6, r6, #4
 8017242:	4682      	mov	sl, r0
 8017244:	468b      	mov	fp, r1
 8017246:	2300      	movs	r3, #0
 8017248:	2502      	movs	r5, #2
 801724a:	2e00      	cmp	r6, #0
 801724c:	d17a      	bne.n	8017344 <_dtoa_r+0x4c4>
 801724e:	2b00      	cmp	r3, #0
 8017250:	d1d3      	bne.n	80171fa <_dtoa_r+0x37a>
 8017252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017254:	2b00      	cmp	r3, #0
 8017256:	f000 8082 	beq.w	801735e <_dtoa_r+0x4de>
 801725a:	4b91      	ldr	r3, [pc, #580]	; (80174a0 <_dtoa_r+0x620>)
 801725c:	2200      	movs	r2, #0
 801725e:	4650      	mov	r0, sl
 8017260:	4659      	mov	r1, fp
 8017262:	f7e9 fc45 	bl	8000af0 <__aeabi_dcmplt>
 8017266:	2800      	cmp	r0, #0
 8017268:	d079      	beq.n	801735e <_dtoa_r+0x4de>
 801726a:	9b03      	ldr	r3, [sp, #12]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d076      	beq.n	801735e <_dtoa_r+0x4de>
 8017270:	9b02      	ldr	r3, [sp, #8]
 8017272:	2b00      	cmp	r3, #0
 8017274:	dd36      	ble.n	80172e4 <_dtoa_r+0x464>
 8017276:	9b00      	ldr	r3, [sp, #0]
 8017278:	4650      	mov	r0, sl
 801727a:	4659      	mov	r1, fp
 801727c:	1e5f      	subs	r7, r3, #1
 801727e:	2200      	movs	r2, #0
 8017280:	4b88      	ldr	r3, [pc, #544]	; (80174a4 <_dtoa_r+0x624>)
 8017282:	f7e9 f9c3 	bl	800060c <__aeabi_dmul>
 8017286:	9e02      	ldr	r6, [sp, #8]
 8017288:	4682      	mov	sl, r0
 801728a:	468b      	mov	fp, r1
 801728c:	3501      	adds	r5, #1
 801728e:	4628      	mov	r0, r5
 8017290:	f7e9 f952 	bl	8000538 <__aeabi_i2d>
 8017294:	4652      	mov	r2, sl
 8017296:	465b      	mov	r3, fp
 8017298:	f7e9 f9b8 	bl	800060c <__aeabi_dmul>
 801729c:	4b82      	ldr	r3, [pc, #520]	; (80174a8 <_dtoa_r+0x628>)
 801729e:	2200      	movs	r2, #0
 80172a0:	f7e8 fffe 	bl	80002a0 <__adddf3>
 80172a4:	46d0      	mov	r8, sl
 80172a6:	46d9      	mov	r9, fp
 80172a8:	4682      	mov	sl, r0
 80172aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80172ae:	2e00      	cmp	r6, #0
 80172b0:	d158      	bne.n	8017364 <_dtoa_r+0x4e4>
 80172b2:	4b7e      	ldr	r3, [pc, #504]	; (80174ac <_dtoa_r+0x62c>)
 80172b4:	2200      	movs	r2, #0
 80172b6:	4640      	mov	r0, r8
 80172b8:	4649      	mov	r1, r9
 80172ba:	f7e8 ffef 	bl	800029c <__aeabi_dsub>
 80172be:	4652      	mov	r2, sl
 80172c0:	465b      	mov	r3, fp
 80172c2:	4680      	mov	r8, r0
 80172c4:	4689      	mov	r9, r1
 80172c6:	f7e9 fc31 	bl	8000b2c <__aeabi_dcmpgt>
 80172ca:	2800      	cmp	r0, #0
 80172cc:	f040 8295 	bne.w	80177fa <_dtoa_r+0x97a>
 80172d0:	4652      	mov	r2, sl
 80172d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80172d6:	4640      	mov	r0, r8
 80172d8:	4649      	mov	r1, r9
 80172da:	f7e9 fc09 	bl	8000af0 <__aeabi_dcmplt>
 80172de:	2800      	cmp	r0, #0
 80172e0:	f040 8289 	bne.w	80177f6 <_dtoa_r+0x976>
 80172e4:	ec5b ab19 	vmov	sl, fp, d9
 80172e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	f2c0 8148 	blt.w	8017580 <_dtoa_r+0x700>
 80172f0:	9a00      	ldr	r2, [sp, #0]
 80172f2:	2a0e      	cmp	r2, #14
 80172f4:	f300 8144 	bgt.w	8017580 <_dtoa_r+0x700>
 80172f8:	4b67      	ldr	r3, [pc, #412]	; (8017498 <_dtoa_r+0x618>)
 80172fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80172fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017304:	2b00      	cmp	r3, #0
 8017306:	f280 80d5 	bge.w	80174b4 <_dtoa_r+0x634>
 801730a:	9b03      	ldr	r3, [sp, #12]
 801730c:	2b00      	cmp	r3, #0
 801730e:	f300 80d1 	bgt.w	80174b4 <_dtoa_r+0x634>
 8017312:	f040 826f 	bne.w	80177f4 <_dtoa_r+0x974>
 8017316:	4b65      	ldr	r3, [pc, #404]	; (80174ac <_dtoa_r+0x62c>)
 8017318:	2200      	movs	r2, #0
 801731a:	4640      	mov	r0, r8
 801731c:	4649      	mov	r1, r9
 801731e:	f7e9 f975 	bl	800060c <__aeabi_dmul>
 8017322:	4652      	mov	r2, sl
 8017324:	465b      	mov	r3, fp
 8017326:	f7e9 fbf7 	bl	8000b18 <__aeabi_dcmpge>
 801732a:	9e03      	ldr	r6, [sp, #12]
 801732c:	4637      	mov	r7, r6
 801732e:	2800      	cmp	r0, #0
 8017330:	f040 8245 	bne.w	80177be <_dtoa_r+0x93e>
 8017334:	9d01      	ldr	r5, [sp, #4]
 8017336:	2331      	movs	r3, #49	; 0x31
 8017338:	f805 3b01 	strb.w	r3, [r5], #1
 801733c:	9b00      	ldr	r3, [sp, #0]
 801733e:	3301      	adds	r3, #1
 8017340:	9300      	str	r3, [sp, #0]
 8017342:	e240      	b.n	80177c6 <_dtoa_r+0x946>
 8017344:	07f2      	lsls	r2, r6, #31
 8017346:	d505      	bpl.n	8017354 <_dtoa_r+0x4d4>
 8017348:	e9d7 2300 	ldrd	r2, r3, [r7]
 801734c:	f7e9 f95e 	bl	800060c <__aeabi_dmul>
 8017350:	3501      	adds	r5, #1
 8017352:	2301      	movs	r3, #1
 8017354:	1076      	asrs	r6, r6, #1
 8017356:	3708      	adds	r7, #8
 8017358:	e777      	b.n	801724a <_dtoa_r+0x3ca>
 801735a:	2502      	movs	r5, #2
 801735c:	e779      	b.n	8017252 <_dtoa_r+0x3d2>
 801735e:	9f00      	ldr	r7, [sp, #0]
 8017360:	9e03      	ldr	r6, [sp, #12]
 8017362:	e794      	b.n	801728e <_dtoa_r+0x40e>
 8017364:	9901      	ldr	r1, [sp, #4]
 8017366:	4b4c      	ldr	r3, [pc, #304]	; (8017498 <_dtoa_r+0x618>)
 8017368:	4431      	add	r1, r6
 801736a:	910d      	str	r1, [sp, #52]	; 0x34
 801736c:	9908      	ldr	r1, [sp, #32]
 801736e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017372:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017376:	2900      	cmp	r1, #0
 8017378:	d043      	beq.n	8017402 <_dtoa_r+0x582>
 801737a:	494d      	ldr	r1, [pc, #308]	; (80174b0 <_dtoa_r+0x630>)
 801737c:	2000      	movs	r0, #0
 801737e:	f7e9 fa6f 	bl	8000860 <__aeabi_ddiv>
 8017382:	4652      	mov	r2, sl
 8017384:	465b      	mov	r3, fp
 8017386:	f7e8 ff89 	bl	800029c <__aeabi_dsub>
 801738a:	9d01      	ldr	r5, [sp, #4]
 801738c:	4682      	mov	sl, r0
 801738e:	468b      	mov	fp, r1
 8017390:	4649      	mov	r1, r9
 8017392:	4640      	mov	r0, r8
 8017394:	f7e9 fbea 	bl	8000b6c <__aeabi_d2iz>
 8017398:	4606      	mov	r6, r0
 801739a:	f7e9 f8cd 	bl	8000538 <__aeabi_i2d>
 801739e:	4602      	mov	r2, r0
 80173a0:	460b      	mov	r3, r1
 80173a2:	4640      	mov	r0, r8
 80173a4:	4649      	mov	r1, r9
 80173a6:	f7e8 ff79 	bl	800029c <__aeabi_dsub>
 80173aa:	3630      	adds	r6, #48	; 0x30
 80173ac:	f805 6b01 	strb.w	r6, [r5], #1
 80173b0:	4652      	mov	r2, sl
 80173b2:	465b      	mov	r3, fp
 80173b4:	4680      	mov	r8, r0
 80173b6:	4689      	mov	r9, r1
 80173b8:	f7e9 fb9a 	bl	8000af0 <__aeabi_dcmplt>
 80173bc:	2800      	cmp	r0, #0
 80173be:	d163      	bne.n	8017488 <_dtoa_r+0x608>
 80173c0:	4642      	mov	r2, r8
 80173c2:	464b      	mov	r3, r9
 80173c4:	4936      	ldr	r1, [pc, #216]	; (80174a0 <_dtoa_r+0x620>)
 80173c6:	2000      	movs	r0, #0
 80173c8:	f7e8 ff68 	bl	800029c <__aeabi_dsub>
 80173cc:	4652      	mov	r2, sl
 80173ce:	465b      	mov	r3, fp
 80173d0:	f7e9 fb8e 	bl	8000af0 <__aeabi_dcmplt>
 80173d4:	2800      	cmp	r0, #0
 80173d6:	f040 80b5 	bne.w	8017544 <_dtoa_r+0x6c4>
 80173da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80173dc:	429d      	cmp	r5, r3
 80173de:	d081      	beq.n	80172e4 <_dtoa_r+0x464>
 80173e0:	4b30      	ldr	r3, [pc, #192]	; (80174a4 <_dtoa_r+0x624>)
 80173e2:	2200      	movs	r2, #0
 80173e4:	4650      	mov	r0, sl
 80173e6:	4659      	mov	r1, fp
 80173e8:	f7e9 f910 	bl	800060c <__aeabi_dmul>
 80173ec:	4b2d      	ldr	r3, [pc, #180]	; (80174a4 <_dtoa_r+0x624>)
 80173ee:	4682      	mov	sl, r0
 80173f0:	468b      	mov	fp, r1
 80173f2:	4640      	mov	r0, r8
 80173f4:	4649      	mov	r1, r9
 80173f6:	2200      	movs	r2, #0
 80173f8:	f7e9 f908 	bl	800060c <__aeabi_dmul>
 80173fc:	4680      	mov	r8, r0
 80173fe:	4689      	mov	r9, r1
 8017400:	e7c6      	b.n	8017390 <_dtoa_r+0x510>
 8017402:	4650      	mov	r0, sl
 8017404:	4659      	mov	r1, fp
 8017406:	f7e9 f901 	bl	800060c <__aeabi_dmul>
 801740a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801740c:	9d01      	ldr	r5, [sp, #4]
 801740e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017410:	4682      	mov	sl, r0
 8017412:	468b      	mov	fp, r1
 8017414:	4649      	mov	r1, r9
 8017416:	4640      	mov	r0, r8
 8017418:	f7e9 fba8 	bl	8000b6c <__aeabi_d2iz>
 801741c:	4606      	mov	r6, r0
 801741e:	f7e9 f88b 	bl	8000538 <__aeabi_i2d>
 8017422:	3630      	adds	r6, #48	; 0x30
 8017424:	4602      	mov	r2, r0
 8017426:	460b      	mov	r3, r1
 8017428:	4640      	mov	r0, r8
 801742a:	4649      	mov	r1, r9
 801742c:	f7e8 ff36 	bl	800029c <__aeabi_dsub>
 8017430:	f805 6b01 	strb.w	r6, [r5], #1
 8017434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017436:	429d      	cmp	r5, r3
 8017438:	4680      	mov	r8, r0
 801743a:	4689      	mov	r9, r1
 801743c:	f04f 0200 	mov.w	r2, #0
 8017440:	d124      	bne.n	801748c <_dtoa_r+0x60c>
 8017442:	4b1b      	ldr	r3, [pc, #108]	; (80174b0 <_dtoa_r+0x630>)
 8017444:	4650      	mov	r0, sl
 8017446:	4659      	mov	r1, fp
 8017448:	f7e8 ff2a 	bl	80002a0 <__adddf3>
 801744c:	4602      	mov	r2, r0
 801744e:	460b      	mov	r3, r1
 8017450:	4640      	mov	r0, r8
 8017452:	4649      	mov	r1, r9
 8017454:	f7e9 fb6a 	bl	8000b2c <__aeabi_dcmpgt>
 8017458:	2800      	cmp	r0, #0
 801745a:	d173      	bne.n	8017544 <_dtoa_r+0x6c4>
 801745c:	4652      	mov	r2, sl
 801745e:	465b      	mov	r3, fp
 8017460:	4913      	ldr	r1, [pc, #76]	; (80174b0 <_dtoa_r+0x630>)
 8017462:	2000      	movs	r0, #0
 8017464:	f7e8 ff1a 	bl	800029c <__aeabi_dsub>
 8017468:	4602      	mov	r2, r0
 801746a:	460b      	mov	r3, r1
 801746c:	4640      	mov	r0, r8
 801746e:	4649      	mov	r1, r9
 8017470:	f7e9 fb3e 	bl	8000af0 <__aeabi_dcmplt>
 8017474:	2800      	cmp	r0, #0
 8017476:	f43f af35 	beq.w	80172e4 <_dtoa_r+0x464>
 801747a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801747c:	1e6b      	subs	r3, r5, #1
 801747e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017480:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017484:	2b30      	cmp	r3, #48	; 0x30
 8017486:	d0f8      	beq.n	801747a <_dtoa_r+0x5fa>
 8017488:	9700      	str	r7, [sp, #0]
 801748a:	e049      	b.n	8017520 <_dtoa_r+0x6a0>
 801748c:	4b05      	ldr	r3, [pc, #20]	; (80174a4 <_dtoa_r+0x624>)
 801748e:	f7e9 f8bd 	bl	800060c <__aeabi_dmul>
 8017492:	4680      	mov	r8, r0
 8017494:	4689      	mov	r9, r1
 8017496:	e7bd      	b.n	8017414 <_dtoa_r+0x594>
 8017498:	08059ea8 	.word	0x08059ea8
 801749c:	08059e80 	.word	0x08059e80
 80174a0:	3ff00000 	.word	0x3ff00000
 80174a4:	40240000 	.word	0x40240000
 80174a8:	401c0000 	.word	0x401c0000
 80174ac:	40140000 	.word	0x40140000
 80174b0:	3fe00000 	.word	0x3fe00000
 80174b4:	9d01      	ldr	r5, [sp, #4]
 80174b6:	4656      	mov	r6, sl
 80174b8:	465f      	mov	r7, fp
 80174ba:	4642      	mov	r2, r8
 80174bc:	464b      	mov	r3, r9
 80174be:	4630      	mov	r0, r6
 80174c0:	4639      	mov	r1, r7
 80174c2:	f7e9 f9cd 	bl	8000860 <__aeabi_ddiv>
 80174c6:	f7e9 fb51 	bl	8000b6c <__aeabi_d2iz>
 80174ca:	4682      	mov	sl, r0
 80174cc:	f7e9 f834 	bl	8000538 <__aeabi_i2d>
 80174d0:	4642      	mov	r2, r8
 80174d2:	464b      	mov	r3, r9
 80174d4:	f7e9 f89a 	bl	800060c <__aeabi_dmul>
 80174d8:	4602      	mov	r2, r0
 80174da:	460b      	mov	r3, r1
 80174dc:	4630      	mov	r0, r6
 80174de:	4639      	mov	r1, r7
 80174e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80174e4:	f7e8 feda 	bl	800029c <__aeabi_dsub>
 80174e8:	f805 6b01 	strb.w	r6, [r5], #1
 80174ec:	9e01      	ldr	r6, [sp, #4]
 80174ee:	9f03      	ldr	r7, [sp, #12]
 80174f0:	1bae      	subs	r6, r5, r6
 80174f2:	42b7      	cmp	r7, r6
 80174f4:	4602      	mov	r2, r0
 80174f6:	460b      	mov	r3, r1
 80174f8:	d135      	bne.n	8017566 <_dtoa_r+0x6e6>
 80174fa:	f7e8 fed1 	bl	80002a0 <__adddf3>
 80174fe:	4642      	mov	r2, r8
 8017500:	464b      	mov	r3, r9
 8017502:	4606      	mov	r6, r0
 8017504:	460f      	mov	r7, r1
 8017506:	f7e9 fb11 	bl	8000b2c <__aeabi_dcmpgt>
 801750a:	b9d0      	cbnz	r0, 8017542 <_dtoa_r+0x6c2>
 801750c:	4642      	mov	r2, r8
 801750e:	464b      	mov	r3, r9
 8017510:	4630      	mov	r0, r6
 8017512:	4639      	mov	r1, r7
 8017514:	f7e9 fae2 	bl	8000adc <__aeabi_dcmpeq>
 8017518:	b110      	cbz	r0, 8017520 <_dtoa_r+0x6a0>
 801751a:	f01a 0f01 	tst.w	sl, #1
 801751e:	d110      	bne.n	8017542 <_dtoa_r+0x6c2>
 8017520:	4620      	mov	r0, r4
 8017522:	ee18 1a10 	vmov	r1, s16
 8017526:	f001 f887 	bl	8018638 <_Bfree>
 801752a:	2300      	movs	r3, #0
 801752c:	9800      	ldr	r0, [sp, #0]
 801752e:	702b      	strb	r3, [r5, #0]
 8017530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017532:	3001      	adds	r0, #1
 8017534:	6018      	str	r0, [r3, #0]
 8017536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017538:	2b00      	cmp	r3, #0
 801753a:	f43f acf1 	beq.w	8016f20 <_dtoa_r+0xa0>
 801753e:	601d      	str	r5, [r3, #0]
 8017540:	e4ee      	b.n	8016f20 <_dtoa_r+0xa0>
 8017542:	9f00      	ldr	r7, [sp, #0]
 8017544:	462b      	mov	r3, r5
 8017546:	461d      	mov	r5, r3
 8017548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801754c:	2a39      	cmp	r2, #57	; 0x39
 801754e:	d106      	bne.n	801755e <_dtoa_r+0x6de>
 8017550:	9a01      	ldr	r2, [sp, #4]
 8017552:	429a      	cmp	r2, r3
 8017554:	d1f7      	bne.n	8017546 <_dtoa_r+0x6c6>
 8017556:	9901      	ldr	r1, [sp, #4]
 8017558:	2230      	movs	r2, #48	; 0x30
 801755a:	3701      	adds	r7, #1
 801755c:	700a      	strb	r2, [r1, #0]
 801755e:	781a      	ldrb	r2, [r3, #0]
 8017560:	3201      	adds	r2, #1
 8017562:	701a      	strb	r2, [r3, #0]
 8017564:	e790      	b.n	8017488 <_dtoa_r+0x608>
 8017566:	4ba6      	ldr	r3, [pc, #664]	; (8017800 <_dtoa_r+0x980>)
 8017568:	2200      	movs	r2, #0
 801756a:	f7e9 f84f 	bl	800060c <__aeabi_dmul>
 801756e:	2200      	movs	r2, #0
 8017570:	2300      	movs	r3, #0
 8017572:	4606      	mov	r6, r0
 8017574:	460f      	mov	r7, r1
 8017576:	f7e9 fab1 	bl	8000adc <__aeabi_dcmpeq>
 801757a:	2800      	cmp	r0, #0
 801757c:	d09d      	beq.n	80174ba <_dtoa_r+0x63a>
 801757e:	e7cf      	b.n	8017520 <_dtoa_r+0x6a0>
 8017580:	9a08      	ldr	r2, [sp, #32]
 8017582:	2a00      	cmp	r2, #0
 8017584:	f000 80d7 	beq.w	8017736 <_dtoa_r+0x8b6>
 8017588:	9a06      	ldr	r2, [sp, #24]
 801758a:	2a01      	cmp	r2, #1
 801758c:	f300 80ba 	bgt.w	8017704 <_dtoa_r+0x884>
 8017590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017592:	2a00      	cmp	r2, #0
 8017594:	f000 80b2 	beq.w	80176fc <_dtoa_r+0x87c>
 8017598:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801759c:	9e07      	ldr	r6, [sp, #28]
 801759e:	9d04      	ldr	r5, [sp, #16]
 80175a0:	9a04      	ldr	r2, [sp, #16]
 80175a2:	441a      	add	r2, r3
 80175a4:	9204      	str	r2, [sp, #16]
 80175a6:	9a05      	ldr	r2, [sp, #20]
 80175a8:	2101      	movs	r1, #1
 80175aa:	441a      	add	r2, r3
 80175ac:	4620      	mov	r0, r4
 80175ae:	9205      	str	r2, [sp, #20]
 80175b0:	f001 f944 	bl	801883c <__i2b>
 80175b4:	4607      	mov	r7, r0
 80175b6:	2d00      	cmp	r5, #0
 80175b8:	dd0c      	ble.n	80175d4 <_dtoa_r+0x754>
 80175ba:	9b05      	ldr	r3, [sp, #20]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	dd09      	ble.n	80175d4 <_dtoa_r+0x754>
 80175c0:	42ab      	cmp	r3, r5
 80175c2:	9a04      	ldr	r2, [sp, #16]
 80175c4:	bfa8      	it	ge
 80175c6:	462b      	movge	r3, r5
 80175c8:	1ad2      	subs	r2, r2, r3
 80175ca:	9204      	str	r2, [sp, #16]
 80175cc:	9a05      	ldr	r2, [sp, #20]
 80175ce:	1aed      	subs	r5, r5, r3
 80175d0:	1ad3      	subs	r3, r2, r3
 80175d2:	9305      	str	r3, [sp, #20]
 80175d4:	9b07      	ldr	r3, [sp, #28]
 80175d6:	b31b      	cbz	r3, 8017620 <_dtoa_r+0x7a0>
 80175d8:	9b08      	ldr	r3, [sp, #32]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	f000 80af 	beq.w	801773e <_dtoa_r+0x8be>
 80175e0:	2e00      	cmp	r6, #0
 80175e2:	dd13      	ble.n	801760c <_dtoa_r+0x78c>
 80175e4:	4639      	mov	r1, r7
 80175e6:	4632      	mov	r2, r6
 80175e8:	4620      	mov	r0, r4
 80175ea:	f001 f9e7 	bl	80189bc <__pow5mult>
 80175ee:	ee18 2a10 	vmov	r2, s16
 80175f2:	4601      	mov	r1, r0
 80175f4:	4607      	mov	r7, r0
 80175f6:	4620      	mov	r0, r4
 80175f8:	f001 f936 	bl	8018868 <__multiply>
 80175fc:	ee18 1a10 	vmov	r1, s16
 8017600:	4680      	mov	r8, r0
 8017602:	4620      	mov	r0, r4
 8017604:	f001 f818 	bl	8018638 <_Bfree>
 8017608:	ee08 8a10 	vmov	s16, r8
 801760c:	9b07      	ldr	r3, [sp, #28]
 801760e:	1b9a      	subs	r2, r3, r6
 8017610:	d006      	beq.n	8017620 <_dtoa_r+0x7a0>
 8017612:	ee18 1a10 	vmov	r1, s16
 8017616:	4620      	mov	r0, r4
 8017618:	f001 f9d0 	bl	80189bc <__pow5mult>
 801761c:	ee08 0a10 	vmov	s16, r0
 8017620:	2101      	movs	r1, #1
 8017622:	4620      	mov	r0, r4
 8017624:	f001 f90a 	bl	801883c <__i2b>
 8017628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801762a:	2b00      	cmp	r3, #0
 801762c:	4606      	mov	r6, r0
 801762e:	f340 8088 	ble.w	8017742 <_dtoa_r+0x8c2>
 8017632:	461a      	mov	r2, r3
 8017634:	4601      	mov	r1, r0
 8017636:	4620      	mov	r0, r4
 8017638:	f001 f9c0 	bl	80189bc <__pow5mult>
 801763c:	9b06      	ldr	r3, [sp, #24]
 801763e:	2b01      	cmp	r3, #1
 8017640:	4606      	mov	r6, r0
 8017642:	f340 8081 	ble.w	8017748 <_dtoa_r+0x8c8>
 8017646:	f04f 0800 	mov.w	r8, #0
 801764a:	6933      	ldr	r3, [r6, #16]
 801764c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017650:	6918      	ldr	r0, [r3, #16]
 8017652:	f001 f8a3 	bl	801879c <__hi0bits>
 8017656:	f1c0 0020 	rsb	r0, r0, #32
 801765a:	9b05      	ldr	r3, [sp, #20]
 801765c:	4418      	add	r0, r3
 801765e:	f010 001f 	ands.w	r0, r0, #31
 8017662:	f000 8092 	beq.w	801778a <_dtoa_r+0x90a>
 8017666:	f1c0 0320 	rsb	r3, r0, #32
 801766a:	2b04      	cmp	r3, #4
 801766c:	f340 808a 	ble.w	8017784 <_dtoa_r+0x904>
 8017670:	f1c0 001c 	rsb	r0, r0, #28
 8017674:	9b04      	ldr	r3, [sp, #16]
 8017676:	4403      	add	r3, r0
 8017678:	9304      	str	r3, [sp, #16]
 801767a:	9b05      	ldr	r3, [sp, #20]
 801767c:	4403      	add	r3, r0
 801767e:	4405      	add	r5, r0
 8017680:	9305      	str	r3, [sp, #20]
 8017682:	9b04      	ldr	r3, [sp, #16]
 8017684:	2b00      	cmp	r3, #0
 8017686:	dd07      	ble.n	8017698 <_dtoa_r+0x818>
 8017688:	ee18 1a10 	vmov	r1, s16
 801768c:	461a      	mov	r2, r3
 801768e:	4620      	mov	r0, r4
 8017690:	f001 f9ee 	bl	8018a70 <__lshift>
 8017694:	ee08 0a10 	vmov	s16, r0
 8017698:	9b05      	ldr	r3, [sp, #20]
 801769a:	2b00      	cmp	r3, #0
 801769c:	dd05      	ble.n	80176aa <_dtoa_r+0x82a>
 801769e:	4631      	mov	r1, r6
 80176a0:	461a      	mov	r2, r3
 80176a2:	4620      	mov	r0, r4
 80176a4:	f001 f9e4 	bl	8018a70 <__lshift>
 80176a8:	4606      	mov	r6, r0
 80176aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d06e      	beq.n	801778e <_dtoa_r+0x90e>
 80176b0:	ee18 0a10 	vmov	r0, s16
 80176b4:	4631      	mov	r1, r6
 80176b6:	f001 fa4b 	bl	8018b50 <__mcmp>
 80176ba:	2800      	cmp	r0, #0
 80176bc:	da67      	bge.n	801778e <_dtoa_r+0x90e>
 80176be:	9b00      	ldr	r3, [sp, #0]
 80176c0:	3b01      	subs	r3, #1
 80176c2:	ee18 1a10 	vmov	r1, s16
 80176c6:	9300      	str	r3, [sp, #0]
 80176c8:	220a      	movs	r2, #10
 80176ca:	2300      	movs	r3, #0
 80176cc:	4620      	mov	r0, r4
 80176ce:	f000 ffd5 	bl	801867c <__multadd>
 80176d2:	9b08      	ldr	r3, [sp, #32]
 80176d4:	ee08 0a10 	vmov	s16, r0
 80176d8:	2b00      	cmp	r3, #0
 80176da:	f000 81b1 	beq.w	8017a40 <_dtoa_r+0xbc0>
 80176de:	2300      	movs	r3, #0
 80176e0:	4639      	mov	r1, r7
 80176e2:	220a      	movs	r2, #10
 80176e4:	4620      	mov	r0, r4
 80176e6:	f000 ffc9 	bl	801867c <__multadd>
 80176ea:	9b02      	ldr	r3, [sp, #8]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	4607      	mov	r7, r0
 80176f0:	f300 808e 	bgt.w	8017810 <_dtoa_r+0x990>
 80176f4:	9b06      	ldr	r3, [sp, #24]
 80176f6:	2b02      	cmp	r3, #2
 80176f8:	dc51      	bgt.n	801779e <_dtoa_r+0x91e>
 80176fa:	e089      	b.n	8017810 <_dtoa_r+0x990>
 80176fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80176fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017702:	e74b      	b.n	801759c <_dtoa_r+0x71c>
 8017704:	9b03      	ldr	r3, [sp, #12]
 8017706:	1e5e      	subs	r6, r3, #1
 8017708:	9b07      	ldr	r3, [sp, #28]
 801770a:	42b3      	cmp	r3, r6
 801770c:	bfbf      	itttt	lt
 801770e:	9b07      	ldrlt	r3, [sp, #28]
 8017710:	9607      	strlt	r6, [sp, #28]
 8017712:	1af2      	sublt	r2, r6, r3
 8017714:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8017716:	bfb6      	itet	lt
 8017718:	189b      	addlt	r3, r3, r2
 801771a:	1b9e      	subge	r6, r3, r6
 801771c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801771e:	9b03      	ldr	r3, [sp, #12]
 8017720:	bfb8      	it	lt
 8017722:	2600      	movlt	r6, #0
 8017724:	2b00      	cmp	r3, #0
 8017726:	bfb7      	itett	lt
 8017728:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801772c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8017730:	1a9d      	sublt	r5, r3, r2
 8017732:	2300      	movlt	r3, #0
 8017734:	e734      	b.n	80175a0 <_dtoa_r+0x720>
 8017736:	9e07      	ldr	r6, [sp, #28]
 8017738:	9d04      	ldr	r5, [sp, #16]
 801773a:	9f08      	ldr	r7, [sp, #32]
 801773c:	e73b      	b.n	80175b6 <_dtoa_r+0x736>
 801773e:	9a07      	ldr	r2, [sp, #28]
 8017740:	e767      	b.n	8017612 <_dtoa_r+0x792>
 8017742:	9b06      	ldr	r3, [sp, #24]
 8017744:	2b01      	cmp	r3, #1
 8017746:	dc18      	bgt.n	801777a <_dtoa_r+0x8fa>
 8017748:	f1ba 0f00 	cmp.w	sl, #0
 801774c:	d115      	bne.n	801777a <_dtoa_r+0x8fa>
 801774e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017752:	b993      	cbnz	r3, 801777a <_dtoa_r+0x8fa>
 8017754:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017758:	0d1b      	lsrs	r3, r3, #20
 801775a:	051b      	lsls	r3, r3, #20
 801775c:	b183      	cbz	r3, 8017780 <_dtoa_r+0x900>
 801775e:	9b04      	ldr	r3, [sp, #16]
 8017760:	3301      	adds	r3, #1
 8017762:	9304      	str	r3, [sp, #16]
 8017764:	9b05      	ldr	r3, [sp, #20]
 8017766:	3301      	adds	r3, #1
 8017768:	9305      	str	r3, [sp, #20]
 801776a:	f04f 0801 	mov.w	r8, #1
 801776e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017770:	2b00      	cmp	r3, #0
 8017772:	f47f af6a 	bne.w	801764a <_dtoa_r+0x7ca>
 8017776:	2001      	movs	r0, #1
 8017778:	e76f      	b.n	801765a <_dtoa_r+0x7da>
 801777a:	f04f 0800 	mov.w	r8, #0
 801777e:	e7f6      	b.n	801776e <_dtoa_r+0x8ee>
 8017780:	4698      	mov	r8, r3
 8017782:	e7f4      	b.n	801776e <_dtoa_r+0x8ee>
 8017784:	f43f af7d 	beq.w	8017682 <_dtoa_r+0x802>
 8017788:	4618      	mov	r0, r3
 801778a:	301c      	adds	r0, #28
 801778c:	e772      	b.n	8017674 <_dtoa_r+0x7f4>
 801778e:	9b03      	ldr	r3, [sp, #12]
 8017790:	2b00      	cmp	r3, #0
 8017792:	dc37      	bgt.n	8017804 <_dtoa_r+0x984>
 8017794:	9b06      	ldr	r3, [sp, #24]
 8017796:	2b02      	cmp	r3, #2
 8017798:	dd34      	ble.n	8017804 <_dtoa_r+0x984>
 801779a:	9b03      	ldr	r3, [sp, #12]
 801779c:	9302      	str	r3, [sp, #8]
 801779e:	9b02      	ldr	r3, [sp, #8]
 80177a0:	b96b      	cbnz	r3, 80177be <_dtoa_r+0x93e>
 80177a2:	4631      	mov	r1, r6
 80177a4:	2205      	movs	r2, #5
 80177a6:	4620      	mov	r0, r4
 80177a8:	f000 ff68 	bl	801867c <__multadd>
 80177ac:	4601      	mov	r1, r0
 80177ae:	4606      	mov	r6, r0
 80177b0:	ee18 0a10 	vmov	r0, s16
 80177b4:	f001 f9cc 	bl	8018b50 <__mcmp>
 80177b8:	2800      	cmp	r0, #0
 80177ba:	f73f adbb 	bgt.w	8017334 <_dtoa_r+0x4b4>
 80177be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177c0:	9d01      	ldr	r5, [sp, #4]
 80177c2:	43db      	mvns	r3, r3
 80177c4:	9300      	str	r3, [sp, #0]
 80177c6:	f04f 0800 	mov.w	r8, #0
 80177ca:	4631      	mov	r1, r6
 80177cc:	4620      	mov	r0, r4
 80177ce:	f000 ff33 	bl	8018638 <_Bfree>
 80177d2:	2f00      	cmp	r7, #0
 80177d4:	f43f aea4 	beq.w	8017520 <_dtoa_r+0x6a0>
 80177d8:	f1b8 0f00 	cmp.w	r8, #0
 80177dc:	d005      	beq.n	80177ea <_dtoa_r+0x96a>
 80177de:	45b8      	cmp	r8, r7
 80177e0:	d003      	beq.n	80177ea <_dtoa_r+0x96a>
 80177e2:	4641      	mov	r1, r8
 80177e4:	4620      	mov	r0, r4
 80177e6:	f000 ff27 	bl	8018638 <_Bfree>
 80177ea:	4639      	mov	r1, r7
 80177ec:	4620      	mov	r0, r4
 80177ee:	f000 ff23 	bl	8018638 <_Bfree>
 80177f2:	e695      	b.n	8017520 <_dtoa_r+0x6a0>
 80177f4:	2600      	movs	r6, #0
 80177f6:	4637      	mov	r7, r6
 80177f8:	e7e1      	b.n	80177be <_dtoa_r+0x93e>
 80177fa:	9700      	str	r7, [sp, #0]
 80177fc:	4637      	mov	r7, r6
 80177fe:	e599      	b.n	8017334 <_dtoa_r+0x4b4>
 8017800:	40240000 	.word	0x40240000
 8017804:	9b08      	ldr	r3, [sp, #32]
 8017806:	2b00      	cmp	r3, #0
 8017808:	f000 80ca 	beq.w	80179a0 <_dtoa_r+0xb20>
 801780c:	9b03      	ldr	r3, [sp, #12]
 801780e:	9302      	str	r3, [sp, #8]
 8017810:	2d00      	cmp	r5, #0
 8017812:	dd05      	ble.n	8017820 <_dtoa_r+0x9a0>
 8017814:	4639      	mov	r1, r7
 8017816:	462a      	mov	r2, r5
 8017818:	4620      	mov	r0, r4
 801781a:	f001 f929 	bl	8018a70 <__lshift>
 801781e:	4607      	mov	r7, r0
 8017820:	f1b8 0f00 	cmp.w	r8, #0
 8017824:	d05b      	beq.n	80178de <_dtoa_r+0xa5e>
 8017826:	6879      	ldr	r1, [r7, #4]
 8017828:	4620      	mov	r0, r4
 801782a:	f000 fec5 	bl	80185b8 <_Balloc>
 801782e:	4605      	mov	r5, r0
 8017830:	b928      	cbnz	r0, 801783e <_dtoa_r+0x9be>
 8017832:	4b87      	ldr	r3, [pc, #540]	; (8017a50 <_dtoa_r+0xbd0>)
 8017834:	4602      	mov	r2, r0
 8017836:	f240 21ea 	movw	r1, #746	; 0x2ea
 801783a:	f7ff bb3b 	b.w	8016eb4 <_dtoa_r+0x34>
 801783e:	693a      	ldr	r2, [r7, #16]
 8017840:	3202      	adds	r2, #2
 8017842:	0092      	lsls	r2, r2, #2
 8017844:	f107 010c 	add.w	r1, r7, #12
 8017848:	300c      	adds	r0, #12
 801784a:	f7fd f8ef 	bl	8014a2c <memcpy>
 801784e:	2201      	movs	r2, #1
 8017850:	4629      	mov	r1, r5
 8017852:	4620      	mov	r0, r4
 8017854:	f001 f90c 	bl	8018a70 <__lshift>
 8017858:	9b01      	ldr	r3, [sp, #4]
 801785a:	f103 0901 	add.w	r9, r3, #1
 801785e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8017862:	4413      	add	r3, r2
 8017864:	9305      	str	r3, [sp, #20]
 8017866:	f00a 0301 	and.w	r3, sl, #1
 801786a:	46b8      	mov	r8, r7
 801786c:	9304      	str	r3, [sp, #16]
 801786e:	4607      	mov	r7, r0
 8017870:	4631      	mov	r1, r6
 8017872:	ee18 0a10 	vmov	r0, s16
 8017876:	f7ff fa77 	bl	8016d68 <quorem>
 801787a:	4641      	mov	r1, r8
 801787c:	9002      	str	r0, [sp, #8]
 801787e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8017882:	ee18 0a10 	vmov	r0, s16
 8017886:	f001 f963 	bl	8018b50 <__mcmp>
 801788a:	463a      	mov	r2, r7
 801788c:	9003      	str	r0, [sp, #12]
 801788e:	4631      	mov	r1, r6
 8017890:	4620      	mov	r0, r4
 8017892:	f001 f979 	bl	8018b88 <__mdiff>
 8017896:	68c2      	ldr	r2, [r0, #12]
 8017898:	f109 3bff 	add.w	fp, r9, #4294967295
 801789c:	4605      	mov	r5, r0
 801789e:	bb02      	cbnz	r2, 80178e2 <_dtoa_r+0xa62>
 80178a0:	4601      	mov	r1, r0
 80178a2:	ee18 0a10 	vmov	r0, s16
 80178a6:	f001 f953 	bl	8018b50 <__mcmp>
 80178aa:	4602      	mov	r2, r0
 80178ac:	4629      	mov	r1, r5
 80178ae:	4620      	mov	r0, r4
 80178b0:	9207      	str	r2, [sp, #28]
 80178b2:	f000 fec1 	bl	8018638 <_Bfree>
 80178b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80178ba:	ea43 0102 	orr.w	r1, r3, r2
 80178be:	9b04      	ldr	r3, [sp, #16]
 80178c0:	430b      	orrs	r3, r1
 80178c2:	464d      	mov	r5, r9
 80178c4:	d10f      	bne.n	80178e6 <_dtoa_r+0xa66>
 80178c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80178ca:	d02a      	beq.n	8017922 <_dtoa_r+0xaa2>
 80178cc:	9b03      	ldr	r3, [sp, #12]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	dd02      	ble.n	80178d8 <_dtoa_r+0xa58>
 80178d2:	9b02      	ldr	r3, [sp, #8]
 80178d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80178d8:	f88b a000 	strb.w	sl, [fp]
 80178dc:	e775      	b.n	80177ca <_dtoa_r+0x94a>
 80178de:	4638      	mov	r0, r7
 80178e0:	e7ba      	b.n	8017858 <_dtoa_r+0x9d8>
 80178e2:	2201      	movs	r2, #1
 80178e4:	e7e2      	b.n	80178ac <_dtoa_r+0xa2c>
 80178e6:	9b03      	ldr	r3, [sp, #12]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	db04      	blt.n	80178f6 <_dtoa_r+0xa76>
 80178ec:	9906      	ldr	r1, [sp, #24]
 80178ee:	430b      	orrs	r3, r1
 80178f0:	9904      	ldr	r1, [sp, #16]
 80178f2:	430b      	orrs	r3, r1
 80178f4:	d122      	bne.n	801793c <_dtoa_r+0xabc>
 80178f6:	2a00      	cmp	r2, #0
 80178f8:	ddee      	ble.n	80178d8 <_dtoa_r+0xa58>
 80178fa:	ee18 1a10 	vmov	r1, s16
 80178fe:	2201      	movs	r2, #1
 8017900:	4620      	mov	r0, r4
 8017902:	f001 f8b5 	bl	8018a70 <__lshift>
 8017906:	4631      	mov	r1, r6
 8017908:	ee08 0a10 	vmov	s16, r0
 801790c:	f001 f920 	bl	8018b50 <__mcmp>
 8017910:	2800      	cmp	r0, #0
 8017912:	dc03      	bgt.n	801791c <_dtoa_r+0xa9c>
 8017914:	d1e0      	bne.n	80178d8 <_dtoa_r+0xa58>
 8017916:	f01a 0f01 	tst.w	sl, #1
 801791a:	d0dd      	beq.n	80178d8 <_dtoa_r+0xa58>
 801791c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017920:	d1d7      	bne.n	80178d2 <_dtoa_r+0xa52>
 8017922:	2339      	movs	r3, #57	; 0x39
 8017924:	f88b 3000 	strb.w	r3, [fp]
 8017928:	462b      	mov	r3, r5
 801792a:	461d      	mov	r5, r3
 801792c:	3b01      	subs	r3, #1
 801792e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017932:	2a39      	cmp	r2, #57	; 0x39
 8017934:	d071      	beq.n	8017a1a <_dtoa_r+0xb9a>
 8017936:	3201      	adds	r2, #1
 8017938:	701a      	strb	r2, [r3, #0]
 801793a:	e746      	b.n	80177ca <_dtoa_r+0x94a>
 801793c:	2a00      	cmp	r2, #0
 801793e:	dd07      	ble.n	8017950 <_dtoa_r+0xad0>
 8017940:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017944:	d0ed      	beq.n	8017922 <_dtoa_r+0xaa2>
 8017946:	f10a 0301 	add.w	r3, sl, #1
 801794a:	f88b 3000 	strb.w	r3, [fp]
 801794e:	e73c      	b.n	80177ca <_dtoa_r+0x94a>
 8017950:	9b05      	ldr	r3, [sp, #20]
 8017952:	f809 ac01 	strb.w	sl, [r9, #-1]
 8017956:	4599      	cmp	r9, r3
 8017958:	d047      	beq.n	80179ea <_dtoa_r+0xb6a>
 801795a:	ee18 1a10 	vmov	r1, s16
 801795e:	2300      	movs	r3, #0
 8017960:	220a      	movs	r2, #10
 8017962:	4620      	mov	r0, r4
 8017964:	f000 fe8a 	bl	801867c <__multadd>
 8017968:	45b8      	cmp	r8, r7
 801796a:	ee08 0a10 	vmov	s16, r0
 801796e:	f04f 0300 	mov.w	r3, #0
 8017972:	f04f 020a 	mov.w	r2, #10
 8017976:	4641      	mov	r1, r8
 8017978:	4620      	mov	r0, r4
 801797a:	d106      	bne.n	801798a <_dtoa_r+0xb0a>
 801797c:	f000 fe7e 	bl	801867c <__multadd>
 8017980:	4680      	mov	r8, r0
 8017982:	4607      	mov	r7, r0
 8017984:	f109 0901 	add.w	r9, r9, #1
 8017988:	e772      	b.n	8017870 <_dtoa_r+0x9f0>
 801798a:	f000 fe77 	bl	801867c <__multadd>
 801798e:	4639      	mov	r1, r7
 8017990:	4680      	mov	r8, r0
 8017992:	2300      	movs	r3, #0
 8017994:	220a      	movs	r2, #10
 8017996:	4620      	mov	r0, r4
 8017998:	f000 fe70 	bl	801867c <__multadd>
 801799c:	4607      	mov	r7, r0
 801799e:	e7f1      	b.n	8017984 <_dtoa_r+0xb04>
 80179a0:	9b03      	ldr	r3, [sp, #12]
 80179a2:	9302      	str	r3, [sp, #8]
 80179a4:	9d01      	ldr	r5, [sp, #4]
 80179a6:	ee18 0a10 	vmov	r0, s16
 80179aa:	4631      	mov	r1, r6
 80179ac:	f7ff f9dc 	bl	8016d68 <quorem>
 80179b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80179b4:	9b01      	ldr	r3, [sp, #4]
 80179b6:	f805 ab01 	strb.w	sl, [r5], #1
 80179ba:	1aea      	subs	r2, r5, r3
 80179bc:	9b02      	ldr	r3, [sp, #8]
 80179be:	4293      	cmp	r3, r2
 80179c0:	dd09      	ble.n	80179d6 <_dtoa_r+0xb56>
 80179c2:	ee18 1a10 	vmov	r1, s16
 80179c6:	2300      	movs	r3, #0
 80179c8:	220a      	movs	r2, #10
 80179ca:	4620      	mov	r0, r4
 80179cc:	f000 fe56 	bl	801867c <__multadd>
 80179d0:	ee08 0a10 	vmov	s16, r0
 80179d4:	e7e7      	b.n	80179a6 <_dtoa_r+0xb26>
 80179d6:	9b02      	ldr	r3, [sp, #8]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	bfc8      	it	gt
 80179dc:	461d      	movgt	r5, r3
 80179de:	9b01      	ldr	r3, [sp, #4]
 80179e0:	bfd8      	it	le
 80179e2:	2501      	movle	r5, #1
 80179e4:	441d      	add	r5, r3
 80179e6:	f04f 0800 	mov.w	r8, #0
 80179ea:	ee18 1a10 	vmov	r1, s16
 80179ee:	2201      	movs	r2, #1
 80179f0:	4620      	mov	r0, r4
 80179f2:	f001 f83d 	bl	8018a70 <__lshift>
 80179f6:	4631      	mov	r1, r6
 80179f8:	ee08 0a10 	vmov	s16, r0
 80179fc:	f001 f8a8 	bl	8018b50 <__mcmp>
 8017a00:	2800      	cmp	r0, #0
 8017a02:	dc91      	bgt.n	8017928 <_dtoa_r+0xaa8>
 8017a04:	d102      	bne.n	8017a0c <_dtoa_r+0xb8c>
 8017a06:	f01a 0f01 	tst.w	sl, #1
 8017a0a:	d18d      	bne.n	8017928 <_dtoa_r+0xaa8>
 8017a0c:	462b      	mov	r3, r5
 8017a0e:	461d      	mov	r5, r3
 8017a10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017a14:	2a30      	cmp	r2, #48	; 0x30
 8017a16:	d0fa      	beq.n	8017a0e <_dtoa_r+0xb8e>
 8017a18:	e6d7      	b.n	80177ca <_dtoa_r+0x94a>
 8017a1a:	9a01      	ldr	r2, [sp, #4]
 8017a1c:	429a      	cmp	r2, r3
 8017a1e:	d184      	bne.n	801792a <_dtoa_r+0xaaa>
 8017a20:	9b00      	ldr	r3, [sp, #0]
 8017a22:	3301      	adds	r3, #1
 8017a24:	9300      	str	r3, [sp, #0]
 8017a26:	2331      	movs	r3, #49	; 0x31
 8017a28:	7013      	strb	r3, [r2, #0]
 8017a2a:	e6ce      	b.n	80177ca <_dtoa_r+0x94a>
 8017a2c:	4b09      	ldr	r3, [pc, #36]	; (8017a54 <_dtoa_r+0xbd4>)
 8017a2e:	f7ff ba95 	b.w	8016f5c <_dtoa_r+0xdc>
 8017a32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	f47f aa6e 	bne.w	8016f16 <_dtoa_r+0x96>
 8017a3a:	4b07      	ldr	r3, [pc, #28]	; (8017a58 <_dtoa_r+0xbd8>)
 8017a3c:	f7ff ba8e 	b.w	8016f5c <_dtoa_r+0xdc>
 8017a40:	9b02      	ldr	r3, [sp, #8]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	dcae      	bgt.n	80179a4 <_dtoa_r+0xb24>
 8017a46:	9b06      	ldr	r3, [sp, #24]
 8017a48:	2b02      	cmp	r3, #2
 8017a4a:	f73f aea8 	bgt.w	801779e <_dtoa_r+0x91e>
 8017a4e:	e7a9      	b.n	80179a4 <_dtoa_r+0xb24>
 8017a50:	08059d30 	.word	0x08059d30
 8017a54:	08059b31 	.word	0x08059b31
 8017a58:	08059cb1 	.word	0x08059cb1

08017a5c <__sflush_r>:
 8017a5c:	898a      	ldrh	r2, [r1, #12]
 8017a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a62:	4605      	mov	r5, r0
 8017a64:	0710      	lsls	r0, r2, #28
 8017a66:	460c      	mov	r4, r1
 8017a68:	d458      	bmi.n	8017b1c <__sflush_r+0xc0>
 8017a6a:	684b      	ldr	r3, [r1, #4]
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	dc05      	bgt.n	8017a7c <__sflush_r+0x20>
 8017a70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	dc02      	bgt.n	8017a7c <__sflush_r+0x20>
 8017a76:	2000      	movs	r0, #0
 8017a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017a7e:	2e00      	cmp	r6, #0
 8017a80:	d0f9      	beq.n	8017a76 <__sflush_r+0x1a>
 8017a82:	2300      	movs	r3, #0
 8017a84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017a88:	682f      	ldr	r7, [r5, #0]
 8017a8a:	602b      	str	r3, [r5, #0]
 8017a8c:	d032      	beq.n	8017af4 <__sflush_r+0x98>
 8017a8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017a90:	89a3      	ldrh	r3, [r4, #12]
 8017a92:	075a      	lsls	r2, r3, #29
 8017a94:	d505      	bpl.n	8017aa2 <__sflush_r+0x46>
 8017a96:	6863      	ldr	r3, [r4, #4]
 8017a98:	1ac0      	subs	r0, r0, r3
 8017a9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a9c:	b10b      	cbz	r3, 8017aa2 <__sflush_r+0x46>
 8017a9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017aa0:	1ac0      	subs	r0, r0, r3
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	4602      	mov	r2, r0
 8017aa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017aa8:	6a21      	ldr	r1, [r4, #32]
 8017aaa:	4628      	mov	r0, r5
 8017aac:	47b0      	blx	r6
 8017aae:	1c43      	adds	r3, r0, #1
 8017ab0:	89a3      	ldrh	r3, [r4, #12]
 8017ab2:	d106      	bne.n	8017ac2 <__sflush_r+0x66>
 8017ab4:	6829      	ldr	r1, [r5, #0]
 8017ab6:	291d      	cmp	r1, #29
 8017ab8:	d82c      	bhi.n	8017b14 <__sflush_r+0xb8>
 8017aba:	4a2a      	ldr	r2, [pc, #168]	; (8017b64 <__sflush_r+0x108>)
 8017abc:	40ca      	lsrs	r2, r1
 8017abe:	07d6      	lsls	r6, r2, #31
 8017ac0:	d528      	bpl.n	8017b14 <__sflush_r+0xb8>
 8017ac2:	2200      	movs	r2, #0
 8017ac4:	6062      	str	r2, [r4, #4]
 8017ac6:	04d9      	lsls	r1, r3, #19
 8017ac8:	6922      	ldr	r2, [r4, #16]
 8017aca:	6022      	str	r2, [r4, #0]
 8017acc:	d504      	bpl.n	8017ad8 <__sflush_r+0x7c>
 8017ace:	1c42      	adds	r2, r0, #1
 8017ad0:	d101      	bne.n	8017ad6 <__sflush_r+0x7a>
 8017ad2:	682b      	ldr	r3, [r5, #0]
 8017ad4:	b903      	cbnz	r3, 8017ad8 <__sflush_r+0x7c>
 8017ad6:	6560      	str	r0, [r4, #84]	; 0x54
 8017ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017ada:	602f      	str	r7, [r5, #0]
 8017adc:	2900      	cmp	r1, #0
 8017ade:	d0ca      	beq.n	8017a76 <__sflush_r+0x1a>
 8017ae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017ae4:	4299      	cmp	r1, r3
 8017ae6:	d002      	beq.n	8017aee <__sflush_r+0x92>
 8017ae8:	4628      	mov	r0, r5
 8017aea:	f7fc ffe5 	bl	8014ab8 <_free_r>
 8017aee:	2000      	movs	r0, #0
 8017af0:	6360      	str	r0, [r4, #52]	; 0x34
 8017af2:	e7c1      	b.n	8017a78 <__sflush_r+0x1c>
 8017af4:	6a21      	ldr	r1, [r4, #32]
 8017af6:	2301      	movs	r3, #1
 8017af8:	4628      	mov	r0, r5
 8017afa:	47b0      	blx	r6
 8017afc:	1c41      	adds	r1, r0, #1
 8017afe:	d1c7      	bne.n	8017a90 <__sflush_r+0x34>
 8017b00:	682b      	ldr	r3, [r5, #0]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d0c4      	beq.n	8017a90 <__sflush_r+0x34>
 8017b06:	2b1d      	cmp	r3, #29
 8017b08:	d001      	beq.n	8017b0e <__sflush_r+0xb2>
 8017b0a:	2b16      	cmp	r3, #22
 8017b0c:	d101      	bne.n	8017b12 <__sflush_r+0xb6>
 8017b0e:	602f      	str	r7, [r5, #0]
 8017b10:	e7b1      	b.n	8017a76 <__sflush_r+0x1a>
 8017b12:	89a3      	ldrh	r3, [r4, #12]
 8017b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b18:	81a3      	strh	r3, [r4, #12]
 8017b1a:	e7ad      	b.n	8017a78 <__sflush_r+0x1c>
 8017b1c:	690f      	ldr	r7, [r1, #16]
 8017b1e:	2f00      	cmp	r7, #0
 8017b20:	d0a9      	beq.n	8017a76 <__sflush_r+0x1a>
 8017b22:	0793      	lsls	r3, r2, #30
 8017b24:	680e      	ldr	r6, [r1, #0]
 8017b26:	bf08      	it	eq
 8017b28:	694b      	ldreq	r3, [r1, #20]
 8017b2a:	600f      	str	r7, [r1, #0]
 8017b2c:	bf18      	it	ne
 8017b2e:	2300      	movne	r3, #0
 8017b30:	eba6 0807 	sub.w	r8, r6, r7
 8017b34:	608b      	str	r3, [r1, #8]
 8017b36:	f1b8 0f00 	cmp.w	r8, #0
 8017b3a:	dd9c      	ble.n	8017a76 <__sflush_r+0x1a>
 8017b3c:	6a21      	ldr	r1, [r4, #32]
 8017b3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017b40:	4643      	mov	r3, r8
 8017b42:	463a      	mov	r2, r7
 8017b44:	4628      	mov	r0, r5
 8017b46:	47b0      	blx	r6
 8017b48:	2800      	cmp	r0, #0
 8017b4a:	dc06      	bgt.n	8017b5a <__sflush_r+0xfe>
 8017b4c:	89a3      	ldrh	r3, [r4, #12]
 8017b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b52:	81a3      	strh	r3, [r4, #12]
 8017b54:	f04f 30ff 	mov.w	r0, #4294967295
 8017b58:	e78e      	b.n	8017a78 <__sflush_r+0x1c>
 8017b5a:	4407      	add	r7, r0
 8017b5c:	eba8 0800 	sub.w	r8, r8, r0
 8017b60:	e7e9      	b.n	8017b36 <__sflush_r+0xda>
 8017b62:	bf00      	nop
 8017b64:	20400001 	.word	0x20400001

08017b68 <_fflush_r>:
 8017b68:	b538      	push	{r3, r4, r5, lr}
 8017b6a:	690b      	ldr	r3, [r1, #16]
 8017b6c:	4605      	mov	r5, r0
 8017b6e:	460c      	mov	r4, r1
 8017b70:	b913      	cbnz	r3, 8017b78 <_fflush_r+0x10>
 8017b72:	2500      	movs	r5, #0
 8017b74:	4628      	mov	r0, r5
 8017b76:	bd38      	pop	{r3, r4, r5, pc}
 8017b78:	b118      	cbz	r0, 8017b82 <_fflush_r+0x1a>
 8017b7a:	6983      	ldr	r3, [r0, #24]
 8017b7c:	b90b      	cbnz	r3, 8017b82 <_fflush_r+0x1a>
 8017b7e:	f000 f887 	bl	8017c90 <__sinit>
 8017b82:	4b14      	ldr	r3, [pc, #80]	; (8017bd4 <_fflush_r+0x6c>)
 8017b84:	429c      	cmp	r4, r3
 8017b86:	d11b      	bne.n	8017bc0 <_fflush_r+0x58>
 8017b88:	686c      	ldr	r4, [r5, #4]
 8017b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d0ef      	beq.n	8017b72 <_fflush_r+0xa>
 8017b92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017b94:	07d0      	lsls	r0, r2, #31
 8017b96:	d404      	bmi.n	8017ba2 <_fflush_r+0x3a>
 8017b98:	0599      	lsls	r1, r3, #22
 8017b9a:	d402      	bmi.n	8017ba2 <_fflush_r+0x3a>
 8017b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b9e:	f7fc ff32 	bl	8014a06 <__retarget_lock_acquire_recursive>
 8017ba2:	4628      	mov	r0, r5
 8017ba4:	4621      	mov	r1, r4
 8017ba6:	f7ff ff59 	bl	8017a5c <__sflush_r>
 8017baa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017bac:	07da      	lsls	r2, r3, #31
 8017bae:	4605      	mov	r5, r0
 8017bb0:	d4e0      	bmi.n	8017b74 <_fflush_r+0xc>
 8017bb2:	89a3      	ldrh	r3, [r4, #12]
 8017bb4:	059b      	lsls	r3, r3, #22
 8017bb6:	d4dd      	bmi.n	8017b74 <_fflush_r+0xc>
 8017bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017bba:	f7fc ff25 	bl	8014a08 <__retarget_lock_release_recursive>
 8017bbe:	e7d9      	b.n	8017b74 <_fflush_r+0xc>
 8017bc0:	4b05      	ldr	r3, [pc, #20]	; (8017bd8 <_fflush_r+0x70>)
 8017bc2:	429c      	cmp	r4, r3
 8017bc4:	d101      	bne.n	8017bca <_fflush_r+0x62>
 8017bc6:	68ac      	ldr	r4, [r5, #8]
 8017bc8:	e7df      	b.n	8017b8a <_fflush_r+0x22>
 8017bca:	4b04      	ldr	r3, [pc, #16]	; (8017bdc <_fflush_r+0x74>)
 8017bcc:	429c      	cmp	r4, r3
 8017bce:	bf08      	it	eq
 8017bd0:	68ec      	ldreq	r4, [r5, #12]
 8017bd2:	e7da      	b.n	8017b8a <_fflush_r+0x22>
 8017bd4:	08059d64 	.word	0x08059d64
 8017bd8:	08059d84 	.word	0x08059d84
 8017bdc:	08059d44 	.word	0x08059d44

08017be0 <std>:
 8017be0:	2300      	movs	r3, #0
 8017be2:	b510      	push	{r4, lr}
 8017be4:	4604      	mov	r4, r0
 8017be6:	e9c0 3300 	strd	r3, r3, [r0]
 8017bea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017bee:	6083      	str	r3, [r0, #8]
 8017bf0:	8181      	strh	r1, [r0, #12]
 8017bf2:	6643      	str	r3, [r0, #100]	; 0x64
 8017bf4:	81c2      	strh	r2, [r0, #14]
 8017bf6:	6183      	str	r3, [r0, #24]
 8017bf8:	4619      	mov	r1, r3
 8017bfa:	2208      	movs	r2, #8
 8017bfc:	305c      	adds	r0, #92	; 0x5c
 8017bfe:	f7fc ff3d 	bl	8014a7c <memset>
 8017c02:	4b05      	ldr	r3, [pc, #20]	; (8017c18 <std+0x38>)
 8017c04:	6263      	str	r3, [r4, #36]	; 0x24
 8017c06:	4b05      	ldr	r3, [pc, #20]	; (8017c1c <std+0x3c>)
 8017c08:	62a3      	str	r3, [r4, #40]	; 0x28
 8017c0a:	4b05      	ldr	r3, [pc, #20]	; (8017c20 <std+0x40>)
 8017c0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017c0e:	4b05      	ldr	r3, [pc, #20]	; (8017c24 <std+0x44>)
 8017c10:	6224      	str	r4, [r4, #32]
 8017c12:	6323      	str	r3, [r4, #48]	; 0x30
 8017c14:	bd10      	pop	{r4, pc}
 8017c16:	bf00      	nop
 8017c18:	08019251 	.word	0x08019251
 8017c1c:	08019273 	.word	0x08019273
 8017c20:	080192ab 	.word	0x080192ab
 8017c24:	080192cf 	.word	0x080192cf

08017c28 <_cleanup_r>:
 8017c28:	4901      	ldr	r1, [pc, #4]	; (8017c30 <_cleanup_r+0x8>)
 8017c2a:	f000 b8af 	b.w	8017d8c <_fwalk_reent>
 8017c2e:	bf00      	nop
 8017c30:	08017b69 	.word	0x08017b69

08017c34 <__sfmoreglue>:
 8017c34:	b570      	push	{r4, r5, r6, lr}
 8017c36:	2268      	movs	r2, #104	; 0x68
 8017c38:	1e4d      	subs	r5, r1, #1
 8017c3a:	4355      	muls	r5, r2
 8017c3c:	460e      	mov	r6, r1
 8017c3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017c42:	f7fc ffa5 	bl	8014b90 <_malloc_r>
 8017c46:	4604      	mov	r4, r0
 8017c48:	b140      	cbz	r0, 8017c5c <__sfmoreglue+0x28>
 8017c4a:	2100      	movs	r1, #0
 8017c4c:	e9c0 1600 	strd	r1, r6, [r0]
 8017c50:	300c      	adds	r0, #12
 8017c52:	60a0      	str	r0, [r4, #8]
 8017c54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017c58:	f7fc ff10 	bl	8014a7c <memset>
 8017c5c:	4620      	mov	r0, r4
 8017c5e:	bd70      	pop	{r4, r5, r6, pc}

08017c60 <__sfp_lock_acquire>:
 8017c60:	4801      	ldr	r0, [pc, #4]	; (8017c68 <__sfp_lock_acquire+0x8>)
 8017c62:	f7fc bed0 	b.w	8014a06 <__retarget_lock_acquire_recursive>
 8017c66:	bf00      	nop
 8017c68:	20002999 	.word	0x20002999

08017c6c <__sfp_lock_release>:
 8017c6c:	4801      	ldr	r0, [pc, #4]	; (8017c74 <__sfp_lock_release+0x8>)
 8017c6e:	f7fc becb 	b.w	8014a08 <__retarget_lock_release_recursive>
 8017c72:	bf00      	nop
 8017c74:	20002999 	.word	0x20002999

08017c78 <__sinit_lock_acquire>:
 8017c78:	4801      	ldr	r0, [pc, #4]	; (8017c80 <__sinit_lock_acquire+0x8>)
 8017c7a:	f7fc bec4 	b.w	8014a06 <__retarget_lock_acquire_recursive>
 8017c7e:	bf00      	nop
 8017c80:	2000299a 	.word	0x2000299a

08017c84 <__sinit_lock_release>:
 8017c84:	4801      	ldr	r0, [pc, #4]	; (8017c8c <__sinit_lock_release+0x8>)
 8017c86:	f7fc bebf 	b.w	8014a08 <__retarget_lock_release_recursive>
 8017c8a:	bf00      	nop
 8017c8c:	2000299a 	.word	0x2000299a

08017c90 <__sinit>:
 8017c90:	b510      	push	{r4, lr}
 8017c92:	4604      	mov	r4, r0
 8017c94:	f7ff fff0 	bl	8017c78 <__sinit_lock_acquire>
 8017c98:	69a3      	ldr	r3, [r4, #24]
 8017c9a:	b11b      	cbz	r3, 8017ca4 <__sinit+0x14>
 8017c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ca0:	f7ff bff0 	b.w	8017c84 <__sinit_lock_release>
 8017ca4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017ca8:	6523      	str	r3, [r4, #80]	; 0x50
 8017caa:	4b13      	ldr	r3, [pc, #76]	; (8017cf8 <__sinit+0x68>)
 8017cac:	4a13      	ldr	r2, [pc, #76]	; (8017cfc <__sinit+0x6c>)
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8017cb2:	42a3      	cmp	r3, r4
 8017cb4:	bf04      	itt	eq
 8017cb6:	2301      	moveq	r3, #1
 8017cb8:	61a3      	streq	r3, [r4, #24]
 8017cba:	4620      	mov	r0, r4
 8017cbc:	f000 f820 	bl	8017d00 <__sfp>
 8017cc0:	6060      	str	r0, [r4, #4]
 8017cc2:	4620      	mov	r0, r4
 8017cc4:	f000 f81c 	bl	8017d00 <__sfp>
 8017cc8:	60a0      	str	r0, [r4, #8]
 8017cca:	4620      	mov	r0, r4
 8017ccc:	f000 f818 	bl	8017d00 <__sfp>
 8017cd0:	2200      	movs	r2, #0
 8017cd2:	60e0      	str	r0, [r4, #12]
 8017cd4:	2104      	movs	r1, #4
 8017cd6:	6860      	ldr	r0, [r4, #4]
 8017cd8:	f7ff ff82 	bl	8017be0 <std>
 8017cdc:	68a0      	ldr	r0, [r4, #8]
 8017cde:	2201      	movs	r2, #1
 8017ce0:	2109      	movs	r1, #9
 8017ce2:	f7ff ff7d 	bl	8017be0 <std>
 8017ce6:	68e0      	ldr	r0, [r4, #12]
 8017ce8:	2202      	movs	r2, #2
 8017cea:	2112      	movs	r1, #18
 8017cec:	f7ff ff78 	bl	8017be0 <std>
 8017cf0:	2301      	movs	r3, #1
 8017cf2:	61a3      	str	r3, [r4, #24]
 8017cf4:	e7d2      	b.n	8017c9c <__sinit+0xc>
 8017cf6:	bf00      	nop
 8017cf8:	08059b0c 	.word	0x08059b0c
 8017cfc:	08017c29 	.word	0x08017c29

08017d00 <__sfp>:
 8017d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d02:	4607      	mov	r7, r0
 8017d04:	f7ff ffac 	bl	8017c60 <__sfp_lock_acquire>
 8017d08:	4b1e      	ldr	r3, [pc, #120]	; (8017d84 <__sfp+0x84>)
 8017d0a:	681e      	ldr	r6, [r3, #0]
 8017d0c:	69b3      	ldr	r3, [r6, #24]
 8017d0e:	b913      	cbnz	r3, 8017d16 <__sfp+0x16>
 8017d10:	4630      	mov	r0, r6
 8017d12:	f7ff ffbd 	bl	8017c90 <__sinit>
 8017d16:	3648      	adds	r6, #72	; 0x48
 8017d18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017d1c:	3b01      	subs	r3, #1
 8017d1e:	d503      	bpl.n	8017d28 <__sfp+0x28>
 8017d20:	6833      	ldr	r3, [r6, #0]
 8017d22:	b30b      	cbz	r3, 8017d68 <__sfp+0x68>
 8017d24:	6836      	ldr	r6, [r6, #0]
 8017d26:	e7f7      	b.n	8017d18 <__sfp+0x18>
 8017d28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017d2c:	b9d5      	cbnz	r5, 8017d64 <__sfp+0x64>
 8017d2e:	4b16      	ldr	r3, [pc, #88]	; (8017d88 <__sfp+0x88>)
 8017d30:	60e3      	str	r3, [r4, #12]
 8017d32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017d36:	6665      	str	r5, [r4, #100]	; 0x64
 8017d38:	f7fc fe64 	bl	8014a04 <__retarget_lock_init_recursive>
 8017d3c:	f7ff ff96 	bl	8017c6c <__sfp_lock_release>
 8017d40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017d44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017d48:	6025      	str	r5, [r4, #0]
 8017d4a:	61a5      	str	r5, [r4, #24]
 8017d4c:	2208      	movs	r2, #8
 8017d4e:	4629      	mov	r1, r5
 8017d50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017d54:	f7fc fe92 	bl	8014a7c <memset>
 8017d58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017d5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017d60:	4620      	mov	r0, r4
 8017d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d64:	3468      	adds	r4, #104	; 0x68
 8017d66:	e7d9      	b.n	8017d1c <__sfp+0x1c>
 8017d68:	2104      	movs	r1, #4
 8017d6a:	4638      	mov	r0, r7
 8017d6c:	f7ff ff62 	bl	8017c34 <__sfmoreglue>
 8017d70:	4604      	mov	r4, r0
 8017d72:	6030      	str	r0, [r6, #0]
 8017d74:	2800      	cmp	r0, #0
 8017d76:	d1d5      	bne.n	8017d24 <__sfp+0x24>
 8017d78:	f7ff ff78 	bl	8017c6c <__sfp_lock_release>
 8017d7c:	230c      	movs	r3, #12
 8017d7e:	603b      	str	r3, [r7, #0]
 8017d80:	e7ee      	b.n	8017d60 <__sfp+0x60>
 8017d82:	bf00      	nop
 8017d84:	08059b0c 	.word	0x08059b0c
 8017d88:	ffff0001 	.word	0xffff0001

08017d8c <_fwalk_reent>:
 8017d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d90:	4606      	mov	r6, r0
 8017d92:	4688      	mov	r8, r1
 8017d94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017d98:	2700      	movs	r7, #0
 8017d9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017d9e:	f1b9 0901 	subs.w	r9, r9, #1
 8017da2:	d505      	bpl.n	8017db0 <_fwalk_reent+0x24>
 8017da4:	6824      	ldr	r4, [r4, #0]
 8017da6:	2c00      	cmp	r4, #0
 8017da8:	d1f7      	bne.n	8017d9a <_fwalk_reent+0xe>
 8017daa:	4638      	mov	r0, r7
 8017dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017db0:	89ab      	ldrh	r3, [r5, #12]
 8017db2:	2b01      	cmp	r3, #1
 8017db4:	d907      	bls.n	8017dc6 <_fwalk_reent+0x3a>
 8017db6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017dba:	3301      	adds	r3, #1
 8017dbc:	d003      	beq.n	8017dc6 <_fwalk_reent+0x3a>
 8017dbe:	4629      	mov	r1, r5
 8017dc0:	4630      	mov	r0, r6
 8017dc2:	47c0      	blx	r8
 8017dc4:	4307      	orrs	r7, r0
 8017dc6:	3568      	adds	r5, #104	; 0x68
 8017dc8:	e7e9      	b.n	8017d9e <_fwalk_reent+0x12>

08017dca <rshift>:
 8017dca:	6903      	ldr	r3, [r0, #16]
 8017dcc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017dd4:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017dd8:	f100 0414 	add.w	r4, r0, #20
 8017ddc:	dd45      	ble.n	8017e6a <rshift+0xa0>
 8017dde:	f011 011f 	ands.w	r1, r1, #31
 8017de2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017de6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017dea:	d10c      	bne.n	8017e06 <rshift+0x3c>
 8017dec:	f100 0710 	add.w	r7, r0, #16
 8017df0:	4629      	mov	r1, r5
 8017df2:	42b1      	cmp	r1, r6
 8017df4:	d334      	bcc.n	8017e60 <rshift+0x96>
 8017df6:	1a9b      	subs	r3, r3, r2
 8017df8:	009b      	lsls	r3, r3, #2
 8017dfa:	1eea      	subs	r2, r5, #3
 8017dfc:	4296      	cmp	r6, r2
 8017dfe:	bf38      	it	cc
 8017e00:	2300      	movcc	r3, #0
 8017e02:	4423      	add	r3, r4
 8017e04:	e015      	b.n	8017e32 <rshift+0x68>
 8017e06:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017e0a:	f1c1 0820 	rsb	r8, r1, #32
 8017e0e:	40cf      	lsrs	r7, r1
 8017e10:	f105 0e04 	add.w	lr, r5, #4
 8017e14:	46a1      	mov	r9, r4
 8017e16:	4576      	cmp	r6, lr
 8017e18:	46f4      	mov	ip, lr
 8017e1a:	d815      	bhi.n	8017e48 <rshift+0x7e>
 8017e1c:	1a9a      	subs	r2, r3, r2
 8017e1e:	0092      	lsls	r2, r2, #2
 8017e20:	3a04      	subs	r2, #4
 8017e22:	3501      	adds	r5, #1
 8017e24:	42ae      	cmp	r6, r5
 8017e26:	bf38      	it	cc
 8017e28:	2200      	movcc	r2, #0
 8017e2a:	18a3      	adds	r3, r4, r2
 8017e2c:	50a7      	str	r7, [r4, r2]
 8017e2e:	b107      	cbz	r7, 8017e32 <rshift+0x68>
 8017e30:	3304      	adds	r3, #4
 8017e32:	1b1a      	subs	r2, r3, r4
 8017e34:	42a3      	cmp	r3, r4
 8017e36:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017e3a:	bf08      	it	eq
 8017e3c:	2300      	moveq	r3, #0
 8017e3e:	6102      	str	r2, [r0, #16]
 8017e40:	bf08      	it	eq
 8017e42:	6143      	streq	r3, [r0, #20]
 8017e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e48:	f8dc c000 	ldr.w	ip, [ip]
 8017e4c:	fa0c fc08 	lsl.w	ip, ip, r8
 8017e50:	ea4c 0707 	orr.w	r7, ip, r7
 8017e54:	f849 7b04 	str.w	r7, [r9], #4
 8017e58:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017e5c:	40cf      	lsrs	r7, r1
 8017e5e:	e7da      	b.n	8017e16 <rshift+0x4c>
 8017e60:	f851 cb04 	ldr.w	ip, [r1], #4
 8017e64:	f847 cf04 	str.w	ip, [r7, #4]!
 8017e68:	e7c3      	b.n	8017df2 <rshift+0x28>
 8017e6a:	4623      	mov	r3, r4
 8017e6c:	e7e1      	b.n	8017e32 <rshift+0x68>

08017e6e <__hexdig_fun>:
 8017e6e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017e72:	2b09      	cmp	r3, #9
 8017e74:	d802      	bhi.n	8017e7c <__hexdig_fun+0xe>
 8017e76:	3820      	subs	r0, #32
 8017e78:	b2c0      	uxtb	r0, r0
 8017e7a:	4770      	bx	lr
 8017e7c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017e80:	2b05      	cmp	r3, #5
 8017e82:	d801      	bhi.n	8017e88 <__hexdig_fun+0x1a>
 8017e84:	3847      	subs	r0, #71	; 0x47
 8017e86:	e7f7      	b.n	8017e78 <__hexdig_fun+0xa>
 8017e88:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017e8c:	2b05      	cmp	r3, #5
 8017e8e:	d801      	bhi.n	8017e94 <__hexdig_fun+0x26>
 8017e90:	3827      	subs	r0, #39	; 0x27
 8017e92:	e7f1      	b.n	8017e78 <__hexdig_fun+0xa>
 8017e94:	2000      	movs	r0, #0
 8017e96:	4770      	bx	lr

08017e98 <__gethex>:
 8017e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e9c:	ed2d 8b02 	vpush	{d8}
 8017ea0:	b089      	sub	sp, #36	; 0x24
 8017ea2:	ee08 0a10 	vmov	s16, r0
 8017ea6:	9304      	str	r3, [sp, #16]
 8017ea8:	4bb4      	ldr	r3, [pc, #720]	; (801817c <__gethex+0x2e4>)
 8017eaa:	681b      	ldr	r3, [r3, #0]
 8017eac:	9301      	str	r3, [sp, #4]
 8017eae:	4618      	mov	r0, r3
 8017eb0:	468b      	mov	fp, r1
 8017eb2:	4690      	mov	r8, r2
 8017eb4:	f7e8 f9e6 	bl	8000284 <strlen>
 8017eb8:	9b01      	ldr	r3, [sp, #4]
 8017eba:	f8db 2000 	ldr.w	r2, [fp]
 8017ebe:	4403      	add	r3, r0
 8017ec0:	4682      	mov	sl, r0
 8017ec2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017ec6:	9305      	str	r3, [sp, #20]
 8017ec8:	1c93      	adds	r3, r2, #2
 8017eca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017ece:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017ed2:	32fe      	adds	r2, #254	; 0xfe
 8017ed4:	18d1      	adds	r1, r2, r3
 8017ed6:	461f      	mov	r7, r3
 8017ed8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017edc:	9100      	str	r1, [sp, #0]
 8017ede:	2830      	cmp	r0, #48	; 0x30
 8017ee0:	d0f8      	beq.n	8017ed4 <__gethex+0x3c>
 8017ee2:	f7ff ffc4 	bl	8017e6e <__hexdig_fun>
 8017ee6:	4604      	mov	r4, r0
 8017ee8:	2800      	cmp	r0, #0
 8017eea:	d13a      	bne.n	8017f62 <__gethex+0xca>
 8017eec:	9901      	ldr	r1, [sp, #4]
 8017eee:	4652      	mov	r2, sl
 8017ef0:	4638      	mov	r0, r7
 8017ef2:	f7fd ff97 	bl	8015e24 <strncmp>
 8017ef6:	4605      	mov	r5, r0
 8017ef8:	2800      	cmp	r0, #0
 8017efa:	d168      	bne.n	8017fce <__gethex+0x136>
 8017efc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8017f00:	eb07 060a 	add.w	r6, r7, sl
 8017f04:	f7ff ffb3 	bl	8017e6e <__hexdig_fun>
 8017f08:	2800      	cmp	r0, #0
 8017f0a:	d062      	beq.n	8017fd2 <__gethex+0x13a>
 8017f0c:	4633      	mov	r3, r6
 8017f0e:	7818      	ldrb	r0, [r3, #0]
 8017f10:	2830      	cmp	r0, #48	; 0x30
 8017f12:	461f      	mov	r7, r3
 8017f14:	f103 0301 	add.w	r3, r3, #1
 8017f18:	d0f9      	beq.n	8017f0e <__gethex+0x76>
 8017f1a:	f7ff ffa8 	bl	8017e6e <__hexdig_fun>
 8017f1e:	2301      	movs	r3, #1
 8017f20:	fab0 f480 	clz	r4, r0
 8017f24:	0964      	lsrs	r4, r4, #5
 8017f26:	4635      	mov	r5, r6
 8017f28:	9300      	str	r3, [sp, #0]
 8017f2a:	463a      	mov	r2, r7
 8017f2c:	4616      	mov	r6, r2
 8017f2e:	3201      	adds	r2, #1
 8017f30:	7830      	ldrb	r0, [r6, #0]
 8017f32:	f7ff ff9c 	bl	8017e6e <__hexdig_fun>
 8017f36:	2800      	cmp	r0, #0
 8017f38:	d1f8      	bne.n	8017f2c <__gethex+0x94>
 8017f3a:	9901      	ldr	r1, [sp, #4]
 8017f3c:	4652      	mov	r2, sl
 8017f3e:	4630      	mov	r0, r6
 8017f40:	f7fd ff70 	bl	8015e24 <strncmp>
 8017f44:	b980      	cbnz	r0, 8017f68 <__gethex+0xd0>
 8017f46:	b94d      	cbnz	r5, 8017f5c <__gethex+0xc4>
 8017f48:	eb06 050a 	add.w	r5, r6, sl
 8017f4c:	462a      	mov	r2, r5
 8017f4e:	4616      	mov	r6, r2
 8017f50:	3201      	adds	r2, #1
 8017f52:	7830      	ldrb	r0, [r6, #0]
 8017f54:	f7ff ff8b 	bl	8017e6e <__hexdig_fun>
 8017f58:	2800      	cmp	r0, #0
 8017f5a:	d1f8      	bne.n	8017f4e <__gethex+0xb6>
 8017f5c:	1bad      	subs	r5, r5, r6
 8017f5e:	00ad      	lsls	r5, r5, #2
 8017f60:	e004      	b.n	8017f6c <__gethex+0xd4>
 8017f62:	2400      	movs	r4, #0
 8017f64:	4625      	mov	r5, r4
 8017f66:	e7e0      	b.n	8017f2a <__gethex+0x92>
 8017f68:	2d00      	cmp	r5, #0
 8017f6a:	d1f7      	bne.n	8017f5c <__gethex+0xc4>
 8017f6c:	7833      	ldrb	r3, [r6, #0]
 8017f6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017f72:	2b50      	cmp	r3, #80	; 0x50
 8017f74:	d13b      	bne.n	8017fee <__gethex+0x156>
 8017f76:	7873      	ldrb	r3, [r6, #1]
 8017f78:	2b2b      	cmp	r3, #43	; 0x2b
 8017f7a:	d02c      	beq.n	8017fd6 <__gethex+0x13e>
 8017f7c:	2b2d      	cmp	r3, #45	; 0x2d
 8017f7e:	d02e      	beq.n	8017fde <__gethex+0x146>
 8017f80:	1c71      	adds	r1, r6, #1
 8017f82:	f04f 0900 	mov.w	r9, #0
 8017f86:	7808      	ldrb	r0, [r1, #0]
 8017f88:	f7ff ff71 	bl	8017e6e <__hexdig_fun>
 8017f8c:	1e43      	subs	r3, r0, #1
 8017f8e:	b2db      	uxtb	r3, r3
 8017f90:	2b18      	cmp	r3, #24
 8017f92:	d82c      	bhi.n	8017fee <__gethex+0x156>
 8017f94:	f1a0 0210 	sub.w	r2, r0, #16
 8017f98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017f9c:	f7ff ff67 	bl	8017e6e <__hexdig_fun>
 8017fa0:	1e43      	subs	r3, r0, #1
 8017fa2:	b2db      	uxtb	r3, r3
 8017fa4:	2b18      	cmp	r3, #24
 8017fa6:	d91d      	bls.n	8017fe4 <__gethex+0x14c>
 8017fa8:	f1b9 0f00 	cmp.w	r9, #0
 8017fac:	d000      	beq.n	8017fb0 <__gethex+0x118>
 8017fae:	4252      	negs	r2, r2
 8017fb0:	4415      	add	r5, r2
 8017fb2:	f8cb 1000 	str.w	r1, [fp]
 8017fb6:	b1e4      	cbz	r4, 8017ff2 <__gethex+0x15a>
 8017fb8:	9b00      	ldr	r3, [sp, #0]
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	bf14      	ite	ne
 8017fbe:	2700      	movne	r7, #0
 8017fc0:	2706      	moveq	r7, #6
 8017fc2:	4638      	mov	r0, r7
 8017fc4:	b009      	add	sp, #36	; 0x24
 8017fc6:	ecbd 8b02 	vpop	{d8}
 8017fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fce:	463e      	mov	r6, r7
 8017fd0:	4625      	mov	r5, r4
 8017fd2:	2401      	movs	r4, #1
 8017fd4:	e7ca      	b.n	8017f6c <__gethex+0xd4>
 8017fd6:	f04f 0900 	mov.w	r9, #0
 8017fda:	1cb1      	adds	r1, r6, #2
 8017fdc:	e7d3      	b.n	8017f86 <__gethex+0xee>
 8017fde:	f04f 0901 	mov.w	r9, #1
 8017fe2:	e7fa      	b.n	8017fda <__gethex+0x142>
 8017fe4:	230a      	movs	r3, #10
 8017fe6:	fb03 0202 	mla	r2, r3, r2, r0
 8017fea:	3a10      	subs	r2, #16
 8017fec:	e7d4      	b.n	8017f98 <__gethex+0x100>
 8017fee:	4631      	mov	r1, r6
 8017ff0:	e7df      	b.n	8017fb2 <__gethex+0x11a>
 8017ff2:	1bf3      	subs	r3, r6, r7
 8017ff4:	3b01      	subs	r3, #1
 8017ff6:	4621      	mov	r1, r4
 8017ff8:	2b07      	cmp	r3, #7
 8017ffa:	dc0b      	bgt.n	8018014 <__gethex+0x17c>
 8017ffc:	ee18 0a10 	vmov	r0, s16
 8018000:	f000 fada 	bl	80185b8 <_Balloc>
 8018004:	4604      	mov	r4, r0
 8018006:	b940      	cbnz	r0, 801801a <__gethex+0x182>
 8018008:	4b5d      	ldr	r3, [pc, #372]	; (8018180 <__gethex+0x2e8>)
 801800a:	4602      	mov	r2, r0
 801800c:	21de      	movs	r1, #222	; 0xde
 801800e:	485d      	ldr	r0, [pc, #372]	; (8018184 <__gethex+0x2ec>)
 8018010:	f7fc fc96 	bl	8014940 <__assert_func>
 8018014:	3101      	adds	r1, #1
 8018016:	105b      	asrs	r3, r3, #1
 8018018:	e7ee      	b.n	8017ff8 <__gethex+0x160>
 801801a:	f100 0914 	add.w	r9, r0, #20
 801801e:	f04f 0b00 	mov.w	fp, #0
 8018022:	f1ca 0301 	rsb	r3, sl, #1
 8018026:	f8cd 9008 	str.w	r9, [sp, #8]
 801802a:	f8cd b000 	str.w	fp, [sp]
 801802e:	9306      	str	r3, [sp, #24]
 8018030:	42b7      	cmp	r7, r6
 8018032:	d340      	bcc.n	80180b6 <__gethex+0x21e>
 8018034:	9802      	ldr	r0, [sp, #8]
 8018036:	9b00      	ldr	r3, [sp, #0]
 8018038:	f840 3b04 	str.w	r3, [r0], #4
 801803c:	eba0 0009 	sub.w	r0, r0, r9
 8018040:	1080      	asrs	r0, r0, #2
 8018042:	0146      	lsls	r6, r0, #5
 8018044:	6120      	str	r0, [r4, #16]
 8018046:	4618      	mov	r0, r3
 8018048:	f000 fba8 	bl	801879c <__hi0bits>
 801804c:	1a30      	subs	r0, r6, r0
 801804e:	f8d8 6000 	ldr.w	r6, [r8]
 8018052:	42b0      	cmp	r0, r6
 8018054:	dd63      	ble.n	801811e <__gethex+0x286>
 8018056:	1b87      	subs	r7, r0, r6
 8018058:	4639      	mov	r1, r7
 801805a:	4620      	mov	r0, r4
 801805c:	f000 ff4c 	bl	8018ef8 <__any_on>
 8018060:	4682      	mov	sl, r0
 8018062:	b1a8      	cbz	r0, 8018090 <__gethex+0x1f8>
 8018064:	1e7b      	subs	r3, r7, #1
 8018066:	1159      	asrs	r1, r3, #5
 8018068:	f003 021f 	and.w	r2, r3, #31
 801806c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018070:	f04f 0a01 	mov.w	sl, #1
 8018074:	fa0a f202 	lsl.w	r2, sl, r2
 8018078:	420a      	tst	r2, r1
 801807a:	d009      	beq.n	8018090 <__gethex+0x1f8>
 801807c:	4553      	cmp	r3, sl
 801807e:	dd05      	ble.n	801808c <__gethex+0x1f4>
 8018080:	1eb9      	subs	r1, r7, #2
 8018082:	4620      	mov	r0, r4
 8018084:	f000 ff38 	bl	8018ef8 <__any_on>
 8018088:	2800      	cmp	r0, #0
 801808a:	d145      	bne.n	8018118 <__gethex+0x280>
 801808c:	f04f 0a02 	mov.w	sl, #2
 8018090:	4639      	mov	r1, r7
 8018092:	4620      	mov	r0, r4
 8018094:	f7ff fe99 	bl	8017dca <rshift>
 8018098:	443d      	add	r5, r7
 801809a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801809e:	42ab      	cmp	r3, r5
 80180a0:	da4c      	bge.n	801813c <__gethex+0x2a4>
 80180a2:	ee18 0a10 	vmov	r0, s16
 80180a6:	4621      	mov	r1, r4
 80180a8:	f000 fac6 	bl	8018638 <_Bfree>
 80180ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80180ae:	2300      	movs	r3, #0
 80180b0:	6013      	str	r3, [r2, #0]
 80180b2:	27a3      	movs	r7, #163	; 0xa3
 80180b4:	e785      	b.n	8017fc2 <__gethex+0x12a>
 80180b6:	1e73      	subs	r3, r6, #1
 80180b8:	9a05      	ldr	r2, [sp, #20]
 80180ba:	9303      	str	r3, [sp, #12]
 80180bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80180c0:	4293      	cmp	r3, r2
 80180c2:	d019      	beq.n	80180f8 <__gethex+0x260>
 80180c4:	f1bb 0f20 	cmp.w	fp, #32
 80180c8:	d107      	bne.n	80180da <__gethex+0x242>
 80180ca:	9b02      	ldr	r3, [sp, #8]
 80180cc:	9a00      	ldr	r2, [sp, #0]
 80180ce:	f843 2b04 	str.w	r2, [r3], #4
 80180d2:	9302      	str	r3, [sp, #8]
 80180d4:	2300      	movs	r3, #0
 80180d6:	9300      	str	r3, [sp, #0]
 80180d8:	469b      	mov	fp, r3
 80180da:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80180de:	f7ff fec6 	bl	8017e6e <__hexdig_fun>
 80180e2:	9b00      	ldr	r3, [sp, #0]
 80180e4:	f000 000f 	and.w	r0, r0, #15
 80180e8:	fa00 f00b 	lsl.w	r0, r0, fp
 80180ec:	4303      	orrs	r3, r0
 80180ee:	9300      	str	r3, [sp, #0]
 80180f0:	f10b 0b04 	add.w	fp, fp, #4
 80180f4:	9b03      	ldr	r3, [sp, #12]
 80180f6:	e00d      	b.n	8018114 <__gethex+0x27c>
 80180f8:	9b03      	ldr	r3, [sp, #12]
 80180fa:	9a06      	ldr	r2, [sp, #24]
 80180fc:	4413      	add	r3, r2
 80180fe:	42bb      	cmp	r3, r7
 8018100:	d3e0      	bcc.n	80180c4 <__gethex+0x22c>
 8018102:	4618      	mov	r0, r3
 8018104:	9901      	ldr	r1, [sp, #4]
 8018106:	9307      	str	r3, [sp, #28]
 8018108:	4652      	mov	r2, sl
 801810a:	f7fd fe8b 	bl	8015e24 <strncmp>
 801810e:	9b07      	ldr	r3, [sp, #28]
 8018110:	2800      	cmp	r0, #0
 8018112:	d1d7      	bne.n	80180c4 <__gethex+0x22c>
 8018114:	461e      	mov	r6, r3
 8018116:	e78b      	b.n	8018030 <__gethex+0x198>
 8018118:	f04f 0a03 	mov.w	sl, #3
 801811c:	e7b8      	b.n	8018090 <__gethex+0x1f8>
 801811e:	da0a      	bge.n	8018136 <__gethex+0x29e>
 8018120:	1a37      	subs	r7, r6, r0
 8018122:	4621      	mov	r1, r4
 8018124:	ee18 0a10 	vmov	r0, s16
 8018128:	463a      	mov	r2, r7
 801812a:	f000 fca1 	bl	8018a70 <__lshift>
 801812e:	1bed      	subs	r5, r5, r7
 8018130:	4604      	mov	r4, r0
 8018132:	f100 0914 	add.w	r9, r0, #20
 8018136:	f04f 0a00 	mov.w	sl, #0
 801813a:	e7ae      	b.n	801809a <__gethex+0x202>
 801813c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018140:	42a8      	cmp	r0, r5
 8018142:	dd72      	ble.n	801822a <__gethex+0x392>
 8018144:	1b45      	subs	r5, r0, r5
 8018146:	42ae      	cmp	r6, r5
 8018148:	dc36      	bgt.n	80181b8 <__gethex+0x320>
 801814a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801814e:	2b02      	cmp	r3, #2
 8018150:	d02a      	beq.n	80181a8 <__gethex+0x310>
 8018152:	2b03      	cmp	r3, #3
 8018154:	d02c      	beq.n	80181b0 <__gethex+0x318>
 8018156:	2b01      	cmp	r3, #1
 8018158:	d11c      	bne.n	8018194 <__gethex+0x2fc>
 801815a:	42ae      	cmp	r6, r5
 801815c:	d11a      	bne.n	8018194 <__gethex+0x2fc>
 801815e:	2e01      	cmp	r6, #1
 8018160:	d112      	bne.n	8018188 <__gethex+0x2f0>
 8018162:	9a04      	ldr	r2, [sp, #16]
 8018164:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018168:	6013      	str	r3, [r2, #0]
 801816a:	2301      	movs	r3, #1
 801816c:	6123      	str	r3, [r4, #16]
 801816e:	f8c9 3000 	str.w	r3, [r9]
 8018172:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018174:	2762      	movs	r7, #98	; 0x62
 8018176:	601c      	str	r4, [r3, #0]
 8018178:	e723      	b.n	8017fc2 <__gethex+0x12a>
 801817a:	bf00      	nop
 801817c:	08059e0c 	.word	0x08059e0c
 8018180:	08059d30 	.word	0x08059d30
 8018184:	08059da4 	.word	0x08059da4
 8018188:	1e71      	subs	r1, r6, #1
 801818a:	4620      	mov	r0, r4
 801818c:	f000 feb4 	bl	8018ef8 <__any_on>
 8018190:	2800      	cmp	r0, #0
 8018192:	d1e6      	bne.n	8018162 <__gethex+0x2ca>
 8018194:	ee18 0a10 	vmov	r0, s16
 8018198:	4621      	mov	r1, r4
 801819a:	f000 fa4d 	bl	8018638 <_Bfree>
 801819e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80181a0:	2300      	movs	r3, #0
 80181a2:	6013      	str	r3, [r2, #0]
 80181a4:	2750      	movs	r7, #80	; 0x50
 80181a6:	e70c      	b.n	8017fc2 <__gethex+0x12a>
 80181a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d1f2      	bne.n	8018194 <__gethex+0x2fc>
 80181ae:	e7d8      	b.n	8018162 <__gethex+0x2ca>
 80181b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d1d5      	bne.n	8018162 <__gethex+0x2ca>
 80181b6:	e7ed      	b.n	8018194 <__gethex+0x2fc>
 80181b8:	1e6f      	subs	r7, r5, #1
 80181ba:	f1ba 0f00 	cmp.w	sl, #0
 80181be:	d131      	bne.n	8018224 <__gethex+0x38c>
 80181c0:	b127      	cbz	r7, 80181cc <__gethex+0x334>
 80181c2:	4639      	mov	r1, r7
 80181c4:	4620      	mov	r0, r4
 80181c6:	f000 fe97 	bl	8018ef8 <__any_on>
 80181ca:	4682      	mov	sl, r0
 80181cc:	117b      	asrs	r3, r7, #5
 80181ce:	2101      	movs	r1, #1
 80181d0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80181d4:	f007 071f 	and.w	r7, r7, #31
 80181d8:	fa01 f707 	lsl.w	r7, r1, r7
 80181dc:	421f      	tst	r7, r3
 80181de:	4629      	mov	r1, r5
 80181e0:	4620      	mov	r0, r4
 80181e2:	bf18      	it	ne
 80181e4:	f04a 0a02 	orrne.w	sl, sl, #2
 80181e8:	1b76      	subs	r6, r6, r5
 80181ea:	f7ff fdee 	bl	8017dca <rshift>
 80181ee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80181f2:	2702      	movs	r7, #2
 80181f4:	f1ba 0f00 	cmp.w	sl, #0
 80181f8:	d048      	beq.n	801828c <__gethex+0x3f4>
 80181fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80181fe:	2b02      	cmp	r3, #2
 8018200:	d015      	beq.n	801822e <__gethex+0x396>
 8018202:	2b03      	cmp	r3, #3
 8018204:	d017      	beq.n	8018236 <__gethex+0x39e>
 8018206:	2b01      	cmp	r3, #1
 8018208:	d109      	bne.n	801821e <__gethex+0x386>
 801820a:	f01a 0f02 	tst.w	sl, #2
 801820e:	d006      	beq.n	801821e <__gethex+0x386>
 8018210:	f8d9 0000 	ldr.w	r0, [r9]
 8018214:	ea4a 0a00 	orr.w	sl, sl, r0
 8018218:	f01a 0f01 	tst.w	sl, #1
 801821c:	d10e      	bne.n	801823c <__gethex+0x3a4>
 801821e:	f047 0710 	orr.w	r7, r7, #16
 8018222:	e033      	b.n	801828c <__gethex+0x3f4>
 8018224:	f04f 0a01 	mov.w	sl, #1
 8018228:	e7d0      	b.n	80181cc <__gethex+0x334>
 801822a:	2701      	movs	r7, #1
 801822c:	e7e2      	b.n	80181f4 <__gethex+0x35c>
 801822e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018230:	f1c3 0301 	rsb	r3, r3, #1
 8018234:	9315      	str	r3, [sp, #84]	; 0x54
 8018236:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018238:	2b00      	cmp	r3, #0
 801823a:	d0f0      	beq.n	801821e <__gethex+0x386>
 801823c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018240:	f104 0314 	add.w	r3, r4, #20
 8018244:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018248:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801824c:	f04f 0c00 	mov.w	ip, #0
 8018250:	4618      	mov	r0, r3
 8018252:	f853 2b04 	ldr.w	r2, [r3], #4
 8018256:	f1b2 3fff 	cmp.w	r2, #4294967295
 801825a:	d01c      	beq.n	8018296 <__gethex+0x3fe>
 801825c:	3201      	adds	r2, #1
 801825e:	6002      	str	r2, [r0, #0]
 8018260:	2f02      	cmp	r7, #2
 8018262:	f104 0314 	add.w	r3, r4, #20
 8018266:	d13f      	bne.n	80182e8 <__gethex+0x450>
 8018268:	f8d8 2000 	ldr.w	r2, [r8]
 801826c:	3a01      	subs	r2, #1
 801826e:	42b2      	cmp	r2, r6
 8018270:	d10a      	bne.n	8018288 <__gethex+0x3f0>
 8018272:	1171      	asrs	r1, r6, #5
 8018274:	2201      	movs	r2, #1
 8018276:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801827a:	f006 061f 	and.w	r6, r6, #31
 801827e:	fa02 f606 	lsl.w	r6, r2, r6
 8018282:	421e      	tst	r6, r3
 8018284:	bf18      	it	ne
 8018286:	4617      	movne	r7, r2
 8018288:	f047 0720 	orr.w	r7, r7, #32
 801828c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801828e:	601c      	str	r4, [r3, #0]
 8018290:	9b04      	ldr	r3, [sp, #16]
 8018292:	601d      	str	r5, [r3, #0]
 8018294:	e695      	b.n	8017fc2 <__gethex+0x12a>
 8018296:	4299      	cmp	r1, r3
 8018298:	f843 cc04 	str.w	ip, [r3, #-4]
 801829c:	d8d8      	bhi.n	8018250 <__gethex+0x3b8>
 801829e:	68a3      	ldr	r3, [r4, #8]
 80182a0:	459b      	cmp	fp, r3
 80182a2:	db19      	blt.n	80182d8 <__gethex+0x440>
 80182a4:	6861      	ldr	r1, [r4, #4]
 80182a6:	ee18 0a10 	vmov	r0, s16
 80182aa:	3101      	adds	r1, #1
 80182ac:	f000 f984 	bl	80185b8 <_Balloc>
 80182b0:	4681      	mov	r9, r0
 80182b2:	b918      	cbnz	r0, 80182bc <__gethex+0x424>
 80182b4:	4b1a      	ldr	r3, [pc, #104]	; (8018320 <__gethex+0x488>)
 80182b6:	4602      	mov	r2, r0
 80182b8:	2184      	movs	r1, #132	; 0x84
 80182ba:	e6a8      	b.n	801800e <__gethex+0x176>
 80182bc:	6922      	ldr	r2, [r4, #16]
 80182be:	3202      	adds	r2, #2
 80182c0:	f104 010c 	add.w	r1, r4, #12
 80182c4:	0092      	lsls	r2, r2, #2
 80182c6:	300c      	adds	r0, #12
 80182c8:	f7fc fbb0 	bl	8014a2c <memcpy>
 80182cc:	4621      	mov	r1, r4
 80182ce:	ee18 0a10 	vmov	r0, s16
 80182d2:	f000 f9b1 	bl	8018638 <_Bfree>
 80182d6:	464c      	mov	r4, r9
 80182d8:	6923      	ldr	r3, [r4, #16]
 80182da:	1c5a      	adds	r2, r3, #1
 80182dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80182e0:	6122      	str	r2, [r4, #16]
 80182e2:	2201      	movs	r2, #1
 80182e4:	615a      	str	r2, [r3, #20]
 80182e6:	e7bb      	b.n	8018260 <__gethex+0x3c8>
 80182e8:	6922      	ldr	r2, [r4, #16]
 80182ea:	455a      	cmp	r2, fp
 80182ec:	dd0b      	ble.n	8018306 <__gethex+0x46e>
 80182ee:	2101      	movs	r1, #1
 80182f0:	4620      	mov	r0, r4
 80182f2:	f7ff fd6a 	bl	8017dca <rshift>
 80182f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80182fa:	3501      	adds	r5, #1
 80182fc:	42ab      	cmp	r3, r5
 80182fe:	f6ff aed0 	blt.w	80180a2 <__gethex+0x20a>
 8018302:	2701      	movs	r7, #1
 8018304:	e7c0      	b.n	8018288 <__gethex+0x3f0>
 8018306:	f016 061f 	ands.w	r6, r6, #31
 801830a:	d0fa      	beq.n	8018302 <__gethex+0x46a>
 801830c:	4453      	add	r3, sl
 801830e:	f1c6 0620 	rsb	r6, r6, #32
 8018312:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8018316:	f000 fa41 	bl	801879c <__hi0bits>
 801831a:	42b0      	cmp	r0, r6
 801831c:	dbe7      	blt.n	80182ee <__gethex+0x456>
 801831e:	e7f0      	b.n	8018302 <__gethex+0x46a>
 8018320:	08059d30 	.word	0x08059d30

08018324 <L_shift>:
 8018324:	f1c2 0208 	rsb	r2, r2, #8
 8018328:	0092      	lsls	r2, r2, #2
 801832a:	b570      	push	{r4, r5, r6, lr}
 801832c:	f1c2 0620 	rsb	r6, r2, #32
 8018330:	6843      	ldr	r3, [r0, #4]
 8018332:	6804      	ldr	r4, [r0, #0]
 8018334:	fa03 f506 	lsl.w	r5, r3, r6
 8018338:	432c      	orrs	r4, r5
 801833a:	40d3      	lsrs	r3, r2
 801833c:	6004      	str	r4, [r0, #0]
 801833e:	f840 3f04 	str.w	r3, [r0, #4]!
 8018342:	4288      	cmp	r0, r1
 8018344:	d3f4      	bcc.n	8018330 <L_shift+0xc>
 8018346:	bd70      	pop	{r4, r5, r6, pc}

08018348 <__match>:
 8018348:	b530      	push	{r4, r5, lr}
 801834a:	6803      	ldr	r3, [r0, #0]
 801834c:	3301      	adds	r3, #1
 801834e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018352:	b914      	cbnz	r4, 801835a <__match+0x12>
 8018354:	6003      	str	r3, [r0, #0]
 8018356:	2001      	movs	r0, #1
 8018358:	bd30      	pop	{r4, r5, pc}
 801835a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801835e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018362:	2d19      	cmp	r5, #25
 8018364:	bf98      	it	ls
 8018366:	3220      	addls	r2, #32
 8018368:	42a2      	cmp	r2, r4
 801836a:	d0f0      	beq.n	801834e <__match+0x6>
 801836c:	2000      	movs	r0, #0
 801836e:	e7f3      	b.n	8018358 <__match+0x10>

08018370 <__hexnan>:
 8018370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018374:	680b      	ldr	r3, [r1, #0]
 8018376:	115e      	asrs	r6, r3, #5
 8018378:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801837c:	f013 031f 	ands.w	r3, r3, #31
 8018380:	b087      	sub	sp, #28
 8018382:	bf18      	it	ne
 8018384:	3604      	addne	r6, #4
 8018386:	2500      	movs	r5, #0
 8018388:	1f37      	subs	r7, r6, #4
 801838a:	4690      	mov	r8, r2
 801838c:	6802      	ldr	r2, [r0, #0]
 801838e:	9301      	str	r3, [sp, #4]
 8018390:	4682      	mov	sl, r0
 8018392:	f846 5c04 	str.w	r5, [r6, #-4]
 8018396:	46b9      	mov	r9, r7
 8018398:	463c      	mov	r4, r7
 801839a:	9502      	str	r5, [sp, #8]
 801839c:	46ab      	mov	fp, r5
 801839e:	7851      	ldrb	r1, [r2, #1]
 80183a0:	1c53      	adds	r3, r2, #1
 80183a2:	9303      	str	r3, [sp, #12]
 80183a4:	b341      	cbz	r1, 80183f8 <__hexnan+0x88>
 80183a6:	4608      	mov	r0, r1
 80183a8:	9205      	str	r2, [sp, #20]
 80183aa:	9104      	str	r1, [sp, #16]
 80183ac:	f7ff fd5f 	bl	8017e6e <__hexdig_fun>
 80183b0:	2800      	cmp	r0, #0
 80183b2:	d14f      	bne.n	8018454 <__hexnan+0xe4>
 80183b4:	9904      	ldr	r1, [sp, #16]
 80183b6:	9a05      	ldr	r2, [sp, #20]
 80183b8:	2920      	cmp	r1, #32
 80183ba:	d818      	bhi.n	80183ee <__hexnan+0x7e>
 80183bc:	9b02      	ldr	r3, [sp, #8]
 80183be:	459b      	cmp	fp, r3
 80183c0:	dd13      	ble.n	80183ea <__hexnan+0x7a>
 80183c2:	454c      	cmp	r4, r9
 80183c4:	d206      	bcs.n	80183d4 <__hexnan+0x64>
 80183c6:	2d07      	cmp	r5, #7
 80183c8:	dc04      	bgt.n	80183d4 <__hexnan+0x64>
 80183ca:	462a      	mov	r2, r5
 80183cc:	4649      	mov	r1, r9
 80183ce:	4620      	mov	r0, r4
 80183d0:	f7ff ffa8 	bl	8018324 <L_shift>
 80183d4:	4544      	cmp	r4, r8
 80183d6:	d950      	bls.n	801847a <__hexnan+0x10a>
 80183d8:	2300      	movs	r3, #0
 80183da:	f1a4 0904 	sub.w	r9, r4, #4
 80183de:	f844 3c04 	str.w	r3, [r4, #-4]
 80183e2:	f8cd b008 	str.w	fp, [sp, #8]
 80183e6:	464c      	mov	r4, r9
 80183e8:	461d      	mov	r5, r3
 80183ea:	9a03      	ldr	r2, [sp, #12]
 80183ec:	e7d7      	b.n	801839e <__hexnan+0x2e>
 80183ee:	2929      	cmp	r1, #41	; 0x29
 80183f0:	d156      	bne.n	80184a0 <__hexnan+0x130>
 80183f2:	3202      	adds	r2, #2
 80183f4:	f8ca 2000 	str.w	r2, [sl]
 80183f8:	f1bb 0f00 	cmp.w	fp, #0
 80183fc:	d050      	beq.n	80184a0 <__hexnan+0x130>
 80183fe:	454c      	cmp	r4, r9
 8018400:	d206      	bcs.n	8018410 <__hexnan+0xa0>
 8018402:	2d07      	cmp	r5, #7
 8018404:	dc04      	bgt.n	8018410 <__hexnan+0xa0>
 8018406:	462a      	mov	r2, r5
 8018408:	4649      	mov	r1, r9
 801840a:	4620      	mov	r0, r4
 801840c:	f7ff ff8a 	bl	8018324 <L_shift>
 8018410:	4544      	cmp	r4, r8
 8018412:	d934      	bls.n	801847e <__hexnan+0x10e>
 8018414:	f1a8 0204 	sub.w	r2, r8, #4
 8018418:	4623      	mov	r3, r4
 801841a:	f853 1b04 	ldr.w	r1, [r3], #4
 801841e:	f842 1f04 	str.w	r1, [r2, #4]!
 8018422:	429f      	cmp	r7, r3
 8018424:	d2f9      	bcs.n	801841a <__hexnan+0xaa>
 8018426:	1b3b      	subs	r3, r7, r4
 8018428:	f023 0303 	bic.w	r3, r3, #3
 801842c:	3304      	adds	r3, #4
 801842e:	3401      	adds	r4, #1
 8018430:	3e03      	subs	r6, #3
 8018432:	42b4      	cmp	r4, r6
 8018434:	bf88      	it	hi
 8018436:	2304      	movhi	r3, #4
 8018438:	4443      	add	r3, r8
 801843a:	2200      	movs	r2, #0
 801843c:	f843 2b04 	str.w	r2, [r3], #4
 8018440:	429f      	cmp	r7, r3
 8018442:	d2fb      	bcs.n	801843c <__hexnan+0xcc>
 8018444:	683b      	ldr	r3, [r7, #0]
 8018446:	b91b      	cbnz	r3, 8018450 <__hexnan+0xe0>
 8018448:	4547      	cmp	r7, r8
 801844a:	d127      	bne.n	801849c <__hexnan+0x12c>
 801844c:	2301      	movs	r3, #1
 801844e:	603b      	str	r3, [r7, #0]
 8018450:	2005      	movs	r0, #5
 8018452:	e026      	b.n	80184a2 <__hexnan+0x132>
 8018454:	3501      	adds	r5, #1
 8018456:	2d08      	cmp	r5, #8
 8018458:	f10b 0b01 	add.w	fp, fp, #1
 801845c:	dd06      	ble.n	801846c <__hexnan+0xfc>
 801845e:	4544      	cmp	r4, r8
 8018460:	d9c3      	bls.n	80183ea <__hexnan+0x7a>
 8018462:	2300      	movs	r3, #0
 8018464:	f844 3c04 	str.w	r3, [r4, #-4]
 8018468:	2501      	movs	r5, #1
 801846a:	3c04      	subs	r4, #4
 801846c:	6822      	ldr	r2, [r4, #0]
 801846e:	f000 000f 	and.w	r0, r0, #15
 8018472:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018476:	6022      	str	r2, [r4, #0]
 8018478:	e7b7      	b.n	80183ea <__hexnan+0x7a>
 801847a:	2508      	movs	r5, #8
 801847c:	e7b5      	b.n	80183ea <__hexnan+0x7a>
 801847e:	9b01      	ldr	r3, [sp, #4]
 8018480:	2b00      	cmp	r3, #0
 8018482:	d0df      	beq.n	8018444 <__hexnan+0xd4>
 8018484:	f04f 32ff 	mov.w	r2, #4294967295
 8018488:	f1c3 0320 	rsb	r3, r3, #32
 801848c:	fa22 f303 	lsr.w	r3, r2, r3
 8018490:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018494:	401a      	ands	r2, r3
 8018496:	f846 2c04 	str.w	r2, [r6, #-4]
 801849a:	e7d3      	b.n	8018444 <__hexnan+0xd4>
 801849c:	3f04      	subs	r7, #4
 801849e:	e7d1      	b.n	8018444 <__hexnan+0xd4>
 80184a0:	2004      	movs	r0, #4
 80184a2:	b007      	add	sp, #28
 80184a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080184a8 <_localeconv_r>:
 80184a8:	4800      	ldr	r0, [pc, #0]	; (80184ac <_localeconv_r+0x4>)
 80184aa:	4770      	bx	lr
 80184ac:	20000388 	.word	0x20000388

080184b0 <__swhatbuf_r>:
 80184b0:	b570      	push	{r4, r5, r6, lr}
 80184b2:	460e      	mov	r6, r1
 80184b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184b8:	2900      	cmp	r1, #0
 80184ba:	b096      	sub	sp, #88	; 0x58
 80184bc:	4614      	mov	r4, r2
 80184be:	461d      	mov	r5, r3
 80184c0:	da08      	bge.n	80184d4 <__swhatbuf_r+0x24>
 80184c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80184c6:	2200      	movs	r2, #0
 80184c8:	602a      	str	r2, [r5, #0]
 80184ca:	061a      	lsls	r2, r3, #24
 80184cc:	d410      	bmi.n	80184f0 <__swhatbuf_r+0x40>
 80184ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80184d2:	e00e      	b.n	80184f2 <__swhatbuf_r+0x42>
 80184d4:	466a      	mov	r2, sp
 80184d6:	f000 ff2d 	bl	8019334 <_fstat_r>
 80184da:	2800      	cmp	r0, #0
 80184dc:	dbf1      	blt.n	80184c2 <__swhatbuf_r+0x12>
 80184de:	9a01      	ldr	r2, [sp, #4]
 80184e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80184e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80184e8:	425a      	negs	r2, r3
 80184ea:	415a      	adcs	r2, r3
 80184ec:	602a      	str	r2, [r5, #0]
 80184ee:	e7ee      	b.n	80184ce <__swhatbuf_r+0x1e>
 80184f0:	2340      	movs	r3, #64	; 0x40
 80184f2:	2000      	movs	r0, #0
 80184f4:	6023      	str	r3, [r4, #0]
 80184f6:	b016      	add	sp, #88	; 0x58
 80184f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080184fc <__smakebuf_r>:
 80184fc:	898b      	ldrh	r3, [r1, #12]
 80184fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018500:	079d      	lsls	r5, r3, #30
 8018502:	4606      	mov	r6, r0
 8018504:	460c      	mov	r4, r1
 8018506:	d507      	bpl.n	8018518 <__smakebuf_r+0x1c>
 8018508:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801850c:	6023      	str	r3, [r4, #0]
 801850e:	6123      	str	r3, [r4, #16]
 8018510:	2301      	movs	r3, #1
 8018512:	6163      	str	r3, [r4, #20]
 8018514:	b002      	add	sp, #8
 8018516:	bd70      	pop	{r4, r5, r6, pc}
 8018518:	ab01      	add	r3, sp, #4
 801851a:	466a      	mov	r2, sp
 801851c:	f7ff ffc8 	bl	80184b0 <__swhatbuf_r>
 8018520:	9900      	ldr	r1, [sp, #0]
 8018522:	4605      	mov	r5, r0
 8018524:	4630      	mov	r0, r6
 8018526:	f7fc fb33 	bl	8014b90 <_malloc_r>
 801852a:	b948      	cbnz	r0, 8018540 <__smakebuf_r+0x44>
 801852c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018530:	059a      	lsls	r2, r3, #22
 8018532:	d4ef      	bmi.n	8018514 <__smakebuf_r+0x18>
 8018534:	f023 0303 	bic.w	r3, r3, #3
 8018538:	f043 0302 	orr.w	r3, r3, #2
 801853c:	81a3      	strh	r3, [r4, #12]
 801853e:	e7e3      	b.n	8018508 <__smakebuf_r+0xc>
 8018540:	4b0d      	ldr	r3, [pc, #52]	; (8018578 <__smakebuf_r+0x7c>)
 8018542:	62b3      	str	r3, [r6, #40]	; 0x28
 8018544:	89a3      	ldrh	r3, [r4, #12]
 8018546:	6020      	str	r0, [r4, #0]
 8018548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801854c:	81a3      	strh	r3, [r4, #12]
 801854e:	9b00      	ldr	r3, [sp, #0]
 8018550:	6163      	str	r3, [r4, #20]
 8018552:	9b01      	ldr	r3, [sp, #4]
 8018554:	6120      	str	r0, [r4, #16]
 8018556:	b15b      	cbz	r3, 8018570 <__smakebuf_r+0x74>
 8018558:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801855c:	4630      	mov	r0, r6
 801855e:	f000 fefb 	bl	8019358 <_isatty_r>
 8018562:	b128      	cbz	r0, 8018570 <__smakebuf_r+0x74>
 8018564:	89a3      	ldrh	r3, [r4, #12]
 8018566:	f023 0303 	bic.w	r3, r3, #3
 801856a:	f043 0301 	orr.w	r3, r3, #1
 801856e:	81a3      	strh	r3, [r4, #12]
 8018570:	89a0      	ldrh	r0, [r4, #12]
 8018572:	4305      	orrs	r5, r0
 8018574:	81a5      	strh	r5, [r4, #12]
 8018576:	e7cd      	b.n	8018514 <__smakebuf_r+0x18>
 8018578:	08017c29 	.word	0x08017c29

0801857c <__ascii_mbtowc>:
 801857c:	b082      	sub	sp, #8
 801857e:	b901      	cbnz	r1, 8018582 <__ascii_mbtowc+0x6>
 8018580:	a901      	add	r1, sp, #4
 8018582:	b142      	cbz	r2, 8018596 <__ascii_mbtowc+0x1a>
 8018584:	b14b      	cbz	r3, 801859a <__ascii_mbtowc+0x1e>
 8018586:	7813      	ldrb	r3, [r2, #0]
 8018588:	600b      	str	r3, [r1, #0]
 801858a:	7812      	ldrb	r2, [r2, #0]
 801858c:	1e10      	subs	r0, r2, #0
 801858e:	bf18      	it	ne
 8018590:	2001      	movne	r0, #1
 8018592:	b002      	add	sp, #8
 8018594:	4770      	bx	lr
 8018596:	4610      	mov	r0, r2
 8018598:	e7fb      	b.n	8018592 <__ascii_mbtowc+0x16>
 801859a:	f06f 0001 	mvn.w	r0, #1
 801859e:	e7f8      	b.n	8018592 <__ascii_mbtowc+0x16>

080185a0 <__malloc_lock>:
 80185a0:	4801      	ldr	r0, [pc, #4]	; (80185a8 <__malloc_lock+0x8>)
 80185a2:	f7fc ba30 	b.w	8014a06 <__retarget_lock_acquire_recursive>
 80185a6:	bf00      	nop
 80185a8:	20002998 	.word	0x20002998

080185ac <__malloc_unlock>:
 80185ac:	4801      	ldr	r0, [pc, #4]	; (80185b4 <__malloc_unlock+0x8>)
 80185ae:	f7fc ba2b 	b.w	8014a08 <__retarget_lock_release_recursive>
 80185b2:	bf00      	nop
 80185b4:	20002998 	.word	0x20002998

080185b8 <_Balloc>:
 80185b8:	b570      	push	{r4, r5, r6, lr}
 80185ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80185bc:	4604      	mov	r4, r0
 80185be:	460d      	mov	r5, r1
 80185c0:	b976      	cbnz	r6, 80185e0 <_Balloc+0x28>
 80185c2:	2010      	movs	r0, #16
 80185c4:	f7fc fa22 	bl	8014a0c <malloc>
 80185c8:	4602      	mov	r2, r0
 80185ca:	6260      	str	r0, [r4, #36]	; 0x24
 80185cc:	b920      	cbnz	r0, 80185d8 <_Balloc+0x20>
 80185ce:	4b18      	ldr	r3, [pc, #96]	; (8018630 <_Balloc+0x78>)
 80185d0:	4818      	ldr	r0, [pc, #96]	; (8018634 <_Balloc+0x7c>)
 80185d2:	2166      	movs	r1, #102	; 0x66
 80185d4:	f7fc f9b4 	bl	8014940 <__assert_func>
 80185d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80185dc:	6006      	str	r6, [r0, #0]
 80185de:	60c6      	str	r6, [r0, #12]
 80185e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80185e2:	68f3      	ldr	r3, [r6, #12]
 80185e4:	b183      	cbz	r3, 8018608 <_Balloc+0x50>
 80185e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80185e8:	68db      	ldr	r3, [r3, #12]
 80185ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80185ee:	b9b8      	cbnz	r0, 8018620 <_Balloc+0x68>
 80185f0:	2101      	movs	r1, #1
 80185f2:	fa01 f605 	lsl.w	r6, r1, r5
 80185f6:	1d72      	adds	r2, r6, #5
 80185f8:	0092      	lsls	r2, r2, #2
 80185fa:	4620      	mov	r0, r4
 80185fc:	f7fc fa46 	bl	8014a8c <_calloc_r>
 8018600:	b160      	cbz	r0, 801861c <_Balloc+0x64>
 8018602:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018606:	e00e      	b.n	8018626 <_Balloc+0x6e>
 8018608:	2221      	movs	r2, #33	; 0x21
 801860a:	2104      	movs	r1, #4
 801860c:	4620      	mov	r0, r4
 801860e:	f7fc fa3d 	bl	8014a8c <_calloc_r>
 8018612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018614:	60f0      	str	r0, [r6, #12]
 8018616:	68db      	ldr	r3, [r3, #12]
 8018618:	2b00      	cmp	r3, #0
 801861a:	d1e4      	bne.n	80185e6 <_Balloc+0x2e>
 801861c:	2000      	movs	r0, #0
 801861e:	bd70      	pop	{r4, r5, r6, pc}
 8018620:	6802      	ldr	r2, [r0, #0]
 8018622:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018626:	2300      	movs	r3, #0
 8018628:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801862c:	e7f7      	b.n	801861e <_Balloc+0x66>
 801862e:	bf00      	nop
 8018630:	08059cbe 	.word	0x08059cbe
 8018634:	08059e20 	.word	0x08059e20

08018638 <_Bfree>:
 8018638:	b570      	push	{r4, r5, r6, lr}
 801863a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801863c:	4605      	mov	r5, r0
 801863e:	460c      	mov	r4, r1
 8018640:	b976      	cbnz	r6, 8018660 <_Bfree+0x28>
 8018642:	2010      	movs	r0, #16
 8018644:	f7fc f9e2 	bl	8014a0c <malloc>
 8018648:	4602      	mov	r2, r0
 801864a:	6268      	str	r0, [r5, #36]	; 0x24
 801864c:	b920      	cbnz	r0, 8018658 <_Bfree+0x20>
 801864e:	4b09      	ldr	r3, [pc, #36]	; (8018674 <_Bfree+0x3c>)
 8018650:	4809      	ldr	r0, [pc, #36]	; (8018678 <_Bfree+0x40>)
 8018652:	218a      	movs	r1, #138	; 0x8a
 8018654:	f7fc f974 	bl	8014940 <__assert_func>
 8018658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801865c:	6006      	str	r6, [r0, #0]
 801865e:	60c6      	str	r6, [r0, #12]
 8018660:	b13c      	cbz	r4, 8018672 <_Bfree+0x3a>
 8018662:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018664:	6862      	ldr	r2, [r4, #4]
 8018666:	68db      	ldr	r3, [r3, #12]
 8018668:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801866c:	6021      	str	r1, [r4, #0]
 801866e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018672:	bd70      	pop	{r4, r5, r6, pc}
 8018674:	08059cbe 	.word	0x08059cbe
 8018678:	08059e20 	.word	0x08059e20

0801867c <__multadd>:
 801867c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018680:	690d      	ldr	r5, [r1, #16]
 8018682:	4607      	mov	r7, r0
 8018684:	460c      	mov	r4, r1
 8018686:	461e      	mov	r6, r3
 8018688:	f101 0c14 	add.w	ip, r1, #20
 801868c:	2000      	movs	r0, #0
 801868e:	f8dc 3000 	ldr.w	r3, [ip]
 8018692:	b299      	uxth	r1, r3
 8018694:	fb02 6101 	mla	r1, r2, r1, r6
 8018698:	0c1e      	lsrs	r6, r3, #16
 801869a:	0c0b      	lsrs	r3, r1, #16
 801869c:	fb02 3306 	mla	r3, r2, r6, r3
 80186a0:	b289      	uxth	r1, r1
 80186a2:	3001      	adds	r0, #1
 80186a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80186a8:	4285      	cmp	r5, r0
 80186aa:	f84c 1b04 	str.w	r1, [ip], #4
 80186ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80186b2:	dcec      	bgt.n	801868e <__multadd+0x12>
 80186b4:	b30e      	cbz	r6, 80186fa <__multadd+0x7e>
 80186b6:	68a3      	ldr	r3, [r4, #8]
 80186b8:	42ab      	cmp	r3, r5
 80186ba:	dc19      	bgt.n	80186f0 <__multadd+0x74>
 80186bc:	6861      	ldr	r1, [r4, #4]
 80186be:	4638      	mov	r0, r7
 80186c0:	3101      	adds	r1, #1
 80186c2:	f7ff ff79 	bl	80185b8 <_Balloc>
 80186c6:	4680      	mov	r8, r0
 80186c8:	b928      	cbnz	r0, 80186d6 <__multadd+0x5a>
 80186ca:	4602      	mov	r2, r0
 80186cc:	4b0c      	ldr	r3, [pc, #48]	; (8018700 <__multadd+0x84>)
 80186ce:	480d      	ldr	r0, [pc, #52]	; (8018704 <__multadd+0x88>)
 80186d0:	21b5      	movs	r1, #181	; 0xb5
 80186d2:	f7fc f935 	bl	8014940 <__assert_func>
 80186d6:	6922      	ldr	r2, [r4, #16]
 80186d8:	3202      	adds	r2, #2
 80186da:	f104 010c 	add.w	r1, r4, #12
 80186de:	0092      	lsls	r2, r2, #2
 80186e0:	300c      	adds	r0, #12
 80186e2:	f7fc f9a3 	bl	8014a2c <memcpy>
 80186e6:	4621      	mov	r1, r4
 80186e8:	4638      	mov	r0, r7
 80186ea:	f7ff ffa5 	bl	8018638 <_Bfree>
 80186ee:	4644      	mov	r4, r8
 80186f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80186f4:	3501      	adds	r5, #1
 80186f6:	615e      	str	r6, [r3, #20]
 80186f8:	6125      	str	r5, [r4, #16]
 80186fa:	4620      	mov	r0, r4
 80186fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018700:	08059d30 	.word	0x08059d30
 8018704:	08059e20 	.word	0x08059e20

08018708 <__s2b>:
 8018708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801870c:	460c      	mov	r4, r1
 801870e:	4615      	mov	r5, r2
 8018710:	461f      	mov	r7, r3
 8018712:	2209      	movs	r2, #9
 8018714:	3308      	adds	r3, #8
 8018716:	4606      	mov	r6, r0
 8018718:	fb93 f3f2 	sdiv	r3, r3, r2
 801871c:	2100      	movs	r1, #0
 801871e:	2201      	movs	r2, #1
 8018720:	429a      	cmp	r2, r3
 8018722:	db09      	blt.n	8018738 <__s2b+0x30>
 8018724:	4630      	mov	r0, r6
 8018726:	f7ff ff47 	bl	80185b8 <_Balloc>
 801872a:	b940      	cbnz	r0, 801873e <__s2b+0x36>
 801872c:	4602      	mov	r2, r0
 801872e:	4b19      	ldr	r3, [pc, #100]	; (8018794 <__s2b+0x8c>)
 8018730:	4819      	ldr	r0, [pc, #100]	; (8018798 <__s2b+0x90>)
 8018732:	21ce      	movs	r1, #206	; 0xce
 8018734:	f7fc f904 	bl	8014940 <__assert_func>
 8018738:	0052      	lsls	r2, r2, #1
 801873a:	3101      	adds	r1, #1
 801873c:	e7f0      	b.n	8018720 <__s2b+0x18>
 801873e:	9b08      	ldr	r3, [sp, #32]
 8018740:	6143      	str	r3, [r0, #20]
 8018742:	2d09      	cmp	r5, #9
 8018744:	f04f 0301 	mov.w	r3, #1
 8018748:	6103      	str	r3, [r0, #16]
 801874a:	dd16      	ble.n	801877a <__s2b+0x72>
 801874c:	f104 0909 	add.w	r9, r4, #9
 8018750:	46c8      	mov	r8, r9
 8018752:	442c      	add	r4, r5
 8018754:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018758:	4601      	mov	r1, r0
 801875a:	3b30      	subs	r3, #48	; 0x30
 801875c:	220a      	movs	r2, #10
 801875e:	4630      	mov	r0, r6
 8018760:	f7ff ff8c 	bl	801867c <__multadd>
 8018764:	45a0      	cmp	r8, r4
 8018766:	d1f5      	bne.n	8018754 <__s2b+0x4c>
 8018768:	f1a5 0408 	sub.w	r4, r5, #8
 801876c:	444c      	add	r4, r9
 801876e:	1b2d      	subs	r5, r5, r4
 8018770:	1963      	adds	r3, r4, r5
 8018772:	42bb      	cmp	r3, r7
 8018774:	db04      	blt.n	8018780 <__s2b+0x78>
 8018776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801877a:	340a      	adds	r4, #10
 801877c:	2509      	movs	r5, #9
 801877e:	e7f6      	b.n	801876e <__s2b+0x66>
 8018780:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018784:	4601      	mov	r1, r0
 8018786:	3b30      	subs	r3, #48	; 0x30
 8018788:	220a      	movs	r2, #10
 801878a:	4630      	mov	r0, r6
 801878c:	f7ff ff76 	bl	801867c <__multadd>
 8018790:	e7ee      	b.n	8018770 <__s2b+0x68>
 8018792:	bf00      	nop
 8018794:	08059d30 	.word	0x08059d30
 8018798:	08059e20 	.word	0x08059e20

0801879c <__hi0bits>:
 801879c:	0c03      	lsrs	r3, r0, #16
 801879e:	041b      	lsls	r3, r3, #16
 80187a0:	b9d3      	cbnz	r3, 80187d8 <__hi0bits+0x3c>
 80187a2:	0400      	lsls	r0, r0, #16
 80187a4:	2310      	movs	r3, #16
 80187a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80187aa:	bf04      	itt	eq
 80187ac:	0200      	lsleq	r0, r0, #8
 80187ae:	3308      	addeq	r3, #8
 80187b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80187b4:	bf04      	itt	eq
 80187b6:	0100      	lsleq	r0, r0, #4
 80187b8:	3304      	addeq	r3, #4
 80187ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80187be:	bf04      	itt	eq
 80187c0:	0080      	lsleq	r0, r0, #2
 80187c2:	3302      	addeq	r3, #2
 80187c4:	2800      	cmp	r0, #0
 80187c6:	db05      	blt.n	80187d4 <__hi0bits+0x38>
 80187c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80187cc:	f103 0301 	add.w	r3, r3, #1
 80187d0:	bf08      	it	eq
 80187d2:	2320      	moveq	r3, #32
 80187d4:	4618      	mov	r0, r3
 80187d6:	4770      	bx	lr
 80187d8:	2300      	movs	r3, #0
 80187da:	e7e4      	b.n	80187a6 <__hi0bits+0xa>

080187dc <__lo0bits>:
 80187dc:	6803      	ldr	r3, [r0, #0]
 80187de:	f013 0207 	ands.w	r2, r3, #7
 80187e2:	4601      	mov	r1, r0
 80187e4:	d00b      	beq.n	80187fe <__lo0bits+0x22>
 80187e6:	07da      	lsls	r2, r3, #31
 80187e8:	d423      	bmi.n	8018832 <__lo0bits+0x56>
 80187ea:	0798      	lsls	r0, r3, #30
 80187ec:	bf49      	itett	mi
 80187ee:	085b      	lsrmi	r3, r3, #1
 80187f0:	089b      	lsrpl	r3, r3, #2
 80187f2:	2001      	movmi	r0, #1
 80187f4:	600b      	strmi	r3, [r1, #0]
 80187f6:	bf5c      	itt	pl
 80187f8:	600b      	strpl	r3, [r1, #0]
 80187fa:	2002      	movpl	r0, #2
 80187fc:	4770      	bx	lr
 80187fe:	b298      	uxth	r0, r3
 8018800:	b9a8      	cbnz	r0, 801882e <__lo0bits+0x52>
 8018802:	0c1b      	lsrs	r3, r3, #16
 8018804:	2010      	movs	r0, #16
 8018806:	b2da      	uxtb	r2, r3
 8018808:	b90a      	cbnz	r2, 801880e <__lo0bits+0x32>
 801880a:	3008      	adds	r0, #8
 801880c:	0a1b      	lsrs	r3, r3, #8
 801880e:	071a      	lsls	r2, r3, #28
 8018810:	bf04      	itt	eq
 8018812:	091b      	lsreq	r3, r3, #4
 8018814:	3004      	addeq	r0, #4
 8018816:	079a      	lsls	r2, r3, #30
 8018818:	bf04      	itt	eq
 801881a:	089b      	lsreq	r3, r3, #2
 801881c:	3002      	addeq	r0, #2
 801881e:	07da      	lsls	r2, r3, #31
 8018820:	d403      	bmi.n	801882a <__lo0bits+0x4e>
 8018822:	085b      	lsrs	r3, r3, #1
 8018824:	f100 0001 	add.w	r0, r0, #1
 8018828:	d005      	beq.n	8018836 <__lo0bits+0x5a>
 801882a:	600b      	str	r3, [r1, #0]
 801882c:	4770      	bx	lr
 801882e:	4610      	mov	r0, r2
 8018830:	e7e9      	b.n	8018806 <__lo0bits+0x2a>
 8018832:	2000      	movs	r0, #0
 8018834:	4770      	bx	lr
 8018836:	2020      	movs	r0, #32
 8018838:	4770      	bx	lr
	...

0801883c <__i2b>:
 801883c:	b510      	push	{r4, lr}
 801883e:	460c      	mov	r4, r1
 8018840:	2101      	movs	r1, #1
 8018842:	f7ff feb9 	bl	80185b8 <_Balloc>
 8018846:	4602      	mov	r2, r0
 8018848:	b928      	cbnz	r0, 8018856 <__i2b+0x1a>
 801884a:	4b05      	ldr	r3, [pc, #20]	; (8018860 <__i2b+0x24>)
 801884c:	4805      	ldr	r0, [pc, #20]	; (8018864 <__i2b+0x28>)
 801884e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018852:	f7fc f875 	bl	8014940 <__assert_func>
 8018856:	2301      	movs	r3, #1
 8018858:	6144      	str	r4, [r0, #20]
 801885a:	6103      	str	r3, [r0, #16]
 801885c:	bd10      	pop	{r4, pc}
 801885e:	bf00      	nop
 8018860:	08059d30 	.word	0x08059d30
 8018864:	08059e20 	.word	0x08059e20

08018868 <__multiply>:
 8018868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801886c:	4691      	mov	r9, r2
 801886e:	690a      	ldr	r2, [r1, #16]
 8018870:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018874:	429a      	cmp	r2, r3
 8018876:	bfb8      	it	lt
 8018878:	460b      	movlt	r3, r1
 801887a:	460c      	mov	r4, r1
 801887c:	bfbc      	itt	lt
 801887e:	464c      	movlt	r4, r9
 8018880:	4699      	movlt	r9, r3
 8018882:	6927      	ldr	r7, [r4, #16]
 8018884:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018888:	68a3      	ldr	r3, [r4, #8]
 801888a:	6861      	ldr	r1, [r4, #4]
 801888c:	eb07 060a 	add.w	r6, r7, sl
 8018890:	42b3      	cmp	r3, r6
 8018892:	b085      	sub	sp, #20
 8018894:	bfb8      	it	lt
 8018896:	3101      	addlt	r1, #1
 8018898:	f7ff fe8e 	bl	80185b8 <_Balloc>
 801889c:	b930      	cbnz	r0, 80188ac <__multiply+0x44>
 801889e:	4602      	mov	r2, r0
 80188a0:	4b44      	ldr	r3, [pc, #272]	; (80189b4 <__multiply+0x14c>)
 80188a2:	4845      	ldr	r0, [pc, #276]	; (80189b8 <__multiply+0x150>)
 80188a4:	f240 115d 	movw	r1, #349	; 0x15d
 80188a8:	f7fc f84a 	bl	8014940 <__assert_func>
 80188ac:	f100 0514 	add.w	r5, r0, #20
 80188b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80188b4:	462b      	mov	r3, r5
 80188b6:	2200      	movs	r2, #0
 80188b8:	4543      	cmp	r3, r8
 80188ba:	d321      	bcc.n	8018900 <__multiply+0x98>
 80188bc:	f104 0314 	add.w	r3, r4, #20
 80188c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80188c4:	f109 0314 	add.w	r3, r9, #20
 80188c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80188cc:	9202      	str	r2, [sp, #8]
 80188ce:	1b3a      	subs	r2, r7, r4
 80188d0:	3a15      	subs	r2, #21
 80188d2:	f022 0203 	bic.w	r2, r2, #3
 80188d6:	3204      	adds	r2, #4
 80188d8:	f104 0115 	add.w	r1, r4, #21
 80188dc:	428f      	cmp	r7, r1
 80188de:	bf38      	it	cc
 80188e0:	2204      	movcc	r2, #4
 80188e2:	9201      	str	r2, [sp, #4]
 80188e4:	9a02      	ldr	r2, [sp, #8]
 80188e6:	9303      	str	r3, [sp, #12]
 80188e8:	429a      	cmp	r2, r3
 80188ea:	d80c      	bhi.n	8018906 <__multiply+0x9e>
 80188ec:	2e00      	cmp	r6, #0
 80188ee:	dd03      	ble.n	80188f8 <__multiply+0x90>
 80188f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d05a      	beq.n	80189ae <__multiply+0x146>
 80188f8:	6106      	str	r6, [r0, #16]
 80188fa:	b005      	add	sp, #20
 80188fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018900:	f843 2b04 	str.w	r2, [r3], #4
 8018904:	e7d8      	b.n	80188b8 <__multiply+0x50>
 8018906:	f8b3 a000 	ldrh.w	sl, [r3]
 801890a:	f1ba 0f00 	cmp.w	sl, #0
 801890e:	d024      	beq.n	801895a <__multiply+0xf2>
 8018910:	f104 0e14 	add.w	lr, r4, #20
 8018914:	46a9      	mov	r9, r5
 8018916:	f04f 0c00 	mov.w	ip, #0
 801891a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801891e:	f8d9 1000 	ldr.w	r1, [r9]
 8018922:	fa1f fb82 	uxth.w	fp, r2
 8018926:	b289      	uxth	r1, r1
 8018928:	fb0a 110b 	mla	r1, sl, fp, r1
 801892c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8018930:	f8d9 2000 	ldr.w	r2, [r9]
 8018934:	4461      	add	r1, ip
 8018936:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801893a:	fb0a c20b 	mla	r2, sl, fp, ip
 801893e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018942:	b289      	uxth	r1, r1
 8018944:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018948:	4577      	cmp	r7, lr
 801894a:	f849 1b04 	str.w	r1, [r9], #4
 801894e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018952:	d8e2      	bhi.n	801891a <__multiply+0xb2>
 8018954:	9a01      	ldr	r2, [sp, #4]
 8018956:	f845 c002 	str.w	ip, [r5, r2]
 801895a:	9a03      	ldr	r2, [sp, #12]
 801895c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018960:	3304      	adds	r3, #4
 8018962:	f1b9 0f00 	cmp.w	r9, #0
 8018966:	d020      	beq.n	80189aa <__multiply+0x142>
 8018968:	6829      	ldr	r1, [r5, #0]
 801896a:	f104 0c14 	add.w	ip, r4, #20
 801896e:	46ae      	mov	lr, r5
 8018970:	f04f 0a00 	mov.w	sl, #0
 8018974:	f8bc b000 	ldrh.w	fp, [ip]
 8018978:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801897c:	fb09 220b 	mla	r2, r9, fp, r2
 8018980:	4492      	add	sl, r2
 8018982:	b289      	uxth	r1, r1
 8018984:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8018988:	f84e 1b04 	str.w	r1, [lr], #4
 801898c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8018990:	f8be 1000 	ldrh.w	r1, [lr]
 8018994:	0c12      	lsrs	r2, r2, #16
 8018996:	fb09 1102 	mla	r1, r9, r2, r1
 801899a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801899e:	4567      	cmp	r7, ip
 80189a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80189a4:	d8e6      	bhi.n	8018974 <__multiply+0x10c>
 80189a6:	9a01      	ldr	r2, [sp, #4]
 80189a8:	50a9      	str	r1, [r5, r2]
 80189aa:	3504      	adds	r5, #4
 80189ac:	e79a      	b.n	80188e4 <__multiply+0x7c>
 80189ae:	3e01      	subs	r6, #1
 80189b0:	e79c      	b.n	80188ec <__multiply+0x84>
 80189b2:	bf00      	nop
 80189b4:	08059d30 	.word	0x08059d30
 80189b8:	08059e20 	.word	0x08059e20

080189bc <__pow5mult>:
 80189bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189c0:	4615      	mov	r5, r2
 80189c2:	f012 0203 	ands.w	r2, r2, #3
 80189c6:	4606      	mov	r6, r0
 80189c8:	460f      	mov	r7, r1
 80189ca:	d007      	beq.n	80189dc <__pow5mult+0x20>
 80189cc:	4c25      	ldr	r4, [pc, #148]	; (8018a64 <__pow5mult+0xa8>)
 80189ce:	3a01      	subs	r2, #1
 80189d0:	2300      	movs	r3, #0
 80189d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80189d6:	f7ff fe51 	bl	801867c <__multadd>
 80189da:	4607      	mov	r7, r0
 80189dc:	10ad      	asrs	r5, r5, #2
 80189de:	d03d      	beq.n	8018a5c <__pow5mult+0xa0>
 80189e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80189e2:	b97c      	cbnz	r4, 8018a04 <__pow5mult+0x48>
 80189e4:	2010      	movs	r0, #16
 80189e6:	f7fc f811 	bl	8014a0c <malloc>
 80189ea:	4602      	mov	r2, r0
 80189ec:	6270      	str	r0, [r6, #36]	; 0x24
 80189ee:	b928      	cbnz	r0, 80189fc <__pow5mult+0x40>
 80189f0:	4b1d      	ldr	r3, [pc, #116]	; (8018a68 <__pow5mult+0xac>)
 80189f2:	481e      	ldr	r0, [pc, #120]	; (8018a6c <__pow5mult+0xb0>)
 80189f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80189f8:	f7fb ffa2 	bl	8014940 <__assert_func>
 80189fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018a00:	6004      	str	r4, [r0, #0]
 8018a02:	60c4      	str	r4, [r0, #12]
 8018a04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018a08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018a0c:	b94c      	cbnz	r4, 8018a22 <__pow5mult+0x66>
 8018a0e:	f240 2171 	movw	r1, #625	; 0x271
 8018a12:	4630      	mov	r0, r6
 8018a14:	f7ff ff12 	bl	801883c <__i2b>
 8018a18:	2300      	movs	r3, #0
 8018a1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8018a1e:	4604      	mov	r4, r0
 8018a20:	6003      	str	r3, [r0, #0]
 8018a22:	f04f 0900 	mov.w	r9, #0
 8018a26:	07eb      	lsls	r3, r5, #31
 8018a28:	d50a      	bpl.n	8018a40 <__pow5mult+0x84>
 8018a2a:	4639      	mov	r1, r7
 8018a2c:	4622      	mov	r2, r4
 8018a2e:	4630      	mov	r0, r6
 8018a30:	f7ff ff1a 	bl	8018868 <__multiply>
 8018a34:	4639      	mov	r1, r7
 8018a36:	4680      	mov	r8, r0
 8018a38:	4630      	mov	r0, r6
 8018a3a:	f7ff fdfd 	bl	8018638 <_Bfree>
 8018a3e:	4647      	mov	r7, r8
 8018a40:	106d      	asrs	r5, r5, #1
 8018a42:	d00b      	beq.n	8018a5c <__pow5mult+0xa0>
 8018a44:	6820      	ldr	r0, [r4, #0]
 8018a46:	b938      	cbnz	r0, 8018a58 <__pow5mult+0x9c>
 8018a48:	4622      	mov	r2, r4
 8018a4a:	4621      	mov	r1, r4
 8018a4c:	4630      	mov	r0, r6
 8018a4e:	f7ff ff0b 	bl	8018868 <__multiply>
 8018a52:	6020      	str	r0, [r4, #0]
 8018a54:	f8c0 9000 	str.w	r9, [r0]
 8018a58:	4604      	mov	r4, r0
 8018a5a:	e7e4      	b.n	8018a26 <__pow5mult+0x6a>
 8018a5c:	4638      	mov	r0, r7
 8018a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a62:	bf00      	nop
 8018a64:	08059f70 	.word	0x08059f70
 8018a68:	08059cbe 	.word	0x08059cbe
 8018a6c:	08059e20 	.word	0x08059e20

08018a70 <__lshift>:
 8018a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a74:	460c      	mov	r4, r1
 8018a76:	6849      	ldr	r1, [r1, #4]
 8018a78:	6923      	ldr	r3, [r4, #16]
 8018a7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018a7e:	68a3      	ldr	r3, [r4, #8]
 8018a80:	4607      	mov	r7, r0
 8018a82:	4691      	mov	r9, r2
 8018a84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018a88:	f108 0601 	add.w	r6, r8, #1
 8018a8c:	42b3      	cmp	r3, r6
 8018a8e:	db0b      	blt.n	8018aa8 <__lshift+0x38>
 8018a90:	4638      	mov	r0, r7
 8018a92:	f7ff fd91 	bl	80185b8 <_Balloc>
 8018a96:	4605      	mov	r5, r0
 8018a98:	b948      	cbnz	r0, 8018aae <__lshift+0x3e>
 8018a9a:	4602      	mov	r2, r0
 8018a9c:	4b2a      	ldr	r3, [pc, #168]	; (8018b48 <__lshift+0xd8>)
 8018a9e:	482b      	ldr	r0, [pc, #172]	; (8018b4c <__lshift+0xdc>)
 8018aa0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018aa4:	f7fb ff4c 	bl	8014940 <__assert_func>
 8018aa8:	3101      	adds	r1, #1
 8018aaa:	005b      	lsls	r3, r3, #1
 8018aac:	e7ee      	b.n	8018a8c <__lshift+0x1c>
 8018aae:	2300      	movs	r3, #0
 8018ab0:	f100 0114 	add.w	r1, r0, #20
 8018ab4:	f100 0210 	add.w	r2, r0, #16
 8018ab8:	4618      	mov	r0, r3
 8018aba:	4553      	cmp	r3, sl
 8018abc:	db37      	blt.n	8018b2e <__lshift+0xbe>
 8018abe:	6920      	ldr	r0, [r4, #16]
 8018ac0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018ac4:	f104 0314 	add.w	r3, r4, #20
 8018ac8:	f019 091f 	ands.w	r9, r9, #31
 8018acc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018ad0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018ad4:	d02f      	beq.n	8018b36 <__lshift+0xc6>
 8018ad6:	f1c9 0e20 	rsb	lr, r9, #32
 8018ada:	468a      	mov	sl, r1
 8018adc:	f04f 0c00 	mov.w	ip, #0
 8018ae0:	681a      	ldr	r2, [r3, #0]
 8018ae2:	fa02 f209 	lsl.w	r2, r2, r9
 8018ae6:	ea42 020c 	orr.w	r2, r2, ip
 8018aea:	f84a 2b04 	str.w	r2, [sl], #4
 8018aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8018af2:	4298      	cmp	r0, r3
 8018af4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8018af8:	d8f2      	bhi.n	8018ae0 <__lshift+0x70>
 8018afa:	1b03      	subs	r3, r0, r4
 8018afc:	3b15      	subs	r3, #21
 8018afe:	f023 0303 	bic.w	r3, r3, #3
 8018b02:	3304      	adds	r3, #4
 8018b04:	f104 0215 	add.w	r2, r4, #21
 8018b08:	4290      	cmp	r0, r2
 8018b0a:	bf38      	it	cc
 8018b0c:	2304      	movcc	r3, #4
 8018b0e:	f841 c003 	str.w	ip, [r1, r3]
 8018b12:	f1bc 0f00 	cmp.w	ip, #0
 8018b16:	d001      	beq.n	8018b1c <__lshift+0xac>
 8018b18:	f108 0602 	add.w	r6, r8, #2
 8018b1c:	3e01      	subs	r6, #1
 8018b1e:	4638      	mov	r0, r7
 8018b20:	612e      	str	r6, [r5, #16]
 8018b22:	4621      	mov	r1, r4
 8018b24:	f7ff fd88 	bl	8018638 <_Bfree>
 8018b28:	4628      	mov	r0, r5
 8018b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8018b32:	3301      	adds	r3, #1
 8018b34:	e7c1      	b.n	8018aba <__lshift+0x4a>
 8018b36:	3904      	subs	r1, #4
 8018b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8018b40:	4298      	cmp	r0, r3
 8018b42:	d8f9      	bhi.n	8018b38 <__lshift+0xc8>
 8018b44:	e7ea      	b.n	8018b1c <__lshift+0xac>
 8018b46:	bf00      	nop
 8018b48:	08059d30 	.word	0x08059d30
 8018b4c:	08059e20 	.word	0x08059e20

08018b50 <__mcmp>:
 8018b50:	b530      	push	{r4, r5, lr}
 8018b52:	6902      	ldr	r2, [r0, #16]
 8018b54:	690c      	ldr	r4, [r1, #16]
 8018b56:	1b12      	subs	r2, r2, r4
 8018b58:	d10e      	bne.n	8018b78 <__mcmp+0x28>
 8018b5a:	f100 0314 	add.w	r3, r0, #20
 8018b5e:	3114      	adds	r1, #20
 8018b60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018b64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018b68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018b6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018b70:	42a5      	cmp	r5, r4
 8018b72:	d003      	beq.n	8018b7c <__mcmp+0x2c>
 8018b74:	d305      	bcc.n	8018b82 <__mcmp+0x32>
 8018b76:	2201      	movs	r2, #1
 8018b78:	4610      	mov	r0, r2
 8018b7a:	bd30      	pop	{r4, r5, pc}
 8018b7c:	4283      	cmp	r3, r0
 8018b7e:	d3f3      	bcc.n	8018b68 <__mcmp+0x18>
 8018b80:	e7fa      	b.n	8018b78 <__mcmp+0x28>
 8018b82:	f04f 32ff 	mov.w	r2, #4294967295
 8018b86:	e7f7      	b.n	8018b78 <__mcmp+0x28>

08018b88 <__mdiff>:
 8018b88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b8c:	460c      	mov	r4, r1
 8018b8e:	4606      	mov	r6, r0
 8018b90:	4611      	mov	r1, r2
 8018b92:	4620      	mov	r0, r4
 8018b94:	4690      	mov	r8, r2
 8018b96:	f7ff ffdb 	bl	8018b50 <__mcmp>
 8018b9a:	1e05      	subs	r5, r0, #0
 8018b9c:	d110      	bne.n	8018bc0 <__mdiff+0x38>
 8018b9e:	4629      	mov	r1, r5
 8018ba0:	4630      	mov	r0, r6
 8018ba2:	f7ff fd09 	bl	80185b8 <_Balloc>
 8018ba6:	b930      	cbnz	r0, 8018bb6 <__mdiff+0x2e>
 8018ba8:	4b3a      	ldr	r3, [pc, #232]	; (8018c94 <__mdiff+0x10c>)
 8018baa:	4602      	mov	r2, r0
 8018bac:	f240 2132 	movw	r1, #562	; 0x232
 8018bb0:	4839      	ldr	r0, [pc, #228]	; (8018c98 <__mdiff+0x110>)
 8018bb2:	f7fb fec5 	bl	8014940 <__assert_func>
 8018bb6:	2301      	movs	r3, #1
 8018bb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018bbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bc0:	bfa4      	itt	ge
 8018bc2:	4643      	movge	r3, r8
 8018bc4:	46a0      	movge	r8, r4
 8018bc6:	4630      	mov	r0, r6
 8018bc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018bcc:	bfa6      	itte	ge
 8018bce:	461c      	movge	r4, r3
 8018bd0:	2500      	movge	r5, #0
 8018bd2:	2501      	movlt	r5, #1
 8018bd4:	f7ff fcf0 	bl	80185b8 <_Balloc>
 8018bd8:	b920      	cbnz	r0, 8018be4 <__mdiff+0x5c>
 8018bda:	4b2e      	ldr	r3, [pc, #184]	; (8018c94 <__mdiff+0x10c>)
 8018bdc:	4602      	mov	r2, r0
 8018bde:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018be2:	e7e5      	b.n	8018bb0 <__mdiff+0x28>
 8018be4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018be8:	6926      	ldr	r6, [r4, #16]
 8018bea:	60c5      	str	r5, [r0, #12]
 8018bec:	f104 0914 	add.w	r9, r4, #20
 8018bf0:	f108 0514 	add.w	r5, r8, #20
 8018bf4:	f100 0e14 	add.w	lr, r0, #20
 8018bf8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018bfc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018c00:	f108 0210 	add.w	r2, r8, #16
 8018c04:	46f2      	mov	sl, lr
 8018c06:	2100      	movs	r1, #0
 8018c08:	f859 3b04 	ldr.w	r3, [r9], #4
 8018c0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018c10:	fa1f f883 	uxth.w	r8, r3
 8018c14:	fa11 f18b 	uxtah	r1, r1, fp
 8018c18:	0c1b      	lsrs	r3, r3, #16
 8018c1a:	eba1 0808 	sub.w	r8, r1, r8
 8018c1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018c22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018c26:	fa1f f888 	uxth.w	r8, r8
 8018c2a:	1419      	asrs	r1, r3, #16
 8018c2c:	454e      	cmp	r6, r9
 8018c2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018c32:	f84a 3b04 	str.w	r3, [sl], #4
 8018c36:	d8e7      	bhi.n	8018c08 <__mdiff+0x80>
 8018c38:	1b33      	subs	r3, r6, r4
 8018c3a:	3b15      	subs	r3, #21
 8018c3c:	f023 0303 	bic.w	r3, r3, #3
 8018c40:	3304      	adds	r3, #4
 8018c42:	3415      	adds	r4, #21
 8018c44:	42a6      	cmp	r6, r4
 8018c46:	bf38      	it	cc
 8018c48:	2304      	movcc	r3, #4
 8018c4a:	441d      	add	r5, r3
 8018c4c:	4473      	add	r3, lr
 8018c4e:	469e      	mov	lr, r3
 8018c50:	462e      	mov	r6, r5
 8018c52:	4566      	cmp	r6, ip
 8018c54:	d30e      	bcc.n	8018c74 <__mdiff+0xec>
 8018c56:	f10c 0203 	add.w	r2, ip, #3
 8018c5a:	1b52      	subs	r2, r2, r5
 8018c5c:	f022 0203 	bic.w	r2, r2, #3
 8018c60:	3d03      	subs	r5, #3
 8018c62:	45ac      	cmp	ip, r5
 8018c64:	bf38      	it	cc
 8018c66:	2200      	movcc	r2, #0
 8018c68:	441a      	add	r2, r3
 8018c6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018c6e:	b17b      	cbz	r3, 8018c90 <__mdiff+0x108>
 8018c70:	6107      	str	r7, [r0, #16]
 8018c72:	e7a3      	b.n	8018bbc <__mdiff+0x34>
 8018c74:	f856 8b04 	ldr.w	r8, [r6], #4
 8018c78:	fa11 f288 	uxtah	r2, r1, r8
 8018c7c:	1414      	asrs	r4, r2, #16
 8018c7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8018c82:	b292      	uxth	r2, r2
 8018c84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8018c88:	f84e 2b04 	str.w	r2, [lr], #4
 8018c8c:	1421      	asrs	r1, r4, #16
 8018c8e:	e7e0      	b.n	8018c52 <__mdiff+0xca>
 8018c90:	3f01      	subs	r7, #1
 8018c92:	e7ea      	b.n	8018c6a <__mdiff+0xe2>
 8018c94:	08059d30 	.word	0x08059d30
 8018c98:	08059e20 	.word	0x08059e20

08018c9c <__ulp>:
 8018c9c:	b082      	sub	sp, #8
 8018c9e:	ed8d 0b00 	vstr	d0, [sp]
 8018ca2:	9b01      	ldr	r3, [sp, #4]
 8018ca4:	4912      	ldr	r1, [pc, #72]	; (8018cf0 <__ulp+0x54>)
 8018ca6:	4019      	ands	r1, r3
 8018ca8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8018cac:	2900      	cmp	r1, #0
 8018cae:	dd05      	ble.n	8018cbc <__ulp+0x20>
 8018cb0:	2200      	movs	r2, #0
 8018cb2:	460b      	mov	r3, r1
 8018cb4:	ec43 2b10 	vmov	d0, r2, r3
 8018cb8:	b002      	add	sp, #8
 8018cba:	4770      	bx	lr
 8018cbc:	4249      	negs	r1, r1
 8018cbe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8018cc2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8018cc6:	f04f 0200 	mov.w	r2, #0
 8018cca:	f04f 0300 	mov.w	r3, #0
 8018cce:	da04      	bge.n	8018cda <__ulp+0x3e>
 8018cd0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8018cd4:	fa41 f300 	asr.w	r3, r1, r0
 8018cd8:	e7ec      	b.n	8018cb4 <__ulp+0x18>
 8018cda:	f1a0 0114 	sub.w	r1, r0, #20
 8018cde:	291e      	cmp	r1, #30
 8018ce0:	bfda      	itte	le
 8018ce2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8018ce6:	fa20 f101 	lsrle.w	r1, r0, r1
 8018cea:	2101      	movgt	r1, #1
 8018cec:	460a      	mov	r2, r1
 8018cee:	e7e1      	b.n	8018cb4 <__ulp+0x18>
 8018cf0:	7ff00000 	.word	0x7ff00000

08018cf4 <__b2d>:
 8018cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cf6:	6905      	ldr	r5, [r0, #16]
 8018cf8:	f100 0714 	add.w	r7, r0, #20
 8018cfc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018d00:	1f2e      	subs	r6, r5, #4
 8018d02:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018d06:	4620      	mov	r0, r4
 8018d08:	f7ff fd48 	bl	801879c <__hi0bits>
 8018d0c:	f1c0 0320 	rsb	r3, r0, #32
 8018d10:	280a      	cmp	r0, #10
 8018d12:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8018d90 <__b2d+0x9c>
 8018d16:	600b      	str	r3, [r1, #0]
 8018d18:	dc14      	bgt.n	8018d44 <__b2d+0x50>
 8018d1a:	f1c0 0e0b 	rsb	lr, r0, #11
 8018d1e:	fa24 f10e 	lsr.w	r1, r4, lr
 8018d22:	42b7      	cmp	r7, r6
 8018d24:	ea41 030c 	orr.w	r3, r1, ip
 8018d28:	bf34      	ite	cc
 8018d2a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018d2e:	2100      	movcs	r1, #0
 8018d30:	3015      	adds	r0, #21
 8018d32:	fa04 f000 	lsl.w	r0, r4, r0
 8018d36:	fa21 f10e 	lsr.w	r1, r1, lr
 8018d3a:	ea40 0201 	orr.w	r2, r0, r1
 8018d3e:	ec43 2b10 	vmov	d0, r2, r3
 8018d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d44:	42b7      	cmp	r7, r6
 8018d46:	bf3a      	itte	cc
 8018d48:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018d4c:	f1a5 0608 	subcc.w	r6, r5, #8
 8018d50:	2100      	movcs	r1, #0
 8018d52:	380b      	subs	r0, #11
 8018d54:	d017      	beq.n	8018d86 <__b2d+0x92>
 8018d56:	f1c0 0c20 	rsb	ip, r0, #32
 8018d5a:	fa04 f500 	lsl.w	r5, r4, r0
 8018d5e:	42be      	cmp	r6, r7
 8018d60:	fa21 f40c 	lsr.w	r4, r1, ip
 8018d64:	ea45 0504 	orr.w	r5, r5, r4
 8018d68:	bf8c      	ite	hi
 8018d6a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018d6e:	2400      	movls	r4, #0
 8018d70:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8018d74:	fa01 f000 	lsl.w	r0, r1, r0
 8018d78:	fa24 f40c 	lsr.w	r4, r4, ip
 8018d7c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018d80:	ea40 0204 	orr.w	r2, r0, r4
 8018d84:	e7db      	b.n	8018d3e <__b2d+0x4a>
 8018d86:	ea44 030c 	orr.w	r3, r4, ip
 8018d8a:	460a      	mov	r2, r1
 8018d8c:	e7d7      	b.n	8018d3e <__b2d+0x4a>
 8018d8e:	bf00      	nop
 8018d90:	3ff00000 	.word	0x3ff00000

08018d94 <__d2b>:
 8018d94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018d98:	4689      	mov	r9, r1
 8018d9a:	2101      	movs	r1, #1
 8018d9c:	ec57 6b10 	vmov	r6, r7, d0
 8018da0:	4690      	mov	r8, r2
 8018da2:	f7ff fc09 	bl	80185b8 <_Balloc>
 8018da6:	4604      	mov	r4, r0
 8018da8:	b930      	cbnz	r0, 8018db8 <__d2b+0x24>
 8018daa:	4602      	mov	r2, r0
 8018dac:	4b25      	ldr	r3, [pc, #148]	; (8018e44 <__d2b+0xb0>)
 8018dae:	4826      	ldr	r0, [pc, #152]	; (8018e48 <__d2b+0xb4>)
 8018db0:	f240 310a 	movw	r1, #778	; 0x30a
 8018db4:	f7fb fdc4 	bl	8014940 <__assert_func>
 8018db8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018dbc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018dc0:	bb35      	cbnz	r5, 8018e10 <__d2b+0x7c>
 8018dc2:	2e00      	cmp	r6, #0
 8018dc4:	9301      	str	r3, [sp, #4]
 8018dc6:	d028      	beq.n	8018e1a <__d2b+0x86>
 8018dc8:	4668      	mov	r0, sp
 8018dca:	9600      	str	r6, [sp, #0]
 8018dcc:	f7ff fd06 	bl	80187dc <__lo0bits>
 8018dd0:	9900      	ldr	r1, [sp, #0]
 8018dd2:	b300      	cbz	r0, 8018e16 <__d2b+0x82>
 8018dd4:	9a01      	ldr	r2, [sp, #4]
 8018dd6:	f1c0 0320 	rsb	r3, r0, #32
 8018dda:	fa02 f303 	lsl.w	r3, r2, r3
 8018dde:	430b      	orrs	r3, r1
 8018de0:	40c2      	lsrs	r2, r0
 8018de2:	6163      	str	r3, [r4, #20]
 8018de4:	9201      	str	r2, [sp, #4]
 8018de6:	9b01      	ldr	r3, [sp, #4]
 8018de8:	61a3      	str	r3, [r4, #24]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	bf14      	ite	ne
 8018dee:	2202      	movne	r2, #2
 8018df0:	2201      	moveq	r2, #1
 8018df2:	6122      	str	r2, [r4, #16]
 8018df4:	b1d5      	cbz	r5, 8018e2c <__d2b+0x98>
 8018df6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018dfa:	4405      	add	r5, r0
 8018dfc:	f8c9 5000 	str.w	r5, [r9]
 8018e00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018e04:	f8c8 0000 	str.w	r0, [r8]
 8018e08:	4620      	mov	r0, r4
 8018e0a:	b003      	add	sp, #12
 8018e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018e14:	e7d5      	b.n	8018dc2 <__d2b+0x2e>
 8018e16:	6161      	str	r1, [r4, #20]
 8018e18:	e7e5      	b.n	8018de6 <__d2b+0x52>
 8018e1a:	a801      	add	r0, sp, #4
 8018e1c:	f7ff fcde 	bl	80187dc <__lo0bits>
 8018e20:	9b01      	ldr	r3, [sp, #4]
 8018e22:	6163      	str	r3, [r4, #20]
 8018e24:	2201      	movs	r2, #1
 8018e26:	6122      	str	r2, [r4, #16]
 8018e28:	3020      	adds	r0, #32
 8018e2a:	e7e3      	b.n	8018df4 <__d2b+0x60>
 8018e2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018e30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018e34:	f8c9 0000 	str.w	r0, [r9]
 8018e38:	6918      	ldr	r0, [r3, #16]
 8018e3a:	f7ff fcaf 	bl	801879c <__hi0bits>
 8018e3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018e42:	e7df      	b.n	8018e04 <__d2b+0x70>
 8018e44:	08059d30 	.word	0x08059d30
 8018e48:	08059e20 	.word	0x08059e20

08018e4c <__ratio>:
 8018e4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e50:	4688      	mov	r8, r1
 8018e52:	4669      	mov	r1, sp
 8018e54:	4681      	mov	r9, r0
 8018e56:	f7ff ff4d 	bl	8018cf4 <__b2d>
 8018e5a:	a901      	add	r1, sp, #4
 8018e5c:	4640      	mov	r0, r8
 8018e5e:	ec55 4b10 	vmov	r4, r5, d0
 8018e62:	f7ff ff47 	bl	8018cf4 <__b2d>
 8018e66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018e6a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018e6e:	eba3 0c02 	sub.w	ip, r3, r2
 8018e72:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018e76:	1a9b      	subs	r3, r3, r2
 8018e78:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018e7c:	ec51 0b10 	vmov	r0, r1, d0
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	bfd6      	itet	le
 8018e84:	460a      	movle	r2, r1
 8018e86:	462a      	movgt	r2, r5
 8018e88:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018e8c:	468b      	mov	fp, r1
 8018e8e:	462f      	mov	r7, r5
 8018e90:	bfd4      	ite	le
 8018e92:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018e96:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018e9a:	4620      	mov	r0, r4
 8018e9c:	ee10 2a10 	vmov	r2, s0
 8018ea0:	465b      	mov	r3, fp
 8018ea2:	4639      	mov	r1, r7
 8018ea4:	f7e7 fcdc 	bl	8000860 <__aeabi_ddiv>
 8018ea8:	ec41 0b10 	vmov	d0, r0, r1
 8018eac:	b003      	add	sp, #12
 8018eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018eb2 <__copybits>:
 8018eb2:	3901      	subs	r1, #1
 8018eb4:	b570      	push	{r4, r5, r6, lr}
 8018eb6:	1149      	asrs	r1, r1, #5
 8018eb8:	6914      	ldr	r4, [r2, #16]
 8018eba:	3101      	adds	r1, #1
 8018ebc:	f102 0314 	add.w	r3, r2, #20
 8018ec0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018ec4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018ec8:	1f05      	subs	r5, r0, #4
 8018eca:	42a3      	cmp	r3, r4
 8018ecc:	d30c      	bcc.n	8018ee8 <__copybits+0x36>
 8018ece:	1aa3      	subs	r3, r4, r2
 8018ed0:	3b11      	subs	r3, #17
 8018ed2:	f023 0303 	bic.w	r3, r3, #3
 8018ed6:	3211      	adds	r2, #17
 8018ed8:	42a2      	cmp	r2, r4
 8018eda:	bf88      	it	hi
 8018edc:	2300      	movhi	r3, #0
 8018ede:	4418      	add	r0, r3
 8018ee0:	2300      	movs	r3, #0
 8018ee2:	4288      	cmp	r0, r1
 8018ee4:	d305      	bcc.n	8018ef2 <__copybits+0x40>
 8018ee6:	bd70      	pop	{r4, r5, r6, pc}
 8018ee8:	f853 6b04 	ldr.w	r6, [r3], #4
 8018eec:	f845 6f04 	str.w	r6, [r5, #4]!
 8018ef0:	e7eb      	b.n	8018eca <__copybits+0x18>
 8018ef2:	f840 3b04 	str.w	r3, [r0], #4
 8018ef6:	e7f4      	b.n	8018ee2 <__copybits+0x30>

08018ef8 <__any_on>:
 8018ef8:	f100 0214 	add.w	r2, r0, #20
 8018efc:	6900      	ldr	r0, [r0, #16]
 8018efe:	114b      	asrs	r3, r1, #5
 8018f00:	4298      	cmp	r0, r3
 8018f02:	b510      	push	{r4, lr}
 8018f04:	db11      	blt.n	8018f2a <__any_on+0x32>
 8018f06:	dd0a      	ble.n	8018f1e <__any_on+0x26>
 8018f08:	f011 011f 	ands.w	r1, r1, #31
 8018f0c:	d007      	beq.n	8018f1e <__any_on+0x26>
 8018f0e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018f12:	fa24 f001 	lsr.w	r0, r4, r1
 8018f16:	fa00 f101 	lsl.w	r1, r0, r1
 8018f1a:	428c      	cmp	r4, r1
 8018f1c:	d10b      	bne.n	8018f36 <__any_on+0x3e>
 8018f1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018f22:	4293      	cmp	r3, r2
 8018f24:	d803      	bhi.n	8018f2e <__any_on+0x36>
 8018f26:	2000      	movs	r0, #0
 8018f28:	bd10      	pop	{r4, pc}
 8018f2a:	4603      	mov	r3, r0
 8018f2c:	e7f7      	b.n	8018f1e <__any_on+0x26>
 8018f2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018f32:	2900      	cmp	r1, #0
 8018f34:	d0f5      	beq.n	8018f22 <__any_on+0x2a>
 8018f36:	2001      	movs	r0, #1
 8018f38:	e7f6      	b.n	8018f28 <__any_on+0x30>

08018f3a <_realloc_r>:
 8018f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f3e:	4680      	mov	r8, r0
 8018f40:	4614      	mov	r4, r2
 8018f42:	460e      	mov	r6, r1
 8018f44:	b921      	cbnz	r1, 8018f50 <_realloc_r+0x16>
 8018f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018f4a:	4611      	mov	r1, r2
 8018f4c:	f7fb be20 	b.w	8014b90 <_malloc_r>
 8018f50:	b92a      	cbnz	r2, 8018f5e <_realloc_r+0x24>
 8018f52:	f7fb fdb1 	bl	8014ab8 <_free_r>
 8018f56:	4625      	mov	r5, r4
 8018f58:	4628      	mov	r0, r5
 8018f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f5e:	f000 fa1d 	bl	801939c <_malloc_usable_size_r>
 8018f62:	4284      	cmp	r4, r0
 8018f64:	4607      	mov	r7, r0
 8018f66:	d802      	bhi.n	8018f6e <_realloc_r+0x34>
 8018f68:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018f6c:	d812      	bhi.n	8018f94 <_realloc_r+0x5a>
 8018f6e:	4621      	mov	r1, r4
 8018f70:	4640      	mov	r0, r8
 8018f72:	f7fb fe0d 	bl	8014b90 <_malloc_r>
 8018f76:	4605      	mov	r5, r0
 8018f78:	2800      	cmp	r0, #0
 8018f7a:	d0ed      	beq.n	8018f58 <_realloc_r+0x1e>
 8018f7c:	42bc      	cmp	r4, r7
 8018f7e:	4622      	mov	r2, r4
 8018f80:	4631      	mov	r1, r6
 8018f82:	bf28      	it	cs
 8018f84:	463a      	movcs	r2, r7
 8018f86:	f7fb fd51 	bl	8014a2c <memcpy>
 8018f8a:	4631      	mov	r1, r6
 8018f8c:	4640      	mov	r0, r8
 8018f8e:	f7fb fd93 	bl	8014ab8 <_free_r>
 8018f92:	e7e1      	b.n	8018f58 <_realloc_r+0x1e>
 8018f94:	4635      	mov	r5, r6
 8018f96:	e7df      	b.n	8018f58 <_realloc_r+0x1e>

08018f98 <__ssputs_r>:
 8018f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f9c:	688e      	ldr	r6, [r1, #8]
 8018f9e:	429e      	cmp	r6, r3
 8018fa0:	4682      	mov	sl, r0
 8018fa2:	460c      	mov	r4, r1
 8018fa4:	4690      	mov	r8, r2
 8018fa6:	461f      	mov	r7, r3
 8018fa8:	d838      	bhi.n	801901c <__ssputs_r+0x84>
 8018faa:	898a      	ldrh	r2, [r1, #12]
 8018fac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018fb0:	d032      	beq.n	8019018 <__ssputs_r+0x80>
 8018fb2:	6825      	ldr	r5, [r4, #0]
 8018fb4:	6909      	ldr	r1, [r1, #16]
 8018fb6:	eba5 0901 	sub.w	r9, r5, r1
 8018fba:	6965      	ldr	r5, [r4, #20]
 8018fbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018fc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018fc4:	3301      	adds	r3, #1
 8018fc6:	444b      	add	r3, r9
 8018fc8:	106d      	asrs	r5, r5, #1
 8018fca:	429d      	cmp	r5, r3
 8018fcc:	bf38      	it	cc
 8018fce:	461d      	movcc	r5, r3
 8018fd0:	0553      	lsls	r3, r2, #21
 8018fd2:	d531      	bpl.n	8019038 <__ssputs_r+0xa0>
 8018fd4:	4629      	mov	r1, r5
 8018fd6:	f7fb fddb 	bl	8014b90 <_malloc_r>
 8018fda:	4606      	mov	r6, r0
 8018fdc:	b950      	cbnz	r0, 8018ff4 <__ssputs_r+0x5c>
 8018fde:	230c      	movs	r3, #12
 8018fe0:	f8ca 3000 	str.w	r3, [sl]
 8018fe4:	89a3      	ldrh	r3, [r4, #12]
 8018fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018fea:	81a3      	strh	r3, [r4, #12]
 8018fec:	f04f 30ff 	mov.w	r0, #4294967295
 8018ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ff4:	6921      	ldr	r1, [r4, #16]
 8018ff6:	464a      	mov	r2, r9
 8018ff8:	f7fb fd18 	bl	8014a2c <memcpy>
 8018ffc:	89a3      	ldrh	r3, [r4, #12]
 8018ffe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019006:	81a3      	strh	r3, [r4, #12]
 8019008:	6126      	str	r6, [r4, #16]
 801900a:	6165      	str	r5, [r4, #20]
 801900c:	444e      	add	r6, r9
 801900e:	eba5 0509 	sub.w	r5, r5, r9
 8019012:	6026      	str	r6, [r4, #0]
 8019014:	60a5      	str	r5, [r4, #8]
 8019016:	463e      	mov	r6, r7
 8019018:	42be      	cmp	r6, r7
 801901a:	d900      	bls.n	801901e <__ssputs_r+0x86>
 801901c:	463e      	mov	r6, r7
 801901e:	6820      	ldr	r0, [r4, #0]
 8019020:	4632      	mov	r2, r6
 8019022:	4641      	mov	r1, r8
 8019024:	f7fb fd10 	bl	8014a48 <memmove>
 8019028:	68a3      	ldr	r3, [r4, #8]
 801902a:	1b9b      	subs	r3, r3, r6
 801902c:	60a3      	str	r3, [r4, #8]
 801902e:	6823      	ldr	r3, [r4, #0]
 8019030:	4433      	add	r3, r6
 8019032:	6023      	str	r3, [r4, #0]
 8019034:	2000      	movs	r0, #0
 8019036:	e7db      	b.n	8018ff0 <__ssputs_r+0x58>
 8019038:	462a      	mov	r2, r5
 801903a:	f7ff ff7e 	bl	8018f3a <_realloc_r>
 801903e:	4606      	mov	r6, r0
 8019040:	2800      	cmp	r0, #0
 8019042:	d1e1      	bne.n	8019008 <__ssputs_r+0x70>
 8019044:	6921      	ldr	r1, [r4, #16]
 8019046:	4650      	mov	r0, sl
 8019048:	f7fb fd36 	bl	8014ab8 <_free_r>
 801904c:	e7c7      	b.n	8018fde <__ssputs_r+0x46>
	...

08019050 <_svfiprintf_r>:
 8019050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019054:	4698      	mov	r8, r3
 8019056:	898b      	ldrh	r3, [r1, #12]
 8019058:	061b      	lsls	r3, r3, #24
 801905a:	b09d      	sub	sp, #116	; 0x74
 801905c:	4607      	mov	r7, r0
 801905e:	460d      	mov	r5, r1
 8019060:	4614      	mov	r4, r2
 8019062:	d50e      	bpl.n	8019082 <_svfiprintf_r+0x32>
 8019064:	690b      	ldr	r3, [r1, #16]
 8019066:	b963      	cbnz	r3, 8019082 <_svfiprintf_r+0x32>
 8019068:	2140      	movs	r1, #64	; 0x40
 801906a:	f7fb fd91 	bl	8014b90 <_malloc_r>
 801906e:	6028      	str	r0, [r5, #0]
 8019070:	6128      	str	r0, [r5, #16]
 8019072:	b920      	cbnz	r0, 801907e <_svfiprintf_r+0x2e>
 8019074:	230c      	movs	r3, #12
 8019076:	603b      	str	r3, [r7, #0]
 8019078:	f04f 30ff 	mov.w	r0, #4294967295
 801907c:	e0d1      	b.n	8019222 <_svfiprintf_r+0x1d2>
 801907e:	2340      	movs	r3, #64	; 0x40
 8019080:	616b      	str	r3, [r5, #20]
 8019082:	2300      	movs	r3, #0
 8019084:	9309      	str	r3, [sp, #36]	; 0x24
 8019086:	2320      	movs	r3, #32
 8019088:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801908c:	f8cd 800c 	str.w	r8, [sp, #12]
 8019090:	2330      	movs	r3, #48	; 0x30
 8019092:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801923c <_svfiprintf_r+0x1ec>
 8019096:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801909a:	f04f 0901 	mov.w	r9, #1
 801909e:	4623      	mov	r3, r4
 80190a0:	469a      	mov	sl, r3
 80190a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80190a6:	b10a      	cbz	r2, 80190ac <_svfiprintf_r+0x5c>
 80190a8:	2a25      	cmp	r2, #37	; 0x25
 80190aa:	d1f9      	bne.n	80190a0 <_svfiprintf_r+0x50>
 80190ac:	ebba 0b04 	subs.w	fp, sl, r4
 80190b0:	d00b      	beq.n	80190ca <_svfiprintf_r+0x7a>
 80190b2:	465b      	mov	r3, fp
 80190b4:	4622      	mov	r2, r4
 80190b6:	4629      	mov	r1, r5
 80190b8:	4638      	mov	r0, r7
 80190ba:	f7ff ff6d 	bl	8018f98 <__ssputs_r>
 80190be:	3001      	adds	r0, #1
 80190c0:	f000 80aa 	beq.w	8019218 <_svfiprintf_r+0x1c8>
 80190c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80190c6:	445a      	add	r2, fp
 80190c8:	9209      	str	r2, [sp, #36]	; 0x24
 80190ca:	f89a 3000 	ldrb.w	r3, [sl]
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	f000 80a2 	beq.w	8019218 <_svfiprintf_r+0x1c8>
 80190d4:	2300      	movs	r3, #0
 80190d6:	f04f 32ff 	mov.w	r2, #4294967295
 80190da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80190de:	f10a 0a01 	add.w	sl, sl, #1
 80190e2:	9304      	str	r3, [sp, #16]
 80190e4:	9307      	str	r3, [sp, #28]
 80190e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80190ea:	931a      	str	r3, [sp, #104]	; 0x68
 80190ec:	4654      	mov	r4, sl
 80190ee:	2205      	movs	r2, #5
 80190f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80190f4:	4851      	ldr	r0, [pc, #324]	; (801923c <_svfiprintf_r+0x1ec>)
 80190f6:	f7e7 f86b 	bl	80001d0 <memchr>
 80190fa:	9a04      	ldr	r2, [sp, #16]
 80190fc:	b9d8      	cbnz	r0, 8019136 <_svfiprintf_r+0xe6>
 80190fe:	06d0      	lsls	r0, r2, #27
 8019100:	bf44      	itt	mi
 8019102:	2320      	movmi	r3, #32
 8019104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019108:	0711      	lsls	r1, r2, #28
 801910a:	bf44      	itt	mi
 801910c:	232b      	movmi	r3, #43	; 0x2b
 801910e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019112:	f89a 3000 	ldrb.w	r3, [sl]
 8019116:	2b2a      	cmp	r3, #42	; 0x2a
 8019118:	d015      	beq.n	8019146 <_svfiprintf_r+0xf6>
 801911a:	9a07      	ldr	r2, [sp, #28]
 801911c:	4654      	mov	r4, sl
 801911e:	2000      	movs	r0, #0
 8019120:	f04f 0c0a 	mov.w	ip, #10
 8019124:	4621      	mov	r1, r4
 8019126:	f811 3b01 	ldrb.w	r3, [r1], #1
 801912a:	3b30      	subs	r3, #48	; 0x30
 801912c:	2b09      	cmp	r3, #9
 801912e:	d94e      	bls.n	80191ce <_svfiprintf_r+0x17e>
 8019130:	b1b0      	cbz	r0, 8019160 <_svfiprintf_r+0x110>
 8019132:	9207      	str	r2, [sp, #28]
 8019134:	e014      	b.n	8019160 <_svfiprintf_r+0x110>
 8019136:	eba0 0308 	sub.w	r3, r0, r8
 801913a:	fa09 f303 	lsl.w	r3, r9, r3
 801913e:	4313      	orrs	r3, r2
 8019140:	9304      	str	r3, [sp, #16]
 8019142:	46a2      	mov	sl, r4
 8019144:	e7d2      	b.n	80190ec <_svfiprintf_r+0x9c>
 8019146:	9b03      	ldr	r3, [sp, #12]
 8019148:	1d19      	adds	r1, r3, #4
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	9103      	str	r1, [sp, #12]
 801914e:	2b00      	cmp	r3, #0
 8019150:	bfbb      	ittet	lt
 8019152:	425b      	neglt	r3, r3
 8019154:	f042 0202 	orrlt.w	r2, r2, #2
 8019158:	9307      	strge	r3, [sp, #28]
 801915a:	9307      	strlt	r3, [sp, #28]
 801915c:	bfb8      	it	lt
 801915e:	9204      	strlt	r2, [sp, #16]
 8019160:	7823      	ldrb	r3, [r4, #0]
 8019162:	2b2e      	cmp	r3, #46	; 0x2e
 8019164:	d10c      	bne.n	8019180 <_svfiprintf_r+0x130>
 8019166:	7863      	ldrb	r3, [r4, #1]
 8019168:	2b2a      	cmp	r3, #42	; 0x2a
 801916a:	d135      	bne.n	80191d8 <_svfiprintf_r+0x188>
 801916c:	9b03      	ldr	r3, [sp, #12]
 801916e:	1d1a      	adds	r2, r3, #4
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	9203      	str	r2, [sp, #12]
 8019174:	2b00      	cmp	r3, #0
 8019176:	bfb8      	it	lt
 8019178:	f04f 33ff 	movlt.w	r3, #4294967295
 801917c:	3402      	adds	r4, #2
 801917e:	9305      	str	r3, [sp, #20]
 8019180:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801924c <_svfiprintf_r+0x1fc>
 8019184:	7821      	ldrb	r1, [r4, #0]
 8019186:	2203      	movs	r2, #3
 8019188:	4650      	mov	r0, sl
 801918a:	f7e7 f821 	bl	80001d0 <memchr>
 801918e:	b140      	cbz	r0, 80191a2 <_svfiprintf_r+0x152>
 8019190:	2340      	movs	r3, #64	; 0x40
 8019192:	eba0 000a 	sub.w	r0, r0, sl
 8019196:	fa03 f000 	lsl.w	r0, r3, r0
 801919a:	9b04      	ldr	r3, [sp, #16]
 801919c:	4303      	orrs	r3, r0
 801919e:	3401      	adds	r4, #1
 80191a0:	9304      	str	r3, [sp, #16]
 80191a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80191a6:	4826      	ldr	r0, [pc, #152]	; (8019240 <_svfiprintf_r+0x1f0>)
 80191a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80191ac:	2206      	movs	r2, #6
 80191ae:	f7e7 f80f 	bl	80001d0 <memchr>
 80191b2:	2800      	cmp	r0, #0
 80191b4:	d038      	beq.n	8019228 <_svfiprintf_r+0x1d8>
 80191b6:	4b23      	ldr	r3, [pc, #140]	; (8019244 <_svfiprintf_r+0x1f4>)
 80191b8:	bb1b      	cbnz	r3, 8019202 <_svfiprintf_r+0x1b2>
 80191ba:	9b03      	ldr	r3, [sp, #12]
 80191bc:	3307      	adds	r3, #7
 80191be:	f023 0307 	bic.w	r3, r3, #7
 80191c2:	3308      	adds	r3, #8
 80191c4:	9303      	str	r3, [sp, #12]
 80191c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191c8:	4433      	add	r3, r6
 80191ca:	9309      	str	r3, [sp, #36]	; 0x24
 80191cc:	e767      	b.n	801909e <_svfiprintf_r+0x4e>
 80191ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80191d2:	460c      	mov	r4, r1
 80191d4:	2001      	movs	r0, #1
 80191d6:	e7a5      	b.n	8019124 <_svfiprintf_r+0xd4>
 80191d8:	2300      	movs	r3, #0
 80191da:	3401      	adds	r4, #1
 80191dc:	9305      	str	r3, [sp, #20]
 80191de:	4619      	mov	r1, r3
 80191e0:	f04f 0c0a 	mov.w	ip, #10
 80191e4:	4620      	mov	r0, r4
 80191e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80191ea:	3a30      	subs	r2, #48	; 0x30
 80191ec:	2a09      	cmp	r2, #9
 80191ee:	d903      	bls.n	80191f8 <_svfiprintf_r+0x1a8>
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d0c5      	beq.n	8019180 <_svfiprintf_r+0x130>
 80191f4:	9105      	str	r1, [sp, #20]
 80191f6:	e7c3      	b.n	8019180 <_svfiprintf_r+0x130>
 80191f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80191fc:	4604      	mov	r4, r0
 80191fe:	2301      	movs	r3, #1
 8019200:	e7f0      	b.n	80191e4 <_svfiprintf_r+0x194>
 8019202:	ab03      	add	r3, sp, #12
 8019204:	9300      	str	r3, [sp, #0]
 8019206:	462a      	mov	r2, r5
 8019208:	4b0f      	ldr	r3, [pc, #60]	; (8019248 <_svfiprintf_r+0x1f8>)
 801920a:	a904      	add	r1, sp, #16
 801920c:	4638      	mov	r0, r7
 801920e:	f7fb ff2d 	bl	801506c <_printf_float>
 8019212:	1c42      	adds	r2, r0, #1
 8019214:	4606      	mov	r6, r0
 8019216:	d1d6      	bne.n	80191c6 <_svfiprintf_r+0x176>
 8019218:	89ab      	ldrh	r3, [r5, #12]
 801921a:	065b      	lsls	r3, r3, #25
 801921c:	f53f af2c 	bmi.w	8019078 <_svfiprintf_r+0x28>
 8019220:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019222:	b01d      	add	sp, #116	; 0x74
 8019224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019228:	ab03      	add	r3, sp, #12
 801922a:	9300      	str	r3, [sp, #0]
 801922c:	462a      	mov	r2, r5
 801922e:	4b06      	ldr	r3, [pc, #24]	; (8019248 <_svfiprintf_r+0x1f8>)
 8019230:	a904      	add	r1, sp, #16
 8019232:	4638      	mov	r0, r7
 8019234:	f7fc f9be 	bl	80155b4 <_printf_i>
 8019238:	e7eb      	b.n	8019212 <_svfiprintf_r+0x1c2>
 801923a:	bf00      	nop
 801923c:	08059b10 	.word	0x08059b10
 8019240:	08059b1a 	.word	0x08059b1a
 8019244:	0801506d 	.word	0x0801506d
 8019248:	08018f99 	.word	0x08018f99
 801924c:	08059b16 	.word	0x08059b16

08019250 <__sread>:
 8019250:	b510      	push	{r4, lr}
 8019252:	460c      	mov	r4, r1
 8019254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019258:	f000 f8a8 	bl	80193ac <_read_r>
 801925c:	2800      	cmp	r0, #0
 801925e:	bfab      	itete	ge
 8019260:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019262:	89a3      	ldrhlt	r3, [r4, #12]
 8019264:	181b      	addge	r3, r3, r0
 8019266:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801926a:	bfac      	ite	ge
 801926c:	6563      	strge	r3, [r4, #84]	; 0x54
 801926e:	81a3      	strhlt	r3, [r4, #12]
 8019270:	bd10      	pop	{r4, pc}

08019272 <__swrite>:
 8019272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019276:	461f      	mov	r7, r3
 8019278:	898b      	ldrh	r3, [r1, #12]
 801927a:	05db      	lsls	r3, r3, #23
 801927c:	4605      	mov	r5, r0
 801927e:	460c      	mov	r4, r1
 8019280:	4616      	mov	r6, r2
 8019282:	d505      	bpl.n	8019290 <__swrite+0x1e>
 8019284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019288:	2302      	movs	r3, #2
 801928a:	2200      	movs	r2, #0
 801928c:	f000 f874 	bl	8019378 <_lseek_r>
 8019290:	89a3      	ldrh	r3, [r4, #12]
 8019292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801929a:	81a3      	strh	r3, [r4, #12]
 801929c:	4632      	mov	r2, r6
 801929e:	463b      	mov	r3, r7
 80192a0:	4628      	mov	r0, r5
 80192a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80192a6:	f000 b823 	b.w	80192f0 <_write_r>

080192aa <__sseek>:
 80192aa:	b510      	push	{r4, lr}
 80192ac:	460c      	mov	r4, r1
 80192ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80192b2:	f000 f861 	bl	8019378 <_lseek_r>
 80192b6:	1c43      	adds	r3, r0, #1
 80192b8:	89a3      	ldrh	r3, [r4, #12]
 80192ba:	bf15      	itete	ne
 80192bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80192be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80192c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80192c6:	81a3      	strheq	r3, [r4, #12]
 80192c8:	bf18      	it	ne
 80192ca:	81a3      	strhne	r3, [r4, #12]
 80192cc:	bd10      	pop	{r4, pc}

080192ce <__sclose>:
 80192ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80192d2:	f000 b81f 	b.w	8019314 <_close_r>

080192d6 <__ascii_wctomb>:
 80192d6:	b149      	cbz	r1, 80192ec <__ascii_wctomb+0x16>
 80192d8:	2aff      	cmp	r2, #255	; 0xff
 80192da:	bf85      	ittet	hi
 80192dc:	238a      	movhi	r3, #138	; 0x8a
 80192de:	6003      	strhi	r3, [r0, #0]
 80192e0:	700a      	strbls	r2, [r1, #0]
 80192e2:	f04f 30ff 	movhi.w	r0, #4294967295
 80192e6:	bf98      	it	ls
 80192e8:	2001      	movls	r0, #1
 80192ea:	4770      	bx	lr
 80192ec:	4608      	mov	r0, r1
 80192ee:	4770      	bx	lr

080192f0 <_write_r>:
 80192f0:	b538      	push	{r3, r4, r5, lr}
 80192f2:	4d07      	ldr	r5, [pc, #28]	; (8019310 <_write_r+0x20>)
 80192f4:	4604      	mov	r4, r0
 80192f6:	4608      	mov	r0, r1
 80192f8:	4611      	mov	r1, r2
 80192fa:	2200      	movs	r2, #0
 80192fc:	602a      	str	r2, [r5, #0]
 80192fe:	461a      	mov	r2, r3
 8019300:	f7eb fc13 	bl	8004b2a <_write>
 8019304:	1c43      	adds	r3, r0, #1
 8019306:	d102      	bne.n	801930e <_write_r+0x1e>
 8019308:	682b      	ldr	r3, [r5, #0]
 801930a:	b103      	cbz	r3, 801930e <_write_r+0x1e>
 801930c:	6023      	str	r3, [r4, #0]
 801930e:	bd38      	pop	{r3, r4, r5, pc}
 8019310:	200029a4 	.word	0x200029a4

08019314 <_close_r>:
 8019314:	b538      	push	{r3, r4, r5, lr}
 8019316:	4d06      	ldr	r5, [pc, #24]	; (8019330 <_close_r+0x1c>)
 8019318:	2300      	movs	r3, #0
 801931a:	4604      	mov	r4, r0
 801931c:	4608      	mov	r0, r1
 801931e:	602b      	str	r3, [r5, #0]
 8019320:	f7eb fc1f 	bl	8004b62 <_close>
 8019324:	1c43      	adds	r3, r0, #1
 8019326:	d102      	bne.n	801932e <_close_r+0x1a>
 8019328:	682b      	ldr	r3, [r5, #0]
 801932a:	b103      	cbz	r3, 801932e <_close_r+0x1a>
 801932c:	6023      	str	r3, [r4, #0]
 801932e:	bd38      	pop	{r3, r4, r5, pc}
 8019330:	200029a4 	.word	0x200029a4

08019334 <_fstat_r>:
 8019334:	b538      	push	{r3, r4, r5, lr}
 8019336:	4d07      	ldr	r5, [pc, #28]	; (8019354 <_fstat_r+0x20>)
 8019338:	2300      	movs	r3, #0
 801933a:	4604      	mov	r4, r0
 801933c:	4608      	mov	r0, r1
 801933e:	4611      	mov	r1, r2
 8019340:	602b      	str	r3, [r5, #0]
 8019342:	f7eb fc1a 	bl	8004b7a <_fstat>
 8019346:	1c43      	adds	r3, r0, #1
 8019348:	d102      	bne.n	8019350 <_fstat_r+0x1c>
 801934a:	682b      	ldr	r3, [r5, #0]
 801934c:	b103      	cbz	r3, 8019350 <_fstat_r+0x1c>
 801934e:	6023      	str	r3, [r4, #0]
 8019350:	bd38      	pop	{r3, r4, r5, pc}
 8019352:	bf00      	nop
 8019354:	200029a4 	.word	0x200029a4

08019358 <_isatty_r>:
 8019358:	b538      	push	{r3, r4, r5, lr}
 801935a:	4d06      	ldr	r5, [pc, #24]	; (8019374 <_isatty_r+0x1c>)
 801935c:	2300      	movs	r3, #0
 801935e:	4604      	mov	r4, r0
 8019360:	4608      	mov	r0, r1
 8019362:	602b      	str	r3, [r5, #0]
 8019364:	f7eb fc19 	bl	8004b9a <_isatty>
 8019368:	1c43      	adds	r3, r0, #1
 801936a:	d102      	bne.n	8019372 <_isatty_r+0x1a>
 801936c:	682b      	ldr	r3, [r5, #0]
 801936e:	b103      	cbz	r3, 8019372 <_isatty_r+0x1a>
 8019370:	6023      	str	r3, [r4, #0]
 8019372:	bd38      	pop	{r3, r4, r5, pc}
 8019374:	200029a4 	.word	0x200029a4

08019378 <_lseek_r>:
 8019378:	b538      	push	{r3, r4, r5, lr}
 801937a:	4d07      	ldr	r5, [pc, #28]	; (8019398 <_lseek_r+0x20>)
 801937c:	4604      	mov	r4, r0
 801937e:	4608      	mov	r0, r1
 8019380:	4611      	mov	r1, r2
 8019382:	2200      	movs	r2, #0
 8019384:	602a      	str	r2, [r5, #0]
 8019386:	461a      	mov	r2, r3
 8019388:	f7eb fc12 	bl	8004bb0 <_lseek>
 801938c:	1c43      	adds	r3, r0, #1
 801938e:	d102      	bne.n	8019396 <_lseek_r+0x1e>
 8019390:	682b      	ldr	r3, [r5, #0]
 8019392:	b103      	cbz	r3, 8019396 <_lseek_r+0x1e>
 8019394:	6023      	str	r3, [r4, #0]
 8019396:	bd38      	pop	{r3, r4, r5, pc}
 8019398:	200029a4 	.word	0x200029a4

0801939c <_malloc_usable_size_r>:
 801939c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80193a0:	1f18      	subs	r0, r3, #4
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	bfbc      	itt	lt
 80193a6:	580b      	ldrlt	r3, [r1, r0]
 80193a8:	18c0      	addlt	r0, r0, r3
 80193aa:	4770      	bx	lr

080193ac <_read_r>:
 80193ac:	b538      	push	{r3, r4, r5, lr}
 80193ae:	4d07      	ldr	r5, [pc, #28]	; (80193cc <_read_r+0x20>)
 80193b0:	4604      	mov	r4, r0
 80193b2:	4608      	mov	r0, r1
 80193b4:	4611      	mov	r1, r2
 80193b6:	2200      	movs	r2, #0
 80193b8:	602a      	str	r2, [r5, #0]
 80193ba:	461a      	mov	r2, r3
 80193bc:	f7eb fb98 	bl	8004af0 <_read>
 80193c0:	1c43      	adds	r3, r0, #1
 80193c2:	d102      	bne.n	80193ca <_read_r+0x1e>
 80193c4:	682b      	ldr	r3, [r5, #0]
 80193c6:	b103      	cbz	r3, 80193ca <_read_r+0x1e>
 80193c8:	6023      	str	r3, [r4, #0]
 80193ca:	bd38      	pop	{r3, r4, r5, pc}
 80193cc:	200029a4 	.word	0x200029a4

080193d0 <_init>:
 80193d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193d2:	bf00      	nop
 80193d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80193d6:	bc08      	pop	{r3}
 80193d8:	469e      	mov	lr, r3
 80193da:	4770      	bx	lr

080193dc <_fini>:
 80193dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193de:	bf00      	nop
 80193e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80193e2:	bc08      	pop	{r3}
 80193e4:	469e      	mov	lr, r3
 80193e6:	4770      	bx	lr
